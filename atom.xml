<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jsonz bug-log</title>
  
  <subtitle>前端/JavaScript/React</subtitle>
  <link href="http://jsonz1993.github.io/atom.xml" rel="self"/>
  
  <link href="http://jsonz1993.github.io/"/>
  <updated>2021-05-29T15:24:10.608Z</updated>
  <id>http://jsonz1993.github.io/</id>
  
  <author>
    <name>Jsonz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的2020</title>
    <link href="http://jsonz1993.github.io/2020/"/>
    <id>http://jsonz1993.github.io/2020/</id>
    <published>2021-01-01T13:12:41.000Z</published>
    <updated>2021-05-29T15:24:10.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想想还是需要上来写点东西，不然都快忘了有这么一个博客</p></blockquote><p>2020总体评分应该三到四颗星吧~<br>回顾一下，2019年抱怨述职ppt没什么好写的，今年好像也是，不过已经有了一点好的迹象，至少有了一锅石头汤，剩下的就是往里面加。</p><h1 id="自考-⭐️⭐️⭐️⭐️⭐️"><a href="#自考-⭐️⭐️⭐️⭐️⭐️" class="headerlink" title="自考 ⭐️⭐️⭐️⭐️⭐️"></a>自考 ⭐️⭐️⭐️⭐️⭐️</h1><p>20年的第一个标签就是自考，今年自考也开始进入尾声。20年把所有的理论课都过了，电子技术基础，<strong>英语（二）</strong> ，高级程序设计，概率论与数理统计还有计算机应用的实践。<br>总体还是不错，从19年开始好像报考都能过，现在好像没了早上七点起来学习的习惯。<br>最开心的一点是 英语（二） 过了，现在就剩下 电子技术基础实践，学位英语和论文了。<br>但是时间点就很尴尬了，实践抱抱佛脚两周肯定没问题，但是一般五月份考，知道成绩估计都得七月份了<br>论文四月交终稿，如果自考的论文都是比较水的话，那这个没有特别担心，最担心的还是学位英语，如果上半年考不过又得拖时间。<br>按照最理想的来算，五月份实践考完，论文搞定，学位英语过了，也得下半年才能毕业，有一点出入的话还得拖到21年…<br>一直在补年轻的债啊<br><img data-src="./01.png" width="400"/></p><h1 id="工作-⭐️⭐️"><a href="#工作-⭐️⭐️" class="headerlink" title="工作 ⭐️⭐️"></a>工作 ⭐️⭐️</h1><p>今年工作还是很一般，基本没长进，虽然有好的点，但是还是不及格.</p><p>舔着脸找老大说要提工资也没有通过（boss不给，说职级的薪资就这么多，要么提高职级要么拉倒）。<br>问了一圈，基本上同事都没有涨工资心里多少平衡一丁点，不过我也不没有抱很大希望。<br>比起19年的话，可能有两个小点，一个是又开始记录一些工作上的总结，但是这远远不够，想要更多的是一些工作上的思考更深层次的东西，而不是一些 <strong>使用心得</strong> 。这一方面霜爷确实是楷模。另一方面是开始有了一些小小的沉淀，如果你什么都做不好的，那就从一件事情开始入手。<br>也渐渐明白了切图、增删查改不是技术没有长进的接口</p><p>举个例子,有一个需求是要做合同模版的</p><ol><li>做几套模版，留出一个插槽填值</li><li>用组件去拼接这些模版</li><li>写一个DSL，让产品自己去拼接这些逻辑</li></ol><p>所以这明显就是个人对技术和需求的追求….上面的DSL就霜爷做需求的时候想到再反向和产品提的建议<br><img data-src="./02.png" width="200"/></p><h1 id="身体-⭐️⭐️"><a href="#身体-⭐️⭐️" class="headerlink" title="身体 ⭐️⭐️"></a>身体 ⭐️⭐️</h1><p>身体和19年没什么大的变化，主要还是没有形成一个锻炼的习惯，后面讲到习惯的时候再补充。 不及格</p><h1 id="阅读-⭐️⭐️⭐️⭐️"><a href="#阅读-⭐️⭐️⭐️⭐️" class="headerlink" title="阅读 ⭐️⭐️⭐️⭐️"></a>阅读 ⭐️⭐️⭐️⭐️</h1><p>得益于今年年初疫情在家的原因，定的十二本书目标完成~<br><img data-src="./03.png" width="400"/></p><p>如果按照罗老师的说法，今年读的书分类也还好，没有太过功利性。这里的罗老师不是老罗…<br>推一手罗老师的视频<a href="https://www.bilibili.com/video/BV1BK411L7DJ?from=search&seid=17380124644798402912">我们为什么要读书</a></p><p>这里的我认为的功利性指的是适用性技能和工作上的技术书，而不是鸡汤成功学（泛指卡耐基为代表的的鸡汤）。<br>视频里面有一句话说的很好“只有非功利的读书才能抵制成功主义的读书”，但是在深圳这种地方真的很难静下心来读书，至少现在还没有很多这种情境。<br>印象中读闲书（我喜欢把非功利性的书称为闲书）的时间基本都是发生在考试过后的一两个月，这时候放松下来读闲书是最快乐的。真的就有五柳先生的那种心境 _好读书,不求甚解;每有会意,便欣然忘食_。<br>今年读书的一个好一点点的习惯就是开始有了简单的记录，虽然大部分记录都是功能性书的总结，但是总归有个好的开始，还是得鼓励一下。</p><p>20201年想读的书没有一个强制性的书单，都是偶尔在哪里看到一本书想读的就记录下来，后面有空了就去翻翻。再不济就去书店逛一圈，读读畅销书，不过最近感兴趣的分类大概分布在 社会学，历史，传记，哲学和一些经典文学。<br>这里感谢《美国vs美国》打开了我对社会学的兴趣，不过翻了一圈中国好像很少有这种类型的书，毕竟这种题材比较敏感，能找到的相对类似的也是在几十年前的《乡土中国》。<br><img data-src="./04.png" width="200"/></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="自闭"><a href="#自闭" class="headerlink" title="自闭"></a>自闭</h2><p>今年好像更自闭了，和大学相比，少了很多自信和锋芒，多了几份自卑。也开始不愿走出房门，这里说的不是家门是宿舍房门。不愿与人沟通，程序员的内敛逐渐显现，感觉一大部分的原因是因为目前工作和生活和预期的有落差，导致自卑不愿与人交流，当然工作上还是没什么问题主要指的是生活的扩展。<br>好在最近又开始注重形象了（像个正常的人）。接下来就是多参加一些活动还有扩展自己的兴趣。</p><h2 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h2><p>咦，按照《程序员修炼之道》和《掌控习惯》，想着2021年的话，每个月取一个小主题，一个季度一个大主题。因为如果目标和重心太分散的话，真的很难有什么成果。</p><p>每个月培养三个小习惯，开始把以前的习惯捡起来，比如上下班地铁十分钟可以背背单词；晚上散步、跑步、运动半个小时；作息早睡早起七点起床十一点半上床等等。</p><p>每个月读一本非技术书（功能性或闲书），每两个月读一本技术书。<br>程序员修炼之道里面写的是一个月一本技术书，但是我想着上半年我可能精力还是在准备论文和考试，没那么多精力投入，下半年再看要不要调整吧。</p><p>每年学一门语言，这里指的是技术向，所以今年的ts算吗？</p><p>每月一个新的技术点尝试，比如git终端的使用，不一定说全要用terminal，但是大部分的命令还是练练，熟能生巧</p><p>每年坚持一个爱好发展为技能，每两周一个爱好实践</p>]]></content>
    
    
    <summary type="html">2020年度个人总结</summary>
    
    
    
    <category term="live" scheme="http://jsonz1993.github.io/categories/live/"/>
    
    
    <category term="Live" scheme="http://jsonz1993.github.io/tags/Live/"/>
    
  </entry>
  
  <entry>
    <title>create-own-package</title>
    <link href="http://jsonz1993.github.io/create-own-package/"/>
    <id>http://jsonz1993.github.io/create-own-package/</id>
    <published>2020-06-23T17:18:23.000Z</published>
    <updated>2021-05-29T15:24:10.608Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们罗列一下，一个npm工具包需要包含哪些通用的内容</p><ul><li>package.json √</li><li>dist目录 √</li><li>src目录 √</li><li>开发服务（编译）√</li><li>example √</li><li>单元测试</li><li>Readme and docs</li><li>eslint √</li><li>githook</li><li>发布相关</li></ul><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>首先，必要的字段有 <strong>“name”</strong> 和 <strong>“version”</strong><br>建议直接用 <code>npm init</code>跑一遍就好，也可以偷个懒直接 <code>npm init -y</code>使用预设的默认值</p><p>可以在terminal上键入以下命令设置一些默认值<br><code>npm set init.author.email &quot;jsonz@qq.com&quot;</code><br><code>npm set init.author.name &quot;jsonz&quot;</code></p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>可以参照<br><a href="https://docs.npmjs.com/about-semantic-versioning">npm semantic versioning</a></p><p>总结一下就是 版本号为<code>x.y.z</code>：向后兼容的bug修复补丁递增z；向后兼容的features新功能递增y；破坏性改动递增x版本号</p><p>更详细的可以看 <a href="https://semver.org/lang/zh-CN/">semver version</a></p><h3 id="版本符号问题"><a href="#版本符号问题" class="headerlink" title="版本符号问题"></a>版本符号问题</h3><p>常见的版本定义</p><ul><li>version 相当于锁版本，只能安装该版本 “1.0.0”</li><li>&gt;version </li><li>&gt;=version </li><li>&lt;version </li><li>&lt;= version</li><li><del>version 小版本变动，比如 “</del>1.0.1” 代表大于等于 1.0.1，且小于 1.1.0，既z版本变动</li><li>^version 中版本与小版本变动，比如 “^1.0.1” 代表大于等于 1.0.1 且小于 2.0.0，既 y 与 z版本的变动</li><li>1.0.x y版本任意</li><li>tag 比如 “latest”</li><li>path 本地的包 “file:../package1”</li></ul><p><strong>本地包不是手动写一个url，而是用 <code>npm install /Filepath</code> 去安装的</strong></p><p>还有一些 url 相关的可以看 <a href="https://docs.npmjs.com/configuring-npm/package-json.html#urls-as-dependencies">package.json dependencies url</a></p><p>最后补上一个特别实用的版本计算器<br><a href="https://semver.npmjs.com/">npm semver calculator</a></p><h3 id="npm-version-用法"><a href="#npm-version-用法" class="headerlink" title="npm version 用法"></a>npm version 用法</h3><p>在当前版本已经修改完之后，commit 更改<br>再根据改动跑 <code>npm run major|minor|patch</code>，该命令会处理几项任务</p><ol><li>自动修改 package.json 的version</li><li>打个当前version的tag</li><li>git commit 且提交信息为当前 version </li></ol><h2 id="devDependencies-amp-amp-dependencies-amp-amp-peerDependencies等等"><a href="#devDependencies-amp-amp-dependencies-amp-amp-peerDependencies等等" class="headerlink" title="devDependencies &amp;&amp; dependencies &amp;&amp; peerDependencies等等"></a>devDependencies &amp;&amp; dependencies &amp;&amp; peerDependencies等等</h2><p>一个是你项目的开发依赖，一个是你项目中的依赖<br>举个例子，我们项目里用到的 <code>lodash</code>属于 __dependencies__，而项目开发的时候用到的<code>webpack</code> 则属于 <strong>devDependencies</strong></p><p><a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json#peerdependencies">peer</a></p><p>对于一些需要准确安装peerDependencies的，可以利用 <code>install-peerdeps</code>，例如 <code>npx install-peerdeps --dev eslint-config-airbnb</code>就会安装 eslint-config-airbnb 前置依赖，eslint, eslint-plugin-import, eslint-plugin-react, eslint-plugin-react-hooks, and eslint-plugin-jsx-a11y。</p><h2 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h2><p>当前程序需要什么版本支持，比如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;engines&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;&gt;=10.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;npm&quot;</span>: <span class="string">&quot;&gt;=6.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dist-tag"><a href="#dist-tag" class="headerlink" title="dist-tag"></a>dist-tag</h2><p><a href="https://docs.npmjs.com/adding-dist-tags-to-packages">https://docs.npmjs.com/adding-dist-tags-to-packages</a></p><p>比如最新的自动会打上一个  <strong>latest</strong> 标签，一般我们不需要去关注这一块的东西</p><h2 id="description、keywords-包的描述"><a href="#description、keywords-包的描述" class="headerlink" title="description、keywords 包的描述"></a>description、keywords 包的描述</h2><p>用于 <code>npm search</code> 匹配用户搜索的关键字</p><h2 id="homepage-主页、文档"><a href="#homepage-主页、文档" class="headerlink" title="homepage 主页、文档"></a>homepage 主页、文档</h2><p>用于 <code>npm home</code>和 <code>npm docs</code>跳转的</p><h2 id="bugs-问题反馈"><a href="#bugs-问题反馈" class="headerlink" title="bugs 问题反馈"></a>bugs 问题反馈</h2><p>用于 <code>npm bugs</code>跳转</p><h2 id="license"><a href="#license" class="headerlink" title="license"></a>license</h2><p>@TODO 占坑展开几个比较常见的协议</p><h2 id="author"><a href="#author" class="headerlink" title="author"></a>author</h2><p>可以是单行 <code>&lt;name&gt; &lt;email&gt; (&lt;homePage&gt;)</code> 也可以是对象形式，包含 <strong>name</strong>, <strong>email</strong> 和 <strong>url</strong> 三个字段</p><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p>你的包包括哪一些文件，如果项目中有 <strong>.npmignore</strong> 则包含除了该文件外的其他文件，如果没有 __.npmignore__，但是有 <strong>.gitignore</strong> 则会用 __.gitignore__。 具体见 <a href="https://docs.npmjs.com/configuring-npm/package-json.html#files">packages.json files</a></p><p>但是不管怎么设置都会包含这些文件</p><ul><li>package.json</li><li>README</li><li>CHANGES / CHANGELOG / HISTORY</li><li>LICENSE / LICENCE</li><li>NOTICE</li><li>package.json <code>main</code> 字段包含的文件</li></ul><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>配置一个文件路径，当别人引入你的模块时默认会加载这个文件。一般指向__”commonjs”__文件</p><h2 id="browser"><a href="#browser" class="headerlink" title="browser"></a>browser</h2><p>只能在浏览器使用的文件</p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>引入 <strong>esm</strong> 模块的文件</p><p><a href="https://rollupjs.org/guide/en/#outputformat">https://rollupjs.org/guide/en/#outputformat</a></p><p><a href="https://zhuanlan.zhihu.com/p/129310389">https://zhuanlan.zhihu.com/p/129310389</a></p><p><a href="https://juejin.im/post/5cfe6d3be51d454d544abf30">https://juejin.im/post/5cfe6d3be51d454d544abf30</a></p><p><a href="https://github.com/SunshowerC/blog/issues/8">https://github.com/SunshowerC/blog/issues/8</a></p><p>@TODO 补充更详细的介绍 esm  commonjs main 等情况？ <a href="https://github.com/SunshowerC/blog/issues/8">https://github.com/SunshowerC/blog/issues/8</a></p><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>可执行文件，写在这里的可执行文件会被软链到 __node_module/.bin__下面。<br>比如 <code>jest</code>，当我们 <code>npm install jest</code> 之后，直接在当前目录执行 <code>jest</code>就会去跑 __node_module/jest`下面 package.json 的bin字段指定的可执行文件</p><p><a href="https://docs.npmjs.com/configuring-npm/package-json.html#bin"> package.json bin</a></p><h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><p>当前包的仓库， <code>npm repo</code> 时跳转</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/jsonz1993/project.git&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>占坑</p><h1 id="README-or-Docs"><a href="#README-or-Docs" class="headerlink" title="README or Docs"></a>README or Docs</h1><h2 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h2><p>README一般包含了最简单的使用教程，包括 安装、配置、使用等</p><p>如果你写的包有很多功能或接口的话，则推荐有 docs 模块介绍当前包的接口的，如果只是比较简单的接口，则可以也写在<code>README.md</code></p><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><h2 id="npmignore"><a href="#npmignore" class="headerlink" title=".npmignore"></a>.npmignore</h2><p>对于不重要的东西，可以使用 <code>.npmignore</code> 避免上传到 npm 上，比如 <code>.babelrc</code>, <code>.editorconfig</code>, <code>docs/</code>, <code>test/</code> 等等</p><p><a href="https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package">.npmignore guide</a></p><h2 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h2><p><a href="https://docs.npmjs.com/configuring-npm/npmrc.html">.npmrc guide</a><br>当前项目的npm配置，会覆盖全局的 .npmrc，比如我发的是公司内部的私有包，可以在项目下新建一个 .npmrc。然后写上 <strong>registry</strong> 等字段</p><h2 id="不再维护-or-弃用"><a href="#不再维护-or-弃用" class="headerlink" title="不再维护 or 弃用"></a>不再维护 or 弃用</h2><p>如果说你不想再维护某个包，或者某个版本有严重bug，你不想用户去使用它，可以弃用该包。使用场景比较少，具体参照<a href="https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions">官方文档</a></p><h1 id="常用的cli"><a href="#常用的cli" class="headerlink" title="常用的cli"></a>常用的cli</h1><h2 id="npm-bugs-直接打开反馈bug的网站"><a href="#npm-bugs-直接打开反馈bug的网站" class="headerlink" title="npm bugs 直接打开反馈bug的网站"></a>npm bugs 直接打开反馈bug的网站</h2><p><code>npm bugs react</code>是打开react github repos 的issues</p><h2 id="npm-config"><a href="#npm-config" class="headerlink" title="npm config"></a>npm config</h2><p>处理npm 配置相关问题</p><h2 id="npm-docs"><a href="#npm-docs" class="headerlink" title="npm docs"></a>npm docs</h2><p><code>npm docs react</code>打开react 官网主页</p><h2 id="npm-link-本地开发必备"><a href="#npm-link-本地开发必备" class="headerlink" title="npm link 本地开发必备"></a>npm link 本地开发必备</h2><p>占坑</p><h2 id="npm-repo-打开包的仓库"><a href="#npm-repo-打开包的仓库" class="headerlink" title="npm repo 打开包的仓库"></a>npm repo 打开包的仓库</h2><p>一般直接打开 github repo</p><h1 id="开发服务（编译）"><a href="#开发服务（编译）" class="headerlink" title="开发服务（编译）"></a>开发服务（编译）</h1><p>目前比较流行的 <strong>webpack</strong>,<strong>roolup</strong>,__parcel__和比较年轻的__snowpack__。</p><h1 id="关于本地调试npm"><a href="#关于本地调试npm" class="headerlink" title="关于本地调试npm"></a>关于本地调试npm</h1><p>在开发的npm包下面跑 <code>npm link </code><br>在要用的地方跑 <code>npm i packageName</code></p><p>调试完之后 开发的包下面 <code>npm unlink</code><br>要用的地方 <code>npm uninstall packageName &amp;&amp; npm install packageName</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先我们罗列一下，一个npm工具包需要包含哪些通用的内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package.json √&lt;/li&gt;
&lt;li&gt;dist目录 √&lt;/li&gt;
&lt;li&gt;src目录 √&lt;/li&gt;
&lt;li&gt;开发服务（编译）√&lt;/li&gt;
&lt;li&gt;example √&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;Readme and docs&lt;/li&gt;
&lt;li&gt;eslint √&lt;/li&gt;
&lt;li&gt;githook&lt;/li&gt;
&lt;li&gt;发布相关&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;package.json&quot;&gt;&lt;/a&gt;package.json&lt;/h1&gt;&lt;p&gt;首先，必要的字段有 &lt;strong&gt;“name”&lt;/strong&gt; 和 &lt;strong&gt;“version”&lt;/strong&gt;&lt;br&gt;建议直接用 &lt;code&gt;npm init&lt;/code&gt;跑一遍就好，也可以偷个懒直接 &lt;code&gt;npm init -y&lt;/code&gt;使用预设的默认值&lt;/p&gt;
&lt;p&gt;可以在terminal上键入以下命令设置一些默认值&lt;br&gt;&lt;code&gt;npm set init.author.email &amp;quot;jsonz@qq.com&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;code&gt;npm set init.author.name &amp;quot;jsonz&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;version&quot;&gt;&lt;a href=&quot;#version&quot; class=&quot;headerlink&quot; title=&quot;version&quot;&gt;&lt;/a&gt;version&lt;/h2&gt;&lt;p&gt;可以参照&lt;br&gt;&lt;a href=&quot;https://docs.npmjs.com/about-semantic-versioning&quot;&gt;npm semantic versioning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总结一下就是 版本号为&lt;code&gt;x.y.z&lt;/code&gt;：向后兼容的bug修复补丁递增z；向后兼容的features新功能递增y；破坏性改动递增x版本号&lt;/p&gt;
&lt;p&gt;更详细的可以看 &lt;a href=&quot;https://semver.org/lang/zh-CN/&quot;&gt;semver version&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;版本符号问题&quot;&gt;&lt;a href=&quot;#版本符号问题&quot; class=&quot;headerlink&quot; title=&quot;版本符号问题&quot;&gt;&lt;/a&gt;版本符号问题&lt;/h3&gt;</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode项目alias设置</title>
    <link href="http://jsonz1993.github.io/vscode-alias/"/>
    <id>http://jsonz1993.github.io/vscode-alias/</id>
    <published>2020-05-13T14:43:58.000Z</published>
    <updated>2021-05-29T15:24:10.608Z</updated>
    
    <content type="html"><![CDATA[<p>一般我们在会在webpack配alias，比如 <code> &#123; &#39;@&#39;: path.resolve(__diranme, &#39;./src&#39;) &#125;</code></p><p>如果在项目上直接这么写，vscode是跳不到目标文件，比如<code>import router from &#39;@/router&#39;</code>。</p><p>所以可以在vscode上加一个配置用来让vscode识别这些。</p><p>如果项目上用的是 ts ，则配 <code>tsconfig.json</code>，js 则在项目根目录上新建 <code>jsconfig.json</code></p><figure class="highlight javascript"><figcaption><span>jsconfig.json || tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://code.visualstudio.com/docs/languages/jsconfig">更多配置看官网</a></p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Vscode" scheme="http://jsonz1993.github.io/tags/Vscode/"/>
    
  </entry>
  
  <entry>
    <title>学好Git 拒绝背锅</title>
    <link href="http://jsonz1993.github.io/code-check/"/>
    <id>http://jsonz1993.github.io/code-check/</id>
    <published>2020-04-09T16:13:47.000Z</published>
    <updated>2021-05-29T15:24:10.608Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/ac939016">仓库demo</a></p><p>今天下午同事找到我，说有个锅要我背一下，在vsc的<code>gitLens</code>看到某个文件里面的某行代码是我写的。</p><p>但是我有印象这些代码是我复制过来的，大概的场景是这样：</p><blockquote><p>先有个a文件，写了某些代码，后面发现说a文件的某些代码应该归到b文件里面，所以就把这块代码移过去，这时候整个仓库就只有b文件出现这些代码，看文件历史的时候就会觉得这些代码是我写的…</p></blockquote><p>这时候我们就需要找一下这些代码是从哪里copy过来的</p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95">git blame</a><br><code>git blame [&lt;options&gt;] &lt;file&gt;</code> 可以查看某文件的每一行是什么时候谁修改的，类似 vsc的<code>gitLens FILE HISTORY</code><br>这个命令可以加个 -C 的选项，Git 会分析你正在标注的文件， 并且尝试找出文件中从别的地方复制过来的代码片段的原始出处。</p><p>不过这个功能我没试过是有用的…比如这次就没有提示说这行代码是从哪里复制过来的</p><p>这时候我们就要用git的另一个搜索工具 <code>git log</code></p><p><code>git log -S Text</code>可以查看Text出现在哪些commit中，这就很有用了。</p><p>直接 <code>git log -S &quot;userName = &#39;jsonz1993&#39;&quot;</code>查看发现在之前a同事提交过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -S <span class="string">&quot;userName = &#x27;jsonz1993&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">commit ac9390164c24e4abc60f65a5604a3e2cb1f3ad66 (HEAD -&gt; master)</span><br><span class="line">Author: jsonz1993 &lt;jsonz@qq.com&gt;</span><br><span class="line">Date:   Thu Apr 9 17:08:16 2020 +0800</span><br><span class="line"></span><br><span class="line">    把user信息都归到一起</span><br><span class="line"></span><br><span class="line">commit ee7f357fa8a9b8eefc99e6f446bd983b7020ba34</span><br><span class="line">Author: a同事 &lt;jsonz@qq.com&gt;</span><br><span class="line">Date:   Thu Apr 9 17:06:08 2020 +0800</span><br><span class="line"></span><br><span class="line">    添加userName</span><br></pre></td></tr></table></figure><p>切换到 <code>ee7f357f</code> 再查看文件历史，确保没有丢错锅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout ee7f357f; git blame a.js</span><br><span class="line"></span><br><span class="line">^ee7f357 (a同事 2020-04-09 17:06:08 +0800 1) <span class="built_in">export</span> const userName = <span class="string">&#x27;jsonz1993&#x27;</span></span><br></pre></td></tr></table></figure><p>查看之后发现这个文件只有a同事改过…成功甩锅</p>]]></content>
    
    
    <summary type="html">记一次git仓库提交记录排查</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Git" scheme="http://jsonz1993.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git基础</title>
    <link href="http://jsonz1993.github.io/git-learn-basic/"/>
    <id>http://jsonz1993.github.io/git-learn-basic/</id>
    <published>2020-03-16T16:56:56.000Z</published>
    <updated>2021-05-29T15:24:10.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Basic"><a href="#Git-Basic" class="headerlink" title="Git Basic"></a>Git Basic</h1><h2 id="获取仓库"><a href="#获取仓库" class="headerlink" title="获取仓库"></a>获取仓库</h2><p><code>git clone url &lt;folder&gt;</code></p><p>发现commit信息写错了，重新提交commit信息 <code>git commit --amend</code> </p><h2 id="记录每次更新"><a href="#记录每次更新" class="headerlink" title="记录每次更新"></a>记录每次更新</h2><p>git status 短模式<br><code>git status -s --short</code><br>暂存区状态 工作区状态 文件</p><p>.gitignore <a href="https://github.com/github/gitignore">githubIgnore</a></p><ul><li>所有空行或者以 # 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li><li>匹配模式可以以（/）开头防止递归。</li><li>匹配模式可以以（/）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 忽略所有的 .a 文件</span><br><span class="line">*.a</span><br><span class="line"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span><br><span class="line">!lib.a</span><br><span class="line"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略任何目录下名为 build 的文件夹</span><br><span class="line">build/</span><br><span class="line"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><code>git rm</code> 直接从git仓库删除，并删除文件库<br><code>git rm --cached</code> 只删除git追踪，不删除磁盘文件，比如忘了把node_module加到.gitignore，就可以通过 git rm –cached删除追踪<br>支持 glob 模式匹配</p><h2 id="重命名-移动文件"><a href="#重命名-移动文件" class="headerlink" title="重命名/移动文件"></a>重命名/移动文件</h2><p><code>git mv oldFile newFile</code><br>相当于执行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv oldFile newFile</span><br><span class="line">git add newFile</span><br><span class="line">git rm oldFile</span><br></pre></td></tr></table></figure><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">git log</a></h2><p>限制显示的条数 <code>git log -l</code> 例如 <code>git log -2</code></p><p>查看每次commit改动的代码 <code>git log -p</code></p><p>增加总结，commit时各个文件增删多少行以及汇总 <code>git log --stat</code></p><p>一行输出 <code>git log --oneline</code></p><p>自定义format <code>git log --pretty=format:&quot;formation&quot;</code> 具体看链接文档</p><p>图形展示 <code>git log --graph</code></p><p>限制时间 <code>git log --since=2.days</code> 具体看链接文档</p><p>不展示merge节点 <code>git log --no-merges</code></p><h2 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h2><p><code>git reset file</code> 把暂存区的文件取出来<br><code>git checkout -- file</code> 把工作区文件修改撤销(变为已暂存/已提交的文件状态)</p><h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><p><code>git remote -v</code> 显示git读写的仓库地址<br><code>git remote add &lt;name&gt; &lt;url&gt;</code> 添加远程仓库 git add origin <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#105;&#116;&#46;&#120;&#x78;&#120;&#120;">&#x67;&#x69;&#x74;&#64;&#103;&#105;&#116;&#46;&#120;&#x78;&#120;&#120;</a></p><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><p>添加tag<br><code>git tag -a tagName </code> 简单模式<br><code>git tag -a tagName -m message</code> 添加tag的说明</p><p>展示tag<br><code>git show tagName</code><br><code>git tag</code><br><code>git tag -l &#39;tagName glob</code></p><p>删除tag<br><code>git tag -d tagName</code> 只会删除本地<br><code>git push origin --delete tagName</code> 删除本地与远程<br><code>git push origin :refs/tags/tagName</code> 同上</p><p>检出标签<br><code>git checkout -b brand-version2 tagName</code></p><h2 id="Git别名"><a href="#Git别名" class="headerlink" title="Git别名"></a>Git别名</h2><p>可以让我们的终端操作更加方便快捷<br><code>git config --global alias.unstage &#39;reset HEAD --&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当我们执行 git unstage 时相当于执行了 reset HEAD --</span><br><span class="line">即</span><br><span class="line">git unstage fileA</span><br><span class="line">git reset HEAD -- fileA</span><br></pre></td></tr></table></figure><p>再比如我们经常看最后一次更改的话，可以设置个别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --gloabl alias.last &#x27;git log -1 HEAD&#x27;</span><br></pre></td></tr></table></figure><h1 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h1><h2 id="创建、合并与删除"><a href="#创建、合并与删除" class="headerlink" title="创建、合并与删除"></a>创建、合并与删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git checkout xxxx 检出分支</span><br><span class="line">git checkout -b xxx 创建并检出分支</span><br><span class="line">git branch xxxx 创建分支</span><br><span class="line"></span><br><span class="line">合并</span><br><span class="line">git checkout master</span><br><span class="line">git merge hotfix</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">git branch -d xxxx</span><br><span class="line">git push origin --delete xxxx 删除远程分支</span><br></pre></td></tr></table></figure><p>冲突</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git mergetool </span><br><span class="line">git mergetool --tool-help 查看有什么diff工具</span><br><span class="line">git config merge.tool xxxx 设置merge tool</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>git branch 查看分支<br>git branch -v 查看分支&amp;&amp;最后一次commit<br>git branch -vv 查看分支&amp;&amp;远程跟踪分支&amp;&amp;最后一次commit<br>git branch –merged/–no-merged 查看分支是否有被merge过，如果被merge过的分支，删掉该分支也没问题<br>git push <romote> <branch> 推动不同远程分支<br>git checkout –track <remote>/<branch> 切换并追踪分支<br>git branch -u/–set-upstream-to <remote>/<branch> 显示设置追踪远程分支<br>git push origin –delete xxxx 删除远程分支</p><h2 id="变基"><a href="#变基" class="headerlink" title="变基"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">变基</a></h2><p>merge的操作是三方合并（当前节点，待合并节点，共同祖先节点）<br>rebase更像是把所有提交重新在当前分支跑一遍，不过rebase有时候更灵活</p><p><code>git rebase --onto master server client</code><br>取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样</p><p><em>变基还是比较疑惑</em></p><h1 id="Git-Utils"><a href="#Git-Utils" class="headerlink" title="Git Utils"></a>Git Utils</h1><h2 id="贮藏与清理-git-stash"><a href="#贮藏与清理-git-stash" class="headerlink" title="贮藏与清理 git stash"></a>贮藏与清理 git stash</h2><p>贮藏 <code>git stash push</code><br>取出 <code>git stash pop</code><br>查看贮藏列表 <code>git stash list</code><br>骚操作 交互式贮藏，这个功能fork暂时不支持，所以只能通过命令行来实现 <code>git stash --patch</code><br>创建一个分支用来apply贮藏的东西 <code>git stash branch &lt;new branchName&gt;</code></p><p><code>git clean</code> 可以用来清理一些未被跟踪的文件，包括新建的和被ignore的<br>更好的方法是用 <code>git stash push --all</code>来暂存所有文件，因为clean删除操作是不可逆的</p><p>预演一遍会删除什么文件 <code>git clean -n</code><br>强制删除 <code>git clean -f</code><br>交互式 <code>git clean -i</code><br>静默模式 <code>git clean -q</code><br>也删除忽略的文件 <code>git clean -x</code><br>只删除忽略文件 <code>git clean -X</code><br>删除整个文件 <code>git clean -d</code></p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><code>git grep</code> 强大的搜索功能，不过一般好像都用ide直接搜或者用</p><p>搜索git仓库中的 removeSignoffAttachments 常用的命令<br><code>git grap -n removeSignoffAttachment</code> -n是为了显示在第几行<br><code>git grap -c removeSignoffAttachment</code> –count 显示在某个文件共出现多少次</p><h2 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">重写历史</a></h2><p>如果你的commit信息写错了，但是还没有推送到远程可以用 <code>git commit --amend</code>重新修改</p><p><strong>交互式变基</strong><br><code>git rebase -i HEAD~3</code> 交互式变基操作最近的三个commit</p><p>我们可以利用交互式变基做很多事情，比如修改多个交易信息。<code>git rebase -i HEAD~3</code> 然后再编辑器里面修改，如果只是修改commit信息，把<code>pick</code>改为<code>r</code>再改后面的信息就好。</p><p>你也可以在这里删除掉某个commit。 或者你想把commit合并成一个，可以把后面两个的 <code>pick</code> 改为 <code>squash</code>，git就会把后面两个的commit内容合并到第一个</p><h2 id="重写大量提交-filter-branch"><a href="#重写大量提交-filter-branch" class="headerlink" title="重写大量提交 filter-branch"></a>重写大量提交 filter-branch</h2><p>从每一个提交中移除一个文件: <code>git filter-branch --tree-filter &#39;rm -f passwords.txt&#39; HEAD</code></p><p>全局修改邮箱地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --commit-filter &#x27;</span><br><span class="line">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;schacon@localhost&quot; ];</span><br><span class="line">then</span><br><span class="line">        GIT_AUTHOR_NAME=&quot;Scott Chacon&quot;;</span><br><span class="line">        GIT_AUTHOR_EMAIL=&quot;schacon@example.com&quot;;</span><br><span class="line">        git commit-tree &quot;$@&quot;;</span><br><span class="line">else</span><br><span class="line">        git commit-tree &quot;$@&quot;;</span><br><span class="line">fi&#x27; HEAD</span><br></pre></td></tr></table></figure><h2 id="重置解密"><a href="#重置解密" class="headerlink" title="重置解密"></a>重置解密</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~ 默认选项，把上个提交修改文件置于工作区</span><br><span class="line">git reset --soft HEAD~ 上个提交的修改置于暂存区</span><br><span class="line">git reset --hard HEAD~ 直接将指针指向上个修改，强制覆盖了工作目录中的文件。如果你的commit没有Push的话，那估计找不到了</span><br><span class="line"></span><br><span class="line">reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：</span><br><span class="line"></span><br><span class="line">1. 移动 HEAD 分支的指向 （若指定了 --soft，则到此停止）</span><br><span class="line">2. 使索引看起来像 HEAD （若未指定 --hard，则到此停止）</span><br><span class="line">3. 使工作目录看起来像索引</span><br></pre></td></tr></table></figure><h2 id="reset-合并提交"><a href="#reset-合并提交" class="headerlink" title="reset 合并提交"></a>reset 合并提交</h2><p>除了<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2#_squashing">压缩提交</a>以外，还可以用reset来合并提交，前提也是你的代码还没push</p><p>假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。</p><p><code>git reset --soft HEAD~2</code> 就会把前两个commit给撤回，并把修改都放在暂存区，这时候再一起commit</p><h2 id="高级合并"><a href="#高级合并" class="headerlink" title="高级合并"></a>高级合并</h2><p>正常合并冲突直接在ied里面解决冲突会比命令行人性化很多</p><h2 id="查看每行的修改信息"><a href="#查看每行的修改信息" class="headerlink" title="查看每行的修改信息"></a>查看每行的修改信息</h2><p>类似vscode的 <code>File Blame</code>功能<br><code>git blame [-L 1,200] index.jsx</code> 查看 index.jsx的第1~200行的修改信息，如果加<code>-C</code>参数还可以看到这几行最原始出现的地方，也就是说有可能是其他地方copy过来的</p><h2 id="查看第一次出现在仓库是什么时候"><a href="#查看第一次出现在仓库是什么时候" class="headerlink" title="查看第一次出现在仓库是什么时候"></a>查看第一次出现在仓库是什么时候</h2><p><code>git log -S text</code> 可以知道仓库什么时候提交出现过这些 text</p><h2 id="git-子模块（子git）"><a href="#git-子模块（子git）" class="headerlink" title="git 子模块（子git）"></a>git 子模块（子git）</h2><p>添加子模块 <code>git submodule add &lt;repo&gt; [&lt;dir&gt;]</code></p><p>当仓库中有子模块时，需要用 <code>git submodule init &amp;&amp; git submit update</code>来初始化并检出父项目中列出的合适的提交<br>当然你也可以在克隆的时候直接加参数来处理<code>git clone &lt;repo&gt; --recurse-submodules</code></p>]]></content>
    
    
    <summary type="html">git基础知识备忘</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Git" scheme="http://jsonz1993.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>用github actions部署你的应用(hexo)</title>
    <link href="http://jsonz1993.github.io/github-actions/"/>
    <id>http://jsonz1993.github.io/github-actions/</id>
    <published>2019-12-23T12:39:11.000Z</published>
    <updated>2021-05-29T15:24:10.608Z</updated>
    
    <content type="html"><![CDATA[<p>之前github pages 一直都是用 travis-ci 部署的，除了慢一点没什么毛病，所以一直没有转向Github Actions的念头。<br>但是最近又重新买了个服务器，正好趁这个时间学一下 Actions，Actions对比travis有个很大的亮点就是他的生态很好，你要用什么插件搜一下直接就可以用了，减少很多工作。</p><h1 id="access-token"><a href="#access-token" class="headerlink" title="access token"></a>access token</h1><p>因为我们构建完需要Push到仓库，所以得有个 <a href="https://github.com/settings/tokens">Github access token</a>，可以直接点进链接申请，<strong>勾选repo的选项</strong> ，然后点击生成Token，这时候先别关闭页面，后面要用到这个token。</p><h1 id="secrets"><a href="#secrets" class="headerlink" title="secrets"></a>secrets</h1><p>进入要部署的项目的setting，左边有个导航进 secrets，在这里生成Actions需要用到的所有秘钥，只要你觉得有隐私的或者需要保密的全都在这里定义字段，然后配置文件直接使用就好。</p><p>我的Secrets总共有四个，如果只是部署到 github pages的话，你只需要token一个就够了</p><ul><li>token: 存放上一步生成的 access token</li><li>SSH_PRIVATE: 存放SSH到服务器的私钥</li><li>USERNAME: 要登录服务器的用户</li><li>HOST: 要登录的服务器host</li></ul><h1 id="Action-workflow"><a href="#Action-workflow" class="headerlink" title="Action workflow"></a>Action workflow</h1><p>点击项目顶部导航进入 Actions，随便点一个模板进去，或者直接 <code>set up workflow yourself</code>新建一个新的</p><p>我的workflow基本就是搬 travis 的，按照github actions的格式改了下而已。</p><p><strong>大概流程是： 拉取代码，初始化环境，生成静态资源，推送到目标仓库 或 部署到目标服务器</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">deployer</span> <span class="comment"># 当前workflow的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发的时机 当 master 分支有 push 的操作时执行</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span> <span class="comment"># jobs一般都是并行执行</span></span><br><span class="line">  <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">publish</span> </span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 运行环境</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 使用 actions/checkout 这个插件 用于拉取当前仓库的master分支</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line"></span><br><span class="line">      <span class="comment"># 使用 actions/setup-node@v1 插件配置node环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装 hexo-cli 与项目所需的 node_modules</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">      <span class="comment"># 生成静态资源</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">public</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 部署到 Github Pages 这里没有用到 hexo的 Deploy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GH_REF:</span> <span class="string">github.com/jsonz1993/jsonz1993.github.io</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 配置本地git</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;Jsonz1993&quot; </span></span><br><span class="line"><span class="string">          git config --global user.email &quot;jsonz@qq.com&quot;</span></span><br><span class="line"><span class="string">          # 生成 commit message 默认抓取最后一次提交信息</span></span><br><span class="line"><span class="string">          git log --pretty=format:&quot;CI: %s&quot; --date=short -n 1  &gt; commit-message.log</span></span><br><span class="line"><span class="string">          git clone https://$&#123;GH_REF&#125; .deploy_git</span></span><br><span class="line"><span class="string">          cd .deploy_git</span></span><br><span class="line"><span class="string">          git checkout master</span></span><br><span class="line"><span class="string">          cd ../</span></span><br><span class="line"><span class="string">          mv .deploy_git/.git/ ./public/</span></span><br><span class="line"><span class="string">          cd ./public/</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -F ../commit-message.log</span></span><br><span class="line"><span class="string">          git push --force --quiet &quot;https://$&#123;&#123; secrets.token &#125;&#125;/@$&#123;GH_REF&#125;&quot; master:master</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment"># 部署到自己的服务器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Private</span> <span class="string">Server</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">cd</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_PATH</span> <span class="string">&#125;&#125;</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">pull</span></span><br></pre></td></tr></table></figure><p><a href="https://help.github.com/cn/actions/automating-your-workflow-with-github-actions">使用 GitHub 操作自动化工作流程</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰 Github Actions</a></p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Github" scheme="http://jsonz1993.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>我的2019</title>
    <link href="http://jsonz1993.github.io/2019-end/"/>
    <id>http://jsonz1993.github.io/2019-end/</id>
    <published>2019-12-15T17:48:12.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p>转眼2019剩下 5% 不到了，是时候水一下总结</p><p>下午在做部门的下半年述职PPT的时候，才发现这下半年什么事情都没做，划水划过去了，结果ppt没啥好写的 可恶！</p><h1 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h1><p>不得不说，今年下半年的重心更多是倾向学习这块，虽然没有达到百分之百，不过也算满意，啃了高数和计算机原理。</p><p>原定要过八科，普通逻辑不用考，过了六科 算是还行。</p><p>但是自从十一月成绩公布以来，懒懒散散的，之前七点早起的习惯也没了…而且现在搬到生态园，中午和晚上学习的地方也还没找到合适的 真是让人惆怅。<br>不过也还好，可以利用中午的时间把之前微信收藏的几十篇文章慢慢过一下。</p><p>2020定的学习计划比今年还要重，五个考试和三个实践，当立个flag🚩🚩🚩，早点把这个东西搞定才能把心思都放在工作上。<br>还特地听了吴苏三胖的话，去买了本新概念1，打算从头开始学英语，把英语给考了。如果是按照下半年那个学习的劲头倒还可以尝试，如果是这一个月来的划水状态，真的是浪费时间 叹口气加油吧</p><h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><p>如果说学习方面评为良好的话，工作应该算是不及格吧。 年中定的计划现在一个都没完成，ppt胡搞瞎搞都不知道怎么搞，明天上台也不知道能怎么扯个八分钟。</p><p>算是鞭挞一下自己</p><ul><li>原生知识还是只懂毛皮，写写demo，自己小的项目都做不了，大失败！</li><li>后台知识基本没涉及，不过也不在计划之内</li><li>前端知识，更加熟练的流水工而已，没啥突破</li><li>和霜爷一起做开源，做了两个星期就不搭理人家 哈哈哈哈，写ppt的时候还可以蹭个名字 笑死</li></ul><p>难搞哦。</p><p>20年的话，emmmmmm 应该会放点精力在java端，得跟着朋友做点小项目才行，应付毕业设计和实践考试；然后公司项目上输出一点文章到km，也尝试着一起参与项目表单模式设计；最重要的是得找到一个可以真正学习实践的点，现在扯什么全栈是最不靠谱的。</p><p>具体的得等和老大沟通才知道，不过真的这些事情得主动，这次算是吃了个教训。</p><p>不过今年倒是去听了几场内部的小型分享会。</p><img data-src="./mysql_maria.jpg" width="500"/>MySQL和MariaDB之父 Michael 分享，全场听下来只记得他说的几句话> 大女儿叫 "My" 所以第一个数据库起名`MySQL`，二女儿叫Maria...所以后面写的数据库叫`MariaDB`...这...<img data-src="./node_deno.jpg" width="500">node.js 和 deno.js之父Ryan Dahl承认deno设想很好，但是没有生态注定不能商业化，如果兼容node的话，又很难撇清关系，现在node已经有慢慢通过升级改掉很多毛病，剩下的用一些工具也可以完成，没必要特地开个新语言来整合，所以听完还是不大看好。<h1 id="关于健康"><a href="#关于健康" class="headerlink" title="关于健康"></a>关于健康</h1><p>哎呀，今年真的和算命先生说的一样，这儿疼哪儿痛的（一个做it的会相信算命先生的话， 没想到吧 (～￣▽￣)～ ）。<br>弄了几个牙齿，看了皮肤科，最后还去理了肠胃。</p><p>其他还好暂时告一段落，就是胃镜这玩意真不是人照的，最有印象的话是医生看完胃镜说了句“年纪轻轻就萎缩了”，哎 以后爱惜身体咯</p><p>看了下今年除去刷医保的钱以外，看病总共花了八千多…不过里面有老爸老妈体检费，所以也没有那么夸张，后面买个重疾啥的，又得花钱。</p><p>至于19年的运动计划，等老命保住再说吧，现在养身多了，可乐咖啡都不怎么敢喝，周末没事都要出去走走散散步。</p><h1 id="关于其他"><a href="#关于其他" class="headerlink" title="关于其他"></a>关于其他</h1><ul><li>工资的目标算是达到了，不过以前在广州，现在在深圳，也没有多很多 勉勉强强。不过明年不敢定工资计划了，现在没技术，没学历混口饭吃先。</li><li>拿了驾照，还行 还行 虽然没车，不过总算完成了。</li><li>原生开发的目标算是黄的彻底</li><li>存款一方面应该是定的偏少了，另一方面是股市回血了一点点 还行勉强接受 哈哈。本来存个一两万不是很想写进来，后面想想还是要有个交代才能继续。</li><li>考试的计算也算是可以接受</li></ul><p>emmm 这么一看，好像除了作息不规律，健康有点问题；以及工作没啥进取以外 其他都还行。</p><p>不过现在的焦虑感一年比一年更强，想想汕头的朋友几个都结婚小孩都有了，某坤少也是，再看看自己房子没有，老婆没有，车子没有，票子也没有。<br>当然最大的焦虑其实是怕脚步赶不上老爸老妈老去的速度。<br>今天下午老妈在群里问我和老姐，家里不要的衣服可不可以拿去捐了？<br>这事让我有点激动，我们在学习进步的时候 老妈子也与时俱进，至少今年学会微信简单操作，平时视频聊天啥的没毛病，真好 科技改变生活。</p><hr><p>前几天大学几个朋友在群里聊天，一个说到：</p><blockquote><p>算一算，能陪父母的时间可能也就十几年了，这么一想好像一下子无法接受。想早点成家满足家里人抱孙子的愿望</p></blockquote><p>是啊，像我现在在外面的，时间更少，以后也不知道定居在哪里。唯有少玩点游戏，少刷点抖音减少负罪感。</p><p>说到游戏和抖音，最近一个月就是因为这两个玩意搞得无心学习，这玩意对我这个毫无自制力的人来说太可怕了，记得有一天玩到晚上四点，隔天起床立马把游戏卸了，控制不住自己的话，至少可以提高玩的成本。</p><p>还有就是抖音，记得之前看过一个公众号就是说这个的，这种基于推荐系统的软件都不是什么好软件，特别容易沉迷。<br>不过抖音有一个积极的方面就是以后可以有什么小tip就在上面搜一下， 算半个知乎，实用技巧啊，科普啥的应该还行，先留着吧。</p><p>再叨两句，下午散步的时候刷知乎看到一个问题，大概是:</p><blockquote><p>大学本科，同学都作弊，我没有作弊，我得到什么？</p></blockquote><p>有一个回答写的是什么都没有得到。看到这个标题的时候，我是挺有感触的，因为我也是这类人，虽然不是说从小到大没有作弊过，但是自认为很多时候还是比较正派耿直（其实就是胆小），所以可能会错失很多捷径或机会。</p><p>想想他们作弊的人以后绝大部分是不会得到什么鬼报应，而我坚持不作弊也不会有什么好处，当然看这个问题的时候，想的肯定不只是作弊的问题，可以延伸到生活中的各个场景，所以有时候觉得这种老实巴交的人，活该赚不了钱。</p><p>真想2020年可以学会狡猾？奸诈？一点？ 你看，连一个褒义的词都想不出一个，用圆滑吧。</p><p>所以2020年关键字是：<strong>自考</strong> <strong>健康</strong> <strong>英语</strong> __专业__。</p><p>最后的最后，放多一张照片，今天下午散步拍的，刚好看到左上角有一群小鸟在飞。<br>希望能和这些小鸟一样，在大城市有个自己的小角落。<br><img data-src="./2019_end.jpeg" width="500"></p>]]></content>
    
    
    <summary type="html">2019年个人总结</summary>
    
    
    
    <category term="live" scheme="http://jsonz1993.github.io/categories/live/"/>
    
    
    <category term="Live" scheme="http://jsonz1993.github.io/tags/Live/"/>
    
  </entry>
  
  <entry>
    <title>服务端入门汇总</title>
    <link href="http://jsonz1993.github.io/server-beginner/"/>
    <id>http://jsonz1993.github.io/server-beginner/</id>
    <published>2019-12-01T22:47:39.000Z</published>
    <updated>2021-05-29T15:24:10.608Z</updated>
    
    <content type="html"><![CDATA[<p>这里只有简单的服务端入门东西没啥好看…</p><hr><h1 id="mac-查看端口占用"><a href="#mac-查看端口占用" class="headerlink" title="mac 查看端口占用"></a>mac 查看端口占用</h1><p><a href="https://www.cnblogs.com/peida/archive/2013/02/26/2932972.html"><code>lsof -i:port</code></a><br><a href="https://www.cnblogs.com/peida/archive/2013/03/08/2949194.html"><code>netstat -ant | grep &#39;port&#39;</code></a></p><hr><h1 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h1><p>由于项目上后台用到redis，如果开发下大家用同一个容易被人改数据，造成奇葩的事情，所以本地搭了一个自己玩。</p><p>记录一下本地brew安装redis的过程</p><p>按着官网说明下载安装 <a href="https://redis.io/download">https://redis.io/download</a></p><p>mac下建议直接用brew管理</p><ol><li><code>brew install redis</code></li><li>可以用 <code>brew list redis</code>查看redis安装的位置</li><li>brew 安装的软件，配置一般都在<code>/usr/local/etc</code>，可以直接进去修改配置</li></ol><p>安装完之后，直接根据提示 <code>brew services start xxxx(redis)</code> 或者改完配置要重启reids <code>brew services restart xxx(redis)</code>。这些都是 brew 的常规操作了</p><p>配置的话，我这边根据项目没什么需要改的，端口直接用默认端口，就设了个密码，本来本地跑想直接把密码写在 conf 文件，想想这样显得太不专业了，建议直接用commit设置</p><p>命令行跑<code>redis-cli</code> 然后输入 <code>CONFIG SET requirepass $YOUR_PASSWORD</code><br>如果这时候输出 <code>ok</code> 则设置成功 可以用 <code>AUTH $YOUR_PASSWORD</code> 来校验。</p><p>一切ok之后，键入 exit 退出 redis-cli，结束。</p><hr><h1 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><p>本文只是单纯分享下怎么配置 免密登录服务器以及github clone，和网上99%没差异，只是整理一下后面如果又需要的话可以看</p><p>只适用于mac，linux应该也适用</p><p><strong>基本配置</strong></p><ol><li>创建.ssh目录 <code>mkdir -p ~/.ssh</code></li><li>创建秘钥 <code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code> 输完直接敲回车即可</li><li>此时你的 <code>~/.ssh</code>就会多了几个文件 id_rsa与id_rsa.pub分别是公钥和私钥</li><li>私钥自己留着，公钥如果你想要免密登录哪台服务器就拷贝到那台服务器的<code>authorized_keys</code>里面</li></ol><p>如果你的机器本来就有 id_rsa 与 id_rsa.pub 则可以直接跳过1，2，3步。</p><p>如果你有私钥的话，你可能需要有一个 <code>.ssh/config</code> 文件用来存储你的秘钥配置，关于这块后面有用到我再来补充</p><p>关于第四步拷贝到远程机器的<code>authorized_keys</code>里面，可以直接使用命令<code>ssh-copy-id user@host</code>或者<code>ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></p><p><strong>github配置</strong></p><p>至于github其实也是一样的，只是他的 <code>authorized_keys</code> 是用设置来配置，具体在个人 <a href="https://github.com/settings/keys"><code>setting/ssh</code></a>里面</p><p><strong>简单原理</strong></p><p>最后SSH的原理简单可以这么理解<br>我生成了一个私钥和一个公钥，私钥存放在本地，公钥放到远程机器上<br>当我链接远程机器的时候，机器就会发一串随机字符串给我，我用私钥加密只会再发回去。<br>远程主机再用存放在 <code>authorized_keys</code> 的公钥去解密，如果成功且匹配，意味着这个用户是可信任的。</p><p><strong>相关参考 or 收藏链接</strong></p><p><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a><br><a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">github关于ssh</a><br><a href="https://shanyue.tech/op/init.html">服务器登录相关</a></p><p><a href="https://shanyue.tech/op/">服务器基础教程</a> 这是个好教程，基本上都是一些入门级的东西 对新手很友好</p><hr><h1 id="nginx-amp-amp-ssl"><a href="#nginx-amp-amp-ssl" class="headerlink" title="nginx &amp;&amp; ssl"></a>nginx &amp;&amp; ssl</h1><p>Centos7系统</p><ul><li>安装 <code>yum install nginx</code></li><li>启动直接 命令行键入<code>nginx</code>就好</li><li>要查看是否启动可以看最简单直接查看有没有Nginx进程。 <code>ps -ef | grep nginx</code></li><li>常用的命令，测试配置文件 <code>nginx -t</code>，<code>nginx -s [signal]</code></li></ul><p>配置基本看这几篇就够用了 <a href="https://zhuanlan.zhihu.com/p/34943332">8分钟带你深入浅出搞懂Nginx</a>, <a href="https://juejin.im/post/5d81906c518825300a3ec7ca#heading-12">nginx 这一篇就够了</a></p><p>ssl 推荐直接用 <a href="https://certbot.eff.org/">certbot</a> 简单易用好操作</p><p>centos的可以直接进这个网址，傻瓜式才做即可 <a href="https://certbot.eff.org/lets-encrypt/centos6-nginx">https://certbot.eff.org/lets-encrypt/centos6-nginx</a></p>]]></content>
    
    
    <summary type="html">工作上常用的一些配置备忘</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Server" scheme="http://jsonz1993.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks食用指南</title>
    <link href="http://jsonz1993.github.io/react-hooks/"/>
    <id>http://jsonz1993.github.io/react-hooks/</id>
    <published>2019-08-14T00:35:37.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/react-source-learn">react16 Hooks食用指南</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/jsonz1993/react-source-learn&quot;&gt;react16 Hooks食用指南&lt;/a&gt;&lt;/p&gt;
</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="React" scheme="http://jsonz1993.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>hello angular1.5</title>
    <link href="http://jsonz1993.github.io/hello-angular1-5/"/>
    <id>http://jsonz1993.github.io/hello-angular1-5/</id>
    <published>2019-04-24T10:27:33.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://docs.ngnice.com/guide/filter">http://docs.ngnice.com/guide/filter</a><br><a href="https://devdocs.io/angularjs~1.5/api/ng/directive">https://devdocs.io/angularjs~1.5/api/ng/directive</a><br><a href="https://code.angularjs.org/1.5.3/docs/guide">https://code.angularjs.org/1.5.3/docs/guide</a></p><p>组件、控制器、服务、指令、过滤器<br>对应项目上的 components、modules、services、xx、filter</p><p>控制器 ng-controller =&gt; create scope</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化，涉及 scope root 作用域等待</span></span><br><span class="line"><span class="keyword">var</span> App = angular.module(<span class="string">&#x27;app&#x27;</span>, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器 C 将 M 和 V 绑定(MVC)</span></span><br><span class="line">App.controller(<span class="string">&#x27;ctrl&#x27;</span>, $scope=&gt; &#123;</span><br><span class="line">  $scope.data= &#123;&#125;;</span><br><span class="line">  <span class="comment">// 不建议直接用 $scope.message = &#x27;&#x27;; 改动的话，内存地址改变容易导致ng不能触发监听</span></span><br><span class="line">  $scope.onClick = <span class="function">()=&gt;</span> &#123;&#125;; <span class="comment">// `ng-click=&quot;onClick&quot;`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>双向绑定: <code>ng-model</code><br>条件判断: <code>ng-if</code>、<code>ng-show</code>、<code>ng-hide</code><br>循环: <code>ng-repeat</code> <code>ng-repeat=&quot;x in xx&quot; $index, x.xxx</code></p><p>//过滤器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">App.filter(<span class="string">&#x27;xxxx&#x27;</span>, <span class="function">()=&gt;</span> <span class="function"><span class="params">text</span>=&gt;</span> textFilter);</span><br><span class="line"><span class="string">`&#123;&#123; data.message | xxxxFilter &#125;&#125;`</span></span><br><span class="line"><span class="comment">// 搜索 `ng-repeat=&quot;x in xxxx | filter: searchText&quot;`</span></span><br><span class="line">searchText = [<span class="string">&#x27;T&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;T&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;T&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;H&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure><p>样式选择器 <code>ng-class</code>,<code>ng-style</code><br>下拉列表选项 <code>ng-options</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$scope.colors = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;black&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">&quot;FirstCtrl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">&quot;colorChoosen&quot;</span> <span class="attr">ng-options</span>=<span class="string">&quot;color.name for color in colors&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ng-include</code>和<code>ng-template</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">&quot;views/part.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">&quot;template.url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">&quot;getUrl()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">&quot;views/part.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://devdocs.io/angularjs~1.5/api/ng/directive/nginclude">更多</a></p><p>directive</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 名字命名用驼峰，使用用-</span></span><br><span class="line">App.directive(<span class="string">&#x27;people&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">restrict</span>: <span class="string">&#x27;E&#x27;</span>, <span class="comment">// 类型 element A: attribute, C: class</span></span><br><span class="line">    <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">// 是否直接代替顶级标签</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;xxx&#x27;</span> <span class="comment">// `templateUrl`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.directive(<span class="string">&#x27;te&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">scope</span>: &#123;</span><br><span class="line">      <span class="comment">// = 对象; @ 文本; &amp; 函数</span></span><br><span class="line">      <span class="attr">info</span>: <span class="string">&#x27;=&#x27;</span> <span class="comment">// 从 attr 中获取 info 属性，存储到 scope.info中,, 双向数据绑定，改成@ 为只读.</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">link</span>(<span class="params">scope, element, attrs</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// scope 作用域</span></span><br><span class="line">      <span class="comment">// element 封装过的页面dom。 element.children(&#x27;h1&#x27;).addClass(&#x27;text&#x27;)</span></span><br><span class="line">      <span class="comment">// attrs 传入的所有 attrs</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">transclude</span>: <span class="literal">true</span>, <span class="comment">// 把 directive 变成一个容器 这里有点像 React.children 的概念，或者vue里面的 slot</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`xxxxx&lt;div ng-transclude&gt;&lt;/div&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里传入了 data</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">te</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>ng表单，验证等</p><p>作用域广播<code>broadcasted</code>父级=&gt;子级；<code>emitted</code>子级=&gt; 父级</p><p>filter 自定义筛选器<br>data binding 双向绑定<br>dependency injection 引来注入<br>ng-src directive 内置指令<br>event ng-click 事件系统指令</p><p>server 注入自定义server<br>  angular.module(‘xxxx’, [])<br>    .factory(‘serverName’, [], fn)</p>]]></content>
    
    
    <summary type="html">项目上用到angular1.x，记录备忘后续老项目用到可以查询</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Angular" scheme="http://jsonz1993.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Dart核心库常见方法学习</title>
    <link href="http://jsonz1993.github.io/dart-library/"/>
    <id>http://jsonz1993.github.io/dart-library/</id>
    <published>2019-04-18T18:00:31.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几篇关于Dart的文章，只是在看官网教程的时候敲一遍巩固记忆而写的</p></blockquote><h1 id="Dart-core"><a href="#Dart-core" class="headerlink" title="Dart:core"></a>Dart:core</h1><p>每个文件都会默认引入这个包，包括numbers,collections,strings等等</p><h1 id="print"><a href="#print" class="headerlink" title="print"></a>print</h1><p>打印，默认会调用打印的对象的 <code>toString</code> 方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(anObject)</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Jsonz&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I\&#x27;m <span class="subst">$name</span>&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h1><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>解析把字符串转为数字</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="built_in">int</span>.parse(<span class="string">&#x27;42&#x27;</span>) == <span class="number">42</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">int</span>.parse(<span class="string">&#x27;0x42&#x27;</span>) == <span class="number">66</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">double</span>.parse(<span class="string">&#x27;0.50&#x27;</span>) == <span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">num</span>.parse(<span class="string">&#x27;42&#x27;</span>) <span class="keyword">is</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">num</span>.parse(<span class="string">&#x27;0x42&#x27;</span>) <span class="keyword">is</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">num</span>.parse(<span class="string">&#x27;0.50&#x27;</span>) <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">int</span>.parse(<span class="string">&#x27;42&#x27;</span>, radix: <span class="number">16</span>) == <span class="number">66</span>);</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>将数字转为字符串</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Convert an int to a string.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">42.</span>toString() == <span class="string">&#x27;42&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert a double to a string.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">123.456</span>.toString() == <span class="string">&#x27;123.456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specify the number of digits after the decimal.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">123.456</span>.toStringAsFixed(<span class="number">2</span>) == <span class="string">&#x27;123.46&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specify the number of significant figures.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">123.456</span>.toStringAsPrecision(<span class="number">2</span>) == <span class="string">&#x27;1.2e+2&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">double</span>.parse(<span class="string">&#x27;1.2e+2&#x27;</span>) == <span class="number">120.0</span>);</span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="search-inside-a-string"><a href="#search-inside-a-string" class="headerlink" title="search inside a string"></a>search inside a string</h2><p>字符串的查找搜索</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Never odd or even&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(str.contains(<span class="string">&#x27;odd&#x27;</span>));</span><br><span class="line"><span class="keyword">assert</span>(str.startsWith(<span class="string">&#x27;Never&#x27;</span>));</span><br><span class="line"><span class="keyword">assert</span>(str.endsWith(<span class="string">&#x27;even&#x27;</span>));</span><br><span class="line"><span class="keyword">assert</span>(str.indexOf(<span class="string">&#x27;odd&#x27;</span>) == <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h2 id="Extracting-data-from-a-string"><a href="#Extracting-data-from-a-string" class="headerlink" title="Extracting data from a string"></a>Extracting data from a string</h2><p>从字符串提取数据</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Never odd or even&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(str.substring(<span class="number">6</span>, <span class="number">9</span>) == <span class="string">&#x27;odd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parts = str.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(parts.length == <span class="number">4</span>);</span><br><span class="line"><span class="keyword">assert</span>(parts[<span class="number">0</span>] == <span class="string">&#x27;Never&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(str[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> char <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span>.split(<span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">  <span class="built_in">print</span>(char);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> codeUnitList = str.codeUnits.toList();</span><br><span class="line"><span class="keyword">assert</span>(codeUnitList[<span class="number">0</span>] == <span class="number">78</span>);</span><br></pre></td></tr></table></figure><h2 id="converting-to-uppercase-or-lowercase"><a href="#converting-to-uppercase-or-lowercase" class="headerlink" title="converting to uppercase or lowercase"></a>converting to uppercase or lowercase</h2><p>切换大小写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Never odd or even&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(str.toUpperCase() == <span class="string">&#x27;NEVER ODD OR EVEN&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(str.toLowerCase() == <span class="string">&#x27;never odd or even&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="trimming-amp-amp-empty"><a href="#trimming-amp-amp-empty" class="headerlink" title="trimming &amp;&amp; empty"></a>trimming &amp;&amp; empty</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;   hello &#x27;</span>.trim() == <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;&#x27;</span>.isEmpty);</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27; &#x27;</span>.isNotEmpty);</span><br></pre></td></tr></table></figure><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greetingTemplate = <span class="string">&#x27;Hello, Name!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greeting = greetingTemplate.replaceAll(<span class="built_in">RegExp</span>(<span class="string">&#x27;Name&#x27;</span>), <span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(greeting); <span class="comment">// Hello, Bob!</span></span><br><span class="line"><span class="keyword">assert</span>(greeting != greetingTemplate);</span><br></pre></td></tr></table></figure><h2 id="building-a-string"><a href="#building-a-string" class="headerlink" title="building a string"></a>building a string</h2><p>在调用<code>toString</code>之前不会生成新的字符串对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb = <span class="built_in">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">sb</span><br><span class="line">  ..write(<span class="string">&#x27;use a stringBuffer for &#x27;</span>)</span><br><span class="line">  ..writeAll([<span class="string">&#x27;efficient&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;creation&#x27;</span>], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  ..write(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullString = sb.toString();</span><br><span class="line"><span class="keyword">assert</span>(fullString ==  <span class="string">&#x27;Use a StringBuffer for efficient string creation.&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> numbers = <span class="built_in">RegExp</span>(<span class="string">r&#x27;\d+&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allCharacters = <span class="string">&#x27;llamas live fifteen to twenty years&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> someDigits = <span class="string">&#x27;llamas live 15 to 20 years&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(!allCharacters.contains(numbers));</span><br><span class="line"><span class="keyword">assert</span>(someDigits.contains(numbers));</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> exedOut = someDigits.replaceAll(numbers, <span class="string">&#x27;XX&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(exedOut == <span class="string">&#x27;llamas live XX to XX years&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(numbers.hasMatch(someDigits));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> match <span class="keyword">in</span> numbers.allMatches(someDigits)) &#123;</span><br><span class="line">  <span class="built_in">print</span>(match.group(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><p>List、Set、Map</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>普通数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础操作</span></span><br><span class="line">listBase() &#123;</span><br><span class="line">  <span class="comment">// Use a List constructor.</span></span><br><span class="line">  <span class="keyword">var</span> vegetables = <span class="built_in">List</span>();</span><br><span class="line">  <span class="keyword">assert</span>(vegetables.length == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// simply use a list literal.</span></span><br><span class="line">  <span class="keyword">var</span> fruits = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line">  <span class="comment">// add to a list.</span></span><br><span class="line">  fruits.add(<span class="string">&#x27;kiwis&#x27;</span>);</span><br><span class="line">  <span class="comment">// add multiple items to a list.</span></span><br><span class="line">  fruits.addAll([<span class="string">&#x27;grapes&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the list length.</span></span><br><span class="line">  <span class="keyword">assert</span>(fruits.length == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove a single item.</span></span><br><span class="line">  <span class="keyword">var</span> appleIndex = fruits.indexOf(<span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">  fruits.removeAt(appleIndex);</span><br><span class="line">  <span class="keyword">assert</span>(fruits.length == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove all elements from a list</span></span><br><span class="line">  fruits.clear();</span><br><span class="line">  <span class="keyword">assert</span>(fruits.length == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(fruits[<span class="number">0</span>] == <span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(fruits.indexOf(<span class="string">&#x27;apples&#x27;</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort 方法</span></span><br><span class="line">listSort() &#123;</span><br><span class="line">  <span class="keyword">var</span> fruits = [<span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line">  <span class="comment">// Sort a list.</span></span><br><span class="line">  fruits.sort((a, b) =&gt; a.compareTo(b));</span><br><span class="line">  <span class="keyword">assert</span>(fruits[<span class="number">0</span>] == <span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list type </span></span><br><span class="line">listType() &#123;</span><br><span class="line">  <span class="keyword">var</span> fruits = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  fruits.add(<span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> fruit = fruits[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">assert</span>(fruit <span class="keyword">is</span> <span class="built_in">String</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>去重类数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set base</span></span><br><span class="line">setBase() &#123;</span><br><span class="line">  <span class="keyword">var</span> ingredients = <span class="built_in">Set</span>();</span><br><span class="line">  ingredients.addAll([<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]);</span><br><span class="line">  <span class="keyword">assert</span>(ingredients.length == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  ingredients.add(<span class="string">&#x27;gold&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(ingredients.length == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  ingredients.remove(<span class="string">&#x27;gold&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(ingredients.length == <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否包含</span></span><br><span class="line">setContains() &#123;</span><br><span class="line">  <span class="keyword">var</span> ingredients= <span class="built_in">Set</span>();</span><br><span class="line">  ingredients.addAll([<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check whether an item is in the set.</span></span><br><span class="line">  <span class="keyword">assert</span>(ingredients.contains(<span class="string">&#x27;titanium&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check whether all the items are in the set.</span></span><br><span class="line">  <span class="keyword">assert</span>(ingredients.containsAll([<span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line">setIntersection() &#123;</span><br><span class="line">  <span class="keyword">var</span> ingredients= <span class="built_in">Set</span>();</span><br><span class="line">  ingredients.addAll([<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create the intersection of thw sets.</span></span><br><span class="line">  <span class="keyword">var</span> nobleGases = <span class="built_in">Set</span>.from([<span class="string">&#x27;xenon&#x27;</span>, <span class="string">&#x27;argon&#x27;</span>]);</span><br><span class="line">  <span class="keyword">var</span> intersection = ingredients.intersection(nobleGases);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(intersection.length == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">assert</span>(intersection.contains(<span class="string">&#x27;xenon&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://api.dartlang.org/stable/dart-core/Set-class.html">关于Set的更多方法</a></p><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>js对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础创建</span></span><br><span class="line">mapBase() &#123;</span><br><span class="line">  <span class="keyword">var</span> hawaiianBeaches = &#123;</span><br><span class="line">    <span class="string">&#x27;Oahu&#x27;</span>: [<span class="string">&#x27;Waikiki&#x27;</span>, <span class="string">&#x27;Kailua&#x27;</span>, <span class="string">&#x27;Waimanalo&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Big Island&#x27;</span>: [<span class="string">&#x27;Wailea bay&#x27;</span>, <span class="string">&#x27;Pololu Beach&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Kauai&#x27;</span>: [<span class="string">&#x27;Hanalei&#x27;</span>, <span class="string">&#x27;Poipu&#x27;</span>],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> searchTerms = <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nobleGases = <span class="built_in">Map</span>&lt;<span class="built_in">int</span>, <span class="built_in">String</span>&gt;(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line">mapRemove() &#123;</span><br><span class="line">  <span class="keyword">var</span> nobleGases = &#123;</span><br><span class="line">    <span class="number">54</span>: <span class="string">&#x27;xenon&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">assert</span>(nobleGases[<span class="number">54</span>] == <span class="string">&#x27;xenon&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(nobleGases.containsKey(<span class="number">54</span>));</span><br><span class="line"></span><br><span class="line">  nobleGases.remove(<span class="number">54</span>)  ;</span><br><span class="line">  <span class="keyword">assert</span>(!nobleGases.containsKey(<span class="number">54</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keys &amp;&amp; values</span></span><br><span class="line">mapKeyValue() &#123;</span><br><span class="line">  <span class="keyword">var</span> hawaiianBeaches = &#123;</span><br><span class="line">    <span class="string">&#x27;Oahu&#x27;</span>: [<span class="string">&#x27;Waikiki&#x27;</span>, <span class="string">&#x27;Kailua&#x27;</span>, <span class="string">&#x27;Waimanalo&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Big Island&#x27;</span>: [<span class="string">&#x27;Wailea bay&#x27;</span>, <span class="string">&#x27;Pololu Beach&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Kauai&#x27;</span>: [<span class="string">&#x27;Hanalei&#x27;</span>, <span class="string">&#x27;Poipu&#x27;</span>],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// keys</span></span><br><span class="line">  <span class="keyword">var</span> keys = hawaiianBeaches.keys;</span><br><span class="line">  <span class="keyword">assert</span>(keys.length == <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">assert</span>(<span class="built_in">Set</span>.from(keys).contains(<span class="string">&#x27;Oahu&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// values</span></span><br><span class="line">  <span class="keyword">var</span> values = hawaiianBeaches.values;</span><br><span class="line">  <span class="keyword">assert</span>(values.length == <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">assert</span>(values.any((v)=&gt; v.contains(<span class="string">&#x27;Waikiki&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check a keys</span></span><br><span class="line">  <span class="keyword">assert</span>(hawaiianBeaches.containsKey(<span class="string">&#x27;Oahu&#x27;</span>));</span><br><span class="line">  <span class="keyword">assert</span>(!hawaiianBeaches.containsKey(<span class="string">&#x27;Florida&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// putIfAbsent 当且仅当没有该Key赋值，才会执行该函数</span></span><br><span class="line">  <span class="keyword">var</span> teamAssignments = &#123;&#125;;</span><br><span class="line">  teamAssignments.putIfAbsent(<span class="string">&#x27;Catcher&#x27;</span>, ()=&gt; <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(teamAssignments[<span class="string">&#x27;Catcher&#x27;</span>] != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://api.dartlang.org/stable/dart-core/Map-class.html">更多关于Maps的API</a></p><h2 id="通用-Map-Set-List-的方法"><a href="#通用-Map-Set-List-的方法" class="headerlink" title="通用(Map,Set,List)的方法"></a>通用(Map,Set,List)的方法</h2><p>Iterable(迭代器)方法指Set和List，因为他们是继承Iterable class<br>Collections指 Set、List和Map.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">commonSetList() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Iterables 指的是List和Set，因为都是继承该类实现的</span></span><br><span class="line">  <span class="comment">// Collections 指的是List,Set,Map</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> coffees = [];</span><br><span class="line">  <span class="keyword">var</span> teas = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;chamomile&#x27;</span>, <span class="string">&#x27;earl grey&#x27;</span>];</span><br><span class="line">  <span class="keyword">var</span> teasSet = &#123;<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">var</span> teasMap = &#123;</span><br><span class="line">    <span class="string">&#x27;tea1&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tea2&#x27;</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iterables: isEmpty isNotEmpty</span></span><br><span class="line">  <span class="keyword">assert</span>(coffees.isEmpty);</span><br><span class="line">  <span class="keyword">assert</span>(teas.isNotEmpty);</span><br><span class="line">  <span class="keyword">assert</span>(teasSet.isNotEmpty);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Collections: forEach</span></span><br><span class="line">  teas.forEach((tea)=&gt; &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I drink <span class="subst">$tea</span>&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  teasMap.forEach((teaKey, teaValue)=&gt; &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$teaKey</span>, <span class="subst">$teaValue</span>&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iterbables: map. map使用的是惰性模式，即在上一个返回之前，不会执行下一个函数</span></span><br><span class="line">  <span class="keyword">var</span> loudTeas = teas.map((tea)=&gt; tea.toUpperCase());</span><br><span class="line">  loudTeas.forEach(<span class="built_in">print</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果想要立即执行，可以使用 toList 或 toSet</span></span><br><span class="line">  <span class="keyword">var</span> loudTeas2 = teas.map((tea)=&gt; tea.toUpperCase()).toList();</span><br><span class="line">  <span class="built_in">print</span>(loudTeas2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// where any every 和js一样的功能，分别是查找所有符合的，有任意符合返回true，所有符合返回true</span></span><br><span class="line">  <span class="built_in">bool</span> isDecaffeinated(<span class="built_in">String</span> teaName)=&gt; teaName == <span class="string">&#x27;chamomile&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> decaffeinatedTeas = teas.where(isDecaffeinated);</span><br><span class="line">  <span class="built_in">print</span>(decaffeinatedTeas);</span><br><span class="line">  <span class="keyword">assert</span>(teas.any(isDecaffeinated));</span><br><span class="line">  <span class="keyword">assert</span>(!teas.every(isDecaffeinated));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h1><p>URI主要提供一些解码和编码url的功能</p><h2 id="解码与编码"><a href="#解码与编码" class="headerlink" title="解码与编码"></a>解码与编码</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">encodeAndDecode() &#123;</span><br><span class="line">  <span class="keyword">var</span> uri = <span class="string">&#x27;http://example.org/api?foo=some message&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> encoded = <span class="built_in">Uri</span>.encodeFull(uri);</span><br><span class="line">  <span class="keyword">assert</span>(encoded == <span class="string">&#x27;http://example.org/api?foo=some%20message&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> decode = <span class="built_in">Uri</span>.decodeFull(encoded);</span><br><span class="line">  <span class="keyword">assert</span>(uri == decode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> encodeComponent = <span class="built_in">Uri</span>.encodeComponent(uri);</span><br><span class="line">  <span class="keyword">assert</span>(encodeComponent == <span class="string">&#x27;http%3A%2F%2Fexample.org%2Fapi%3Ffoo%3Dsome%20message&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> decoded = <span class="built_in">Uri</span>.decodeComponent(encodeComponent);</span><br><span class="line">  <span class="keyword">assert</span>(uri == decoded);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析与构建"><a href="#解析与构建" class="headerlink" title="解析与构建"></a>解析与构建</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">parseAndBuild() &#123;</span><br><span class="line">  <span class="keyword">var</span> uri = <span class="built_in">Uri</span>.parse(<span class="string">&#x27;http://example.org:8080/foo/bar#frag&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.scheme == <span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.host == <span class="string">&#x27;example.org&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.path == <span class="string">&#x27;/foo/bar&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.fragment == <span class="string">&#x27;frage&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.origin == <span class="string">&#x27;http://example.org:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> buildUri = <span class="built_in">Uri</span>(</span><br><span class="line">    scheme: <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">    host: <span class="string">&#x27;example.org&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/foo/bar&#x27;</span>,</span><br><span class="line">    fragment: <span class="string">&#x27;frag&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">assert</span>(buildUri.toString() == <span class="string">&#x27;http://example.org/foo/bar#frag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dates-and-times"><a href="#Dates-and-times" class="headerlink" title="Dates and times"></a>Dates and times</h1><p>时间日期相关</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">date() &#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a now DateTime with the local time zone.</span></span><br><span class="line">  <span class="keyword">var</span> y2k = <span class="built_in">DateTime</span>(<span class="number">2000</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定月份和日期</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// specify the date as a UTC time.</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.utc(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Specify a date and time in ms since the Unix epoch.</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.fromMillisecondsSinceEpoch(<span class="number">946684800000</span>, isUtc: <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Parse an ISO 8601 date</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.parse(<span class="string">&#x27;2000-01-01T00:00:00Z&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回从1970到目标的毫秒数</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.utc(<span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">assert</span>(y2k.millisecondsSinceEpoch == <span class="number">946684800000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> unixEpoch = <span class="built_in">DateTime</span>.utc(<span class="number">1970</span>);</span><br><span class="line">  <span class="keyword">assert</span>(unixEpoch.millisecondsSinceEpoch == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间操作方法</span></span><br><span class="line">dateOptions() &#123;</span><br><span class="line">  <span class="keyword">var</span> y2k = <span class="built_in">DateTime</span>.utc(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">Duration</span>(days: <span class="number">366</span>));</span><br><span class="line">  <span class="keyword">var</span> y2001 = y2k.add(<span class="built_in">Duration</span>(days: <span class="number">366</span>));</span><br><span class="line">  <span class="keyword">assert</span>(y2001.year == <span class="number">2001</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subtract 30 days</span></span><br><span class="line">  <span class="keyword">var</span> december2000 = y2001.subtract(<span class="built_in">Duration</span>(days: <span class="number">30</span>));</span><br><span class="line">  <span class="keyword">assert</span>(december2000.year == <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">assert</span>(december2000.month == <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate the difference between two dates.</span></span><br><span class="line">  <span class="comment">// Returns a Duration object.  </span></span><br><span class="line">  <span class="keyword">var</span> duration = y2001.difference(y2k);</span><br><span class="line">  <span class="keyword">assert</span>(duration.inDays == <span class="number">366</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://api.dartlang.org/stable/dart-core/DateTime-class.html">更多DateTime API</a><br><a href="https://api.dartlang.org/stable/dart-core/Duration-class.html">更多Duration API</a></p><p><a href="https://www.dartlang.org/guides/libraries/library-tour#utility-classes">未完待续</a></p>]]></content>
    
    
    <summary type="html">Dart 学习记录</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Dart" scheme="http://jsonz1993.github.io/tags/Dart/"/>
    
    <category term="Flutter" scheme="http://jsonz1993.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Dart基础语法（二）</title>
    <link href="http://jsonz1993.github.io/dart-learn-2/"/>
    <id>http://jsonz1993.github.io/dart-learn-2/</id>
    <published>2019-04-17T21:53:21.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p><code>Dart</code>是一个面向对象的语言，具有类和基于mixin的继承。每个对象都是一个class的实例，所有的class都是基于Object。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有未初始化的变量都为null</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line">  <span class="built_in">num</span> z = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">num</span> d;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="comment">// Point(num x, num y) &#123;</span></span><br><span class="line">  <span class="comment">//   this.x = x;</span></span><br><span class="line">  <span class="comment">//   this.y = y;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更简便的写法</span></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数的命名</span></span><br><span class="line">  Point.origin() &#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">  point.x = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">assert</span>(point.x == <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">assert</span>(point.d == <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="构造函数与继承"><a href="#构造函数与继承" class="headerlink" title="构造函数与继承"></a>构造函数与继承</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  <span class="keyword">var</span> y;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 简单的构造函数使用，相当于 Point(x, y) &#123; this.x = x; this.y = y; &#125;</span></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在开发环境下可以用 assert对参数进行断言</span></span><br><span class="line">  Point.withAssert(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y): <span class="keyword">assert</span>(x&gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in person.withAssert(): (<span class="subst">$x</span>, <span class="subst">$y</span>)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这一块的初始化列表有点像 java 还是 c++</span></span><br><span class="line">  Point.fromJson2(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">num</span>&gt; json):</span><br><span class="line">    x = json[<span class="string">&#x27;x&#x27;</span>],</span><br><span class="line">    y = json[<span class="string">&#x27;y&#x27;</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;In Person.fromJson2() : (<span class="subst">$x</span>, <span class="subst">$y</span>)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部使用构造函数</span></span><br><span class="line">  Point.alongXAxis(<span class="built_in">num</span> x): <span class="keyword">this</span>(x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getDefaultData() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> firstName;</span><br><span class="line">  Person.fromJson(<span class="built_in">Map</span> data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in Person&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  Employee.fromJson(<span class="built_in">Map</span> data): <span class="keyword">super</span>.fromJson(data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in Employee&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 因为调用构造函数之前会计算超类构造函数的参数，所以参数可以是一个表达式</span></span><br><span class="line">  Employee(): <span class="keyword">super</span>.fromJson(getDefaultData());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> emp = <span class="keyword">new</span> Employee.fromJson(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (emp <span class="keyword">is</span> Person) &#123;</span><br><span class="line">    emp.firstName = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  (emp <span class="keyword">as</span> Person).firstName = <span class="string">&#x27;bob&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title="常量构造函数"></a>常量构造函数</h3><p>如果你的类不需要改变，你可以将他写成编译时常量，但是要确保所有的实例变量都是<code>final</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImmutablePoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> ImmutablePoint origin = <span class="keyword">const</span> ImmutablePoint(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 确保所有的实例变量都是 final</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> x, y;</span><br><span class="line">  <span class="keyword">const</span> ImmutablePoint(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = ImmutablePoint(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> b = ImmutablePoint(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(a == b);</span><br></pre></td></tr></table></figure><h3 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title="工厂构造函数"></a>工厂构造函数</h3><p>在实现并不总是创建其类的新实例的构造函数时，请使用factory关键字。例如，工厂构造函数可能从缓存中返回实例，或者它可能返回子类型的实例。</p><p>注意 工厂构造函数不能访问<code>this</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂构造函数,不需要经常实例化的情况，会从缓存获取</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">bool</span> mute = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _cache is library-private, thanks to the _ in front of its name.</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Logger&gt; _cache = &lt;<span class="built_in">String</span>, Logger&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Logger(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_cache.containsKey(name)) <span class="keyword">return</span> _cache[name];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> logger = Logger._internal(name);</span><br><span class="line">      _cache[name] = logger;</span><br><span class="line">      <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Logger._internal(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> log(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mute) <span class="built_in">print</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Methods-方法"><a href="#Methods-方法" class="headerlink" title="Methods(方法)"></a>Methods(方法)</h2><h3 id="Instance-methods-实例方法"><a href="#Instance-methods-实例方法" class="headerlink" title="Instance methods(实例方法)"></a>Instance methods(实例方法)</h3><p>普通的实例方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通的方法</span></span><br><span class="line">  <span class="built_in">num</span> distanceTo(Point other) &#123;</span><br><span class="line">    <span class="keyword">var</span> dx = x - other.x;</span><br><span class="line">    <span class="keyword">var</span> dy = y - other.y;</span><br><span class="line">    <span class="keyword">return</span> sqrt(dx * dx + dy * dy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Getters-amp-amp-Setters"><a href="#Getters-amp-amp-Setters" class="headerlink" title="Getters &amp;&amp; Setters"></a>Getters &amp;&amp; Setters</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> left, top, width, height;</span><br><span class="line"></span><br><span class="line">  Rectangle(<span class="keyword">this</span>.left, <span class="keyword">this</span>.top, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> right =&gt; left + width;</span><br><span class="line">  <span class="keyword">set</span> right(<span class="built_in">num</span> value)=&gt; left = value - width;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> bottom =&gt; top + height;</span><br><span class="line">  <span class="keyword">set</span> bottom(<span class="built_in">num</span> value)=&gt; top = value - height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Abstract-methods-Abstract-Class"><a href="#Abstract-methods-Abstract-Class" class="headerlink" title="Abstract methods/ Abstract Class"></a>Abstract methods/ Abstract Class</h3><p>抽象类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> doSomething(); <span class="comment">// 定义了一个抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EffectiveDoer</span> <span class="keyword">extends</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> doSomething() &#123; <span class="built_in">print</span>(<span class="string">&#x27;xxx&#x27;</span>); &#125; <span class="comment">// 实现该方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Implicit-interfaces"><a href="#Implicit-interfaces" class="headerlink" title="Implicit interfaces"></a>Implicit interfaces</h3><p>接口和java很像</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// implicit interfaces</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A person. The implicit interface contains greet().</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// In the interface, but visible only in this library</span></span><br><span class="line">  <span class="keyword">final</span> _name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Not in the interface, since this is a constructor.</span></span><br><span class="line">  Person(<span class="keyword">this</span>._name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// In the interface</span></span><br><span class="line">  <span class="built_in">String</span> greet(<span class="built_in">String</span> who) =&gt; <span class="string">&#x27;Hello, <span class="subst">$who</span>. I am <span class="subst">$_name</span>&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// an implementation of the Person interface.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Impostor</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> _name =&gt; <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> greet(<span class="built_in">String</span> who)=&gt; <span class="string">&#x27;Hi <span class="subst">$who</span>. Do you know who I am?&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> greetBob(Person person)=&gt; person.greet(<span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(greetBob(Person(<span class="string">&#x27;Jsonz&#x27;</span>)));</span><br><span class="line">  <span class="built_in">print</span>(greetBob(Impostor()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>, <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extending-a-class扩展继承"><a href="#extending-a-class扩展继承" class="headerlink" title="extending a class扩展继承"></a>extending a class扩展继承</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line"> <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;television turnOn&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="keyword">super</span>.turnOn();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;SmartTelevision&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="overriding-members-重写方法"><a href="#overriding-members-重写方法" class="headerlink" title="overriding members 重写方法"></a>overriding members 重写方法</h3><p>子类重写实例方法,但是有加和没加和什么区别呢？这个疑惑在<a href="https://stackoverflow.com/questions/51224205/what-is-the-purpose-of-override-used-in-flutter">stackoverflow有解答</a></p><blockquote><p><code>@override</code> just points out that the function is also defined in an ancestor class, but is being redefined to do something else in the current class. It’s also used to annotate the implementation of an abstract method. It is optional to use but recommended as it improves readability.</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Overridable-operators"><a href="#Overridable-operators" class="headerlink" title="Overridable operators"></a>Overridable operators</h3><p>重写操作符？ 看看就好</p><h3 id="Enumerated-types"><a href="#Enumerated-types" class="headerlink" title="Enumerated types"></a>Enumerated types</h3><p>枚举类型</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123; red, green, blue &#125;</span><br><span class="line">enums() &#123;</span><br><span class="line">  <span class="comment">// 枚举类型: 表示固定数量的常数值</span></span><br><span class="line">  <span class="keyword">assert</span>(Color.red.index == <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">assert</span>(Color.green.index == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">assert</span>(Color.blue.index == <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">List</span>&lt;Color&gt; colors = Color.values;</span><br><span class="line">  <span class="keyword">assert</span>(colors[<span class="number">2</span>] == Color.blue);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> aColor = Color.blue;</span><br><span class="line">  <span class="keyword">switch</span> (aColor) &#123;</span><br><span class="line">    <span class="keyword">case</span> Color.red:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">      <span class="built_in">print</span>(aColor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p><code>mixins</code>使用<code>with</code>关键字，<code>Class TAS = A with S</code>,则 <code>TAS</code>包含了所有<code>A</code>和<code>S</code>的方法属性，以<code>S</code>为最终覆盖，即如果A与S有相同的方法，则S覆盖A。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">  a() &#123; <span class="built_in">print</span>(<span class="string">&#x27;S.a&#x27;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  a() &#123; <span class="built_in">print</span>(<span class="string">&#x27;A.a&#x27;</span>); &#125;</span><br><span class="line">  b() &#123; <span class="built_in">print</span>(<span class="string">&#x27;A.b&#x27;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  a() &#123; <span class="built_in">print</span>(<span class="string">&#x27;B.a&#x27;</span>); &#125;</span><br><span class="line">  b() &#123; <span class="built_in">print</span>(<span class="string">&#x27;B.b&#x27;</span>); &#125;</span><br><span class="line">  c() &#123; <span class="built_in">print</span>(<span class="string">&#x27;B.c&#x27;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TAS</span> = <span class="title">A</span> <span class="title">with</span> <span class="title">S</span>;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">TBAS</span> = <span class="title">B</span> <span class="title">with</span> <span class="title">A</span>, <span class="title">S</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">main</span>() </span>&#123;</span><br><span class="line">  TAS t = <span class="keyword">new</span> TAS();</span><br><span class="line">  t.a(); <span class="comment">// S.a</span></span><br><span class="line">  t.b(); <span class="comment">// A.b</span></span><br><span class="line">  TBAS b = <span class="keyword">new</span> TBAS();</span><br><span class="line">  b.a(); <span class="comment">// S.a</span></span><br><span class="line">  b.b(); <span class="comment">// A.b</span></span><br><span class="line">  b.c(); <span class="comment">// B.c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class-variables-and-methods"><a href="#Class-variables-and-methods" class="headerlink" title="Class variables and methods"></a>Class variables and methods</h2><p>静态方法与静态属性<code>static</code>关键字实现</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> name = <span class="string">&#x27;queue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">num</span> log(<span class="built_in">String</span> str) &#123;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue.log(Queue.name);</span><br></pre></td></tr></table></figure><h1 id="Generics-泛型"><a href="#Generics-泛型" class="headerlink" title="Generics 泛型"></a>Generics 泛型</h1><p>泛型这块后面用到的话还要补，确实不是很熟</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line"><span class="comment">// 等于 var names = &lt;String&gt;[];</span></span><br><span class="line">name.addAll([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">name.add(<span class="number">2</span>); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h2 id="类型限制"><a href="#类型限制" class="headerlink" title="类型限制"></a>类型限制</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]; <span class="comment">// list</span></span><br><span class="line"><span class="keyword">var</span> uniqueNames = &lt;<span class="built_in">String</span>&gt;&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;; <span class="comment">// set</span></span><br><span class="line"><span class="keyword">var</span> pages = &lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; &#123;</span><br><span class="line">  <span class="string">&#x27;index.html&#x27;</span>: <span class="string">&#x27;homePage&#x27;</span>,</span><br><span class="line">&#125; <span class="comment">// map</span></span><br><span class="line"><span class="keyword">var</span> nameSet = <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt;.from(names);</span><br><span class="line"><span class="keyword">var</span> newMap = <span class="built_in">Map</span>&lt;<span class="built_in">int</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names <span class="keyword">is</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h1><p>引入用<code>import</code>关键字</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:html&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:test/test.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为某个库指定别名，jser比较喜欢这种，不会全局变量到处飘！</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/lib.dart&#x27;</span> <span class="keyword">as</span> lib;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/lib.dart&#x27;</span> <span class="keyword">show</span> foo; <span class="comment">// 只引入foo</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/lib.dart&#x27;</span> <span class="keyword">hide</span> foo; <span class="comment">// 除了foo其他都引入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒加载</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:greetings/hello.dart&#x27;</span> <span class="keyword">deferred</span> <span class="keyword">as</span> hello;</span><br><span class="line"></span><br><span class="line">Future greet() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> hello.loadLibrary(); <span class="comment">// 先加载 loadLibrary会返回一个Future</span></span><br><span class="line">  hello.printGreeting(); <span class="comment">// 再使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建一个库"><a href="#创建一个库" class="headerlink" title="创建一个库"></a>创建一个库</h2><p><a href="https://www.dartlang.org/guides/libraries/create-library-packages">create library packages</a></p><h1 id="asynchrony-support-异步支持"><a href="#asynchrony-support-异步支持" class="headerlink" title="asynchrony support 异步支持"></a>asynchrony support 异步支持</h1><p>Dart一般用<code>Future</code>和<code>Stream</code>来处理异步。</p><h2 id="handling-Futures"><a href="#handling-Futures" class="headerlink" title="handling Futures"></a>handling Futures</h2><p><a href="https://www.dartlang.org/guides/libraries/library-tour#future">Future</a></p><p>使用<code>await/async</code>,所以<code>Futures</code>类似<code>js</code>的<code>Promise</code>?</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future checkVersion() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> version = <span class="keyword">await</span> lookUpVersion();</span><br><span class="line">  <span class="comment">// Do something with version</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title="声明异步函数"></a>声明异步函数</h3><p>如果函数没有返回值，则返回类型为 <code>Future&lt;void&gt;</code>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> lookUpVersion() =&gt; <span class="string">&#x27;1.0.0&#x27;</span>;</span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; lookUpVersion() <span class="keyword">async</span> =&gt; <span class="string">&#x27;1.0.0&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="Handling-Streams"><a href="#Handling-Streams" class="headerlink" title="Handling Streams"></a>Handling Streams</h2><p>使用 <code>async</code> 和 <code>await for</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 等待流的每一次值</span></span><br><span class="line"><span class="comment">// 2. 执行for循环的主体</span></span><br><span class="line"><span class="comment">// 3. 重复1和2直到流结束</span></span><br><span class="line"><span class="comment">// 4. 如果要中断流监听，可以用 break 或 return</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">for</span> (varOrType identifier <span class="keyword">in</span> expression) &#123;</span><br><span class="line">  <span class="comment">// Executes each time the stream emits a value.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h1><p>emmm <code>js</code>最讨厌的语法来到<code>Dart</code>还是无法避免，之前处理异步都是<code>promise</code>要不就是<code>await</code>…</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步Generators</span></span><br><span class="line"><span class="built_in">Iterable</span>&lt;<span class="built_in">int</span>&gt; naturalsTo(<span class="built_in">int</span> n) <span class="keyword">sync</span>* &#123;</span><br><span class="line">  <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &lt; n) <span class="keyword">yield</span> k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步Generators</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; asynchronousNaturalsTo(<span class="built_in">int</span> n) <span class="keyword">async</span>* &#123;</span><br><span class="line">  <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &lt; n) <span class="keyword">yield</span> k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你的Generator是递归的，可以用 yield*来优化</span></span><br><span class="line"><span class="comment">// 怎么优化呢？尾调用优化？</span></span><br><span class="line"><span class="built_in">Iterable</span>&lt;<span class="built_in">int</span>&gt; naturalsDownFrom(<span class="built_in">int</span> n) <span class="keyword">sync</span>* &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> n;</span><br><span class="line">    <span class="keyword">yield</span>* naturalsDownFrom(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Callable-classes-可调用类"><a href="#Callable-classes-可调用类" class="headerlink" title="Callable classes 可调用类"></a>Callable classes 可调用类</h1><p>要实现类和方法一样的调用，则在类里面实现 <code>call</code>方法.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WannabeFunction</span> </span>&#123;</span><br><span class="line">  call(<span class="built_in">String</span> a, <span class="built_in">String</span> b, <span class="built_in">String</span> c) =&gt; <span class="string">&#x27;<span class="subst">$a</span> <span class="subst">$b</span> <span class="subst">$c</span>!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> wf = <span class="keyword">new</span> WannabeFunction();</span><br><span class="line">  <span class="keyword">var</span> out = wf(<span class="string">&quot;Hi&quot;</span>,<span class="string">&quot;there,&quot;</span>,<span class="string">&quot;gang&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$out</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Typedefs"><a href="#Typedefs" class="headerlink" title="Typedefs"></a>Typedefs</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Compare&lt;T&gt; = <span class="built_in">int</span> <span class="built_in">Function</span>(T a, T b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> sort(<span class="built_in">int</span> a, <span class="built_in">int</span> b) =&gt; a - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">assert</span>(sort <span class="keyword">is</span> Compare&lt;<span class="built_in">int</span>&gt;); <span class="comment">// True!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Dart 学习记录</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Dart" scheme="http://jsonz1993.github.io/tags/Dart/"/>
    
    <category term="Flutter" scheme="http://jsonz1993.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Dart基础语法（一）</title>
    <link href="http://jsonz1993.github.io/dart-learn/"/>
    <id>http://jsonz1993.github.io/dart-learn/</id>
    <published>2019-04-16T22:58:47.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p>一个最基础的Dart程序</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line">printInterger(<span class="built_in">int</span> aNumber, <span class="built_in">int</span> bNumber) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;the number is <span class="subst">$aNumber</span> and <span class="subst">$&#123;bNumber&#125;</span>&#x27;</span>); <span class="comment">// $aNumber or $&#123;bNumber&#125; 都可以在字符串中使用变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序初始运行的函数</span></span><br><span class="line">main() </span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">42</span>; <span class="comment">// 声明与初始化变量</span></span><br><span class="line">  printInterger(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要概念:</p><ul><li>所有变量都可以看成是一个<code>object</code>，所有的<code>object</code>都是通过<code>Object</code>class实例化出来的。这点和js一样</li><li>Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用<code>dynamic</code>类型。如<code>- Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用`dynamic`类型。如</code>- Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用<code>dynamic</code>类型。如``- Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用<code>dynamic</code>类型。如<code>var list= &lt;dynamic&gt;[1]</code></li><li>Dart的私有方法，都是以<code>_</code>下划线开头的，不像java直接写关键字<code>private</code>.</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明与初始化一个String类型的变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果想要任意类型，可以用 dynamic</span></span><br><span class="line"><span class="built_in">dynamic</span> name2 = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line"><span class="comment">// 显式声明字符串类型</span></span><br><span class="line"><span class="built_in">String</span> name3 = <span class="string">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><p>和<code>js</code>不一样的是，如果在<code>Dart</code>里面声明一个变量，但是不赋值的话，他的默认值是<code>null</code>而不是<code>undefined</code>.</p><p>这也从另一个角度说明在<code>Dart</code>中，万物皆对象.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> lineCount;</span><br><span class="line"><span class="keyword">var</span> line;</span><br><span class="line"><span class="keyword">assert</span>(lineCount == <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">assert</span>(line == <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h2 id="final-amp-amp-const"><a href="#final-amp-amp-const" class="headerlink" title="final &amp;&amp; const"></a>final &amp;&amp; const</h2><p><code>Dart</code>里面的常量用 <code>final</code>和<code>const</code>声明。</p><p><code>final</code>表示单个赋值，一旦赋值，就不能被改变。<br><code>const</code>表示编译时确定的值，并且对象会被冻结而完全不可变。</p><p><a href="https://stackoverflow.com/questions/50431055/what-is-the-difference-in-between-const-and-final-keyword-in-dart">stackoverflow</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> b = <span class="built_in">DateTime</span>.now();</span><br></pre></td></tr></table></figure><h1 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h1><ul><li>numbers</li><li>strings</li><li>booleans</li><li>lists(Array)</li><li>sets</li><li>maps</li><li>runes (Unicode characters in a string)</li><li>symbols</li></ul><p>可以通过<code>x.runtimeType</code>来获取对象的类型</p><h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><p>Dart的number有两种类型: <code>int</code> 和 <code>double</code></p><p>简单的区分，小的整数用<code>int</code>,浮点数用<code>double</code>。一般直接用<code>var</code>声明的话，会根据你声明时的类型做推断，所以如果声明和后面使用不一样的话，建议显式声明.例</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="comment">// 这里Dart会推断是int类型</span></span><br><span class="line">x = <span class="number">2.0</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以换成这两种</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1.0</span>; </span><br><span class="line"><span class="built_in">double</span> x = <span class="number">1</span>;  <span class="comment">// 相当于 double x = 1.0;</span></span><br></pre></td></tr></table></figure><h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><p>在Dart里面，如果字符串和数字相加，会报错，这一点和js隐式转换不同。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// String 2 int</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">&#x27;1.1&#x27;</span>); <span class="comment">// string 2 double</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString(); <span class="comment">// int 2 String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.141592654</span>.toStringAsFixed(<span class="number">2</span>); <span class="comment">// double 2 string 3.14</span></span><br></pre></td></tr></table></figure><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>可以用<code>&#39;</code>或<code>&quot;</code>来表示字符串。</p><p>字符串内部的变量可以用<code>$value</code>或者<code>$&#123;value&#125;</code>，一般来说如果是变量，直接用<code>$value</code>表示，表达式用<code>$&#123;value&#125;</code>，例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;String1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;String2&quot;</span>;</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;String1 STRING2&#x27;</span> == <span class="string">&#x27;<span class="subst">$a</span> <span class="subst">$&#123;b.toUpperCase()&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果要创建多行的字符串，则可以用<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>,</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hi</span></span><br><span class="line"><span class="string">I&#x27;m Jsonz</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h2><p><code>Dart</code>里面<code>if</code>与<code>assert</code>都只会对 <code>bool</code>做判断，这点同样与js的隐式转换不同。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fullName = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName); <span class="comment">// error</span></span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure><h2 id="Lists-既js里面的数组"><a href="#Lists-既js里面的数组" class="headerlink" title="Lists (既js里面的数组)"></a>Lists (既js里面的数组)</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>]; <span class="comment">// 普通list</span></span><br><span class="line"><span class="keyword">var</span> typeList = &lt;<span class="built_in">int</span>&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// 带类型的list</span></span><br><span class="line"><span class="keyword">assert</span>(list.length == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">typeList[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">assert</span>(typeList[<span class="number">0</span>] == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建const类型的list</span></span><br><span class="line"><span class="keyword">var</span> constantList = <span class="keyword">const</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">constantList[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样创建</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">const</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><p><code>Sets</code>会根据初始化推断类型，比如下面的例子<code>halogens</code>会判断为<code>String</code>类型，这时候添加其他类型的值就会报错。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> halogens = &#123;<span class="string">&#x27;fluorine&#x27;</span>, <span class="string">&#x27;chlorine&#x27;</span>, <span class="string">&#x27;bromine&#x27;</span>, <span class="string">&#x27;iodine&#x27;</span>, <span class="string">&#x27;astatine&#x27;</span>&#125;;</span><br><span class="line">halogens.add(<span class="number">1</span>); <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要创建一个空的set，比如要有类型前缀，不然会被判断为创建的是Maps而不是Sets</span></span><br><span class="line"><span class="keyword">var</span> name = &#123;&#125;; <span class="comment">// map， not a set</span></span><br><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;&#123;&#125;; <span class="comment">// String set</span></span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; name2 = &#123;&#125;; <span class="comment">// Srting set</span></span><br></pre></td></tr></table></figure><p><code>Set</code>通过<code>add</code>或者<code>addAll</code>添加<code>item</code>。<br>可以通过<code>const</code>关键字创建编译常量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// add 与 addAll</span></span><br><span class="line"><span class="keyword">var</span> el = &lt;<span class="built_in">String</span>&gt;&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> el2 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line">el.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">el.addAll(el2);</span><br><span class="line"><span class="keyword">assert</span>(el.length == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const</span></span><br><span class="line"><span class="keyword">final</span> constantSet = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Maps-相当于js的对象"><a href="#Maps-相当于js的对象" class="headerlink" title="Maps(相当于js的对象)"></a>Maps(相当于js的对象)</h2><p><code>Dart</code>的<code>Map</code>不限制<code>key</code>的类型，意味着如果是<code>number</code>类型，不需要和<code>js</code>一样，用<code>[]</code>包着。</p><p><code>Map</code>也会推断<code>key</code>和<code>value</code>的类型,比如下面的 <code>map1</code> 就是<code>key</code>为<code>int</code>类型，<code>value</code>为<code>string</code>类型的<code>map</code>.</p><p>如果获取某个<code>map</code>没有的<code>value</code>,则<code>value</code>默认是<code>null</code>。这点和<code>js</code>的<code>undefined</code>不同，可以对比变量初始化的情况类推。</p><p><code>map</code>也有<code>length</code>属性，类比<code>js</code>的<code>Object.keys(obj).length</code>.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map的key可以是任意类型</span></span><br><span class="line"><span class="keyword">var</span> gif = &#123;</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;int&gt;: &lt;String&gt; 类型的map</span></span><br><span class="line"><span class="keyword">var</span> map1 = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译时常量map</span></span><br><span class="line"><span class="keyword">final</span> constantMap = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">constantMap[<span class="number">2</span>] = <span class="string">&#x27;3&#x27;</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="Runes"><a href="#Runes" class="headerlink" title="Runes"></a>Runes</h2><p>emmm 这个我的理解是UTF-32编码的字符串，简单理解就是可以支持更多类型的字符串，比如emoji，工作用到再去查。<br>比如<code>&#39;\u&#123;1f44f&#125;&#39;;</code>是<code>👏</code>,<code>\u2665</code>是<code>♥</code>。</p><h2 id="Symbols-类比js的Symbol"><a href="#Symbols-类比js的Symbol" class="headerlink" title="Symbols (类比js的Symbol)"></a>Symbols (类比js的Symbol)</h2><p>对<code>Symbol</code>的理解可以直接看<a href="https://es6.ruanyifeng.com/#docs/symbol">阮一峰的ES6-Symbol</a>，基本的作用是一样的。</p><p><code>Dart</code>的<code>Symbol</code>是<code>compoile-time constants</code>，就是编译时常量。<br>使用也很简单，直接在标识前面加个<code>#</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol = #symbol;</span><br></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>Dart是面向对象的语言，所以函数也是一种<code>Function</code>类型的对象。</p><p>参数的默认值都为<code>null</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="built_in">bool</span> isNaN(<span class="built_in">int</span> number) &#123;</span><br><span class="line">  <span class="keyword">return</span> number.isNaN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isNaN2(number) &#123;</span><br><span class="line">  <span class="keyword">return</span> number.isNaN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> isNaN3(<span class="built_in">int</span> number)=&gt; number.isNaN;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数使用</span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;</span><br><span class="line">  <span class="built_in">bool</span> bold,</span><br><span class="line">  <span class="built_in">bool</span> hidden</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(bold);</span><br><span class="line">  <span class="built_in">print</span>(hidden);</span><br><span class="line">&#125;</span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>, hidden: <span class="keyword">false</span>); <span class="comment">// true false</span></span><br><span class="line">enableFlags(hidden: <span class="keyword">false</span>, bold: <span class="keyword">true</span>); <span class="comment">// true false</span></span><br><span class="line">enableFlags(hidden: <span class="keyword">false</span>); <span class="comment">// null false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种对参数的顺序有严格要求, []表示可选参数</span></span><br><span class="line"><span class="keyword">void</span> enableFlags2(<span class="built_in">bool</span> bold, <span class="built_in">bool</span> hidden, [<span class="built_in">String</span> device]) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">enableFlags2(<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">&#x27;device&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;</span><br><span class="line">  <span class="built_in">bool</span> bold= <span class="keyword">false</span>,</span><br><span class="line">  <span class="built_in">bool</span> hidden= <span class="keyword">false</span>,</span><br><span class="line">&#125;) &#123;&#125;</span><br><span class="line">enableFlags(hidden: <span class="keyword">true</span>); <span class="comment">// false true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也可以用 list 和 map作为默认参数</span></span><br><span class="line"><span class="keyword">void</span> doStuff(&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">const</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; gifts = <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;paper&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;cotton&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;third&#x27;</span>: <span class="string">&#x27;leather&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;list: <span class="subst">$list</span>&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;gifts: <span class="subst">$gifts</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h2><p>每个app都需要在最顶层提供一个<code>main</code>函数用于入口函数，<code>main</code>函数提供一个void返回值与<code>List&lt;String&gt;</code>参数(参数指的是命令行传入的参数)。</p><h2 id="函数为第一公民"><a href="#函数为第一公民" class="headerlink" title="函数为第一公民"></a>函数为第一公民</h2><p>和js一样，Dart也支持将函数作为参数传给另一个函数（高阶函数）。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> printE(<span class="built_in">int</span> e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach(printE);</span><br></pre></td></tr></table></figure><h2 id="匿名函数、作用域与闭包"><a href="#匿名函数、作用域与闭包" class="headerlink" title="匿名函数、作用域与闭包"></a>匿名函数、作用域与闭包</h2><p>这几个和js是一样的，没啥好说</p><p>对词法作用域和动态作用域有疑问的可以看<a href="https://github.com/mqyqingfeng/Blog/issues/3">这篇</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach((item)=&gt; <span class="built_in">print</span>(item));</span><br><span class="line">list.forEach((item) &#123;<span class="built_in">print</span>(item);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 词法作用域</span></span><br><span class="line">a() &#123;</span><br><span class="line">  <span class="keyword">var</span> a1 = <span class="keyword">true</span>;</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="keyword">var</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">    c() &#123;</span><br><span class="line">      <span class="keyword">var</span> c1 = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">assert</span>(a1);</span><br><span class="line">      <span class="keyword">assert</span>(b1);</span><br><span class="line">      <span class="keyword">assert</span>(c1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// Create a function that adds 2.</span></span><br><span class="line">  <span class="keyword">var</span> add2 = makeAdder(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a function that adds 4.</span></span><br><span class="line">  <span class="keyword">var</span> add4 = makeAdder(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(add2(<span class="number">3</span>) == <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">assert</span>(add4(<span class="number">3</span>) == <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数类型-Testing-functions-for-equality"><a href="#函数类型-Testing-functions-for-equality" class="headerlink" title="函数类型(Testing functions for equality)"></a>函数类型(Testing functions for equality)</h2><p>看着自己理解一下就好</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> foo() &#123;&#125; <span class="comment">// A top-level function</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> bar() &#123;&#125; <span class="comment">// A static method</span></span><br><span class="line">  <span class="keyword">void</span> baz() &#123;&#125; <span class="comment">// An instance method</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing top-level functions.</span></span><br><span class="line">  x = foo;</span><br><span class="line">  <span class="keyword">assert</span>(foo == x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing static methods.</span></span><br><span class="line">  x = A.bar;</span><br><span class="line">  <span class="keyword">assert</span>(A.bar == x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing instance methods.</span></span><br><span class="line">  <span class="keyword">var</span> v = A(); <span class="comment">// Instance #1 of A</span></span><br><span class="line">  <span class="keyword">var</span> w = A(); <span class="comment">// Instance #2 of A</span></span><br><span class="line">  <span class="keyword">var</span> y = w;</span><br><span class="line">  x = w.baz;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// These closures refer to the same instance (#2),</span></span><br><span class="line">  <span class="comment">// so they&#x27;re equal.</span></span><br><span class="line">  <span class="keyword">assert</span>(y.baz == x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// These closures refer to different instances,</span></span><br><span class="line">  <span class="comment">// so they&#x27;re unequal.</span></span><br><span class="line">  <span class="keyword">assert</span>(v.baz != w.baz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>函数都会返回一个值，如果没有指定的话，则会返回null。_<code>Dart</code>里面没有<code>undefined</code>的概念，目前看来所有对于js的<code>undefined</code>都可以替换成<code>null</code>_</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo() &#123;&#125;</span><br><span class="line"><span class="keyword">assert</span>(foo() == <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="类型测试运算符"><a href="#类型测试运算符" class="headerlink" title="类型测试运算符"></a>类型测试运算符</h2><p><code>as</code>、<code>is</code>、<code>is!</code>类似 <code>instanceof</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> firstName= <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> Person) &#123; <span class="comment">// true</span></span><br><span class="line">  a.firstName = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b <span class="keyword">is</span>! Person) &#123; <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;b is not person&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 if (a is Person) xxx 的缩写</span></span><br><span class="line"><span class="comment">// 如果 a 是 Person的实例，就会执行 firstName = &#x27;Bob&#x27;</span></span><br><span class="line"><span class="comment">// 如果 a 不是 Person的实例，会抛错!</span></span><br><span class="line">(a <span class="keyword">as</span> Person).firstName = <span class="string">&#x27;Bob&#x27;</span>; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分配运算符"><a href="#分配运算符" class="headerlink" title="分配运算符"></a>分配运算符</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = value; <span class="comment">// 直接把value分配给a</span></span><br><span class="line">b ??= value; <span class="comment">// 如果b为null，则分配value给b，否则不改变。这里经常是函数里面的默认值处理，类似js的 var obj = obj || &#123;&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// condition? expr1: expr2</span></span><br><span class="line"><span class="keyword">var</span> vis = isPublic? <span class="string">&#x27;public&#x27;</span>: <span class="string">&#x27;private&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expr1?? pxpr2 如果expr1为Null，就返回expr2，否则是expr1。有点类似加强版的js里面的 a=&gt; a || &#x27;test&#x27;</span></span><br><span class="line"><span class="built_in">String</span> playName(<span class="built_in">String</span> name)=&gt; name?? <span class="string">&#x27;guest&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="Cascade-notation"><a href="#Cascade-notation" class="headerlink" title="Cascade notation"></a>Cascade notation</h2><p><code>Cascade(..)</code> 有点像链式写法的语法糖,允许您对同一对象进行一系列操作,不得不说这些语法糖真骚…</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .. 写法</span></span><br><span class="line">querySelect(<span class="string">&#x27;#confirm&#x27;</span>)</span><br><span class="line">  ..text = <span class="string">&#x27;Confirm&#x27;</span></span><br><span class="line">  ..classes.add(<span class="string">&#x27;important&#x27;</span>)</span><br><span class="line">  ..onClick.listen((e)=&gt; <span class="built_in">window</span>.alter(<span class="string">&#x27;Confirmed!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">querySelector</span>(<span class="string">&#x27;#confirm&#x27;</span>);</span><br><span class="line">button.text = <span class="string">&#x27;Confirm&#x27;</span>;</span><br><span class="line">button.classes.add(<span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">button.onClick.listen((e)=&gt; <span class="built_in">window</span>.alter(<span class="string">&#x27;Confirmed!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你还可以随意嵌套</span></span><br><span class="line"><span class="keyword">final</span> addressBook = (AddressBookBuilder()</span><br><span class="line">  ..name = <span class="string">&#x27;jenny&#x27;</span></span><br><span class="line">  ..email = <span class="string">&#x27;jsonz@qq.com&#x27;</span></span><br><span class="line">  ..phone = (</span><br><span class="line">    PhoneNumberBuilder()</span><br><span class="line">      ..number = <span class="string">&#x27;13560042631&#x27;</span></span><br><span class="line">      ..label = <span class="string">&#x27;phone&#x27;</span></span><br><span class="line">      .build()</span><br><span class="line">  )</span><br><span class="line">  .build();</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h2><p><code>()</code> 函数调用<br><code>[]</code> list<br><code>.</code> 属性<br><code>?.</code> 一般用于属性赋值，比如 <code>person?.name = &#39;jsonz&#39;</code>（如果person不为null, 则设置person.name为jsonz，避免左边person为null时报错）。</p><h1 id="控制流程语句"><a href="#控制流程语句" class="headerlink" title="控制流程语句"></a>控制流程语句</h1><p>这里只会挑与js不同的来讲</p><h2 id="if-else"><a href="#if-else" class="headerlink" title="if..else"></a>if..else</h2><p>不同点是<code>Dart</code>不会隐式转换，所以判断的内容只能是布尔值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> collection) &#123;</span><br><span class="line">  <span class="built_in">print</span>(x); <span class="comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while-amp-amp-do-while"><a href="#while-amp-amp-do-while" class="headerlink" title="while &amp;&amp; do-while"></a>while &amp;&amp; do-while</h3><h3 id="break-amp-amp-continue"><a href="#break-amp-amp-continue" class="headerlink" title="break &amp;&amp; continue"></a>break &amp;&amp; continue</h3><p>break 停止循环<br>continue跳过当前次，进行下一次循环</p><h2 id="Switch-amp-amp-case"><a href="#Switch-amp-amp-case" class="headerlink" title="Switch &amp;&amp; case"></a>Switch &amp;&amp; case</h2><p>switch 可以对比 <code>string</code>、<code>number</code>、<code>bool</code>但是不能混着用。</p><h2 id="Assert-断言"><a href="#Assert-断言" class="headerlink" title="Assert(断言)"></a>Assert(断言)</h2><p>写过单元测试的应该对<code>assert</code>不陌生，如果布尔条件为<code>false</code>则<code>assert</code>会中断执行。<br>不过只会在开发模式起作用，生产环境不会执行。</p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="Throw-抛错"><a href="#Throw-抛错" class="headerlink" title="Throw 抛错"></a>Throw 抛错</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> FormatException(<span class="string">&#x27;expected at least 1 section&#x27;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;out of llamas!&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">on</span> OutOfLlamasException &#123;</span><br><span class="line">  <span class="comment">// A specific exception</span></span><br><span class="line">  buyMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">on</span> Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// Anything else that is an exception</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Unknown exception: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e, s) &#123;</span><br><span class="line">  <span class="comment">// No specified type, handles all</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Something really unknown: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Stack trace: \n <span class="subst">$s</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  someThing()</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Error: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  clean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Dart 学习记录</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Dart" scheme="http://jsonz1993.github.io/tags/Dart/"/>
    
    <category term="Flutter" scheme="http://jsonz1993.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>April</title>
    <link href="http://jsonz1993.github.io/April/"/>
    <id>http://jsonz1993.github.io/April/</id>
    <published>2019-04-15T10:13:29.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p>在深圳回广州的高铁上写的</p><p>四月份好像过的特别混</p><h1 id="关于自考"><a href="#关于自考" class="headerlink" title="关于自考"></a>关于自考</h1><p>自考的情况 emmm 高数和概率论直接缺考，因为去了大概率是发呆两小时，还不如做其他事情。<br>数据结构比想象中的简单，虽然自己的算法不怎么样，但是考试好像对算法要求不高，剩下的就是考80分还是90分的区别了<br>马克思主义基本概论概述 emmmm 这个玩意，背的东西不考，考的东西没背，希望能低分飘过吧</p><p>接下来应该会选 <code>软件工程</code>还有一科关于计算机基础的，还有一科数学相关，一科待考虑。十月份加油💪，就算过四科今年的计划也完成不了 ╮(╯▽╰)╭</p><h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><p>已经接近两个月没有敲代码了，怕下周一入职时要被炒…一直想着万一人家发现我是菜鸡炒了我不是很尴尬。<br>从广州搬去深圳，之前交的社保、公积金啥的其实基本上就废了。其实有点像断了自己后路了，如果下一份工作不能进到理想的公司，那其实基本上就很难再上升，到时候再出去就要背外包的背景了。</p><p>面了CDC之后就没有投简历，不过清明过后还是去面了两家：fordeal和YY</p><h2 id="fordeal"><a href="#fordeal" class="headerlink" title="fordeal"></a>fordeal</h2><p>fordeal是因为给的待遇实在是诱人，技术面电话聊了一个多小时之后过了。hr面现场聊了一小时，hr说他纠结，让我再和他老大电话面多一轮，还是挂了。<br>hr面一直问的就是希望下一家公司能给你什么…emmm我也没啥高要求，技术好点，大家有点追求就好了。</p><p>挂了还是挺可惜的，毕竟一年最多18个月摆在那里，不心动是假的</p><h2 id="YY"><a href="#YY" class="headerlink" title="YY"></a>YY</h2><p>YY的话，不得不说max对我挺好的，在拉勾看到我投简历之后就在微信和我聊了一下，让我直接去面试。面试的时候也没有具体聊技术，也不用再做笔试题了，就问了我</p><blockquote><p>和去年对比你成长了什么？</p></blockquote><p>这简直是灵魂拷问啊…比强哥的年终绩效考核还尴尬…翻了18年的年中和年终的绩效考核表，发现说其实技术没有长进，平时也只是做一些业务性的需求，虽然这也是想离职的原因，但是归根到底还是自己太弱了。</p><p>如果真的自己有足够的决心想去改变这些东西，肯定也是可以解决的，强哥也没有限制我的发挥，所以最终还是自己选择安逸一直摸鱼。</p><p>emmm 不过max也没让我难堪哈哈哈，还是让另一个同事进行二面。聊了下接下来ued的方向是webgl。这一块一来不是我感兴趣的方向；二来我最近深知自己数学渣，确实没有信心做。</p><p>最后max走了通道帮我推了其他部门，hr打电话说</p><blockquote><p>ued的同事把你简历推给我，说技术挺不错，人也靠谱</p></blockquote><p>那心里简直是乐滋滋的 哈哈哈哈。不过今天已经在深圳租了房子，所以就算了，不打算再面试了。yy ued估计以后是没有机会再进了，后面再做就是四五年经验，可能以后都是走业务这一块路线了。</p><h2 id="CDC"><a href="#CDC" class="headerlink" title="CDC"></a>CDC</h2><p>emmmm 其实选择去深圳做外包仔不继续面的一个很大的原因是，leader给我的感觉很靠谱，我是一个比较挑leader的人（面租租车入职是因为是贤哥面我的，技术人都贼靠谱）。<br>然后cdc leader有几个细节点</p><p>第一个是直属leader在微信和我说了 <strong>后续你往移动端方向发展吧，到时应该是我做你导师</strong> 。这个细节是因为我在面试的时候，说了我后面个人比较期望的方向一个是native方向，一个是server方向。zawa记住了 &amp;&amp; 和我说了，所以当时就心动了一下，然后苏三同学也说这人给她的感觉是 __靠谱，不是浮夸的人__。虽然 max和jl给我的感觉也很不错，不过方向不同就以后有机会再见吧。</p><p>第二个是leader’s leader 在面试的时候和我聊了很多比较实在的问题，人一看就比较实在 和我一样。个人比较喜欢在这种氛围工作和成长。</p><p>希望接下来的工作可以用上永哥教我的那些东西，从自我管理做储备，扩展到以后项目管理上🐶</p><h1 id="关于租房"><a href="#关于租房" class="headerlink" title="关于租房"></a>关于租房</h1><p>租房这事情真的很看缘分，本来找了几个白石洲的，几个固戍的，最后看完白石洲的 就不想再跑关外去看固戍，想着既然都是租房，就不要让自己那么累整天坐那么久地铁，加上想着以后自己应该大概率995，所以在宿舍的时间可能也没有特别长就不追求住大面积了。</p><p>最后选了一个在白石洲地铁5分钟路程的小区，2300+200 在一楼面积估计加起来不到8平方，不过有厨房，有阳光，房间看起来相对干净一个人住够了。<br>以后如果说买个平衡车，上下班估计都不需要去挤地铁，也是值了。</p><h1 id="关于2019"><a href="#关于2019" class="headerlink" title="关于2019"></a>关于2019</h1><p>emmm 最近确实感觉到自己懒惰了不少，好像没有工作之后，生活反而变得不规律，每天划水摸鱼玩游戏。<br>github和blog也没有更新什么东西，白白浪费了这一个多月的时间。<br>2019已经过了1/3, 19年的五个计划目前只完成了两个。</p><p>告辞！</p>]]></content>
    
    
    <summary type="html">四月的牢骚...</summary>
    
    
    
    <category term="live" scheme="http://jsonz1993.github.io/categories/live/"/>
    
    
    <category term="Live" scheme="http://jsonz1993.github.io/tags/Live/"/>
    
  </entry>
  
  <entry>
    <title>march say</title>
    <link href="http://jsonz1993.github.io/march-say/"/>
    <id>http://jsonz1993.github.io/march-say/</id>
    <published>2019-03-27T21:41:58.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p>怀疑今年是不是本命年，三月初裸辞之后先练了一个星期的车，顺手把车证考了。</p><p>考完车证之后投简历，和上次裸辞一样，一开始特别方，海投一堆公司，只要有面试都先答应着，每天开始焦虑提不起精神做其他事情。</p><p>面过几家之后心态开始慢慢好起来。</p><p>一方面现在互联网环境怎样？或者说前端广州这边的市场怎样？</p><p>偏饱和，看招聘要求越来越高就知道了，绝大部分是本科起，工作经验五年起。<br>但是这种情况只出现在大厂或者比较大的公司，小公司还是很有经验的人（小公司指不到500人）。</p><p>第二方面是去面试的公司大部分都能过技术面，所以或多或少多了一点点信心吧。</p><p>算了下大大小小面了十家公司，能到人事的有七家。但是我到现在工作经验不算实习不算空窗实打实也有三年多…所以对下一家要求挺高的，希望是进大厂的最后一块跳板，加上自己对公司比较挑，又不想外包，又想公司氛围好人性化，又想技术氛围好，又想团队有大牛，又想有个人时间学习成长，又想有符合期望的薪资，又想离家近….</p><p>之前上周微信收到一个大佬加好友的请求</p><p>我的天！！！！居然是腾讯的！！！喊我去面试！！！我都还没有本科 怎么可能！！！！<br>反正开心了几天，把接下来的面试全拒了直接说有心仪的offer，然后周一晚上开心到睡不着觉三点才睡，想着如果过了的话，我要怎么搬过去，背调填谁比较好，真的就像某些段子里面写的：“见到你的时候连孩子的名字都想好了”。<br>然后周二七点起了个大早搭高铁先去附近吃麦当劳发发呆等面试。</p><p>进到会议室等面试的时候为了让自己不那么紧张一直站着深呼吸，一面技术面虽然不是很满意但是好像也过了。<br>面试官：有什么想问的吗？<br>我说： 听说腾讯的面试流程挺久的，是这样的吗？<br>面试官看着我说：你这里的学历自考还没考完，我们这里有正编也有外包岗…<br>那时候心情真是过山车🎢，瞬间明白和之前面uc遇到一样的问题，原来面的是外包岗….</p><p>不过面试官挺好的，没有直接点明我太菜了只能进外包，而是说学历问题 哈哈哈<br>但是不知道是不是对腾讯有莫名的执着，所以没有像当时面uc一样直接走人，还是想继续面下去，可能是其毅大哥就在腾讯的缘故吧</p><p>二面面试官也特别实在，和我聊了对我的建议和外包注意的事情之类的。</p><p>想想我从第一份工作到现在遇到的老大都很不错，所以其实想不想入职很大程度是看leader对不对眼</p><p>在三月的尾巴，总结一下这个操蛋的三月。</p><ol><li>驾驶证到手，比预想的提前一个月，算是19年的目标完成一个</li><li>找工作高不成低不就的，最大的要求还是要能成长，公司人性化</li><li>不出意外的话下一份工作就可以完成19年的第二个目标</li><li>自从面了cdc那个之后就不怎么想继续面试找工作了，可能觉得后面那些面试都没有在腾讯里面学习成长快，虽然在之前外包之后已经决定不再找外包了，也觉得外包很容易被人鄙视….唉 加油咯</li><li>19年的第三个目标是完成不了了，高数和概论比想象中的要难， 太低估他们了</li><li>最近接触《数据结构》和typescript，有种相见恨晚的感觉，慢慢开始明白计算机基础好的人的优势在哪里</li></ol><p>最后，希望19年接下来是一段新的突破期，尽力完成19年的最后一个目标！ 告辞 加油</p>]]></content>
    
    
    <summary type="html">三月的牢骚</summary>
    
    
    
    <category term="live" scheme="http://jsonz1993.github.io/categories/live/"/>
    
    
    <category term="Live" scheme="http://jsonz1993.github.io/tags/Live/"/>
    
  </entry>
  
  <entry>
    <title>typescript初体验</title>
    <link href="http://jsonz1993.github.io/typescript_experience/"/>
    <id>http://jsonz1993.github.io/typescript_experience/</id>
    <published>2019-03-22T22:09:56.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p>忍不住要记录一下，<code>typescript</code>简直是神器!!!</p><p>最近在看自考的《数据结构》，里面的代码是<code>C</code>写的，虽然看着挺好理解，但是就是记不住。所以想着还是要自己敲一遍才行，但是C断点调试太麻烦了（其实是我还没有看怎么断掉调试），虽然环境搭好了，但是感觉还是很多不习惯。</p><p>所以想着干脆用js来实现，然后又想着<code>C</code>有那么多类型，干脆我用<code>typescript</code>来实现一下也可以，给我的感觉<code>typescript</code>就很像<code>java</code>和<code>javascript</code>的组合，刚好之前学过一小点<code>java</code>的语法，对<code>java</code>的强类型挺喜欢的。</p><p>学<code>ts</code>这个网站<a href="https://ts.xcatliu.com/">https://ts.xcatliu.com</a>看完基本上都可以上手了，复杂一点的可能要慢慢补，<code>antD</code>仓库的代码就都是<code>ts</code>。</p><p>然后!!!!关键点来了!!! ts的提示比我想象中的爽超级多！</p><p>超级爽的代码注释 &amp;&amp; 参数提示<br><img data-src="/typescript_experience/ts1.png" alt="代码提示"></p><p>值类型上方法的提示<br><img data-src="/typescript_experience/ts2.png" alt="类型方法提示"></p><p>简直是大型开发或多人开发的神器，注释的规范可以参照这个<a href="https://github.com/fex-team/styleguide/blob/master/javascript.md#24-%E6%B3%A8%E9%87%8A">fex-team</a> 告辞！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;忍不住要记录一下，&lt;code&gt;typescript&lt;/code&gt;简直是神器!!!&lt;/p&gt;
&lt;p&gt;最近在看自考的《数据结构》，里面的代码是&lt;code&gt;C&lt;/code&gt;写的，虽然看着挺好理解，但是就是记不住。所以想着还是要自己敲一遍才行，但是C断点调试太麻烦了（其实是我还没有看怎么断掉调试），虽然环境搭好了，但是感觉还是很多不习惯。&lt;/p&gt;
&lt;p&gt;所以想着干脆用js来实现，然后又想着&lt;code&gt;C&lt;/code&gt;有那么多类型，干脆我用&lt;code&gt;typescript&lt;/code&gt;来实现一下也可以，给我的感觉&lt;code&gt;typescript&lt;/code&gt;就很像&lt;code&gt;java&lt;/code&gt;和&lt;code&gt;javascript&lt;/code&gt;的组合，刚好之前学过一小点&lt;code&gt;java&lt;/code&gt;的语法，对&lt;code&gt;java&lt;/code&gt;的强类型挺喜欢的。&lt;/p&gt;
&lt;p&gt;学&lt;code&gt;ts&lt;/code&gt;这个网站&lt;a href=&quot;https://ts.xcatliu.com/&quot;&gt;https://ts.xcatliu.com&lt;/a&gt;看完基本上都可以上手了，复杂一点的可能要慢慢补，&lt;code&gt;antD&lt;/code&gt;仓库的代码就都是&lt;code&gt;ts&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后!!!!关键点来了!!! ts的提示比我想象中的爽超级多！&lt;/p&gt;
&lt;p&gt;超级爽的代码注释 &amp;amp;&amp;amp; 参数提示&lt;br&gt;&lt;img data-src=&quot;/typescript_experience/ts1.png&quot; alt=&quot;代码提示&quot;&gt;&lt;/p&gt;
&lt;p&gt;值类型上方法的提示&lt;br&gt;&lt;img data-src=&quot;/typescript_experience/ts2.png&quot; alt=&quot;类型方法提示&quot;&gt;&lt;/p&gt;
&lt;p&gt;简直是大型开发或多人开发的神器，注释的规范可以参照这个&lt;a href=&quot;https://github.com/fex-team/styleguide/blob/master/javascript.md#24-%E6%B3%A8%E9%87%8A&quot;&gt;fex-team&lt;/a&gt; 告辞！&lt;/p&gt;
</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Typescript" scheme="http://jsonz1993.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>quicklink学习以及结合React</title>
    <link href="http://jsonz1993.github.io/quicklink/"/>
    <id>http://jsonz1993.github.io/quicklink/</id>
    <published>2019-02-26T19:49:46.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>谷歌团队在几个月前开源了一个项目，叫<a href="https://github.com/GoogleChromeLabs/quicklink"><code>quicklink</code></a>。官方给出的介绍是</p><blockquote><p>Faster subsequent page-loads by prefetching in-viewport links during idle time</p></blockquote><p>这里简单的介绍一下这个项目，并且说明一下为什么我需要fork这个项目~</p><p>quicklink的源码很简洁，作用可以用一句话总结: <strong>利用空闲时间来缓存界面上看到的链接，加快这些链接的访问速度。</strong></p><p><strong>所以quicklink的作用是在下一个链接快速打开，而不是当前链接，这一点和很多其他优化都不一样。</strong></p><p>原理很简单:</p><ul><li>获取页面上所有的A标签（注意，这里的a标签指的是调用函数的时候document下的a标签）</li><li>等待浏览器空闲 (requestIdleCallback 或者用 setTimeout 做兼容)</li><li>利用 IntersectionObserver 做监控，当监控的dom进入视图，就开始预加载</li><li>与获取视图内的URL(<code>&lt;link rel=&quot;prefetch&quot;&gt;</code> or <code>XHR</code> or <code>fetch</code>)，以获得快速访问该链接的效果</li></ul><p>代码真的很简洁，很棒，这边没必要再贴出来，有兴趣的直接github fork一个去看或修改，除去注释代码量加起来不到200行</p><h1 id="forked"><a href="#forked" class="headerlink" title="forked"></a>forked</h1><p>我fork该项目之后修改了一些东西 </p><h2 id="默认添加了polyfill，直接打到包里"><a href="#默认添加了polyfill，直接打到包里" class="headerlink" title="默认添加了polyfill，直接打到包里"></a>默认添加了polyfill，直接打到包里</h2><p>为什么要加polyfill呢？ 因为<code>IntersectionObserver</code> 虽然好用，但是pc端<code>IE11</code>都不支持，移动端也要到了<code>IOS12 safari</code>才支持…支持面太窄了而且不用polyfill的话，直接报错….所以权衡之下，干脆直接全量引用<code>IntersectionObserver</code>的polyfill，gzip情况下整个包加起来才<code>3.5k</code> 值了。</p><h2 id="添加了quicklink全局配置"><a href="#添加了quicklink全局配置" class="headerlink" title="添加了quicklink全局配置"></a>添加了quicklink全局配置</h2><p>在包里写了 <code>quicklinkOptions</code> 对象，这样每次调用 <code>quicklink</code> 的时候就可以公用一些配置，而不需要每次调用都塞一样的配置进去,至于为什么提到每次调用…后面会解释到</p><h2 id="添加了manualPreFetch方法：-手动绑定某些dom监听"><a href="#添加了manualPreFetch方法：-手动绑定某些dom监听" class="headerlink" title="添加了manualPreFetch方法： 手动绑定某些dom监听"></a>添加了manualPreFetch方法： 手动绑定某些dom监听</h2><p><code>manualPreFetch</code> 方法，就是手动的意思，支持传入这些参数<code>&#123;dom, isForce, link, priority&#125;</code>。<br>为什么需要加多个方法呢？ 因为我发现 quicklink 只支持扫<code>&lt;a&gt;</code>标签去获取link，但是很多情况可能我们不是用a标签，而是类似写一个<code>button</code>，点击之后js控制跳转。 虽然说我们可以在代码层用button包a链接等方式去实现，但是这样就太局限了，所以才加了个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;跳转到xxx&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">manualPreFetch(&#123;</span><br><span class="line">  <span class="attr">dom</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>),</span><br><span class="line">  <span class="attr">link</span>: <span class="string">&#x27;www.easyrentcars.com&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>该方法和 <code>quicklink</code> 一样，也是监听dom滚到当前位置才会发起预加载。这里会读取一部分的<code>quicklinkOptions</code>，这就是我加多个全局配置的原因了，不需要每次调用的时候都写一堆</p><h2 id="增加了manualRemovePreFetch方法：-手动删除监听预加载"><a href="#增加了manualRemovePreFetch方法：-手动删除监听预加载" class="headerlink" title="增加了manualRemovePreFetch方法： 手动删除监听预加载"></a>增加了manualRemovePreFetch方法： 手动删除监听预加载</h2><p>添加个移除的方法，只是简单的移除掉要监听的dom，虽然对性能不会造成影响…但是就是有点强迫症鸭🦆</p><h2 id="React-demo"><a href="#React-demo" class="headerlink" title="React demo"></a>React demo</h2><p><code>quicklink</code>是在执行的时候用 <code>(el || document).getQuesySelectorAll(&#39;a&#39;)</code> 去获取页面上的<code>&lt;a&gt;</code>，所以对于React就比较尴尬了，渲染是异步的，如果调用早的话，肯定是拿不到，那什么时候调用这个才是最佳时机?</p><p><strong>比较通用的是<code>componentDidMount</code> 或者是<code>UseEffect</code>。不过个人比较建议配合<code>manualPreFetch</code>、<code>manualRemovePreFetch</code>对一些比较重要的加就好了，因为很多都是异步之后再渲染，可能 <code>componentDidMount</code>的时候，你需要预加载的链接还没出现。</strong></p><p>这里简单给出两个关于React的通用demo。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> quicklink, &#123; manualPreFetch, manualRemovePreFetch&#125; <span class="keyword">from</span> <span class="string">&#x27;@jsonz/quicklink&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuicklinkComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.refRoot = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// didMount 监听组件内所有的a链接</span></span><br><span class="line">    quicklink(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="built_in">this</span>.refRoot.current,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// willunmount 移除所有的a链接监听</span></span><br><span class="line">    batchManualRemove(<span class="built_in">this</span>.refRoot.current);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.refRoot&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook 类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuicklinkDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> refRoot = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    quicklink(&#123;</span><br><span class="line">      <span class="attr">el</span>: refRoot.current,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> &#123;</span><br><span class="line">      batchManualRemove(refRoot.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;refRoot&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-1-致夭折的小ql"><a href="#3-1-致夭折的小ql" class="headerlink" title="3.1 致夭折的小ql"></a>3.1 致夭折的小ql</h1><p>本来已经加在项目上，打算拿一个项目/页面来试点，不过最后被说服暂时不用，原因有三</p><ol><li>quicklink 可能会对后端造成不小的压力，比如你的网站一打开，滑到最底部，那中间可能就会预加载20个链接….然而用户可能一个都不打开就关闭，那就白白给服务器添加20个请求，对于量比较大的网站，可能会很坑爹。总结来说就是命中率太低，不过可以改成做针对性的预加载，比如下单页预加载支付页的。</li><li>只能预加载document，对于页面上占大头的js引用等静态资源没有起作用。效果可能对于实用站点不明显，对文章类会好很多。</li><li>针对前面两种情况，好像pwa能做的会更多？ 所以如果是过渡方案或文字类(document)资源占比比较多的用quicklink比较好。</li></ol><p>但是项目上的pwa比较残疾，之前做的同事做了一版之后就离职了…一直没人去维护，所以pwa要被提上日程？</p><blockquote><p>补一个问题，我直接在quicklink内打polyfill不是很好，因为如果项目上也引用这个Polyfill就会重复了。</p></blockquote><p>告辞</p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="JavaScript" scheme="http://jsonz1993.github.io/tags/JavaScript/"/>
    
    <category term="性能优化" scheme="http://jsonz1993.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>利用AST解决项目webpack alias泛滥问题</title>
    <link href="http://jsonz1993.github.io/AST-practice/"/>
    <id>http://jsonz1993.github.io/AST-practice/</id>
    <published>2019-01-24T11:57:58.000Z</published>
    <updated>2021-05-29T15:24:10.596Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/wheel/tree/master/ast-webpack-alias">文章代码的源码仓库</a></p><h1 id="AST-简单介绍"><a href="#AST-简单介绍" class="headerlink" title="AST 简单介绍"></a>AST 简单介绍</h1><p>AST(Abstract Syntax Tree)既抽象语法树，或称语法树，简单来说就是代码语法结构的一种抽象表示。比如 <code>var answer = 6 * 7;</code> 会被解析为这么一棵树<br><img data-src="./ast_wiki.png" style="width: 320px; border: none; display: inline-block;"><img data-src="./ast_esprima.png" style="width: 200px; border: none; display: inline-block;"></p><p>那么代码怎样才能解析成这一棵 AST， AST在前端领域一般又可以干嘛？</p><h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><p>__ast是由编译器解析生成的__，简单的编译器可以由以下几部分组成:</p><ul><li>tokenizer 分词器 把代码或文本按类型分开，返回: <code>tokens</code></li><li>parser 语法剖析器 对分词后的文本按照语法分析转换成 抽象语法树 返回：ast</li><li>transformer 语法转换器 把语法剖析后的抽象语法树转换成我们想要的: newAst</li><li>codeGenerator 代码生成器 把AST 转换为 目标代码</li></ul><p>我们前端构建中很常用的babel就是这种原理</p><blockquote><p>babel 初始阶段并没有做任何事，基本上等于 const babel = code=&gt; code; 先 tokenizer， parser 解析代码，再 transformer 的时候，完全不改动原来的 ast</p></blockquote><p><strong>对编译器原理有兴趣的，可以看我以前写的小demo，500行简单易懂 <a href="https://github.com/jsonz1993/wheel/blob/master/min-compiler/README.md">min-compiler</a>，看完会有个整体概念。</strong></p><p>而生成的AST我们可以用来做什么？<br>AST你都拿到了，剩下的事情就是对这棵树做你想要的操作，比如代码转换(babel)，代码压缩等。</p><p>这里我用他来处理webpack的alias泛滥问题。</p><h1 id="webpack-alias问题"><a href="#webpack-alias问题" class="headerlink" title="webpack alias问题"></a>webpack alias问题</h1><p>webpack alias 在很多情况下可以提供便利，但是如果项目参加的人太多，又没有什么约束，大家贪图方便什么都加到alias….就会变成这样子<br><img data-src="./old_alias.png" /></p><ul><li>很多你不知道他到底是node_modules里面的包还是自己封装过的</li><li>很多写二级路径就可以获取到的，没必要多加个alias</li><li>现在比较推崇不是很远的路径都写成相对路径，编辑器可以直接跳过去方便（虽然这个可以通过jsconfig来解决，但是太多看着也很烦)<br>所以我决定把项目里的alias从23个缩减为7个。</li></ul><h1 id="利用-estools-解决webpack-Alias"><a href="#利用-estools-解决webpack-Alias" class="headerlink" title="利用 estools 解决webpack Alias"></a>利用 <a href="https://github.com/estools">estools</a> 解决webpack Alias</h1><p>我们先来整理一下思路</p><ul><li>先用解析器把代码解析成 AST</li><li>再找出我们需要去除的alias，把他改为其他值，生成新的AST</li><li>把新的AST转为代码，重新写入文件</li></ul><p>我们这里的把alias改为其他值，指的是这种情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">目录结构:</span><br><span class="line">- src</span><br><span class="line">  - components</span><br><span class="line">    - btn</span><br><span class="line"></span><br><span class="line">alias: &#123;</span><br><span class="line">  btn: path.resolve(basepath, &#x27;src/components/btn&#x27;),</span><br><span class="line">  btn: path.resolve(basepath, &#x27;src/components&#x27;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">原来的引入 import Btn from &#x27;btn&#x27;;</span><br><span class="line">改为 import Btn from &#x27;components/btn&#x27;;</span><br></pre></td></tr></table></figure><p>这里我们用 <a href="https://github.com/jquery/esprima">esprima</a> 来做代码分析生成ast，用 <a href="https://github.com/estools/estraverse">estraverse</a> 来转换代码，用 <a href="https://github.com/estools/escodegen">escodegen</a> 生成代码。直接上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aliasConfig = &#123; <span class="comment">/* webpack alias 配置*/</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateAlias</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析ast</span></span><br><span class="line">  <span class="keyword">const</span> codeStr = fs.readFileSync(filePath).toString();</span><br><span class="line">  <span class="keyword">const</span> ast = esprima.parseModule(codeStr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换ast</span></span><br><span class="line">  estraverse.traverse(ast, &#123;</span><br><span class="line">    <span class="comment">// 对于每个node节点都会进入这个函数</span></span><br><span class="line">    <span class="function"><span class="title">enter</span>(<span class="params">node, parent</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 判断是否是我们的目标文件</span></span><br><span class="line">      <span class="keyword">const</span> isAliasDec = isRequireDeclaration(node, parent);</span><br><span class="line">      <span class="keyword">if</span> (isAliasDec) &#123;</span><br><span class="line">        <span class="comment">// 替换掉alias =&gt; newAlias</span></span><br><span class="line">        <span class="keyword">const</span> newVal = getModulePath(node.value, filePath);</span><br><span class="line">        node.value = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重新生成代码</span></span><br><span class="line">  <span class="keyword">const</span> newCodeStr = escodegen.generate(ast);</span><br><span class="line">  fs.writeFileSync(filePath, newCodeStr, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具函数: 判断是否是 require</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRequireDeclaration</span>(<span class="params">node, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, value &#125; = node;</span><br><span class="line">  <span class="keyword">const</span> &#123; callee &#125; = parent || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 类型一致 &amp;&amp; 该key在aliasKey中 &amp;&amp; 是 require引入的</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    type === <span class="string">&#x27;Literal&#x27;</span> &amp;&amp;</span><br><span class="line">    aliasKey.includes(value) &amp;&amp;</span><br><span class="line">    !allowAliasKey.includes(value) &amp;&amp;</span><br><span class="line">    isRequest(callee)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具函数：获取路径</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getModulePath</span>(<span class="params">aliasKey, filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstDir = <span class="regexp">/\w*/</span>.exec(aliasKey)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> modulePath = aliasKey.replace(firstDir, aliasConfig[firstDir]);</span><br><span class="line">  <span class="keyword">const</span> aliasPath = aliasKey.replace(firstDir, aliasMap[firstDir]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!aliasConfig[firstDir] || !aliasMap[firstDir] || allowAliasKey.includes(firstDir)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取引入的模块与当前模块相对路径，判断是否太长，是就返回alias，否则就返回相对路径就完事了</span></span><br><span class="line">  <span class="keyword">const</span> relativePath = path.relative(filePath, modulePath);</span><br><span class="line">  <span class="keyword">const</span> relativeTime = relativePath.split(<span class="string">&#x27;../&#x27;</span>).length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (relativeTime &lt; MAX_RELATIVE)? relativePath: aliasPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">translateAlias(filePath);</span><br></pre></td></tr></table></figure><p><img data-src="/AST-practice/estool.png" alt="estool_ast"><br>试跑了一下，发现说虽然代码引用确实有被替换了，但是代码里面的所有空行和注释都丢了，而且一些规范格式也和原来不一样。<br>这显然是不行的，先不说格式的问题，一个文件连换行和注释都没有，那他就是没有灵魂的js~</p><p>看了下这是因为 <code>esprima</code> 在解析的时候，遇到空行和注释会直接跳过不解析生成AST，所以会导致后面生成的代码没有空行和注释。</p><h1 id="babel解决空行和注释等问题、prettier保持代码风格一致"><a href="#babel解决空行和注释等问题、prettier保持代码风格一致" class="headerlink" title="babel解决空行和注释等问题、prettier保持代码风格一致"></a>babel解决空行和注释等问题、prettier保持代码风格一致</h1><p>我们平时项目上用的最多的转换代码的工具就是babel，那么我们也可以把 <code>esTool</code> 那一套换成 <code>babel</code>生态，用babel来帮我们做这些转换。</p><p>原理和思路基本上是一样的，用 <code>babylon</code> 解析，<code>babel-traverse</code> 转换，再用<code>babel-generator</code>生成代码。<br>生成之后，先不写进去，而是用 <code>prettier</code> 格式化一遍再重写到本地，以保持和原来的风格一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateAlias</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`开始处理第<span class="subst">$&#123;i++&#125;</span>个: <span class="subst">$&#123;filePath&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> code = fs.readFileSync(filePath).toString();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取ast</span></span><br><span class="line">  <span class="keyword">const</span> ast = babylon.parse(code, &#123;</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;objectRestSpread&#x27;</span>]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  traverse(ast, &#123;</span><br><span class="line">    <span class="function"><span class="title">enter</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 转换 CommonJs 的情况</span></span><br><span class="line">      translateRequireModulePath(path, filePath);</span><br><span class="line">      <span class="comment">// 转换 ESM 的情况</span></span><br><span class="line">      translateImportModulePath(path, filePath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newCode = generate(ast, &#123;&#125;);</span><br><span class="line">  <span class="comment">// 重新用项目的prettier配置格式化多一次再写入</span></span><br><span class="line">  <span class="keyword">const</span> prettierCode = prettier.format(newCode.code, prettierConfig);</span><br><span class="line">  fs.writeFileSync(filePath, prettierCode);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`处理结束<span class="subst">$&#123;filePath&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/AST-practice/babel.png" alt="./babel.png"></p><p>到此减少webpack-alias的功能处理完成，最后总结一下</p><ol><li>用<code>glob</code>读取所有要转的js文件</li><li>用 <code>babylon</code> 将js文件解析成AST</li><li>用 <code>babel-traverse</code> 处理AST，判断如果是 <code>require(&#39;xxx&#39;)</code>或者<code>import xxx from &#39;xxx&#39;</code> 替换掉这些路径</li><li>用 <code>babel-generator</code> 将新生成的AST转化为代码</li><li>用 <code>prettier</code> 格式化新生成的代码，保持与原项目风格一致</li><li>重新写入本地文件</li></ol><h1 id="告辞！"><a href="#告辞！" class="headerlink" title="告辞！"></a>告辞！</h1><p><img data-src="/AST-practice/kaiji.jpg" alt="./kaiji.jpg"><br>最后写的时候参考到的链接，大部分是类库的文档<br><a href="https://github.com/jsonz1993">迷你编译器</a><br><a href="https://github.com/estools/escodegen">estools代码生成escodegen</a><br><a href="https://github.com/estools/estraverse">estools代码转换estraverse</a><br><a href="https://github.com/jquery/esprima">代码解析esprima</a><br><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-introduction">babel plugin book</a><br><a href="https://www.npmjs.com/package/babel-generator">babel-generator</a><br><a href="https://www.npmjs.com/package/babel-traverse">babel-traverse</a><br><a href="https://www.npmjs.com/package/babylon">babylon</a><br><a href="http://esprima.org/demo/parse.html">在线ast生成</a><br><a href="http://forivall.com/astexplorer/">在线ast生成</a></p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="Ast" scheme="http://jsonz1993.github.io/tags/Ast/"/>
    
    <category term="Webpack" scheme="http://jsonz1993.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式——刚才明明是好的</title>
    <link href="http://jsonz1993.github.io/regexp-global/"/>
    <id>http://jsonz1993.github.io/regexp-global/</id>
    <published>2018-11-22T22:31:21.000Z</published>
    <updated>2021-05-29T15:24:10.592Z</updated>
    
    <content type="html"><![CDATA[<p>今天测试提一个jira给我，说有一个很诡异的bug，表单验证有时候会成功，有时候会失败。<br><video src="./a.mp4" controls="true" ></video></p><p>而且很有规律性的，两下成功，接着失败，再两下成功，再失败…看代码也没什么问题，<code>\S</code>匹配任何非空字符，<code>g</code>全局查找，这么简单的一个正则怎么可能会出错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r = <span class="regexp">/\S/g</span>;</span><br><span class="line">$input.addEventListener(<span class="string">&#x27;blur&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> result = r.test(e.currentTarget.value);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后直接拿到控制台去测试，发现也有类似的问题，但是如果每次都直接调用正则表达式的test方法，又不会有问题。所以一开始怀疑是把正则对象存起来导致的。<img data-src="./a.png" width="150" /></p><p>后面在 <a href="https://stackoverflow.com/questions/13586786/regexp-test-returns-different-result-for-same-str-depending-on-how-where-i">stackoverflow</a>和 <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#%E5%BD%93%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E6%A0%87%E5%BF%97%E7%9A%84%E6%AD%A3%E5%88%99%E4%BD%BF%E7%94%A8test()'>MDN</a>上找到真正的原因。</p><blockquote><p>当设置全局标志的正则使用test()<br>如果正则表达式设置了全局标志，test() 的执行会改变正则表达式   lastIndex属性。连续的执行test()方法，后续的执行将会从 lastIndex 处开始匹配字符串，(exec() 同样改变正则本身的 lastIndex属性值).</p></blockquote><p>这意思就很明显了，我们每一次搜索匹配中之后，下次就从他的下一位开始执行搜索。<br><img data-src="./b.png"/></p><p>所以最后看业务场景，完全不需要加这个<code>g</code>，直接去掉就算fix了。当然如果你头很铁…一定要加g的话，那也可以每次执行完重置 lastIndex。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r = <span class="regexp">/\S/g</span>;</span><br><span class="line">$input.addEventListener(<span class="string">&#x27;blur&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> result = r.test(e.currentTarget.value);</span><br><span class="line">  <span class="keyword">if</span> (result) r.lastIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em>last 谢谢大钊子和坤少两位同事</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天测试提一个jira给我，说有一个很诡异的bug，表单验证有时候会成功，有时候会失败。&lt;br&gt;&lt;video src=&quot;./a.mp4&quot; controls=&quot;true&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;而且很有规律性的，两下成功，接着失败，再两下成功，再失败…看代码也没什么问题，&lt;code&gt;\S&lt;/code&gt;匹配任何非空字符，&lt;code&gt;g&lt;/code&gt;全局查找，这么简单的一个正则怎么可能会出错。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; r = &lt;span class=&quot;regexp&quot;&gt;/\S/g&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$input.addEventListener(&lt;span class=&quot;string&quot;&gt;&amp;#x27;blur&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)=&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = r.test(e.currentTarget.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后直接拿到控制台去测试，发现也有类似的问题，但是如果每次都直接调用正则表达式的test方法，又不会有问题。所以一开始怀疑是把正则对象存起来导致的。&lt;img data-src=&quot;./a.png&quot; width=&quot;150&quot;&gt;&lt;/p&gt;
&lt;p&gt;后面在 &lt;a href=&quot;https://stackoverflow.com/questions/13586786/regexp-test-returns-different-result-for-same-str-depending-on-how-where-i&quot;&gt;stackoverflow&lt;/a&gt;和 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#%E5%BD%93%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E6%A0%87%E5%BF%97%E7%9A%84%E6%AD%A3%E5%88%99%E4%BD%BF%E7%94%A8test()&quot;&gt;MDN&lt;/a&gt;上找到真正的原因。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当设置全局标志的正则使用test()&lt;br&gt;如果正则表达式设置了全局标志，test() 的执行会改变正则表达式   lastIndex属性。连续的执行test()方法，后续的执行将会从 lastIndex 处开始匹配字符串，(exec() 同样改变正则本身的 lastIndex属性值).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这意思就很明显了，我们每一次搜索匹配中之后，下次就从他的下一位开始执行搜索。&lt;br&gt;&lt;img data-src=&quot;./b.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以最后看业务场景，完全不需要加这个&lt;code&gt;g&lt;/code&gt;，直接去掉就算fix了。当然如果你头很铁…一定要加g的话，那也可以每次执行完重置 lastIndex。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; r = &lt;span class=&quot;regexp&quot;&gt;/\S/g&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$input.addEventListener(&lt;span class=&quot;string&quot;&gt;&amp;#x27;blur&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)=&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = r.test(e.currentTarget.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result) r.lastIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;last 谢谢大钊子和坤少两位同事&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="JavaScript" scheme="http://jsonz1993.github.io/tags/JavaScript/"/>
    
    <category term="Regexp" scheme="http://jsonz1993.github.io/tags/Regexp/"/>
    
  </entry>
  
  <entry>
    <title>React源码系列</title>
    <link href="http://jsonz1993.github.io/react-source/"/>
    <id>http://jsonz1993.github.io/react-source/</id>
    <published>2018-11-10T16:39:52.000Z</published>
    <updated>2021-05-29T15:24:10.592Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/react-source-learn">react16 源码阅读学习记录</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/jsonz1993/react-source-learn&quot;&gt;react16 源码阅读学习记录&lt;/a&gt;&lt;/p&gt;
</summary>
    
    
    
    <category term="technology" scheme="http://jsonz1993.github.io/categories/technology/"/>
    
    
    <category term="React" scheme="http://jsonz1993.github.io/tags/React/"/>
    
  </entry>
  
</feed>
