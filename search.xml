<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[HTTP常用知识点总结]]></title>
      <url>https://jsonz1993.github.io/2018/05/http-mini-book/</url>
      <content type="html"><![CDATA[<p>同样是因为面试的过程中，发现自己对http的一些概念和知识点和零碎，借此机会看了《HTTP小书》，顺手写了篇记录总结一些常见的http知识点。</p>
<h1 id="http-简介"><a href="#http-简介" class="headerlink" title="http 简介"></a>http 简介</h1><p>请求:<br>客户端软件打开到服务器的连接，发起请求如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /hello.htm HTTP/1.1</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36</div><div class="line">Host: example.com</div><div class="line">Accept-Language: en-us</div><div class="line">Accept-Encoding: gzip, deflate</div></pre></td></tr></table></figure></p>
<p>响应:<br>服务端收到请求消息后根据资源定位符在服务器找到该资源，并响应给客户端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">X-Powered-By: Express</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 22</div><div class="line">ETag: W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</div><div class="line">Date: Tue, 22 May 2018 03:04:08 GMT</div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">&lt;h1&gt;Hello, Jsonz!&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<h2 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息"></a>请求消息</h2><p>请求信息一般由请求行、头部字段区、CRLF与消息主体（可选）组成</p>
<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求消息的第一行称为请求行，一般包括 <code>请求方法</code>， <code>请求资源标识符</code> 还有请求的<code>协议版本</code></p>
<blockquote>
<p>Request-List = Method SPACE Request-URI SPACE HTTP-Version CRLF</p>
</blockquote>
<p>请求方法比较常用的有 <code>GET</code>, <code>POST</code>。 这里用的是<code>GET</code> 发起一个请求获取资源</p>
<ul>
<li>GET 请求一个制定名称的资源</li>
<li>POST 创建一个新的子资源，或者更新一个存在的资源</li>
<li>PUT 指定的URL不存在则创建，存在则修改</li>
<li>DELETE 删除指定资源</li>
<li>OPTIONS 返回服务器支持的方法</li>
<li>CONNECT、TRACE</li>
</ul>
<blockquote>
<p>对于 POST 和 PUT的选择，作者给出的例子是创建订单<br>PUT /other/1 创建单号为1的订单，如果存在就更新他，订单号由客户端提供<br>POST /other 创建订单，订单号由服务端提供<br>POST /other/1 更新订单，如果不存在应该抛错<br>重复执行PUT请求不会影响服务器状态，而POST则会导致创建两个订单</p>
</blockquote>
<p>但是工作中，几乎只用过GET和POST，对于创建订单的例子中，PUT和POST的区别我的理解比较浅显，一个是客户端/服务端提供订单号，一个是语义化。</p>
<h3 id="头部字段"><a href="#头部字段" class="headerlink" title="头部字段"></a>头部字段</h3><p>从第二行到空行之间都属于头部字段区，用来传递更多详细的信息，这个案例里面是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36</div><div class="line">Host: example.com</div><div class="line">Accept-Language: en-us</div><div class="line">Accept-Encoding: gzip, deflate</div></pre></td></tr></table></figure></p>
<p>比如说这里:<br><code>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36</code> 我们可以知道客户端用的是 Mac OSx系统，Chrome v66.0.x版本的浏览器<br><code>Accept-Language: en-us</code> 语言是英语<br><code>Accept-Encoding: gzip, deflate</code> 支持的压缩编码为gzip和deflate</p>
<h3 id="空行-CRLF"><a href="#空行-CRLF" class="headerlink" title="空行(CRLF)"></a>空行(CRLF)</h3><p>空行也叫CRLF，是隔开请求头与请求主体的</p>
<h3 id="消息主体"><a href="#消息主体" class="headerlink" title="消息主体"></a>消息主体</h3><p>发送给服务端的消息，比如用POST方法提交表单时，表单的内容就是存在消息主体里面。如果是用GET方法就会丢到请求URL里</p>
<h2 id="响应信息"><a href="#响应信息" class="headerlink" title="响应信息"></a>响应信息</h2><p>响应信息和请求信息的组成结构相似，由状态行、头部字段行、空行（CRLF）和消息主体构成。</p>
<h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p><code>HTTP/1.1 200 OK</code></p>
<p>请求行一般由 <code>协议版本号</code>、<code>状态码</code>与<code>状态码描述</code>组成。</p>
<p>协议版本号有: 0.9、1.0、1.1、2.0等，目前比较流行的是2.0与1.1</p>
<p>状态码有以下几种类型，状态码和前端开发会比较相关一点，更具体的介绍后面会详细说</p>
<ul>
<li>1xx 信息提示</li>
<li>2xx 成功</li>
<li>3xx 重定向</li>
<li>4xx 客户端错误</li>
<li>5xx 服务端错误</li>
</ul>
<h3 id="头部字段-1"><a href="#头部字段-1" class="headerlink" title="头部字段"></a>头部字段</h3><p>状态行与空行之间就是响应头部字段了， 响应头比请求头功能相对来说多一点，比如后面会说到的<code>Set-Cookie</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">X-Powered-By: Express</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 22</div><div class="line">ETag: W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</div><div class="line">Date: Tue, 22 May 2018 03:04:08 GMT</div><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure></p>
<p>响应头包括一些服务本身的信息以及响应内容体的信息，比如这里的<br><code>Date: Tue, 22 May 2018 03:04:08 GMT</code> 是响应的时间<br><code>Content-Length: 22</code>是返回的消息体长度。</p>
<h3 id="空行-CRLF-1"><a href="#空行-CRLF-1" class="headerlink" title="空行(CRLF)"></a>空行(CRLF)</h3><p>和请求的CRLF是一样的，用来隔开响应头和响应内容主体</p>
<h3 id="响应消息主体"><a href="#响应消息主体" class="headerlink" title="响应消息主体"></a>响应消息主体</h3><p>在我们这个例子里面是一句很简单的 <code>&lt;h1&gt;Hello, Jsonz!&lt;/h1&gt;</code>，这里响应主体有很多种格式，如果是gif的话会返回gif的二进制字节集合</p>
<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><p>请求的结构组成Request:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Request-Line CRLF</div><div class="line">*Request-HEAD CRLF</div><div class="line">CRLF</div><div class="line">[ message-body ]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Request-Line =&gt; Request-List = Method SPACE Request-URI SPACE HTTP-Version CRLF<br>这里我们主要Request-Methods部分</p>
</blockquote>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>GET 方法一般是用来获取URL指定的资源</p>
<h3 id="可以配合-Range-来获取局部资源。"><a href="#可以配合-Range-来获取局部资源。" class="headerlink" title="可以配合 Range 来获取局部资源。"></a>可以配合 <code>Range</code> 来获取局部资源。</h3><p>发起请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /index.txt HTTP/1.1</div><div class="line">Range: bytes=0-4</div></pre></td></tr></table></figure></p>
<p>服务端响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 206 Partial Content</div><div class="line">Content-Type: text/html</div><div class="line">Content-Range: bytes 0-5/12</div><div class="line">Content-Length: 5</div><div class="line">hello</div></pre></td></tr></table></figure></p>
<p>在一些视频的场景，比如用户点击到某个进度，我们可以直接从该进度去请求，而不是整一个视频都请求下来。<br>响应头的<code>Content-Range: bytes 0-5/12</code>指的是当前返回0-5，总长为12。</p>
<h3 id="配合-ETag-做缓存"><a href="#配合-ETag-做缓存" class="headerlink" title="配合 ETag 做缓存"></a>配合 ETag 做缓存</h3><p>服务端在响应头里面会给一个<code>ETag</code>标识，这个标识我们在开头的时候有说了是文件的唯一标识符。<br>那么我们是不是可以这么做，在GET请求时使用条件获取头部字段，如果服务端发现这个字段与文件的ETag标识匹配，则可以做缓存，否则发送新的文档过来。</p>
<p>发起请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /hello.htm HTTP/1.1</div><div class="line">If-None-Match:  W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</div></pre></td></tr></table></figure></p>
<p>服务端响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 304 Not Modified</div><div class="line">X-Powered-By: Express</div><div class="line">ETag: W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</div><div class="line">Date: Tue, 22 May 2018 12:08:23 GMT</div><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure></p>
<p>这里我们的ETag与文件匹配上了，所以服务端直接响应 304 状态码(Not Modified);</p>
<h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>HEAD方法和GET方法的区别是 HEAD方法请求，响应的时候就只会发送响应消息的头部字段，不会把响应消息主体返回</p>
<p>那么HEAD的场景一般在什么地方呢？ 一般可用于发起一个请求来获取服务端的资源大小，再分段获取。</p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>我们平时大部分场景用的都是POST方法，因为POST方法不会把参数都丢在URL上，对请求的数据大小没有限制，请求也不会缓存。</p>
<h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><p>OPTIONS方法主要是用来查询URL指定的资源所支持的方法列表</p>
<p>发起请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OPTIONS /hello.htm HTTP/1.1</div></pre></td></tr></table></figure></p>
<p>服务端响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">X-Powered-By: Express</div><div class="line">Allow: GET,HEAD</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 8</div><div class="line">ETag: W/&quot;8-ZRAf8oNBS3Bjb/SU2GYZCmbtmXg&quot;</div><div class="line">Date: Tue, 22 May 2018 12:20:42 GMT</div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">GET,HEAD%</div></pre></td></tr></table></figure></p>
<p>这里列出了这个资源支持 GET与HEAD方法</p>
<h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><p>PUT方法上面讲了是 对URL指定的资源进行创建，如果存在就修改他。</p>
<p>理论上这种需求直接用POST方法就完全够用了，比如创建订单<code>POST /order/create</code><br>更新订单 <code>POST /order/orderId</code></p>
<p>但是这里如果改成PUT创建的话，可以直接这样 <code>PUT /order</code> 更符合Restful API规范，如果换成前端的层面来说，就像<code>div</code>与<code>header, nav, section, aside, footer</code>这些更有语义化的标签。</p>
<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>删除某个资源，没什么好说的</p>
<h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><blockquote>
<p>在当前已经建立HTTP连接的情况下，CONNECT 方法用来告知代理服务器，客户端想要和服务器之间建立SSL连接。</p>
<p>客户端使用如下消息，通知代理服务器，去做一个连接到指定的服务器地址和端口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CONNECT example.com 443 HTTP/1.1</div></pre></td></tr></table></figure></p>
<p>代理服务器随后提取CONNECT 方法指定的地址和端口（这里是 example.com 443 ），建立和此服务器的SSL连接，成功后随后通知客户端，需要的连接建立完毕：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 OK</div></pre></td></tr></table></figure>
<p>使用CONNECT发起请求，服务端不会去解析字段等操作，而是完完全全单纯的做转发，我们称之为透明代理。</p>
<h2 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h2><p>查询到目标资源经过的中间节点。</p>
<h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><p>响应结构组成Response:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Response-Line</div><div class="line">*(header CRLF) </div><div class="line">CRLF</div><div class="line">[ message-body ]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Response-Line =&gt; HTTP-Version SPACE Status-Code SPACE Reason-Phrease CRLF<br>这里我们主要Status-Code部分</p>
</blockquote>
<h2 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h2><h3 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h3><p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。</p>
<p>比如客户端上传一些视频文件，可以先在请求头加一个<code>Expect: 100-continue</code> 如果服务端允许接收该文件（大小），就返回100，不允许则返回417状态码。</p>
<h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><p>2xx 系列都是表示请求已经成功处理了，这里列举几个比较常见的</p>
<h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h3><p>最常见的可能就是200了，平时写ajax很多都是直接判断 <code>xmlhttp.status==200</code>, 他代表的是请求已经成功完成</p>
<h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>201表示请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
<h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>202代表服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止</p>
<h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>服务器成功处理了请求，没有返回任何内容。</p>
<h3 id="206-Partical-Content"><a href="#206-Partical-Content" class="headerlink" title="206 Partical Content"></a>206 Partical Content</h3><p>206主要是为了支持大文件的分段下载，类似迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
<p>这里用书里的一个例子来展示,先用 HEAD 获取该资源的大小，再用Range分段获取，这些方法上面都有介绍过，这里综合起来运用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">HEAD /large.jpg HTTP/1.1</div><div class="line">Host: example.com</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Accept-Ranges: bytes</div><div class="line">Content-Length: 4000</div><div class="line"></div><div class="line">Get /large.jpg HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Range: bytes=0-1999</div><div class="line"></div><div class="line">HTTP/1.1 206 Partical Content</div><div class="line">Accept-Ranges: bytes</div><div class="line">Content-Length: 2000</div><div class="line">Content-Range: bytes 0-1999/4000</div><div class="line"></div><div class="line">&#123;binary data&#125;</div><div class="line"></div><div class="line">GET /large.jpg HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Range: bytes=2000-</div><div class="line"></div><div class="line">HTTP/1.1 206 Partical Content</div><div class="line">Accept-Ranges: bytes</div><div class="line">Content-Length: 2000</div><div class="line">Content-Range: bytes 2000-3999/4000</div><div class="line"></div><div class="line">&#123;binary data&#125;</div></pre></td></tr></table></figure></p>
<p>2xx 很多只是规范与语义化的区别。</p>
<h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><p>3xx系列除了 304 以外，其他都是用于重定向的</p>
<h3 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h3><p>300是请求的资源有一系列可供选择的回馈信息，用户或浏览器能够自行选择一个首选的地址进行重定向。</p>
<h3 id="301-Moved-Permanently-amp-amp-302-Found"><a href="#301-Moved-Permanently-amp-amp-302-Found" class="headerlink" title="301 Moved Permanently &amp;&amp; 302 Found"></a>301 Moved Permanently &amp;&amp; 302 Found</h3><p>301 与 302 都代表当前访问的URL对应的资源被移动到一个新的位置，这个位置会在响应头Location内指定。<br>他们的区别是 301是永久被移动到新位置，而302是暂时性的临时重定向</p>
<h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h3><p>304我们在前面已经有见到过了，用ETag与If-None-Match配合做缓存时，就会返回304 代表该资源未被修改，可以继续用以前下载的副本。</p>
<h2 id="400"><a href="#400" class="headerlink" title="400"></a>400</h2><p>400指的是客户端错误，既服务端接收到该请求，但是收到的请求无法处理,这里列出常见的几种</p>
<h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求</p>
<h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>401既未认证，应该是最简单的用户认证登录系统了。与403不同，这里如果用户提供必要的凭据，就可以访问资源。</p>
<h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。项目中的经验就是，如果用户登录状态过期，后台返回403状态码，这时候我们再去执行自动登录或者提示登录的逻辑。</p>
<h3 id="404-Not-Fount"><a href="#404-Not-Fount" class="headerlink" title="404 Not Fount"></a>404 Not Fount</h3><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。这个可能是最常见的4xx状态码</p>
<h3 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h3><blockquote>
<p>客户端发起了条件请求，服务器发现这个请求中的其中一个条件并不成立，那么服务器就会用此错误码作为响应消息的状态码返回给客户端。<br>比如我们在请求头设置条件限定:<code>If-Unmodified-Since</code>，如果服务端校验这个条件，发现说没有满足的话，就会返回 412 状态码。</p>
</blockquote>
<h2 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h2><p>400是客户端错误，500就是服务端的错误状态码。</p>
<h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>500为通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息，一般开发者可以查日志等去解决该错误。</p>
<h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><blockquote>
<p>说明服务器现在无法提供服务，但是将来可以。如果服务器知道何时资源可用，应该在响应中包含Retry-After的首部，提示客户端可以重试服务的时间。<br>如果没有提供Retry-After头部，那么客户端应当以处理500响应的方式处理它。</p>
</blockquote>
<p>以上是觉得比较常见的状态码，更多请见<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">维基百科</a></p>
<h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p>一般我们在服务端响应可以加上这个响应头<code>Cache-Control: max-age=2592000</code> 来让浏览器把这个资源缓存下来，缓存的时间为<code>2592000</code>既30天，也可以在时间后面加上个<code>public</code>来指示该响应可以被任何中间人（cdn,代理)缓存。</p>
<h1 id="消息主体-1"><a href="#消息主体-1" class="headerlink" title="消息主体"></a>消息主体</h1><p>在请求消息或响应消息里面，都可以包含一个可选的消息主体，服务端或客户端都没办法从消息主体里面获取是什么内容啊，什么类型啊什么的，所以就会有一组头部字段来标示他。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Content-Type 实体中所承载对象的类型,如 txt/html; image/jpeg</div><div class="line">Content-Length 所传送实体主体的长度或大小。</div><div class="line">Content-Language 与所传送对象最相配的人类语言, en-us等</div><div class="line">Content-Encoding 对象数据所做的压缩格式,gzip等.</div><div class="line">Content-Location 一个备用位置，请求时可通过它获得对象。</div><div class="line">Content-Range 说明它是整体的哪个部分,可用于分段获取。</div><div class="line">Content-MD5 实体主体内容的校验和。</div><div class="line">Last-Modified 所传输内容在服务器上创建或最后修改的日期时间。</div><div class="line">Expires 实体数据将要失效的日期时间。</div><div class="line">Allow 该资源所允许的各种请求方法，例如，GET 和 HEAD。</div><div class="line">ETag 这份文档的唯一验证码，可用于缓存</div></pre></td></tr></table></figure>
<h1 id="HTTP-2-0-h2"><a href="#HTTP-2-0-h2" class="headerlink" title="HTTP/2.0(h2)"></a>HTTP/2.0(h2)</h1><p>这里简单说一下h2与HTTP/1.1对于前端开发人员来说比较大的改动。</p>
<h2 id="多路复用-Multiplexing"><a href="#多路复用-Multiplexing" class="headerlink" title="多路复用 (Multiplexing)"></a>多路复用 (Multiplexing)</h2><p>多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息。<br>在HTTP/1.1中，我们客户端在同一时间，针对同一于域名下的请求会有限制，如果超过某个值的请求会被堵塞到。所以一般的优化有前端用雪碧图来合并多个小图片减少请求，后端把资源分到不同的域下面，减少同域的限制。<br>但是如果网站用了h2的话，前端不需要考虑类似雪碧图之类的把多个请求合并为一个减少的优化。</p>
<h1 id="最后啰嗦两句"><a href="#最后啰嗦两句" class="headerlink" title="最后啰嗦两句"></a>最后啰嗦两句</h1><p>之所以会看《HTTP小书》是因为前段时间问我一个朋友说有没有关于HTTP比较好的书籍推荐，《HTTP权威指南》六七百页细节太多怕是看完留不住什么概念。他给我推了《HTTP小书》，这本书算是有点改变我一些关于知识获取的认知。<br>简单来说就是，大家别看9块钱的书就那么几页，翻一个上午或者一天就看完，然后就觉得不值，非得要看哪种几百页的才觉得钱回本了。<br>这篇文只是个人在看的时候做了一些归纳，书中有更详细更好的解释，关键是提供了源码与例子，在看概念的时候实操一遍会加深很多印象。<br>总的来说，这本书挺值的，和他的标语一样：<em>准能帮你省下不少<strong>时间</strong></em></p>
<p><a href="http://www.ituring.com.cn/book/1791" target="_blank" rel="external">《HTTP小书》</a><br><a href="https://juejin.im/user/58774201570c35006207d274" target="_blank" rel="external">《HTTP小书》作者刘传君</a><br><a href="http://www.cnblogs.com/machao/p/5788425.html" target="_blank" rel="external">HTTP Method 更详细的介绍</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ" target="_blank" rel="external">HTTP缓存 - MDN</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> Book </tag>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018-05-21 小记]]></title>
      <url>https://jsonz1993.github.io/2018/05/2018-05-21/</url>
      <content type="html"><![CDATA[<p>最近工作不是很忙，也没有再投简历去面试，好像又开始恢复以前的学习热情与节奏。</p>
<p>发了几篇水文~ 看了一个小脚手架的部分源码《create-react-app》，看了一本技术书《css世界》，一本小说《白金数据》。</p>
<p>但是写这篇流水的主要目的是再次意识到自己看问题太过 <strong>局限</strong>。</p>
<p>先交代一下背景：</p>
<ol>
<li>目前公司的项目是基于 cookie 去判断一些环境，然后指向测试环境或者正式环境</li>
<li>对于 font 字体文件来说，他的请求是没有带上cookie的（chrome的bug，chrome觉得说这个文件不需要带上cookie，safari就会带)</li>
<li>出现的问题是： 如果测试环境有了新的 font 字体，那么因为他没有带上cookie，所以会被指向正式环境服务器去请求资源，但是这个时候正式环境还没有这个 font 字体，所以会报404。 怎么解决？</li>
</ol>
<p>我给出的方案是:</p>
<ol>
<li>后端给出一个页面，我们打包后把字体文件丢到正式环境上面</li>
<li>如果不想这么low手动的话， 那就在打包字体的命令行后面自动去提交到正式环境</li>
</ol>
<p>老大给出的方案是:<br>直接根据目前的环境分离机制，在nginx配置一下：测试环境下所有静态资源直接指到测试环境</p>
<p>= =简直被吊打，看问题还是很局限 没有跳出前端的圈子…╮(╯▽╰)╭</p>
<p>所以接下来优先补后端的一些基础知识 💪</p>
]]></content>
      
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《css世界》常用技巧 —— 读书笔记]]></title>
      <url>https://jsonz1993.github.io/2018/05/css-world/</url>
      <content type="html"><![CDATA[<p>前段时间面了荔枝，反馈说对一些css概念性的东西掌握不是很好~ 所以最近有空看了张鑫旭大佬的《CSS世界》<br>全本通熟易懂，继承了博客的画风，入口即化</p>
<p>很多东西三言两语讲不清楚，大家可以入手张鑫旭大佬的书来看看，里面很多常用的概念和属性都帮我们捋一遍。<a href="http://www.cssworld.cn/" target="_blank" rel="external">《css世界》购买链接</a><br>附上张鑫旭大佬的博客，有事没事看一看经常会有意外收获<a href="http://www.zhangxinxu.com/" target="_blank" rel="external">张鑫旭博客</a></p>
<h2 id="改变-width-height-作用细节的-box-sizing"><a href="#改变-width-height-作用细节的-box-sizing" class="headerlink" title="改变 width/height 作用细节的 box-sizing"></a>改变 width/height 作用细节的 box-sizing</h2><blockquote>
<p>box-sizing的作用是什么？ 一句话，改变了 width 作用的盒子。默认情况下，width 是作用在 content box 上的，box-sizing 的作用就是可以把 width 作用的盒子变成其他几个。</p>
</blockquote>
<p>但是目前 box-sizing 仅支持 <code>content-box</code> 和 <code>border-box</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 这里 box1宽度默认作用在content-box,所以 width 表现为 100 + 10*2 + 20*2 = 160px */</span></div><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 这里 box2添加了 box-sizing: border-box; 所以宽度作用改成了content、padding与border，width 表现为100px, content为: 100- 10* 2- 20* 2 = 40px*/</span></div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="./box-sizing.png" width="200" alt="box-sizing" align="center"></p>
<h2 id="min-width-max-width-min-height-max-height-权重超越-important-min-width超越max-width"><a href="#min-width-max-width-min-height-max-height-权重超越-important-min-width超越max-width" class="headerlink" title="min-width/max-width min-height/max-height 权重超越 !important, min-width超越max-width"></a>min-width/max-width min-height/max-height 权重超越 !important, min-width超越max-width</h2><p><strong>min-*初始值规范里为 0，实际尝试为auto</strong><br><strong>max-*初始值为 auto</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">下面代码表现为 100px</div><div class="line">*/</div><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">min-width</span>: <span class="number">100px</span></div><div class="line">  max-width: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span><span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="padding的百分比值计算规则是相对于宽度计算的"><a href="#padding的百分比值计算规则是相对于宽度计算的" class="headerlink" title="padding的百分比值计算规则是相对于宽度计算的"></a>padding的百分比值计算规则是相对于宽度计算的</h2><p>这里引出一道面试题， <strong>不借助js的情况下用一个元素实现相对于浏览器窗口宽度1/2的正方形</strong><br>当时我的回答是用<code>vw</code>，如果早点看css世界就知道padding这个属性了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* vw方法 */</span></div><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50vw</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50vw</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* padding方法 */</span></div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">25%</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="padding-的图形绘制-一个元素画出红领巾的“三道杠”"><a href="#padding-的图形绘制-一个元素画出红领巾的“三道杠”" class="headerlink" title="padding 的图形绘制 一个元素画出红领巾的“三道杠”"></a>padding 的图形绘制 一个元素画出红领巾的“三道杠”</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">background</span>: currentColor;</div><div class="line">  <span class="attribute">width</span>: <span class="number">140px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">border-top</span>: <span class="number">10px</span> solid;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">0</span>;</div><div class="line">  <span class="comment">/* 这里其实关键起作用的还是 background-clip: content-box; 把背景色作用从border-box改为content-box*/</span></div><div class="line">  <span class="attribute">background-clip</span>: content-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="./padding1.png" alt="" title="三道杠"></p>
<h2 id="padding-的图形绘制-一个元素画出双层圆点图形效果"><a href="#padding-的图形绘制-一个元素画出双层圆点图形效果" class="headerlink" title="padding 的图形绘制 一个元素画出双层圆点图形效果"></a>padding 的图形绘制 一个元素画出双层圆点图形效果</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">background</span>: currentColor;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">background-clip</span>: content-box;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid;</div><div class="line">  <span class="attribute">background-clip</span>: content-box;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="./padding2.png" alt="" title="双层圆点"></p>
<h2 id="margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题"><a href="#margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题" class="headerlink" title="margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题"></a>margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题</h2><p>还是那道浏览器窗口1/2的面试题，如果没有要求只用一个元素实现的话，可以用margin去实现</p>
<p>这里简单说一下，之所以设置父级box1的overflow:hidden，是因为要创建一个块级格式化上下文元素,一方面可以用子级margin撑起高度，另一方面处理margin合并问题，所以子级.box2直接用margin:100%，而不是200%。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">background</span>: currentColor;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="comment">/* 宽度窗口1/2 */</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">  <span class="comment">/* 高度窗口1/2 */</span></div><div class="line">  <span class="attribute">margin</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="margin合并的解决方法"><a href="#margin合并的解决方法" class="headerlink" title="margin合并的解决方法"></a>margin合并的解决方法</h2><p>这里只列举出margin-top合并的情况, margin-bottom与其相对应</p>
<ul>
<li>父元素设为块级格式化上下文，7就是</li>
<li>父元素设置border-top</li>
<li>父元素设置padding-top (这里可以用margin-top负值来消除作用)</li>
<li>父元素与第一个子元素之间添加内联元素进行分隔</li>
</ul>
<h2 id="利用-margin-auto-做垂直上下居中"><a href="#利用-margin-auto-做垂直上下居中" class="headerlink" title="利用 margin: auto 做垂直上下居中"></a>利用 margin: auto 做垂直上下居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid ;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-color</span>: currentColor;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="border-默认颜色为元素color值"><a href="#border-默认颜色为元素color值" class="headerlink" title="border 默认颜色为元素color值"></a>border 默认颜色为元素color值</h2><h2 id="border绘制三角形"><a href="#border绘制三角形" class="headerlink" title="border绘制三角形"></a>border绘制三角形</h2><p>项目上画三角形绝大部分都是用border，好控制，实现简单，成本低只需一个元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">border-style</span>: solid;</div><div class="line">  <span class="attribute">border-color</span>: currentColor transparent transparent;</div><div class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="css尺寸单位ex，指的是字母x的高度。"><a href="#css尺寸单位ex，指的是字母x的高度。" class="headerlink" title="css尺寸单位ex，指的是字母x的高度。"></a>css尺寸单位<code>ex</code>，指的是字母x的高度。</h2><p>这里简单说一下，css里面的基线(baseline)其实就是字母x的下边缘线<br>关于ex的应用这里不写呆毛了，我们可以利用他来实现文字与图片居中，直接给张鑫旭大佬的<a href="http://demo.cssworld.cn/5/1-1.php" target="_blank" rel="external">demo</a><br><em>再感慨一下，虽然这些东西多多少少都在张鑫旭博客看到，但是这本书真的对一些东西的讲解很通俗易懂。大家可以入手有空翻一翻</em></p>
<h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC 块级格式化上下文"></a>BFC 块级格式化上下文</h2><p>在上面我们讲过了设置overflow:hidden;可以创建BFC来清除浮动，那么还有哪些方法可以创建BFC呢？</p>
<ul>
<li><html>根目录</html></li>
<li>float 值不为 node</li>
<li>overflow 的值为 auto、scroll或hidden(常用)</li>
<li>display 值为 table-cell、 table-caption和 inline-block(常用)</li>
<li>position 的值不为 relative和 static<br>BFC的结界特性最重要的用途不是去margin重叠或清除float影响，而是实现更健壮、更智能的自适应布局<br><em>面试的时候面试官问我BFC主要用来做什么，我的回答是 清除浮动和去margin重叠。真的是哪壶不开提哪壶…哭死😭</em></li>
</ul>
<h2 id="用BFC实现一边固定宽度，另一边自适应布局"><a href="#用BFC实现一边固定宽度，另一边自适应布局" class="headerlink" title="用BFC实现一边固定宽度，另一边自适应布局"></a>用BFC实现一边固定宽度，另一边自适应布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.box1</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>: currentColor;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.box2</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="无依赖absolute绝对定位（没有left-top-right-bottom"><a href="#无依赖absolute绝对定位（没有left-top-right-bottom" class="headerlink" title="无依赖absolute绝对定位（没有left/top/right/bottom)"></a>无依赖absolute绝对定位（没有left/top/right/bottom)</h2><p>我们平时如果对元素进行 absolute 定位，多半会加多个 left,top然后给父级加个 relative。<br>实际上大多数情况我们可以直接用margin辅助定位，<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.father</span>&#123; <span class="attribute">position</span>: relative; &#125;</div><div class="line"><span class="comment">/* @before */</span></div><div class="line"><span class="selector-class">.son</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">10px</span>; <span class="attribute">left</span>: <span class="number">10px</span>;&#125;</div><div class="line"><span class="comment">/* @after */</span></div><div class="line"><span class="selector-class">.son</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">margin-top</span>: <span class="number">10px</span>; <span class="attribute">margin-left</span>: <span class="number">10px</span>;&#125;</div></pre></td></tr></table></figure></p>
<p>这么实现有两个好处，一个是我们不需要父级去加个<code>relative</code>后面要撤销，直接改 .son样式就好。<br>第二个好处就是某些场景适应性比依赖项定位好<br><img src="./absolute.png" alt="" title="Hot为无依赖 N为依赖"><br><img src="./absolute2.png" alt="" title="改变文字长度之后的情况"><br><strong>无依赖在有多语言场景下做角标简直是天使！！！不然一个英语场景，一个日语场景网站肯定会乱套….</strong></p>
<h2 id="单行显示…更多效果"><a href="#单行显示…更多效果" class="headerlink" title="单行显示…更多效果"></a>单行显示…更多效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.p1</span> &#123;</div><div class="line">    <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span></div><div class="line">  目前，对-webkit-私有前缀支持良好的浏览器还可以实现多行文字打点效果，但是却无 须依赖 overflow:hidden。比方说，最多显示 2 行内容，再多就打点就</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="./ellipsis1.png" alt=""></p>
<h2 id="多行显示…更多效果"><a href="#多行显示…更多效果" class="headerlink" title="多行显示…更多效果"></a>多行显示…更多效果</h2><p>这里用了Overflow是因为，不用的话，会把多余的内容展示出来，但是用不用都会有省略号效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.p1</span> &#123;</div><div class="line">		<span class="attribute">display</span>: -webkit-box;</div><div class="line">		<span class="attribute">-webkit-box-orient</span>: vertical;</div><div class="line">		<span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</div><div class="line">		<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">		<span class="attribute">overflow</span>: hidden;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span></div><div class="line">	目前，对-webkit-私有前缀支持良好的浏览器还可以实现多行文字打点效果，但是却无 须依赖 overflow:hidden。比方说，最多显示 2 行内容，再多就打点就</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="./ellipsis2.png" alt=""></p>
<h2 id="outline自动填满屏幕剩余空间的应用技巧"><a href="#outline自动填满屏幕剩余空间的应用技巧" class="headerlink" title="outline自动填满屏幕剩余空间的应用技巧"></a>outline自动填满屏幕剩余空间的应用技巧</h2><p><em>tip:clip是裁剪功能，很多情况下我们都用他来实现一些隐藏的效果，比如这个栗子🌰..</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.footer</span> &#123;</div><div class="line">		<span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.footer</span> &gt;<span class="selector-tag">p</span> &#123;</div><div class="line">		<span class="attribute">position</span>: absolute;</div><div class="line">		<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">		<span class="attribute">background-color</span>: <span class="number">#abcdef</span>;</div><div class="line">		<span class="attribute">outline</span>: <span class="number">9999px</span> solid <span class="number">#abcdef</span>;</div><div class="line">		<span class="attribute">clip</span>: <span class="built_in">rect</span>(0 9999px 9999px 0);</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am Jsonz.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="./outline.png" alt=""></p>
<h2 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h2><p>什么是层叠上下文？</p>
<blockquote>
<p>层叠上下文，英文称作 stacking context，是 HTML 中的一个三维的概念。如果一个元素含 有层叠上下文，我们可以理解为这个元素在 z 轴上就“高人一等”。</p>
</blockquote>
<p>层叠上下文生成规则:</p>
<ul>
<li>position 值为 relative/absolute</li>
<li>flex 布局</li>
<li>opacity 值不是 1</li>
<li>transform 值不是 none</li>
<li>filter 值不是 none</li>
<li>-webkit-overflow-scrolling 设为 touch</li>
</ul>
<p>层叠上下文的顺序:</p>
<ol>
<li>如果不依赖z-index，则可以看成 z-index: 0</li>
<li>依赖z-index 则看 z-index 的值</li>
</ol>
<h2 id="textarea-宽度100-自适应效果"><a href="#textarea-宽度100-自适应效果" class="headerlink" title="textarea 宽度100%自适应效果"></a>textarea 宽度100%自适应效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="comment">/*父级*/</span></div><div class="line">  <span class="selector-class">.box1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">280px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#abcdef</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/* 模拟边框与padding */</span></div><div class="line">  <span class="selector-class">.box2</span> &#123;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">9px</span> <span class="number">8px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d0d0d5</span>;</div><div class="line">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">      <span class="attribute">background-color</span>: <span class="number">#fff</span>; </div><div class="line">  &#125;</div><div class="line">  <span class="comment">/* 真实 textarea */</span></div><div class="line">  <span class="selector-class">.box2</span>&gt; <span class="selector-tag">textarea</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">0</span> none;</div><div class="line">      <span class="attribute">outline</span>: <span class="number">0</span> none;</div><div class="line">      <span class="attribute">background</span>: none;</div><div class="line">      <span class="attribute">resize</span>: none;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="./textarea.png" alt=""></p>
<h2 id="空元素选择器-empty"><a href="#空元素选择器-empty" class="headerlink" title="空元素选择器 :empty"></a>空元素选择器 :empty</h2><p>看《css世界》之后才知道有这么一个空元素选择器…绝对不是其他目的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">span</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">		<span class="attribute">content</span>: <span class="string">'是帅哥'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Jsonz<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="./empty.png" alt=""></p>
<h2 id="第一行要选择器-first-line"><a href="#第一行要选择器-first-line" class="headerlink" title="第一行要选择器:first-line"></a>第一行要选择器:first-line</h2><p>同上，比较少用的选择器，但是感觉部分场景挺实用的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-line</span> &#123; <span class="attribute">color</span>: red; &#125;</div><div class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">40px</span>; &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 可乐鸡翅 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="./first-line.png" alt=""></p>
<h2 id="第一个字（母）选择器-first-letter"><a href="#第一个字（母）选择器-first-letter" class="headerlink" title="第一个字（母）选择器:first-letter"></a>第一个字（母）选择器:first-letter</h2><p>需要注意的是，如果这里我用的是字（母）来描述选择器，意味着，如果第一个是符号的话，会找下一个直到找到符合条件的才会渲染成我们要的样式，否则都是默认样式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span> &#123; <span class="attribute">color</span>: red; &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  !!!!反沙芋</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>!!!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="./first-letter.png" alt=""></p>
<h2 id="动态loading打点效果"><a href="#动态loading打点效果" class="headerlink" title="动态loading打点效果"></a>动态loading打点效果</h2><p>这里主要利用了content 支持<code>\A</code>换行来实现，用<code>dot</code>是因为</p>
<blockquote>
<p><dot>是自定义的一个标签元素，除了简约、语义化明显<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-tag">dot</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block; </div><div class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">text-align</span>: left;</div><div class="line">    <span class="attribute">vertical-align</span>: -.<span class="number">25em</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">dot</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">content</span>: <span class="string">'...\A..\A.'</span>;</div><div class="line">    <span class="attribute">white-space</span>: pre-wrap;</div><div class="line">    <span class="attribute">animation</span>: dot <span class="number">3s</span> infinite step-start both;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> dot &#123;</div><div class="line">    33% &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-2em); &#125;</div><div class="line">    66% &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-1em); &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">正在加载中<span class="tag">&lt;<span class="name">dot</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dot</span>&gt;</span></div></pre></td></tr></table></figure></dot></p>
</blockquote>
<p><img src="loading.gif" width="200"></p>
<h2 id="单行文字居中对齐，多行文字左对齐"><a href="#单行文字居中对齐，多行文字左对齐" class="headerlink" title="单行文字居中对齐，多行文字左对齐"></a>单行文字居中对齐，多行文字左对齐</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid ;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">text-align</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>大家好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是Jsonz，现在是一名小切图仔<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="./yo.png" alt=""></p>
<h2 id="字体使用系统字体"><a href="#字体使用系统字体" class="headerlink" title="字体使用系统字体"></a>字体使用系统字体</h2><p>这里个人有点疑惑~ 如果单纯是想使用系统默认字体，直接不设置 font 不就好了~ 多此一举设置个 <code>menu</code>…<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font</span>: menu; &#125;</div><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;</div></pre></td></tr></table></figure></p>
<p>书里更多的不是给我们展示这些小技巧，而是帮我们讲清楚很多概念与他的特性，这篇文比较没经验，效果图都是用的截图…下次有机会的话注意直接展示个demo可能看起来会更直观</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> CSS </tag>
            
            <tag> Book </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器恢复滚动行为 —— history.scrollRestoration]]></title>
      <url>https://jsonz1993.github.io/2018/05/history-scroll-restoration/</url>
      <content type="html"><![CDATA[<p>直入主题。之前做移动端的需求时，经常遇到一种常见，就是:<br>a页面是一个长列表，我们滑动到某个地方假设为 <strong>100px</strong> ，点击之后进入到b页面<br>再从b页面回到a页面，这时候浏览器的滚动条会自动回到我们跳转前的位置，也就是 <strong>100px</strong> 的位置。<br><img src="./history-scroll-restoration.gif" alt="" title="浏览器记住滚动行为"></p>
<p>这种体贴的行为我是很喜欢的~ 但是有时候产品就非要抬杠，说 我就不想要这种行为，你给我回到顶部去(╯‵□′)╯︵┻━┻</p>
<p>以前没办法就经常用什么 setTimeout 大法去手动处理这些东西</p>
<p>氮素!!! 如果只是说setTimeout大法的话，就没我什么事了。<br>今天要说的是 <strong>history.scrollRestoration</strong> ，这个属性是实验性的属性，他的作用是: <strong>允许Web应用程序在历史导航上显式地设置默认滚动恢复行为。此属性可以是自动的（auto）或者手动的（manual）。</strong></p>
<p>说的很明白了，如果浏览器支持 <code>history.scrollRestoration</code>并且值为<code>auto</code>则会默认恢复滚动行为。如果设置为 <code>manual</code>则可以取消，这个行为不用去考虑兼容性的问题，如果有这个功能才会有恢复滚动，所以直接判断一下就可以了。无需多考虑</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.history.scrollRestoration &amp;&amp; (<span class="built_in">window</span>.history.scrollRestoration = <span class="string">'auto'</span>);</div></pre></td></tr></table></figure>
<p>以后妈妈再也不用担心我被产品怼了 O(∩_∩)O~~</p>
<p><a href="https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration" target="_blank" rel="external">google-developers 资料</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="external">mozilla-developer 资料</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[create-react-app 源码解析之react-scripts]]></title>
      <url>https://jsonz1993.github.io/2018/05/create-react-app-t/</url>
      <content type="html"><![CDATA[<p>上一篇我们已经讲了 <code>create-react-app</code>里面创建<code>package.json</code>安装依赖并且拷贝可运行的demo等步骤。<a href="https://jsonz1993.github.io/2018/05/create-react-app-o/">传送门</a></p>
<p>这一篇我们来讲一下 <code>create-react-app</code>里面的启动服务等部分，就是平时我们安装完依赖之后，启动开发服务:<code>npm start</code>。这一块涉及到太多关于webpack与配置的东西，加上第一篇觉得描述的太过冗余~所以这篇不会讲得很细，只是大概把他运转的逻辑思路写出来，具体源码会提供传送门。</p>
<p>推荐大家看第一篇的 <strong>项目初始化</strong> 和 <strong>断点调试</strong> 部分，这里就不在赘述。<a href="https://jsonz1993.github.io/2018/05/create-react-app-o/#%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96">传送门 项目初始化断点调试部分</a></p>
<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a><a href="#准备阶段">准备阶段</a></h1><p><strong>这里我们讨论的create-react-app版本依旧是<code>v1.1.4</code></strong></p>
<p>既然这篇我们主要讲的是 <code>create-react-app</code>里面的webpack服务，那我们肯定要先新建一个项目。</p>
<ul>
<li><code>npm install create-react-app -g</code> 全局安装create-react-app</li>
<li><code>create-react-app my-react-project</code> 用create-react-app新建一个项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd my-react-project</div><div class="line">yarn start</div></pre></td></tr></table></figure>
<p>新建完之后，终端提示了我们直接进入项目，跑 yarn(npm) start 就可以开发了。我们打开 <code>package.json</code>就可以看到 yarn start 跑的命令是 <code>&quot;react-scripts start&quot;</code></p>
<p>那么这个 react-scripts 命令到底是哪一个呢？</p>
<p>一般写在 <code>package.json=&gt; scripts</code> 的命令，都会先去 <code>project_path(项目目录）/node_modules/.bin</code> 查找，找不到再找全局安装的包。</p>
<p>那么 node_modules/.bin 里面的文件又是怎么来的呢？<br>我们如果在包的 package.json 加上 <code>bin</code> 字段，npm就会自动帮我们映射到 node_modules/.bin 里面 <a href="https://docs.npmjs.com/files/package.json#bin" target="_blank" rel="external">npm bin文档传送门</a></p>
<p>我们直接打开 <code>node_modules/react-scripts/package.json</code> 能看到这么一行<code>&quot;react-scripts&quot;: &quot;./bin/react-scripts.js&quot;</code>,直接把命令指向<code>node_modules/react-scripts/.bin/react-scripts.js</code>，也验证了我们的观点。</p>
<p>还记得上一篇，我们在 <code>create-react-app/packages</code> 里面发现了有一个 <code>react-scripts</code>。其实是同一个东西来的，那么接下来的步骤就很明确了，直接用老办法，改下配置，然后用vscode跑断点调试阅读<code>project_path/node_modules/react-scripts/.bin/react-scripts.js</code>的源码 一探究竟。</p>
<h3 id="vscode-launch-json"><a href="#vscode-launch-json" class="headerlink" title="vscode launch.json"></a><a href="#vscode_launch.json">vscode launch.json</a></h3><p>这里我们传入 start 作为参数,模拟在项目里跑 <code>yarn start</code> 的效果。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "version": "0.2.0",</div><div class="line">  "configurations": [</div><div class="line">    &#123;</div><div class="line">      "type": "node",</div><div class="line">      "request": "launch",</div><div class="line">      "name": "启动程序",</div><div class="line">      "program": "$&#123;workspaceFolder&#125;/node_modules/react-scripts/bin/react-scripts.js", //调试的文件路径</div><div class="line">      "args": [</div><div class="line">        "start" // 传入 start 做为参数</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em><strong>ps:下面的<code>react-scripts</code>没有特殊说明，都代表<code>project_path/node_modules/react-scripts</code>目录方便阅读</strong></em></p>
<h1 id="react-scripts-bin-react-scripts-js"><a href="#react-scripts-bin-react-scripts-js" class="headerlink" title="react-scripts/.bin/react-scripts.js"></a><a href="#react-scripts-bin-react-scripts-js">react-scripts/.bin/react-scripts.js</a></h1><p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/bin/react-scripts.js" target="_blank" rel="external">文件传送门</a><br>这里我们还是老办法，先不看依赖 看主流程理解先，我们能看到这个文件也是一个入口文件，非常简短。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> scriptIndex = args.findIndex(</div><div class="line">  <span class="function"><span class="params">x</span> =&gt;</span> x === <span class="string">'build'</span> || x === <span class="string">'eject'</span> || x === <span class="string">'start'</span> || x === <span class="string">'test'</span></div><div class="line">);</div><div class="line"><span class="keyword">const</span> script = scriptIndex === <span class="number">-1</span> ? args[<span class="number">0</span>] : args[scriptIndex];</div><div class="line"><span class="keyword">const</span> nodeArgs = scriptIndex &gt; <span class="number">0</span> ? args.slice(<span class="number">0</span>, scriptIndex) : [];</div></pre></td></tr></table></figure>
<p>首先处理传进来的参数，用<code>script</code>变量来获取我们跑的命令是哪一个，有[‘build’, ‘eject’, ‘start’, ‘test’]这么几种，分别对应 构建、暴露配置、开发、测试命令。<br>然后再获取一起传入的其他的参数，比如<code>npm test</code>命令就会带一个额外的参数<code>--env=jsdom</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (script) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'build'</span>:</div><div class="line">  <span class="keyword">case</span> <span class="string">'eject'</span>:</div><div class="line">  <span class="keyword">case</span> <span class="string">'start'</span>:</div><div class="line">  <span class="keyword">case</span> <span class="string">'test'</span>: &#123;</div><div class="line">    <span class="comment">// 用 cross-spawn 去跑一个同步的命令</span></div><div class="line">    <span class="comment">// 根据传入的命令来拼接对应的路径 用node去跑</span></div><div class="line">    <span class="keyword">const</span> result = spawn.sync(</div><div class="line">      <span class="string">'node'</span>,</div><div class="line">      nodeArgs</div><div class="line">        .concat(<span class="built_in">require</span>.resolve(<span class="string">'../scripts/'</span> + script))</div><div class="line">        .concat(args.slice(scriptIndex + <span class="number">1</span>)),</div><div class="line">      &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;</div><div class="line">    );</div><div class="line">    <span class="keyword">if</span> (result.signal) &#123;</div><div class="line">      <span class="keyword">if</span> (result.signal === <span class="string">'SIGKILL'</span>) &#123;</div><div class="line">        <span class="comment">// 输出错误提醒日志</span></div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.signal === <span class="string">'SIGTERM'</span>) &#123;</div><div class="line">        <span class="comment">// 输出错误提醒日志</span></div><div class="line">      &#125;</div><div class="line">      process.exit(<span class="number">1</span>); <span class="comment">// 退出进程， 传1代表有错误</span></div><div class="line">    &#125;</div><div class="line">    process.exit(result.status);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="comment">// 这里输出匹配不到对应的命令</span></div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后根据获取到的命令，对应到<code>react-scripts/scripts</code>下面的文件去跑，比如 <code>react-scripts start</code> 就会去跑 <code>react-scripts/scripts/start.js</code>。</p>
<p>这里插几句讲一下一个项目上比较常见的类库解耦方式，我们可以看到这里的 <code>spawn</code>引用的是<code>react-dev-utils/crossSpawn</code>。而在<code>react-dev-utils/corssSpawn</code>里面也只是简简单单的几句，引入<code>cross-spawn</code>再把<code>cross-spawn</code>暴露出去。<br>但是这么写就可以起到类库解耦的作用，比如以后这个库被爆出有重大的bug或者停止维护了，直接修改这个文件引入其他的类库，其他引用该文件的代码就不需要改动。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// react-dev-utils/corssSpawn</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> crossSpawn = <span class="built_in">require</span>(<span class="string">'cross-spawn'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = crossSpawn;</div></pre></td></tr></table></figure>
<h1 id="react-scripts-scripts-start-js"><a href="#react-scripts-scripts-start-js" class="headerlink" title="react-scripts/scripts/start.js"></a><a href="#react-scripts-scripts-start-js">react-scripts/scripts/start.js</a></h1><p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/scripts/start.js" target="_blank" rel="external">文件传送门</a></p>
<p>看过第一篇的人对这个文件夹应该不陌生，<code>create-react-app</code> 在安装完 <code>react</code> 等依赖之后，就会跑这个文件夹下面的<code>init.js</code>来拷贝模版文件，修改<code>package.json</code>等操作。</p>
<p>既然我们已经知道他要执行 start.js, 接下来我们把vscode调试文件修改为 start.js 文件<code>&quot;program&quot;: &quot;${workspaceFolder}/node_modules/react-scripts/scripts/start.js&quot;,</code> 之所以要修改是因为他这里不是引用js文件来运行，而是用终端来跑，所以不属于我们的项目调试范围~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">process.env.BABEL_ENV = <span class="string">'development'</span>;</div><div class="line">process.env.NODE_ENV = <span class="string">'development'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Makes the script crash on unhandled rejections instead of silently</span></div><div class="line"><span class="comment">// ignoring them. In the future, promise rejections that are not handled will</span></div><div class="line"><span class="comment">// terminate the Node.js process with a non-zero exit code.</span></div><div class="line">process.on(<span class="string">'unhandledRejection'</span>, err =&gt; &#123;</div><div class="line">  <span class="keyword">throw</span> err;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>文件的最开头设置了两个环境变量，因为 start 是用来跑开发的，所以这里的环境变量都是 <code>development</code>，然后再给 <code>process</code> 绑定一个错误监听函数，这个错误监听实质上是用来监听 <em>一些没有被.catch的Promise</em>。 <a href="https://nodejs.org/dist/latest-v8.x/docs/api/process.html#process_event_unhandledrejection" target="_blank" rel="external">具体可以看node的文档</a>, 关于 Promise可以看一下之前写过的一篇<a href="https://jsonz1993.github.io/2017/12/%E6%B5%85%E6%9E%90Promise/">介绍Promise的文章从用法和实现原理都有所涉及</a></p>
<p>接着引进一个 <code>../config/env</code>， 看文件名猜应该是做一些关于环境配置的事情，找到文件断点进来</p>
<h1 id="react-scripts-config-env-js"><a href="#react-scripts-config-env-js" class="headerlink" title="react-scripts/config/env.js"></a><a href="#react-scripts-config-env-js">react-scripts/config/env.js</a></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> paths = <span class="built_in">require</span>(<span class="string">'./paths'</span>);</div><div class="line"><span class="comment">// Make sure that including paths.js after env.js will read .env variables.</span></div><div class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[<span class="built_in">require</span>.resolve(<span class="string">'./paths'</span>)];</div></pre></td></tr></table></figure>
<p><code>env.js</code> 文件在引入 <code>./paths.js</code> 之后，立即把他从cache中删除掉，这样下次如果有其他的模块引入<code>paths.js</code>，就不会从缓存里面去获取，保证了<code>paths.js</code>里面执行逻辑都会用到最新的环境变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dotenvFiles = [</div><div class="line">  <span class="comment">// 举个例子：第一个元素在我的电脑路径是这样的 Users/jsonz/Documents/my-react-project/.env.development.local.js</span></div><div class="line">  <span class="string">`<span class="subst">$&#123;paths.dotenv&#125;</span>.<span class="subst">$&#123;NODE_ENV&#125;</span>.local`</span>,</div><div class="line">  <span class="string">`<span class="subst">$&#123;paths.dotenv&#125;</span>.<span class="subst">$&#123;NODE_ENV&#125;</span>`</span>,</div><div class="line">  NODE_ENV !== <span class="string">'test'</span> &amp;&amp; <span class="string">`<span class="subst">$&#123;paths.dotenv&#125;</span>.local`</span>,</div><div class="line">  paths.dotenv,</div><div class="line">].filter(<span class="built_in">Boolean</span>);</div></pre></td></tr></table></figure>
<p>然后再根据paths给出的地址去拿其他的环境变量，这里<code>paths.js</code>会根据不同的情况给出不同的路径，我们讨论的是正常的创建项目情况。<br>其他的几种情况有：</p>
<ol>
<li>我们在已经创建的项目跑了 <code>npm(yarn) eject</code>，这时候 <code>react-scripts</code>会把配置都暴露到 <code>project_path/config</code> 方便我们去根据项目修改配置，这个操作是不可逆的。</li>
<li>我们正常创建项目，直接跑项目，这时候配置就存放在<code>project/node_modules/react-scripts</code>。</li>
<li>开发人员自己调试用的，这时候配置存放在<code>create-react/packages/react-scripts/config</code>。</li>
</ol>
<p>拼装完路径之后，用<a href="https://www.npmjs.com/package/dotenv-expand" target="_blank" rel="external">dotenv-expand</a>和<a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="external">dotenv</a>来把文件里面的环境变量加载进来，这一块一般场景用不上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClientEnvironment</span>(<span class="params">publicUrl</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> raw = <span class="built_in">Object</span>.keys(process.env)</div><div class="line">    .filter(<span class="function"><span class="params">key</span> =&gt;</span> REACT_APP.test(key))</div><div class="line">    .reduce(</div><div class="line">      <span class="function">(<span class="params">env, key</span>) =&gt;</span> &#123;</div><div class="line">        env[key] = process.env[key];</div><div class="line">        <span class="keyword">return</span> env;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">NODE_ENV</span>: process.env.NODE_ENV || <span class="string">'development'</span>,</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  <span class="keyword">const</span> stringified = &#123;</div><div class="line">    <span class="string">'process.env'</span>: <span class="built_in">Object</span>.keys(raw).reduce(<span class="function">(<span class="params">env, key</span>) =&gt;</span> &#123;</div><div class="line">      env[key] = <span class="built_in">JSON</span>.stringify(raw[key]);</div><div class="line">      <span class="keyword">return</span> env;</div><div class="line">    &#125;, &#123;&#125;),</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> &#123; raw, stringified &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后返回一个 <code>getClientEnvironment</code>函数，这个函数执行后会返回客户端的环境变量。</p>
<h1 id="react-scripts-scripts-start-js-2"><a href="#react-scripts-scripts-start-js-2" class="headerlink" title="react-scripts/scripts/start.js(2)"></a><a href="#react-scripts-scripts-start-js-2">react-scripts/scripts/start.js(2)</a></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">const</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</div><div class="line"><span class="keyword">const</span> clearConsole = <span class="built_in">require</span>(<span class="string">'react-dev-utils/clearConsole'</span>);</div><div class="line"><span class="keyword">const</span> checkRequiredFiles = <span class="built_in">require</span>(<span class="string">'react-dev-utils/checkRequiredFiles'</span>);</div><div class="line"><span class="keyword">const</span> &#123;</div><div class="line">  choosePort,</div><div class="line">  createCompiler,</div><div class="line">  prepareProxy,</div><div class="line">  prepareUrls,</div><div class="line">&#125; = <span class="built_in">require</span>(<span class="string">'react-dev-utils/WebpackDevServerUtils'</span>);</div><div class="line"><span class="keyword">const</span> openBrowser = <span class="built_in">require</span>(<span class="string">'react-dev-utils/openBrowser'</span>);</div><div class="line"><span class="keyword">const</span> paths = <span class="built_in">require</span>(<span class="string">'../config/paths'</span>);</div><div class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/webpack.config.dev'</span>);</div><div class="line"><span class="keyword">const</span> createDevServerConfig = <span class="built_in">require</span>(<span class="string">'../config/webpackDevServer.config'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> useYarn = fs.existsSync(paths.yarnLockFile);</div><div class="line"><span class="keyword">const</span> isInteractive = process.stdout.isTTY;</div></pre></td></tr></table></figure>
<p>加载完各种环境变量之后，我们回到<code>react-scripts/scripts/start.js</code>，老规矩，一系列的依赖先跳过不看，后面用到再来看。<br>还记得我们在<code>env.js</code>里面delet掉node.catch吗，这里<code>conts paths = require(&#39;../config/paths)</code>就不会从缓存里面去拿而是重新去加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) &#123;</div><div class="line">  process.exit(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先判断一下我们两个入口文件有没有存在，分别是<code>project_path/public/index.html</code>和<code>project_path/src/index.js</code>，如果不存在给出提示结束程序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DEFAULT_PORT = <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">3000</span>;</div><div class="line"><span class="keyword">const</span> HOST = process.env.HOST || <span class="string">'0.0.0.0'</span>;</div></pre></td></tr></table></figure>
<p>然后设置默认的端口和host，如果有特殊的需求，可以从环境变量传进去改变，没有就会用默认的<code>3000</code>端口。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">choosePort(HOST, DEFAULT_PORT).then(...) <span class="comment">// @return Promise</span></div></pre></td></tr></table></figure>
<p>设置完默认的端口与host之后，开始判断这个端口有没有被其他的进程占用，有的话会提供下一个可用的端口，我们顺着<code>choosePort</code>去文件头找依赖，找到该方法位于依赖<code>react-dev-utils/WebpackDevServerUtils</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">choosePort</span>(<span class="params">host, defaultPort</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> detect(defaultPort, host).then(</div><div class="line">    <span class="function"><span class="params">port</span> =&gt;</span></div><div class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (port === defaultPort) &#123;</div><div class="line">          <span class="keyword">return</span> resolve(port);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">const</span> message =</div><div class="line">          process.platform !== <span class="string">'win32'</span> &amp;&amp; defaultPort &lt; <span class="number">1024</span> &amp;&amp; !isRoot()</div><div class="line">            ? <span class="string">`Admin permissions are required to run a server on a port below 1024.`</span></div><div class="line">            : <span class="string">`Something is already running on port <span class="subst">$&#123;defaultPort&#125;</span>.`</span>;</div><div class="line">        <span class="keyword">if</span> (isInteractive) &#123;</div><div class="line">          clearConsole();</div><div class="line">          <span class="keyword">const</span> existingProcess = getProcessForPort(defaultPort);</div><div class="line">          <span class="keyword">const</span> question = &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'confirm'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'shouldChangePort'</span>,</div><div class="line">            <span class="attr">message</span>:</div><div class="line">              chalk.yellow(</div><div class="line">                message +</div><div class="line">                  <span class="string">`<span class="subst">$&#123;existingProcess ? <span class="string">` Probably:\n  <span class="subst">$&#123;existingProcess&#125;</span>`</span> : <span class="string">''</span>&#125;</span>`</span></div><div class="line">              ) + <span class="string">'\n\nWould you like to run the app on another port instead?'</span>,</div><div class="line">            <span class="attr">default</span>: <span class="literal">true</span>,</div><div class="line">          &#125;;</div><div class="line">          inquirer.prompt(question).then(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (answer.shouldChangePort) &#123;</div><div class="line">              resolve(port);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              resolve(<span class="literal">null</span>);</div><div class="line">            &#125;</div><div class="line">          &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(chalk.red(message));</div><div class="line">          resolve(<span class="literal">null</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;),</div><div class="line">    err =&gt; &#123;</div><div class="line">      <span class="comment">// 输出错误日志</span></div><div class="line">    &#125;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>choosePort</code> 里面用到<a href="https://www.npmjs.com/package/detect-port-alt" target="_blank" rel="external">detect-port-alt</a>去检测端口占用，如果被占用了返回一个最接近的递增方向可用的端口，比如3000端口被占用,3001没被占用就返回回来。<br>如果发现返回的可用端口不是默认的端口，给出一个交互式的命令询问用户是否要换一个端口去访问，交互式命令用的是<a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="external">inquirer</a>这个包。<br>这里如果用vsCode来调试，<code>process.stdout.isTTY</code> 返回的值是<code>undefined</code>。所以如果要测试这一块交互式命令，只能切回系统的终端去调试~</p>
<p><img src="./tty_choose_port.png" alt="交互式命令询问是否切换端口" title="交互式命令询问是否切换端口"></p>
<p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/scripts/start.js#L71" target="_blank" rel="external">文件传送门</a><br>检测完可用端口之后，回到<code>start.js</code>。</p>
<p>前端处理一堆环境变量，还有加载一堆配置，全都用在这一块。这里主要做的就是把环境变量和配置组装起来，开个webpack本地调试服务。主要做的事情有:</p>
<ol>
<li>如果没有找到可用的端口直接返回不继续执行下去</li>
<li>根据环境变量判断是否启用<code>https</code>，默认是<code>http</code>。</li>
<li>根据 host, protocol, port 拼装一系列的url，包括<code>Browser</code>的url与<code>Terminal</code>的url。</li>
<li>调用<code>createCompiler</code> 传入webpack，webpack配置，appName，第三步获取的url，还有是否使用Yarn等参数，生成一个 webpackCompiler。createCompiler负责的东西有:<br>4.1 根据环境变量判断是否有冒烟测试的需求，如果有加一个 <code>handleCompile</code>，一有错误就中断程序。<br>4.2 用传进来的配置和handleCompile生成一个webpackCompiler<br>4.2 增加<code>invalid</code>钩子，一检测到更改文件，而且是交互式终端的话，先清空控制台，再输出日志<br>4.3 增加<code>done</code>钩子，对webpack的输出日志整理统一输出</li>
<li>创建开发服务配置 具体的配置代码放在<code>webpackDevServer.config.js</code></li>
<li>把4和5丢给 <code>WebpackDevServer</code>，生成一个 webpack 本地开发服务</li>
<li>大功告成，清除屏幕，打开调试连接</li>
</ol>
<p>相关的代码执行写到注释里面去了，没办法每个方法配置都拎出来讲…不然篇幅会很长，这里面很多点一讲都可以是一个知识点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">choosePort(HOST, DEFAULT_PORT)</div><div class="line">  .then(<span class="function"><span class="params">port</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 没有找到可用端口，直接return</span></div><div class="line">    <span class="keyword">if</span> (port == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 根据环境变量判断是否要用https</span></div><div class="line">    <span class="keyword">const</span> protocol = process.env.HTTPS === <span class="string">'true'</span> ? <span class="string">'https'</span> : <span class="string">'http'</span>;</div><div class="line">    <span class="keyword">const</span> appName = <span class="built_in">require</span>(paths.appPackageJson).name;</div><div class="line">    <span class="comment">// 获取当前的 host, port, protocol 生成一系列url</span></div><div class="line">    <span class="keyword">const</span> urls = prepareUrls(protocol, HOST, port);</div><div class="line">    <span class="comment">// 创建一个webpack compiler</span></div><div class="line">    <span class="keyword">const</span> compiler = createCompiler(webpack, config, appName, urls, useYarn);</div><div class="line">    <span class="comment">// 加载代理的配置，在 project_path/package.json 里面加载配置</span></div><div class="line">    <span class="keyword">const</span> proxySetting = <span class="built_in">require</span>(paths.appPackageJson).proxy;</div><div class="line">    <span class="keyword">const</span> proxyConfig = prepareProxy(proxySetting, paths.appPublic);</div><div class="line">    <span class="comment">// 生成 webpack dev server 的配置</span></div><div class="line">    <span class="keyword">const</span> serverConfig = createDevServerConfig(</div><div class="line">      proxyConfig,</div><div class="line">      urls.lanUrlForConfig</div><div class="line">    );</div><div class="line">    <span class="keyword">const</span> devServer = <span class="keyword">new</span> WebpackDevServer(compiler, serverConfig);</div><div class="line">    <span class="comment">// 监听 devServer</span></div><div class="line">    devServer.listen(port, HOST, err =&gt; &#123;</div><div class="line">      <span class="comment">// 一些日志输出</span></div><div class="line">      <span class="comment">// 自动用默认浏览器打开调试链接</span></div><div class="line">      openBrowser(urls.localUrlForBrowser);</div><div class="line">    &#125;);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 错误处理</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p><code>react-dev-utils/WebpackDevServerUtils.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCompiler</span>(<span class="params">webpack, config, appName, urls, useYarn</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> compiler;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    compiler = webpack(config, handleCompile); <span class="comment">// handleCompile为冒烟测试的对应处理</span></div><div class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">    <span class="comment">// 错误提示</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  compiler.plugin(<span class="string">'invalid'</span>, () =&gt; &#123;</div><div class="line">    <span class="comment">// invalid 钩子，如果当前处于TTY终端，那么先清除控制台再输出 Compiling...</span></div><div class="line">    <span class="keyword">if</span> (isInteractive) &#123;</div><div class="line">      clearConsole();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Compiling...'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">let</span> isFirstCompile = <span class="literal">true</span>;</div><div class="line"></div><div class="line">  compiler.plugin(<span class="string">'done'</span>, stats =&gt; &#123;</div><div class="line">    <span class="comment">// 监听了 done 事件，对输出的日志做了格式化输出</span></div><div class="line">    <span class="comment">// 正常情况下会直接输出 `Compiled successfully!`</span></div><div class="line">    <span class="comment">// 如果有错误则输出错误信息，这里对错误信息做一些处理，让其输出比较友好</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> compiler;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="./webpackDevServer_error.png" alt="输出日志格式化处理" title="输出日志统一格式化处理"></p>
<h1 id="最后讲两句"><a href="#最后讲两句" class="headerlink" title="最后讲两句"></a>最后讲两句</h1><p>之前就一直好奇，这些脚手架是怎么清空我们的终端屏幕的。在看<code>create-react-app</code>的时候，瞄到有这么一个文件<a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-dev-utils/clearConsole.js" target="_blank" rel="external">react-dev-utils/clearConsole.js</a>。这个文件十分剪短，核心代码就那么一句:</p>
<h2 id="react-dev-utils-clearConsole-js"><a href="#react-dev-utils-clearConsole-js" class="headerlink" title="react-dev-utils/clearConsole.js"></a><a href="#react-dev-utils-clearConsole-js">react-dev-utils/clearConsole.js</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process.stdout.write(process.platform === <span class="string">'win32'</span> ? <span class="string">'\x1B[2J\x1B[0f'</span> : <span class="string">'\x1B[2J\x1B[3J\x1B[H'</span>);</div></pre></td></tr></table></figure>
<p>然后好奇心特别重，不知道后面两串是什么意思，一直搜没有找到想要的答案。问了身边的同事，说是十六进制，而在我狭隘的认知里面一直以为十六进制只能转成数字….但是定睛一看，这有个<code>J</code> 明显不是十六进制。一个女装大佬和我说这是ASCII码，百度了一下ASCII码，看了 <code>\x1B</code> ASCII对应到 <code>ESC</code>。 但是后面的 <code>[2J</code> <code>[3J</code> <code>[H</code> 是什么意思还是不清楚…<br>后面大佬又和我说找到可能是 <strong>Linux ANSI 控制码</strong> 找来找去折腾了挺久的后面才揭开神秘面纱~<br>这几个命令大概的意思是:<br><code>[2J</code> 清除控制台<br><code>[H</code> 将光标移至最顶部<br><code>[3J</code>还是没有找到，应该是更高级的系统层级的清除控制台<br>给出几个 Linux ANSI 控制码资料网站<br><a href="http://manpages.ubuntu.com/manpages/bionic/zh_CN/man4/console_codes.4.html" target="_blank" rel="external">Ubuntu Manpage: 控制终端代码 - Linux 控制终端转义和控制序列</a><br><a href="www.cnblogs.com/mugua/archive/2009/11/25/1610118.html">控制终端代码 - Linux 控制终端转义和控制序列(转) - 木瓜脑袋 - 博客园</a></p>
<p>最后前端的小伙伴很多和我一样不是科班出身的，真的得加把劲补补一些计算机比较原理性或比较接近系统层级的知识~</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018-05-08面试记B]]></title>
      <url>https://jsonz1993.github.io/2018/05/2018-05-08/</url>
      <content type="html"><![CDATA[<p>欧啦啦啦啦啦啦啦啦啦 </p>
<p>记录下最近的面试等情况~~~ </p>
<h2 id="简历投递情况2"><a href="#简历投递情况2" class="headerlink" title="简历投递情况2"></a>简历投递情况2</h2><p><a href="https://jsonz1993.github.io/2018/04/2018-04-29/">简历投递情况传送门</a><br>据不完全统计:<br>投 <code>荔枝</code> 技术面<br>投 <code>100教育</code> 待沟通<br>投 <code>尚德教育</code> 没面试机会</p>
<p>最最最最最开心的事情可能就是面了荔枝~ 虽然最后没有过 不过还是挺不错的一次体验 记录一下</p>
<p>首先流程是： 笔试 =&gt; 机试 =&gt; 两个人的技术面</p>
<p>笔试比较基础的问题，但是面试官会根据写的题问思路，而且会各种变形问，可以比较深了解基础的知识。</p>
<p>以下只是个人的面试记录，如果发现有不妥的联系即删。</p>
<h2 id="荔枝笔试"><a href="#荔枝笔试" class="headerlink" title="荔枝笔试"></a>荔枝笔试</h2><ol>
<li><p>作用域的问题</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> t;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  <span class="keyword">var</span> t;</div><div class="line">  t = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">typeof</span> a();</div><div class="line"></div><div class="line"><span class="comment">// 还有各种变形</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  <span class="keyword">var</span> t;</div><div class="line">  <span class="keyword">return</span> t;</div><div class="line">  t = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  <span class="keyword">var</span> t;</div><div class="line">  <span class="keyword">return</span> t;</div><div class="line">  t = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  <span class="keyword">var</span> t;</div><div class="line">  <span class="keyword">return</span> t;</div><div class="line">  t = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> t;</div><div class="line">  <span class="keyword">var</span> t;</div><div class="line">  t = <span class="number">20</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>兼容低版本浏览器模拟 Function.prototype.bind</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">直接用 call || allpy 模拟，返回一个闭包，参数用 <span class="built_in">Array</span>.prototype.slice.apple 去取即可~</div></pre></td></tr></table></figure>
</li>
<li><p>关于正则的比较简单~ 不写出来了</p>
</li>
<li><p>关于zIndex的，推荐直接看张鑫旭大佬的文章，超不过那个范围<a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="external">张鑫旭大佬传送门</a></p>
</li>
<li><p>实现一个宽高都是浏览器 40%的正方形</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 用vw方案</div><div class="line">2. 用padding ( emmm 这个面试大佬提示了才想起 padding 是根据父级宽度的)</div></pre></td></tr></table></figure>
</li>
<li><p>a,b,c,d 四个接口，求最快 || 最慢的响应时间</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">直接用 <span class="built_in">Promise</span>.all || <span class="built_in">Promise</span>.race 即可</div></pre></td></tr></table></figure>
</li>
</ol>
<p>笔试题还好，作用域那一题有点混 其他没什么问题，算是有惊无险</p>
<h2 id="机试"><a href="#机试" class="headerlink" title="机试"></a>机试</h2><p>机试题二选一 一个是实现一个<code>dialog</code> 一个是实现一个验证表单<br>选了 dialog 做的时候没有看题…有个功能点没有实现完全就跑去做验证题，验证题没有做完<br>dialog 应该算是实现的不够及格线</p>
<p>引出了挺多优化方案的，比如 dom 处理，比如动画处理，里面有一个面试官暗示了好多次，但是没有想起来的一个api <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/animationend" target="_blank" rel="external">animationend</a><br><a href="http://www.runoob.com/jsref/event-animationend.html" target="_blank" rel="external">animationend demo</a></p>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>面试就根据前面做的两份题扩展去问思路等等</p>
<p>问题的套路是比较喜欢的，举个例子：</p>
<p>Q: 左边自适应，右边固定有什么布局?<br>A: flex布局, flex: 1 &amp;&amp; width: …<br>Q: 浏览器这时候缩小会有什么情况？<br>A: flex: 1 慢慢缩小，另一个不变（这个回答我模棱两可犹豫了，虽然知道是不变，但是好像项目中有遇过变的…扣分了)<br>Q: 还有其他的吗?<br>A: 浮动 float:left; overflow: auto<br>Q: 清除浮动有哪些<br>A: 委元素清除 &amp;&amp; BFC<br>Q: BFC是什么，有什么作用，怎么设置BFC<br>A: 块级格式化上下文，清除浮动或者消除master合并，可以用overflow(hidden,auto,scroll) || float(left,right) || display(inline-block) || position(absolute, fixed)</p>
<p>后面聊了下 工作的优化， webpack构建， react优化, 缓存机制(涉及http), pwa等等</p>
<p>还问了小程序和vue的东西，但是其实上一次做小程序已经是一年前了，说了vue和小程序的上手不应该成为一个问题所在。</p>
<p>然后问了下职业规划，说了最近是在看 <code>create-react-app</code>源码，接下来的规划是 <strong>专前端 通其他</strong></p>
<h2 id="荔枝结果"><a href="#荔枝结果" class="headerlink" title="荔枝结果"></a>荔枝结果</h2><p>工作优化可能不是很满意<br>webpack构建优化应该还行，毕竟项目上用的比较多<br>react也还好，虽然面试的是用vue和小程序<br>pwa也有所了解<br>主要是 http这块暴露了后台知识薄弱，没有形成一个比较全面知识体系</p>
<p>后面还被嫌弃了三年呆了三个公司太过频繁</p>
<p>最后让面试官给了一下面试的评价：<br><strong>1. css 概念不熟</strong><br><strong>2. 浏览器api认识不全</strong><br><strong>3. http、后端知识没有系统学习</strong><br><strong>4. 跳槽过多~ 三年呆了三个公司</strong></p>
<p>╮(╯▽╰)╭哎 还闹了个乌龙，想说 《CSS世界》 说成 《css揭秘》</p>
<p>最近应该折腾完手上东西后，会比较系统的去看 切图写页面的这一块，比较 html+css 其实也是很重要的</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[create-react-app 源码解析]]></title>
      <url>https://jsonz1993.github.io/2018/05/create-react-app-o/</url>
      <content type="html"><![CDATA[<p>最近工作开始稳定下来，没有那么多加班，加上说投简历找面试一直没拿到面试机会…所以开始有空闲的时间</p>
<p>之前公司有个大佬写了个类似 create-react-app 的脚手架，用来创建公司的项目。一直不知道里面实现的原理，借此机会一探 <code>create-react-app</code> 源码，了解下里面运行的机制。</p>
<p>授人以鱼不如授人以渔，希望通过这篇文章之后，对大家以后看源码可以有所帮助。<br>大家也不要一看到源码就害怕不敢去看，现在这么优秀项目都开源了，加上各种IDE支持很好，直接打个断点进去调试，很容易看出个大概。<br>也可以用这种思路去了解其他的开源项目</p>
<h1 id="快速了解"><a href="#快速了解" class="headerlink" title="快速了解"></a><a href="#快速了解">快速了解</a></h1><p>对于想快速了解的直接浏览这一块即可<br>create-react-app 其实就是用node去跑一些包安装流程，并且把文件模板demo考到对于的目录下。<br>可以简单分为以下几个步骤:</p>
<ul>
<li>判断Node版本</li>
<li>做一些命令行处理的初始化，比如输入 <code>-help</code> 则输出帮助内容</li>
<li>判断是否有输入项目名，有则根据参数去跑包安装，默认是yarn安装方式，eg: <code>yarn add react react-dom react-scripts</code></li>
<li>修改package.json里面已安装的依赖版本，从精确版本<code>16.0.0</code>改为^向上兼容版本<code>^16.0.0</code> 并加入 <code>start</code>,<code>build</code>等启动脚本</li>
<li>拷贝 <code>react-scripts</code>下的 <code>template</code> 到目标文件，里面有<code>public</code>,<code>src</code>等文件夹，其实就是一个简单的可运行demo</li>
<li>END~</li>
</ul>
<p>继续往下看的小伙伴可以跟着一步一步了解里面的实现逻辑，先例行交代下环境版本:<br><strong>create-react-app v1.1.4</strong><br>macOS 10.13.4<br>node v8.9.4<br>npm 6.0.0<br>yarn 1.6.0<br>vsCode 1.22.2</p>
<h1 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a><a href="#项目初始化">项目初始化</a></h1><p>先上github 拉项目代码，拉下来之后切换到指定的 <code>tag</code></p>
<ul>
<li><code>git clone https://github.com/facebook/create-react-app.git</code></li>
<li><code>git checkout v1.1.4</code></li>
<li><code>yarn</code> //如果不需要断点调试，这一步可以跳过</li>
</ul>
<blockquote>
<p>这里可能yarn 版本太低的话，会报一系列错误，之前用的是 0.x版本的，升级到1.x就没问题了</p>
</blockquote>
<p>下面我们用 <code>root</code> 代替项目的根目录，方便理解</p>
<p>首先我们打开项目能看到一堆的配置文件和两个文件夹：eslint配置文件、travis部署配置、yarn配置、更新日志、开源声明等等…这些我们全都可以不用去看，那我们要看的核心源码放在哪里呢<br><img src="./create-react-app-file.png" alt=""></p>
<p>划重点: <strong>如果项目不知道从哪里入手的话，首先从package.json文件开始</strong><br><figure class="highlight json"><figcaption><span>root/package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"workspaces"</span>: [</div><div class="line">    <span class="string">"packages/*"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"cd packages/react-scripts &amp;&amp; node scripts/start.js"</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"lint-staged"</span>: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打开根目录 package.json 我们可以看到里面很简洁~ npm脚本命令，开发依赖，还有提交钩子，剩下的就是我们要关注的 <strong>workspaces</strong> 这里指向的是 <code>&quot;packages/*&quot;</code>，所以我们现在的重点就放在 <strong>packages</strong> 文件夹</p>
<p>packages 文件夹下面也有几个文件夹，这里文件夹命名很规范，一看就知道功能划分，所以还是老套路直接看 <code>root/packages/create-react-app/package.json</code></p>
<figure class="highlight json"><figcaption><span>packages/create-react-app/package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"create-react-app"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.5.2"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"engines"</span>: &#123;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"bugs"</span>: &#123;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"files"</span>: [</div><div class="line">    <span class="string">"index.js"</span>,</div><div class="line">    <span class="string">"createReactApp.js"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"bin"</span>: &#123;</div><div class="line">    <span class="attr">"create-react-app"</span>: <span class="string">"./index.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候没有 <code>workspaces</code>项， 我们可以看 <code>bin</code> bin的功能是把命令对应到可执行的文件，具体的介绍可以看<a href="https://docs.npmjs.com/files/package.json#bin" target="_blank" rel="external">package Document</a></p>
<p>这里可以简单理解成，当我们全局安装了 <code>create-react-app</code> 之后，跑 <code>create-react-app my-react-app</code> 系统会帮我们去跑 <code>packages/create-react-app/index.js my-react-app</code></p>
<p>终于找到源码的入口了，对于简单的源码我们可以直接看，对于比较复杂的 或者想要看到执行到每一行代码时那些变量是什么值的情况，我们就要用IDE或其他工具来断点调试代码了。</p>
<h1 id="配置断点调试"><a href="#配置断点调试" class="headerlink" title="配置断点调试"></a><a href="#配置断点调试">配置断点调试</a></h1><p>对于vscode或node调试 比较熟悉的可以跳过直接看 <a href="#开始断点阅读源码">开始断点阅读源码</a></p>
<h2 id="vscode-debug"><a href="#vscode-debug" class="headerlink" title="vscode debug"></a><a href="#vscode_debug">vscode debug</a></h2><p>对于vscode用户来说，调试非常简单，点击侧边栏的小甲虫图标，点击设置<br>然后直接修改 “program”的值，修改完点击左上角的绿色箭头就可以跑起来了，如果要在某一处断点，比如 <code>create-react-app/index.js</code> line39 断点，直接在行号的左边点一下鼠标就可以了<br><img src="./debug1.png" alt=""><br><img src="./debug2.png" alt=""><br><figure class="highlight json"><figcaption><span>launch.json 配置</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">  <span class="attr">"configurations"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"type"</span>: <span class="string">"node"</span>,</div><div class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"启动程序"</span>,</div><div class="line">      <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/packages/create-react-app/index.js"</span>,</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="node-调试"><a href="#node-调试" class="headerlink" title="node 调试"></a>node 调试</h2><p>如果平时没有用vscode开发或者习惯chrome-devtool的，可以直接用node命令跑，然后在chrome里面调试<br>首先保证node的版本的 6 以上<br>然后在项目根目录下运行 <code>node --inspect-brk packages/create-react-app/index.js</code><br>在chrome地址栏输入 chrome://inspect/#devices 然后就可以看到我们要调试的脚本了<br>关于node chrome-devtool 调试详细可以看这里 <a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="external">传送门</a></p>
<p><img src="./debug3.png" alt="" title="终端启动node调试"><br><img src="./debug4.png" alt=""><br><img src="./debug5.png" alt=""><br>(ps：这里可以看出来node在模块化的实现是通过用一个函数包裹起来，然后把 exports, requestd等参数传进来以供使用)</p>
<h1 id="开始断点阅读源码"><a href="#开始断点阅读源码" class="headerlink" title="开始断点阅读源码"></a><a href="#开始断点阅读源码">开始断点阅读源码</a></h1><h2 id="packages-create-react-app-index-js-github文件传送门"><a href="#packages-create-react-app-index-js-github文件传送门" class="headerlink" title="packages/create-react-app/index.js github文件传送门"></a><a href="#packages/create-react-app/index.js">packages/create-react-app/index.js</a> <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/index.js" target="_blank" rel="external">github文件传送门</a></h2><p><img src="./create-react-app_index.png" alt="" title="packages/creat-react-app/index.js"><br>这个文件十分简单，只是做为一个入口文件判断一下 node版本，小于 4.x的提示并终止程序， 如果正常则加载 <code>./createReactApp</code> 这个文件，主要的逻辑在该文件实现。</p>
<h2 id="packages-create-react-app-createReactApp-js-github文件传送门"><a href="#packages-create-react-app-createReactApp-js-github文件传送门" class="headerlink" title="packages/create-react-app/createReactApp.js github文件传送门"></a><a href="#packages/create-react-app/createReactApp.js">packages/create-react-app/createReactApp.js</a> <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js" target="_blank" rel="external">github文件传送门</a></h2><p>顺着我们的断点进入到 <code>createReactApp.js</code> 这个文件有750行乍一看很多，文件头又有十几个依赖引入，但是不要被吓到，一般这种高质量的开源项目，里面有一大半是注释和错误友好信息。</p>
<blockquote>
<p>这里建议没有打断点调试的小伙伴试一下把代码复制到另一个js文件，然后先不看前面的依赖，下面用到再去 npm查一下是什么作用的。不要被绕进去看了一个又一个的依赖，核心代码反而没有看到。 然后看一部分之后就把那部分的代码删掉，比如我看了200行，就把前面200行删了，这样剩下500行看着就没有那么心虚了。当然还是建议用断点调试阅读，逻辑会比较清晰。</p>
</blockquote>
<p>首先文件头部这一大串的依赖，我们暂时不去关注他们，等后面用到再去查<br><figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> validateProjectName = <span class="built_in">require</span>(<span class="string">'validate-npm-package-name'</span>);</div><div class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line"><span class="keyword">const</span> commander = <span class="built_in">require</span>(<span class="string">'commander'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> execSync = <span class="built_in">require</span>(<span class="string">'child_process'</span>).execSync;</div><div class="line"><span class="keyword">const</span> spawn = <span class="built_in">require</span>(<span class="string">'cross-spawn'</span>);</div><div class="line"><span class="keyword">const</span> semver = <span class="built_in">require</span>(<span class="string">'semver'</span>);</div><div class="line"><span class="keyword">const</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>);</div><div class="line"><span class="keyword">const</span> tmp = <span class="built_in">require</span>(<span class="string">'tmp'</span>);</div><div class="line"><span class="keyword">const</span> unpack = <span class="built_in">require</span>(<span class="string">'tar-pack'</span>).unpack;</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">const</span> hyperquest = <span class="built_in">require</span>(<span class="string">'hyperquest'</span>);</div><div class="line"><span class="keyword">const</span> envinfo = <span class="built_in">require</span>(<span class="string">'envinfo'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="commander-命令行处理程序"><a href="#commander-命令行处理程序" class="headerlink" title="commander 命令行处理程序"></a><a href="#commander">commander 命令行处理程序</a></h3><p>接下来顺着我们的断点，第一行被执行的代码是 <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js#L56" target="_blank" rel="external">L56</a></p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> commander.Command(packageJson.name)</div><div class="line">  .version(packageJson.version) <span class="comment">// create-react-app -v 时输出 $&#123;packageJson.version&#125;</span></div><div class="line">  .arguments(<span class="string">'&lt;project-directory&gt;'</span>) <span class="comment">// 这里用&lt;&gt; 包着project-directory 表示 project-directory为必填项</span></div><div class="line">  .usage(<span class="string">`<span class="subst">$&#123;chalk.green(<span class="string">'&lt;project-directory&gt;'</span>)&#125;</span> [options]`</span>) <span class="comment">// 用绿色字体输出 &lt;project-directory&gt;</span></div><div class="line">  .action(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">    projectName = name;</div><div class="line">  &#125;) <span class="comment">// 获取用户传入的第一个参数作为 projectName **下面就会用到**</span></div><div class="line">  .option(<span class="string">'--verbose'</span>, <span class="string">'print additional logs'</span>) <span class="comment">// option用于配置`create-react-app -[option]`的选项，比如这里如果用户参数带了 --verbose， 会自动设置program.verbose = true;</span></div><div class="line">  .option(<span class="string">'--info'</span>, <span class="string">'print environment debug info'</span>) <span class="comment">// 后面会用到这个参数，用于打印出环境调试的版本信息</span></div><div class="line">  .option(</div><div class="line">    <span class="string">'--scripts-version &lt;alternative-package&gt;'</span>,</div><div class="line">    <span class="string">'use a non-standard version of react-scripts'</span></div><div class="line">  )</div><div class="line">  .option(<span class="string">'--use-npm'</span>)</div><div class="line">  .allowUnknownOption()</div><div class="line">   <span class="comment">// on('option', cb) 输入 create-react-app --help 自动执行后面的操作输出帮助</span></div><div class="line">  .on(<span class="string">'--help'</span>, () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`    Only <span class="subst">$&#123;chalk.green(<span class="string">'&lt;project-directory&gt;'</span>)&#125;</span> is required.`</span>);</div><div class="line">    <span class="built_in">console</span>.log();</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`    A custom <span class="subst">$&#123;chalk.cyan(<span class="string">'--scripts-version'</span>)&#125;</span> can be one of:`</span></div><div class="line">    );</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`      - a specific npm version: <span class="subst">$&#123;chalk.green(<span class="string">'0.8.2'</span>)&#125;</span>`</span>);</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`      - a custom fork published on npm: <span class="subst">$&#123;chalk.green(</span></span></div><div class="line">        <span class="string">'my-react-scripts'</span></div><div class="line">      )&#125;`</div><div class="line">    );</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`      - a .tgz archive: <span class="subst">$&#123;chalk.green(</span></span></div><div class="line">        <span class="string">'https://mysite.com/my-react-scripts-0.8.2.tgz'</span></div><div class="line">      )&#125;`</div><div class="line">    );</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`      - a .tar.gz archive: <span class="subst">$&#123;chalk.green(</span></span></div><div class="line">        <span class="string">'https://mysite.com/my-react-scripts-0.8.2.tar.gz'</span></div><div class="line">      )&#125;`</div><div class="line">    );</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`    It is not needed unless you specifically want to use a fork.`</span></div><div class="line">    );</div><div class="line">    <span class="built_in">console</span>.log();</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`    If you have any problems, do not hesitate to file an issue:`</span></div><div class="line">    );</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      <span class="string">`      <span class="subst">$&#123;chalk.cyan(</span></span></div><div class="line">        <span class="string">'https://github.com/facebookincubator/create-react-app/issues/new'</span></div><div class="line">      )&#125;`</div><div class="line">    );</div><div class="line">    <span class="built_in">console</span>.log();</div><div class="line">  &#125;)</div><div class="line">  .parse(process.argv); <span class="comment">// 解析传入的参数 可以不用理会</span></div></pre></td></tr></table></figure>
<p>这里用到了一个 commander 的依赖，这时候我们就可以去npm 搜一下他的作用了。官网的描述是 <code>The complete solution for node.js command-line interfaces, inspired by Ruby&#39;s commander.API documentation</code> 翻译过来是 node.js 命令行接口的完整解决方案，基本的功能看注释即可，大概了解一下有这么一个东西，后面自己要做的时候有门路即可。<a href="https://github.com/tj/commander.js" target="_blank" rel="external">github传送门</a>。</p>
<h3 id="判断是否有传projectName"><a href="#判断是否有传projectName" class="headerlink" title="判断是否有传projectName"></a><a href="#projectName">判断是否有传projectName</a></h3><figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> projectName === <span class="string">'undefined'</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (program.info) &#123; <span class="comment">// 如果命令行有带 --info 参数，输出 react,react-dom,react-scripts版本 然后退出</span></div><div class="line">    envinfo.print(&#123;</div><div class="line">      <span class="attr">packages</span>: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-scripts'</span>],</div><div class="line">      <span class="attr">noNativeIDE</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">duplicates</span>: <span class="literal">true</span>,</div><div class="line">    &#125;);</div><div class="line">    process.exit(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">  这里输出了一些错误提示信息</div><div class="line">  ...</div><div class="line">  process.exit(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>往下看是一个判断必须传入的参数 <code>projectName</code>，这里的 <code>projectName</code> 就是上面通过 <code>.action(name =&gt; { projectName = name;})</code> 获取的。<br>判断如果没有输入的话，直接做一些信息提示，然后终止程序。<br>这里参数如果传入了 <code>--info</code> 的话， 会执行到<code>envinfo.print</code>。 日常npm 搜一下 envinfo 这是一个用来输出当前环境系统的一些系统信息，比如系统版本，npm等等还有react,react-dom,react-scripts这些包的版本，非常好用。这个包现在的版本和create-react-app的版本差异比较大，但是不影响我们使用~ <a href="https://www.npmjs.com/package/envinfo" target="_blank" rel="external">envinfo npm传送门</a></p>
<p>如果是用我上面提供的 vscode debug配置的话，到这里程序应该就运行结束了，因为我们在启动调试服务的时候，没有给脚本传入参数作为 <code>projectName</code>，所以我们修改一下 vscode <code>launch.json</code> 加多个字段 <code>&quot;args&quot;: [&quot;test-create-react-app&quot;]</code> <a href="#vscode_debug">忘记怎么设置的点这里</a>~ 传入了 <code>projectName</code> 参数 然后重新启动调试服务<br><figure class="highlight json"><figcaption><span>加入projectName 后的 launch.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">  <span class="attr">"configurations"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"type"</span>: <span class="string">"node"</span>,</div><div class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"启动程序"</span>,</div><div class="line">      <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/packages/create-react-app/index.js"</span>,</div><div class="line">      <span class="attr">"args"</span>: [</div><div class="line">        <span class="string">"test-create-react-app"</span></div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="隐藏的-commander-参数"><a href="#隐藏的-commander-参数" class="headerlink" title="隐藏的 commander 参数"></a><a href="#dev_commander">隐藏的 commander 参数</a></h3><p>接着走判断完 projectName 之后，来到 <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js#L140" target="_blank" rel="external">Line140</a></p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> hiddenProgram = <span class="keyword">new</span> commander.Command()</div><div class="line">  .option(</div><div class="line">    <span class="string">'--internal-testing-template &lt;path-to-template&gt;'</span>,</div><div class="line">    <span class="string">'(internal usage only, DO NOT RELY ON THIS) '</span> +</div><div class="line">      <span class="string">'use a non-standard application template'</span></div><div class="line">  )</div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure>
<p>可以看到这个是一个隐藏的调试选项，给出一个参数用于传入模版路径，给开发人员调试用的…没事不折腾他</p>
<h3 id="createApp"><a href="#createApp" class="headerlink" title="createApp"></a><a href="#createApp">createApp</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">createApp(</div><div class="line">  projectName,</div><div class="line">  program.verbose,</div><div class="line">  program.scriptsVersion,</div><div class="line">  program.useNpm,</div><div class="line">  hiddenProgram.internalTestingTemplate</div><div class="line">);</div></pre></td></tr></table></figure>
<p>接着往下就是调用了 <code>createApp</code>, 传入的参数对于的含义是：<code>项目名</code>，<code>是否输出额外信息</code>，<code>传入的脚本版本</code>，<code>是否使用npm</code>，<code>调试的模板路径</code>。接下来单步进入函数体看一下 <code>createApp</code> 到底做了什么事情。</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js createApp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">name, verbose, version, useNpm, template</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> root = path.resolve(name);</div><div class="line">  <span class="keyword">const</span> appName = path.basename(root);</div><div class="line"></div><div class="line">  checkAppName(appName); <span class="comment">// 检查传入的项目名合法性</span></div><div class="line">  fs.ensureDirSync(name); <span class="comment">// 这里的fs用的是 fs-extra， 对node的fs提供一些扩展方法</span></div><div class="line">  <span class="comment">// 判断新建这个文件夹是否是安全的 不安全直接退出</span></div><div class="line">  <span class="keyword">if</span> (!isSafeToCreateProjectIn(root, name)) &#123;</div><div class="line">    process.exit(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 在新建的文件夹下写入 package.json 文件</span></div><div class="line">  <span class="keyword">const</span> packageJson = &#123;</div><div class="line">    <span class="attr">name</span>: appName,</div><div class="line">    <span class="attr">version</span>: <span class="string">'0.1.0'</span>,</div><div class="line">    <span class="attr">private</span>: <span class="literal">true</span>,</div><div class="line">  &#125;;</div><div class="line">  fs.writeFileSync(</div><div class="line">    path.join(root, <span class="string">'package.json'</span>),</div><div class="line">    <span class="built_in">JSON</span>.stringify(packageJson, <span class="literal">null</span>, <span class="number">2</span>)</div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="keyword">const</span> useYarn = useNpm ? <span class="literal">false</span> : shouldUseYarn();</div><div class="line">  <span class="keyword">const</span> originalDirectory = process.cwd();</div><div class="line">  process.chdir(root);</div><div class="line">  <span class="comment">// 如果是使用npm，检测npm是否在正确目录下执行</span></div><div class="line">  <span class="keyword">if</span> (!useYarn &amp;&amp; !checkThatNpmCanReadCwd()) &#123;</div><div class="line">    process.exit(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 判断node环境，输出一些提示信息, 并采用旧版本的 react-scripts</span></div><div class="line">  <span class="keyword">if</span> (!semver.satisfies(process.version, <span class="string">'&gt;=6.0.0'</span>)) &#123;</div><div class="line">    <span class="comment">// 输出一些提示更新信息</span></div><div class="line">    version = <span class="string">'react-scripts@0.9.x'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!useYarn) &#123;</div><div class="line">    <span class="comment">// 检测npm版本 判断npm版本，如果低于3.x，使用旧版的 react-scripts旧版本</span></div><div class="line">    <span class="keyword">const</span> npmInfo = checkNpmVersion();</div><div class="line">    <span class="keyword">if</span> (!npmInfo.hasMinNpm) &#123;</div><div class="line">      version = <span class="string">'react-scripts@0.9.x'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 判断结束之后，跑run 方法</span></div><div class="line">  <span class="comment">// 传入 项目路径，项目名， reactScripts版本， 是否输入额外信息， 运行的路径， 模板（开发调试用的）, 是否使用yarn</span></div><div class="line">  run(root, appName, version, verbose, originalDirectory, template, useYarn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js#L156" target="_blank" rel="external">createReactApp.js createApp 传送门</a><br>这里我精简了一些东西，删除一些输出信息，加了一些注释<br><code>createApp</code> 主要做的事情就是做一些安全判断比如：检查项目名是否合法，检查新建的话是否安全，检查npm版本，处理<code>react-script</code>的版本兼容<br>具体的执行逻辑写在注释里了，一系列的检查处理之后，调用 run 方法，传入参数为 <code>项目路径</code>，<code>项目名</code>， <code>reactScripts版本</code>， <code>是否输入额外信息</code>， <code>运行的路径</code>， <code>模板（开发调试用的）</code>, <code>是否使用yarn</code>。<br>了解大概的流程之后，再一个函数一个函数进去看。</p>
<blockquote>
<p>checkAppName()  // 检查传入的项目名合法性<br>isSafeToCreateProjectIn(root, name) // 判断新建这个文件夹是否是安全的<br>shouldUseYarn() // 检查yarn<br>checkThatNpmCanReadCwd() // 检查npm<br>run() // 检查完之后调用run执行安装等操作</p>
</blockquote>
<h3 id="checkAppName-检查projectName是否合法"><a href="#checkAppName-检查projectName是否合法" class="headerlink" title="checkAppName  检查projectName是否合法"></a><a href="#checkAppName">checkAppName</a>  检查projectName是否合法</h3><figure class="highlight javascript"><figcaption><span>createReactApp.js checkAppName</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAppName</span>(<span class="params">appName</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> validationResult = validateProjectName(appName);</div><div class="line">  <span class="keyword">if</span> (!validationResult.validForNewPackages) &#123;</div><div class="line">    <span class="comment">// 判断是否符合npm规范如果不符合，输出提示并结束任务</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> dependencies = [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-scripts'</span>].sort();</div><div class="line">  <span class="keyword">if</span> (dependencies.indexOf(appName) &gt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 判断是否重名，如果重名则输出提示并结束任务</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>checkAppName</code> 用于判断当前的项目名是否符合npm规范，比如不能大写等，用的是一个<a href="validate-npm-package-name">validate-npm-package-name</a>的npm包。这里简化了大部分的错误提示代码，但是不影响口感。</p>
<h3 id="shouldUseYarn-判断是否有装yarn-同理的有-checkThatNpmCanReadCwd-用来判断npm"><a href="#shouldUseYarn-判断是否有装yarn-同理的有-checkThatNpmCanReadCwd-用来判断npm" class="headerlink" title="shouldUseYarn 判断是否有装yarn 同理的有 checkThatNpmCanReadCwd 用来判断npm"></a><a href="#shouldUseYarn">shouldUseYarn</a> 判断是否有装yarn 同理的有 <code>checkThatNpmCanReadCwd</code> 用来判断npm</h3><figure class="highlight javascript"><figcaption><span>createReactApp.js shouldUseYarn</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldUseYarn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    execSync(<span class="string">'yarnpkg --version'</span>, &#123; <span class="attr">stdio</span>: <span class="string">'ignore'</span> &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="run"><a href="#run" class="headerlink" title="run"></a><a href="#run">run</a></h3><p>前面的那些操作可以说都是处理一些判断与兼容逻辑，到<code>run</code>这里才是 真正的核心安装逻辑，<strong>开始安装依赖，拷贝模版</strong>等。</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">...</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里获取要安装的package，默认情况下是 `react-scripts`。 也可能是根据传参去拿对应的包</span></div><div class="line">  <span class="keyword">const</span> packageToInstall = getInstallPackage(version, originalDirectory);</div><div class="line">  <span class="comment">// 需要安装所有的依赖， react, react-dom, react-script</span></div><div class="line">  <span class="keyword">const</span> allDependencies = [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, packageToInstall];</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>run</code> 做的事情主要有这么几个，先根据传入的版本<code>version</code> 和原始目录<code>originalDirectory</code> 去获取要安装的某个 package。<br>默认的 version 为空,获取到的 packageToInstall 值是 <code>react-scripts</code>, 然后将<code>packageToInstall</code>拼接到 <code>allDependencies</code>意为所有需要安装的依赖。<br>这里说一下<code>react-scripts</code>其实就是一系列的webpack配置与模版，属于 <code>create-react-app</code> 另一个核心的一个大模块。<a href="https://www.npmjs.com/package/react-scripts" target="_blank" rel="external">传送门</a></p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">...</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="comment">// 获取包名，支持 taz|tar格式、git仓库、版本号、文件路径等等</span></div><div class="line">  getPackageName(packageToInstall)</div><div class="line">    .then(<span class="function"><span class="params">packageName</span> =&gt;</span></div><div class="line">      <span class="comment">// 如果是yarn,判断是否在线模式（对应的就是离线模式），处理完判断就返回给下一个then处理</span></div><div class="line">      checkIfOnline(useYarn).then(<span class="function"><span class="params">isOnline</span> =&gt;</span> (&#123;</div><div class="line">        <span class="attr">isOnline</span>: isOnline,</div><div class="line">        <span class="attr">packageName</span>: packageName,</div><div class="line">      &#125;))</div><div class="line">    )</div><div class="line">    .then(<span class="function"><span class="params">info</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> isOnline = info.isOnline;</div><div class="line">      <span class="keyword">const</span> packageName = info.packageName;</div><div class="line">      <span class="comment">/** 开始核心的安装部分 传入`安装路径`，`是否使用yarn`,`所有依赖`，`是否输出额外信息`，`在线状态` **/</span></div><div class="line">      <span class="comment">/** 这里主要的操作是 根据传入的参数，开始跑 npm || yarn 安装react react-dom等依赖 **/</span></div><div class="line">      <span class="comment">/** 这里如果网络不好，可能会挂 **/</span></div><div class="line">      <span class="keyword">return</span> install(root, useYarn, allDependencies, verbose, isOnline).then(</div><div class="line">        <span class="function"><span class="params">()</span> =&gt;</span> packageName</div><div class="line">      );</div><div class="line">    &#125;)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后如果当前是采用yarn安装方式的话，就判断是否处于离线状态。判断完连着前面的 <code>packageToInstall</code> 和 <code>allDependencies</code> 一起丢给 <code>install</code> 方法，再由<code>install</code>方法去跑安装。</p>
<blockquote>
<p>run方法<br>getInstallPackage(); // 获取要安装的模版包 默认是 react-scripts<br>install(); // 传参数给install 负责安装 allDependencies<br>init(); // 调用安装了的 react-scripts/script/init 去拷贝模版<br>.catch(); // 错误处理</p>
</blockquote>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a><a href="#install">install</a></h3><figure class="highlight javascript"><figcaption><span>createReactApp.js install</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">root, useYarn, dependencies, verbose, isOnline</span>) </span>&#123;</div><div class="line">  <span class="comment">// 主要根据参数拼装命令行，然后用node去跑安装脚本 如 `npm install react react-dom --save` 或者 `yarn add react react-dom`</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> command;</div><div class="line">    <span class="keyword">let</span> args;</div><div class="line"></div><div class="line">    <span class="comment">// 开始拼装 yarn 命令行</span></div><div class="line">    <span class="keyword">if</span> (useYarn) &#123;</div><div class="line">      command = <span class="string">'yarnpkg'</span>;</div><div class="line">      args = [<span class="string">'add'</span>, <span class="string">'--exact'</span>]; <span class="comment">// 使用确切版本模式</span></div><div class="line">      <span class="comment">// 判断是否是离线状态 加个状态</span></div><div class="line">      <span class="keyword">if</span> (!isOnline) &#123;</div><div class="line">        args.push(<span class="string">'--offline'</span>);</div><div class="line">      &#125;</div><div class="line">      [].push.apply(args, dependencies);</div><div class="line">      <span class="comment">// 将cwd设置为我们要安装的目录路径</span></div><div class="line">      args.push(<span class="string">'--cwd'</span>);</div><div class="line">      args.push(root);</div><div class="line">      <span class="comment">// 如果是离线的话输出一些提示信息</span></div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="comment">// npm 安装模式，与yarn同理</span></div><div class="line">      command = <span class="string">'npm'</span>;</div><div class="line">      args = [</div><div class="line">        <span class="string">'install'</span>,</div><div class="line">        <span class="string">'--save'</span>,</div><div class="line">        <span class="string">'--save-exact'</span>,</div><div class="line">        <span class="string">'--loglevel'</span>,</div><div class="line">        <span class="string">'error'</span>,</div><div class="line">      ].concat(dependencies);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果有传verbose， 则加该参数 输出额外的信息</span></div><div class="line">    <span class="keyword">if</span> (verbose) &#123;</div><div class="line">      args.push(<span class="string">'--verbose'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 用 cross-spawn 跨平台执行命令行</span></div><div class="line">    <span class="keyword">const</span> child = spawn(command, args, &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//  关闭的处理</span></div><div class="line">    child.on(<span class="string">'close'</span>, code =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (code !== <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> reject(&#123; <span class="attr">command</span>: <span class="string">`<span class="subst">$&#123;command&#125;</span> <span class="subst">$&#123;args.join(<span class="string">' '</span>)&#125;</span>`</span>, &#125;);</div><div class="line">      &#125;</div><div class="line">      resolve();</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们顺着断点从<code>run</code>跑到<code>install</code>方法，能看到代码里根据是否使用yarn分成两种处理方法。<br><code>if (useYarn) { yarn 安装逻辑 } else { npm 安装逻辑 }</code><br>处理方法都是同个逻辑，根据传入的 <code>dependencies</code> 去拼接需要安装的依赖，主要有 <code>react</code>,<code>react-dom</code>,<code>react-script</code> 。再判断<code>verbose</code>和<code>isOnline</code> 加一些命令行的参数。<br>最后再用node跑命令，平台差异的话是借助<a href="https://www.npmjs.com/package/cross-spawn" target="_blank" rel="external">cross-spawn</a>去处理的，这里不再赘述。<br>具体逻辑见上面代码，去掉不重要的信息输出，代码还是比较易懂。</p>
<blockquote>
<p>install<br>根据传进来的参数判断用yarn还是npm<br>拼装需要的依赖<br>用cross-spawn跑命令安装</p>
</blockquote>
<p>在<code>install</code>会返回一个<code>Promise</code>在安装完之后，断点又回到我们的<code>run</code>函数继续走接下来的逻辑。<br><figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  getPackageName()</div><div class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> install(root, useYarn, allDependencies, verbose, isOnline).then(</div><div class="line">            <span class="function"><span class="params">()</span> =&gt;</span> packageName</div><div class="line">      );</div><div class="line">    &#125;)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>既然我们的<code>install</code>已经把开发需要的依赖安装完了，接下来我们可以开判断当前运行的<code>node</code>是否符合我们已经安装的<code>react-scripts</code>里面的<code>packages.json</code>要求的node版本。<br>这句话有点绕，简单来说就是判断当前运行的node版本是否<code>react-scripts</code>这个依赖所需。</p>
<p>然后就把开始修改<code>package.json</code>我们已经安装的依赖(react, react-dom, react-scripts)版本从原本的精确版本eg(16.0.0)修改为高于等于版本eg(^16.0.0)。<br>这些处理做完之后，我们的目录是长这样子的，里面除了安装的依赖和<code>package.json</code>外没有任何东西。所以接下来的操作是生成一些webpack的配置和一个简单的可启动demo。<br><img src="./create-react-app1.png" alt=""></p>
<p>那么他是怎么快速生成这些东西的呢？<br>还记得一开始说了有一个 隐藏的命令行参数 <code>--internal-testing-template</code> 用来给开发者调试用的吗，所以其实create-react-app生成这些的方法就是直接把某一个路径的模板拷贝到对应的地方。是不是很简单粗暴hhhhh</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">run(...) &#123;</div><div class="line">  ...</div><div class="line">    getPackageName(packageToInstall)</div><div class="line">    .then(...)</div><div class="line">    .then(<span class="function"><span class="params">info</span> =&gt;</span> install(...).then(<span class="function"><span class="params">()</span>=&gt;</span> packageName))</div><div class="line">    <span class="comment">/** install 安装完之后的逻辑 **/</span></div><div class="line">    <span class="comment">/** 从这里开始拷贝模板逻辑 **/</span></div><div class="line">    .then(<span class="function"><span class="params">packageName</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 安装完 react, react-dom, react-scripts 之后检查当前环境运行的node版本是否符合要求</span></div><div class="line">      checkNodeVersion(packageName);</div><div class="line">      <span class="comment">// 该项package.json里react, react-dom的版本范围，eg: 16.0.0 =&gt; ^16.0.0</span></div><div class="line">      setCaretRangeForRuntimeDeps(packageName);</div><div class="line"></div><div class="line">      <span class="comment">// 加载script脚本，并执行init方法</span></div><div class="line">      <span class="keyword">const</span> scriptsPath = path.resolve(</div><div class="line">        process.cwd(),</div><div class="line">        <span class="string">'node_modules'</span>,</div><div class="line">        packageName,</div><div class="line">        <span class="string">'scripts'</span>,</div><div class="line">        <span class="string">'init.js'</span></div><div class="line">      );</div><div class="line">      <span class="keyword">const</span> init = <span class="built_in">require</span>(scriptsPath);</div><div class="line">      <span class="comment">// init 方法主要执行的操作是</span></div><div class="line">      <span class="comment">// 写入package.json 一些脚本。eg: script: &#123;start: 'react-scripts start'&#125;</span></div><div class="line">      <span class="comment">// 改写README.MD</span></div><div class="line">      <span class="comment">// 把预设的模版拷贝到项目下</span></div><div class="line">      <span class="comment">// 输出成功与后续操作的信息</span></div><div class="line">      init(root, appName, verbose, originalDirectory, template);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (version === <span class="string">'react-scripts@0.9.x'</span>) &#123;</div><div class="line">        <span class="comment">// 如果是旧版本的 react-scripts 输出提示</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 出错的话，把安装了的文件全删了 并输出一些日志信息等</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里安装完依赖之后，执行<code>checkNodeVersion</code>判断node版本是否与依赖相符。<br>之后拼接路径去跑<code>目录/node_modules/react-scripts/scripts/init.js</code>，传参让他去做一些初始化的事情。<br>然后对出错情况做一些相应的处理</p>
<h2 id="node-modules-react-scripts-script-init-js"><a href="#node-modules-react-scripts-script-init-js" class="headerlink" title="/node_modules/react-scripts/script/init.js"></a><a href="#/node_modules/react-scripts/script/init.js">/node_modules/react-scripts/script/init.js</a></h2><figure class="highlight javascript"><figcaption><span>目标文件夹/node_modules/react-scripts/script/init.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></div><div class="line">  appPath,</div><div class="line">  appName,</div><div class="line">  verbose,</div><div class="line">  originalDirectory,</div><div class="line">  template</div><div class="line">) &#123;</div><div class="line">  <span class="keyword">const</span> ownPackageName = <span class="built_in">require</span>(path.join(__dirname, <span class="string">'..'</span>, <span class="string">'package.json'</span>))</div><div class="line">    .name;</div><div class="line">  <span class="keyword">const</span> ownPath = path.join(appPath, <span class="string">'node_modules'</span>, ownPackageName);</div><div class="line">  <span class="keyword">const</span> appPackage = <span class="built_in">require</span>(path.join(appPath, <span class="string">'package.json'</span>));</div><div class="line">  <span class="keyword">const</span> useYarn = fs.existsSync(path.join(appPath, <span class="string">'yarn.lock'</span>));</div><div class="line"></div><div class="line">  <span class="comment">// 1. 把启动脚本写入目标 package.json </span></div><div class="line">  appPackage.scripts = &#123;</div><div class="line">    <span class="attr">start</span>: <span class="string">'react-scripts start'</span>,</div><div class="line">    <span class="attr">build</span>: <span class="string">'react-scripts build'</span>,</div><div class="line">    <span class="attr">test</span>: <span class="string">'react-scripts test --env=jsdom'</span>,</div><div class="line">    <span class="attr">eject</span>: <span class="string">'react-scripts eject'</span>,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  fs.writeFileSync(</div><div class="line">    path.join(appPath, <span class="string">'package.json'</span>),</div><div class="line">    <span class="built_in">JSON</span>.stringify(appPackage, <span class="literal">null</span>, <span class="number">2</span>)</div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="comment">// 2. 改写README.MD，把一些帮助信息写进去</span></div><div class="line">  <span class="keyword">const</span> readmeExists = fs.existsSync(path.join(appPath, <span class="string">'README.md'</span>));</div><div class="line">  <span class="keyword">if</span> (readmeExists) &#123;</div><div class="line">    fs.renameSync(</div><div class="line">      path.join(appPath, <span class="string">'README.md'</span>),</div><div class="line">      path.join(appPath, <span class="string">'README.old.md'</span>)</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 3. 把预设的模版拷贝到项目下，主要有 public, src/[APP.css, APP.js, index.js,....], .gitignore</span></div><div class="line">  <span class="keyword">const</span> templatePath = template</div><div class="line">    ? path.resolve(originalDirectory, template)</div><div class="line">    : path.join(ownPath, <span class="string">'template'</span>);</div><div class="line">  <span class="keyword">if</span> (fs.existsSync(templatePath)) &#123;</div><div class="line">    fs.copySync(templatePath, appPath);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  fs.move(</div><div class="line">    path.join(appPath, <span class="string">'gitignore'</span>),</div><div class="line">    path.join(appPath, <span class="string">'.gitignore'</span>),</div><div class="line">    [],</div><div class="line">    err =&gt; &#123; <span class="comment">/* 错误处理 */</span>  &#125;</div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="comment">// 这里再次进行命令行的拼接，如果后面发现没有安装react和react-dom,重新安装一次</span></div><div class="line">  <span class="keyword">let</span> command;</div><div class="line">  <span class="keyword">let</span> args;</div><div class="line">  <span class="keyword">if</span> (useYarn) &#123;</div><div class="line">    command = <span class="string">'yarnpkg'</span>;</div><div class="line">    args = [<span class="string">'add'</span>];</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    command = <span class="string">'npm'</span>;</div><div class="line">    args = [<span class="string">'install'</span>, <span class="string">'--save'</span>, verbose &amp;&amp; <span class="string">'--verbose'</span>].filter(<span class="function"><span class="params">e</span> =&gt;</span> e);</div><div class="line">  &#125;</div><div class="line">  args.push(<span class="string">'react'</span>, <span class="string">'react-dom'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> templateDependenciesPath = path.join(</div><div class="line">    appPath,</div><div class="line">    <span class="string">'.template.dependencies.json'</span></div><div class="line">  );</div><div class="line">  <span class="keyword">if</span> (fs.existsSync(templateDependenciesPath)) &#123;</div><div class="line">    <span class="keyword">const</span> templateDependencies = <span class="built_in">require</span>(templateDependenciesPath).dependencies;</div><div class="line">    args = args.concat(</div><div class="line">      <span class="built_in">Object</span>.keys(templateDependencies).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>@<span class="subst">$&#123;templateDependencies[key]&#125;</span>`</span>;</div><div class="line">      &#125;)</div><div class="line">    );</div><div class="line">    fs.unlinkSync(templateDependenciesPath);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!isReactInstalled(appPackage) || template) &#123;</div><div class="line">    <span class="keyword">const</span> proc = spawn.sync(command, args, &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;);</div><div class="line">    <span class="keyword">if</span> (proc.status !== <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">`\`<span class="subst">$&#123;command&#125;</span> <span class="subst">$&#123;args.join(<span class="string">' '</span>)&#125;</span>\` failed`</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 5. 输出成功的日志</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>init</code>文件又是一个大头，处理的逻辑主要有</p>
<ol>
<li>修改package.json，写入一些启动脚本，比如<code>script: {start: &#39;react-scripts start&#39;}</code>，用来启动开发项目</li>
<li>改写README.MD，把一些帮助信息写进去</li>
<li>把预设的模版拷贝到项目下，主要有 <code>public</code>, <code>src/[APP.css, APP.js, index.js,....]</code>, <code>.gitignore</code></li>
<li>对旧版的node做一些兼容的处理，这里补一句，在选择 react-scripts 时就有根据node版本去判断选择比较老的 @0.9.x 版。</li>
<li>如果完成输出对应的信息，如果失败，做一些输出日志等操作。</li>
</ol>
</blockquote>
<p>这里代码有点多，所以删了一小部分，如果对初始的代码感兴趣可以跳转到这儿看<a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/scripts/init.js" target="_blank" rel="external">react-scripts/scripts/init.js 传送门</a></p>
<h1 id="END"><a href="#END" class="headerlink" title="END~"></a>END~</h1><p>到这里 <code>create-react-app</code> 项目构建的部分大流程已经走完了，我们来回顾一下：</p>
<ol>
<li>判断node版本如果小于4就退出，否则执行 <code>createReactApp.js</code> 文件</li>
<li><code>createReactApp.js</code>先做一些命令行的处理响应处理，然后判断是否有传入 <code>projectName</code> 没有就提示并退出</li>
<li>根据传入的 <code>projectName</code> 创建目录，并创建<code>package.json</code>。</li>
<li>判断是否有特殊要求指定安装某个版本的<code>react-scripts</code>，然后用<code>cross-spawn</code>去处理跨平台的命令行问题，用<code>yarn</code>或<code>npm</code>安装<code>react</code>, <code>react-dom</code>, <code>react-scripts</code>。</li>
<li>安装完之后跑 <code>react-scripts/script/init.js</code> 修改 <code>package.json</code> 的依赖版本，运行脚本，并拷贝对应的模板到目录里。</li>
<li>处理完这些之后，输出提示给用户。</li>
</ol>
<p>本来想把整个 create-react-app 说完，但是发现说一个创建就写了这么多，所以后面如果有想继续看 <code>react-scripts</code>的话，会另外开一篇来讲。<br>大家也可以根据这个思路自己断点去看，不过 <code>react-scripts</code> 主要可能是webpack配置居多，断点帮助应该不大。</p>
<h1 id="create-react-app系列第二篇传送门"><a href="#create-react-app系列第二篇传送门" class="headerlink" title="create-react-app系列第二篇传送门"></a><a href="https://jsonz1993.github.io/2018/05/create-react-app-t/">create-react-app系列第二篇传送门</a></h1>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018-04-29面试记A]]></title>
      <url>https://jsonz1993.github.io/2018/04/2018-04-29/</url>
      <content type="html"><![CDATA[<p>4.10号 已经在租租车呆了一周年，一直有个规律是 大概一年就要去外面找找虐。<br>一方面是为了下外面的市场，看下有没有更好的机会<br>另一方面是在一个地方待久了 可能会变得比较安逸，比较老油条，这时候去外面和其他公司前端面试沟通，可以了解外面的技术<br>让自己更有目的性、更有动力去学习。</p>
<p>但是今年的情况有点出乎我意料，不知道是因为金三银四加上今年过年早的原因，所以基本企业单位坑都填满了，<br>还是现在选择公司比较挑剔，高不成低不就。</p>
<p>规模太小不想去，二三线互联网公司，基本又要求本科…哎 学历的短板变得越来越大</p>
<h1 id="简历投递情况"><a href="#简历投递情况" class="headerlink" title="简历投递情况"></a>简历投递情况</h1><p>据不完全统计:<br>内推 <code>YY</code> 不合适<br>内推 <code>汇桔</code> 目前只招5年的<br>内推 <code>路客</code> 面试 也是目前唯一一个有面试机会的！！！ 但是薪资涨幅一般~<br>投 <code>广州银行信用卡</code> 不合适 要求本科<br>投 <code>中兴</code> 不合适 要求本科 = =吐槽一句 估计中兴现在也不敢招人了<br>投 <code>荔枝</code> 被查看，没有联系 也是没戏了<br>Boss直聘<br>沟通 <code>100教育</code> 目前只招5年的<br>沟通 <code>拼多多</code> 惨遭无视 也是要求本科</p>
<p>现在boss直聘，拉钩疯狂沟通 <code>尚德机构</code> 好像也没什么回应~ 要求也是本科，虽然说明了目前正在自考本科，但是自考时间最理想也要两年…哎哎</p>
<h1 id="面试情况"><a href="#面试情况" class="headerlink" title="面试情况"></a>面试情况</h1><p>前同事推的 <code>路客</code> 是唯一的面试机会… 之所以想去是因为，当时看了他们的app 使用RN写的，个人比较有兴趣，而且体验的时候还觉得很不错。很少有公司会从零开始用RN写，一般都是比较边角的 表单提交啊 FAQ About 等等的页面采用原生内嵌RN实现。</p>
<p>面试没有问的很细，基本就是现在比较喜欢的面试方式</p>
<p>问项目经验，React生命周期，diff算法，微信开放平台，对vue掌握程度，有没有做过RN项目，离职原因等<br>其中问到一个是 <strong>有没有系统学习23种设计模式</strong><br>我当时的回答是 没有系统学习过，不过平时工作有用到 <code>工厂模式</code> <code>单例模式</code> 等比较常用的设计模式。<br>想起之前看张容铭的《JavaScript设计模式》</p>
<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><p>现在工作三年，感觉反而没有刚开始工作那会基础知识牢固。以前刚入行，还不知道<code>jq</code>这种东西，写轮播图，写效果都是用原生js，还兼容ie~~~ 不能说特别叼，但是至少基础很牢固<br>现在好像各类 mv* 库帮我们做了很多事情，所以我们除了一开始的 项目搭建，结构划分，路由配置等，剩下的主要精力都用来处理业务逻辑，更多的是想着如何去解决一个问题，而不是死记着那些东西，但是这边拿一块 那边拿一块会导致很难形成属于自己的东西。<br>也没有很系统的学习一些东西，太过浮躁</p>
<p>目前学习计划是</p>
<ul>
<li><p>看 <code>create-react-app</code> 源码，了解怎么实现，断点调试，输出文章</p>
</li>
<li><p>看 <code>vue</code> 源码，系统学习一下<code>vue</code> 用到项目上，而不是停留到 看过api的层次<br>emmmm 想起vue刚出的时候，用了一个饿了么出的 移动端ui库 <a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="external">mint-ui</a> 还贡献过一点点bug-request</p>
</li>
<li><p>有关于 node 后台的项目机会积极一点，硬着头皮上</p>
</li>
</ul>
<p>以上~ emmmm 最后多投看看还有什么面试机会… 尚德没有得面试真是有点失落</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[事件重复绑定与stopImmediatePropagation]]></title>
      <url>https://jsonz1993.github.io/2018/04/%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%A4%8D%E7%BB%91%E5%AE%9A%E4%B8%8EstopImmediatePropagation/</url>
      <content type="html"><![CDATA[<p>在旧项目中，我们一般绑定事件都是用 <code>$(&#39;selector&#39;).on(&#39;event&#39;, fn)</code> || <code>document.querySelector(&#39;selector&#39;).addEventListener(&#39;event&#39;, fn)</code>;</p>
<p>如果平时代码规范，这样写完全ojbk 点击<code>.p</code> 之后输出 <code>test1</code><br><figure class="highlight html"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123;</div><div class="line">		<span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">'click'</span>,fn);</div><div class="line">	&#125;</div><div class="line">	add(<span class="string">'.p'</span>, e=&gt; <span class="built_in">console</span>.log(e.currentTarget.innerHTML));</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>但是平时如果项目不规范，代码又写的比较乱….emmmm，很有可能出现一些逻辑上的低级错误，比如这种，在某个函数调了两次，所以这里就绑定了两次…点击之后会输出两次的 <code>test</code><br><figure class="highlight html"><figcaption><span>demo2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123; <span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">'click'</span>,fn); &#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123; add(<span class="string">'.p'</span>, e=&gt; <span class="built_in">console</span>.log(e.currentTarget.innerHTML)); &#125;;</div><div class="line">	fn1();</div><div class="line">	fn1();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这种情况平时工作不注意真的有可能发生，而且排查也只能说平时在看接口或改代码的时候 发现随手改<br><img src="./repetition.png" alt="重复调接口情况"></p>
<p>一般为了避免这种失误重复调用的操作，有几种方法：</p>
<ol>
<li><p>把事件处理函数抽出来,这样就算重复绑定，浏览器检测到是同个函数引用，会做相应的优化，所以不会重复绑定到事件上</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123; <span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">'click'</span>,fn); &#125;</div><div class="line">	<span class="keyword">const</span> evFn= <span class="function"><span class="params">e</span>=&gt;</span> <span class="built_in">console</span>.log(e.currentTarget.innerHTML);</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123; add(<span class="string">'.p'</span>,  evFn)&#125;;</div><div class="line">	fn1();</div><div class="line">	fn1();</div><div class="line">	fn1();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation" target="_blank" rel="external">event.stopImmediatePropagation</a><br>官方给出的说明是：<br>如果某个元素有多个相同类型事件的事件监听函数,则当该类型的事件触发时,多个事件监听函数将按照顺序依次执行.如果某个监听函数执行了 event.stopImmediatePropagation()方法,则除了该事件的冒泡行为被阻止之外(event.stopPropagation方法的作用),该元素绑定的后序相同类型事件的监听函数的执行也将被阻止.</p>
</li>
</ol>
<p>简单来说就是，执行了<code>event.stopImmediatePropagation()</code> 之后，后续的绑定在该dom上的相同类型事件都不再被响应，也不冒泡。</p>
<p><code>demo3</code> 代码，点击 test1 之后，只会在控制台输出一行 <code>test1</code>，其他 该元素的点击事件，#id点击事件都不会被响应<br><figure class="highlight html"><figcaption><span>demo3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123; <span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">'click'</span>,fn); &#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123; add(<span class="string">'.p'</span>,  e=&gt; <span class="built_in">console</span>.log(e.currentTarget.innerHTML)|| e.stopImmediatePropagation())&#125;;</div><div class="line">	add(<span class="string">'#id'</span>,e=&gt;<span class="built_in">console</span>.log(<span class="number">1</span>));</div><div class="line">	fn1();</div><div class="line">	fn1();</div><div class="line">	fn1();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在实际项目中，还是比较建议把事件处理逻辑抽出来当一个函数，毕竟在多人项目里面 <code>stopImmediatePropagation</code> 比较容易误伤队友…</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自动化功能测试流程方案]]></title>
      <url>https://jsonz1993.github.io/2018/04/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>得益于谷歌开源了 <a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">puppeteer</a> 无界面版的 Chrome nodeJs api。<br>现在前端可很方便快捷的开发一些脚本去跑浏览器端的操作，包括自动化测试，爬虫或其他比较机械化的操作。<br>可以参见我上一篇文<br><strong><a href="https://jsonz1993.github.io/2018/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95puppeteer-%E4%B8%8Eqq%E7%A9%BA%E9%97%B4/">自动化测试 puppeteer 与qq空间</a></strong></p>
<p>ps: 🤦‍ 早知道当时删微博就直接写一个脚本，人工去删还漏了一些被批斗了一顿</p>
<p>既然 puppeteer 可以拿来做这么多事情，那前端是不是可以整合出一套流程测试的方案？</p>
<h2 id="大概的流程是："><a href="#大概的流程是：" class="headerlink" title="大概的流程是："></a>大概的流程是：</h2><ul>
<li>定时跑业务流程</li>
<li>成功则发送一条消息通知服务器</li>
<li>失败则 截图发送截图与其他信息<ul>
<li>到达一定的阈值就通知相关人员排查问题</li>
</ul>
</li>
<li>提供一个前端页面可以查询 任务情况</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">                                        +-------------------+</div><div class="line">        +-----------------------------&gt; |    记录消息         |</div><div class="line">        |          success              |                   |</div><div class="line">        |                               +------+------------+</div><div class="line">        |                                      |</div><div class="line">+-------+------+                               |</div><div class="line">|              |                               v</div><div class="line">| 定时跑测试任务  |                         +-----+-----------+</div><div class="line">|              |                         |                 |</div><div class="line">|              |                         |                 |</div><div class="line">+------+-------+                         |    查看任务记录   |</div><div class="line">       |                                 |                 |</div><div class="line">       |                                 |                 |</div><div class="line">       |                                 +-----+-----------+</div><div class="line">       |                                       ^</div><div class="line">       |                                       |</div><div class="line">       |          error                  +-----+----------+</div><div class="line">       |                                 |                |</div><div class="line">       +-------------------------------&gt; |    记录消息      |</div><div class="line">                                         |                |</div><div class="line">                                         |                |</div><div class="line">                                         +-------+--------+</div><div class="line">                                                 |</div><div class="line">                                                 |</div><div class="line">                                                 |  阈值</div><div class="line">                                                 |</div><div class="line">                                        +--------v---------+</div><div class="line">                                        |                  |</div><div class="line">                                        |                  |</div><div class="line">                                        |      通知人员      |</div><div class="line">                                        |                  |</div><div class="line">                                        |                  |</div><div class="line">                                        +------------------+</div></pre></td></tr></table></figure>
<h2 id="用到的技术栈"><a href="#用到的技术栈" class="headerlink" title="用到的技术栈"></a>用到的技术栈</h2><p>自动化测试: puppeteer + axios + node-schedule<br>后台: egg + mongoose<br>前端界面: antd + dva</p>
<p>其实主要就 puppeteer + egg + mongoose 即可，前端界面只是刚好公司一个后台是用 antd-pro 写的 所以顺手带上去而已 = =#</p>
<p>本地一些环境：<code>node 8.9.4</code>, <code>npm 5.6.0</code>, <code>oxs 10.13.3</code>， 编辑器 <code>vscodeeeeee</code></p>
<p>以下涉及到公司项目业务的 都会略过讲一下过程 不会出现具体代码或截图等…</p>
<h1 id="自动化测试-auto-test-部分"><a href="#自动化测试-auto-test-部分" class="headerlink" title="自动化测试(auto_test)部分"></a>自动化测试(auto_test)部分</h1><p>目录结构:<br><img src="./auto_test_project.png" alt="auto_test_project"></p>
<h2 id="入口-app-js-主要处理一些获取自动化测试浏览器的对象，-项目启动，-定时任务启动"><a href="#入口-app-js-主要处理一些获取自动化测试浏览器的对象，-项目启动，-定时任务启动" class="headerlink" title="入口: app.js 主要处理一些获取自动化测试浏览器的对象， 项目启动， 定时任务启动"></a>入口: app.js 主要处理一些获取自动化测试浏览器的对象， 项目启动， 定时任务启动</h2><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mMonitor = <span class="built_in">require</span>(<span class="string">'./scripts/m'</span>);  <span class="comment">// m端测试脚本入口</span></div><div class="line"><span class="keyword">const</span> xDate = <span class="built_in">require</span>(<span class="string">'xdate'</span>);</div><div class="line"><span class="keyword">const</span> login = <span class="built_in">require</span>(<span class="string">'./scripts/login'</span>); <span class="comment">// 登录操作处理</span></div><div class="line"><span class="keyword">const</span> &#123; scheduleDelPic &#125; = <span class="built_in">require</span>(<span class="string">'./scripts/schedule'</span>); <span class="comment">// 定时任务</span></div><div class="line"></div><div class="line"><span class="comment">// 项目入口</span></div><div class="line">;<span class="function">(<span class="params"><span class="keyword">async</span>(</span>)=&gt;</span> &#123;</div><div class="line">  <span class="comment">// 因为公司项目需要一些前置的 操作才能访问，比如登录管理后台等操作，</span></div><div class="line">  <span class="comment">// 所以这里直接用一个文件把这一块抽出来，方便后面专心处理业务 不用关心用户登录 权限 测试账号等问题</span></div><div class="line">  <span class="comment">// 处理完直接返回一个 browser 对象，后面的其他测试只需要在当前的 browser 新开一个tab去跑即可</span></div><div class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> login();</div><div class="line"></div><div class="line">  <span class="comment">// m端项目</span></div><div class="line">  mMonitor(browser); <span class="comment">// 传入browser 对象 开始处理自动化测试</span></div><div class="line"></div><div class="line">  <span class="comment">// 10分钟跑一次，这里也可以把间隔抽出来放到config里</span></div><div class="line">  <span class="comment">// 多嘴说一句，用setInterval 有一个弊端就是，前面执行脚本堵塞，会造成 一个任务跑完 直接跑下一个，中间不是间隔10min。 看具体的业务需求，也可以用 setTimeout 或者递归等去执行</span></div><div class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> mMonitor(browser), <span class="number">1000</span> * <span class="number">3600</span> * <span class="number">1</span>); </div><div class="line"></div><div class="line">  <span class="comment">// 其他的任务 定时任务等</span></div><div class="line">  <span class="comment">// 这里是写了个定时清理图片</span></div><div class="line">  scheduleDelPic();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="前置处理-login-js-这里可以取其他名字"><a href="#前置处理-login-js-这里可以取其他名字" class="headerlink" title="前置处理: login.js (这里可以取其他名字)"></a>前置处理: login.js (这里可以取其他名字)</h2><p>对于我这个项目来说 在开始跑之前要处理测试账号登录等问题，因为考虑到后面会有多个任务在跑的话，直接在 <code>browser</code> 对象 create new tab 可以同步跑，而不用每次都去处理登录问题。</p>
<figure class="highlight javascript"><figcaption><span>login.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</div><div class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">devtools</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">slowMo</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">ignoreHTTPSErrors</span>: <span class="literal">true</span>,</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 处理一些其他的逻辑</span></div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="comment">// 把处理完的 browser 返回回去</span></div><div class="line">  <span class="keyword">return</span> browser;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="mMonitor-移动端测试任务"><a href="#mMonitor-移动端测试任务" class="headerlink" title="mMonitor 移动端测试任务"></a>mMonitor 移动端测试任务</h2><p>主要处理的事情有：</p>
<ul>
<li>调用其他的流程测试任务，比如我是： 公司项目的主流程下单任务</li>
<li>处理一些需要记录的信息，比如从什么时候跑，什么时候结束</li>
<li>处理与服务器的交互，成功调接口</li>
<li>失败截图保存用户信息等 传递给服务端</li>
</ul>
<figure class="highlight javascript"><figcaption><span>m.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mMonitor</span>(<span class="params">browser</span>) </span>&#123;</div><div class="line">  <span class="comment">// 建立一个 page 的引用，方便后面可以调用方法</span></div><div class="line">  <span class="keyword">let</span> page;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    startTime = <span class="built_in">Date</span>.now();</div><div class="line"></div><div class="line">    page = <span class="keyword">await</span> browser.newPage();</div><div class="line"></div><div class="line">    <span class="comment">// 把页面传入主流程的测试任务</span></div><div class="line">    <span class="comment">// 这里面就有超级无敌大量的 业务代码... emmm 根据项目不同来写 完全没有参考意义就不写了</span></div><div class="line">    <span class="keyword">await</span> mainProcess(page);</div><div class="line"></div><div class="line">    <span class="comment">// 测试任务执行成功的处理</span></div><div class="line">    <span class="keyword">const</span> params = &#123; </div><div class="line">      <span class="comment">// 测试结果数据</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调接口存数据</span></div><div class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> mRequest(params);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'上报success接口成功'</span>, params);</div><div class="line"></div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    <span class="comment">// 跑测试流程中错误的对应处理</span></div><div class="line"></div><div class="line">    <span class="keyword">const</span> params = &#123;</div><div class="line">      <span class="comment">// 错误结果的数据， 比如 </span></div><div class="line">      <span class="comment">// 截图地址url</span></div><div class="line">      <span class="comment">// title</span></div><div class="line">      <span class="comment">// url</span></div><div class="line">      <span class="comment">// serviceCode 等等</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> mRequest(params);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'上报error 接口成功'</span>, params);</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">// 关闭当前页面</span></div><div class="line">    page.close();</div><div class="line">    <span class="comment">// 其他操作...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="schedule-定时任务"><a href="#schedule-定时任务" class="headerlink" title="schedule 定时任务"></a>schedule 定时任务</h2><p>这里的定时任务用的是 <a href="https://www.npmjs.com/package/node-schedule" target="_blank" rel="external">node-schedule</a> 非常好用 支持 <code>Cron-style</code>。</p>
<p><code>schedule.scheduleJob(cronStyle)</code></p>
<p>cronStyle 参数 传入对应的时间，既可按照传入的参数 定时去执行，具体可以看👆链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cronStyle: </div><div class="line"></div><div class="line">*    *    *    *    *    *</div><div class="line">┬    ┬    ┬    ┬    ┬    ┬</div><div class="line">│    │    │    │    │    │</div><div class="line">│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)</div><div class="line">│    │    │    │    └───── month (1 - 12)</div><div class="line">│    │    │    └────────── day of month (1 - 31)</div><div class="line">│    │    └─────────────── hour (0 - 23)</div><div class="line">│    └──────────────────── minute (0 - 59)</div><div class="line">└───────────────────────── second (0 - 59, OPTIONAL)</div></pre></td></tr></table></figure>
<p>目前 <code>auto_test</code> 用到的定时任务只有一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> schedule= <span class="built_in">require</span>(<span class="string">'node-schedule'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">//删除某个目录的一层文件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delPathFile</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">const</span> files = fs.readdirSync(path);</div><div class="line">  files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> fs.unlinkSync(<span class="string">`<span class="subst">$&#123;path&#125;</span>/<span class="subst">$&#123;file&#125;</span>`</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定时删除图片，每周一一次</span></div><div class="line">exports.scheduleDelPic = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> initPath = path.join(process.cwd(), <span class="string">'/static/init'</span>);</div><div class="line">  <span class="keyword">const</span> errorPath = path.join(process.cwd(), <span class="string">'/static/error'</span>);</div><div class="line">  <span class="keyword">const</span> successPath = path.join(process.cwd(), <span class="string">'/static/success'</span>);</div><div class="line"></div><div class="line">  schedule.scheduleJob(<span class="string">'* * * * * 1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    delPathFile(initPath);</div><div class="line">    delPathFile(errorPath);</div><div class="line">    delPathFile(successPath);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总的来说 <code>auto_test</code> 做的事情大概就是</p>
<ul>
<li>启动 <code>app.js</code>， 项目就会 10分钟自动跑一次测试程序。</li>
<li>成功、失败后做出对应的操作。</li>
<li>每周清除一次本地的截图数据。</li>
</ul>
<p>但是几个弊端</p>
<ol>
<li>puppeteer 是模拟浏览器，所以你的所有行为都是模拟用户操作：选择dom，点击、填写、选择操作。这些都是很容易因为页面的dom变化而失效，比如本来是选了一个 <code>#userId</code>的文本框，后面迭代把 <code>#userId</code>改为<code>#uuid</code> 那你就选不到了。 所以业务测试代码(<code>__mainProcess__</code>模块) 做好模块拆分，后面跟项目迭代也方便调整。</li>
<li>因为网络或dom操作经常触发异步行为，所以业务测试代码里面充满各种 <code>waitFor</code> <code>waitForSelector</code> <code>waitForNative</code> 等…不注意可能就会操作到没有出现的元素，这块要做好控制，比如waitFor 时间久一点，或者在<code>page</code>上封装一个方法，比如 <code>page._click</code>:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> _click(selector) &#123;</div><div class="line">  <span class="keyword">await</span> page.waitForSelector(selector, &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</div><div class="line">  <span class="keyword">return</span> page.click(selector);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在每次点击之前，先等待该元素出现再点击。这样可以避免很多运行时 没有找到元素的错误</p>
<ol>
<li>模仿用户行为测试的话，意味着你要做一些前置的处理 如<code>login.js</code>， 要把账号密码等写到代码里面…虽然可以加密 不过还是会存在部分泄露风险…</li>
</ol>
<h1 id="自动化测试服务端-auto-test-backend-部分"><a href="#自动化测试服务端-auto-test-backend-部分" class="headerlink" title="自动化测试服务端(auto_test_backend)部分"></a>自动化测试服务端(auto_test_backend)部分</h1><p>对比 <code>auto_test</code> 部分， <code>auto_test_backend</code>才是我最头疼的地方。<br>毕竟不是科班出身的前端，对后端思想 以及数据库操作也没碰过= =emmm 做起来真的是超级无敌的费劲<br>特别是 设计数据格式的时候，都是拍脑袋决定了。 咦 我加个字段， 咦 我改个字段 又不是很清楚怎么快捷操作…. 估计是不熟 <code>mongoose</code> 的原因….</p>
<p>这个项目用的是 <a href="eggjs.org/zh-cn/intro/quickstart.html">egg</a> 框架，所以基本项目结构都是按着egg的规范来。</p>
<p>目录结构:<br><img src="./auto_test_backend_project.png" alt="auto_test_backend_project"></p>
<p>egg 帮我们做了很多事情，开发的时候只要跑一下 <code>npm run dev</code>，就会启动一个默认端口为<code>7001</code>的服务</p>
<p>对我们现在来说，基本只是提供 RESTAPI。<br>剩下的就简单啦，在<code>app/router.js</code>写对应的路由 如:<br><code>router.post(&#39;/api/v1/monitor&#39;, app.controller.monitor.create);</code> 这样如果有<code>post</code>请求<code>:7001/api/v1/monitor</code> 就会交由 <code>monitor.create</code> 这个 <code>controller</code> 处理。</p>
<h2 id="路由配置-app-router-js"><a href="#路由配置-app-router-js" class="headerlink" title="路由配置 app/router.js"></a>路由配置 app/router.js</h2><p>目前路由配置比较简单，就配置了两个，一个用来处理接收 <code>auto_test</code>项目中测试结果；一个用来输出测试列表。</p>
<figure class="highlight javascript"><figcaption><span>app/router.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</div><div class="line"></div><div class="line">  <span class="comment">// post 请求交由app.controller.monitor.create处理</span></div><div class="line">  router.post(<span class="string">'/api/v1/monitor'</span>, app.controller.monitor.create);</div><div class="line">  <span class="comment">// get 请求交由app.controller.monitor.get处理</span></div><div class="line">  router.get(<span class="string">'/api/v1/monitor'</span>, app.controller.monitor.get);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="controller-解析用户的输入，处理后返回相应的结果"><a href="#controller-解析用户的输入，处理后返回相应的结果" class="headerlink" title="controller 解析用户的输入，处理后返回相应的结果"></a>controller 解析用户的输入，处理后返回相应的结果</h2><p>egg帮我们做了封装，直接在controller文件夹下起文件，写对应的数据，后面可以从全局对象<code>app.controller.fileName.mothedName</code>去获取对应的方法，比如现在有这个文件 <code>app/controller/test</code>，那么我可以在其他地方通过 <code>app.controller.test</code>去获取。</p>
<p>这里拿 <code>app.controller.monitor.get</code> 举例</p>
<p>monitor.get 方法要做的事情有</p>
<ul>
<li>验证结构的请求参数规则</li>
<li>处理查询参数</li>
<li>处理分页的问题</li>
<li>调service 获取数据</li>
<li>处理数据</li>
<li>调用rest中间件发送数据</li>
</ul>
<p>验证参数，这里用到的是 <a href="https://github.com/eggjs/egg-validate" target="_blank" rel="external">egg-validate</a>插件，直接配置就可以用了</p>
<figure class="highlight javascript"><figcaption><span>config/plugin.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exports.validate = &#123;</div><div class="line">  <span class="attr">enable</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">package</span>: <span class="string">'egg-validate'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app/controller/monitor.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">MonitorController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">  <span class="keyword">const</span> ctx = <span class="keyword">this</span>.ctx;</div><div class="line"></div><div class="line">  <span class="comment">// 这里验证失败会抛出一个 422 的异常</span></div><div class="line">  ctx.validate(&#123;</div><div class="line">    <span class="attr">start</span>: &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">require</span>: <span class="literal">false</span>&#125;,</div><div class="line">    <span class="comment">// end, state, pagination等等其他参数验证</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 获取传过来的参数</span></div><div class="line">  <span class="keyword">const</span> &#123; start, end, state, <span class="attr">pagination</span>: _pagination&#125; = ctx.query;</div><div class="line"></div><div class="line">  <span class="comment">// 根据自身业务 处理查询参数</span></div><div class="line">  (<span class="keyword">typeof</span> state !== <span class="string">'undefined'</span>) &amp;&amp; (params.state = state);</div><div class="line">  <span class="keyword">if</span> (start &amp;&amp; end) &#123;</div><div class="line">    <span class="built_in">Object</span>.assign(params, &#123;</div><div class="line">      <span class="attr">time</span>: &#123;</div><div class="line">        <span class="attr">$gte</span>: start,</div><div class="line">        <span class="attr">$lte</span>: end,</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 处理分页参数</span></div><div class="line">  <span class="keyword">const</span> paramsPagination = <span class="built_in">Object</span>.assign(&#123; <span class="attr">size</span>: <span class="number">20</span>, <span class="attr">page</span>: <span class="number">1</span> &#125;, <span class="built_in">JSON</span>.parse(_pagination || <span class="string">'&#123;&#125;'</span>));</div><div class="line"></div><div class="line">  <span class="comment">// 调 service 获取数据</span></div><div class="line">  <span class="comment">// service也和 controller 一样，egg做了文件的映射，直接 ctx.service能很方便的去获取</span></div><div class="line">  <span class="keyword">const</span> &#123; list, pagination &#125; = <span class="keyword">await</span> ctx.service.monitor.find(&#123; params, ...paramsPagination &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 处理数据</span></div><div class="line">  list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    item.img_url = <span class="string">`http://localhost:7001<span class="subst">$&#123;item.img_url&#125;</span>`</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 调 rest中间件 处理返回数据</span></div><div class="line">  ctx.rest(&#123;</div><div class="line">    list,</div><div class="line">    pagination,</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="service-处理一些和数据库交互的逻辑"><a href="#service-处理一些和数据库交互的逻辑" class="headerlink" title="service 处理一些和数据库交互的逻辑"></a>service 处理一些和数据库交互的逻辑</h2><p>service和controller 一样，egg帮我们做了一些文件的映射，所以也是直接在<code>app/service/monitor.js</code>写对应的逻辑即可</p>
<p>这一块应该是最麻烦的， mongoose api 不熟，也不确定这么写会不会最优,合不合理等…有时间或者以后有机会 会去看《SQL必知必会》 学学数据库这一块软肋。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">MoitorService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">  <span class="keyword">async</span> find(&#123;params, size, page&#125;) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 查复合条件的页数</span></div><div class="line">    <span class="keyword">const</span> count = <span class="keyword">await</span> <span class="keyword">this</span>.app.model.Monitor</div><div class="line">      .find(params).count();</div><div class="line"></div><div class="line">    <span class="comment">// 处理分页</span></div><div class="line">    <span class="keyword">const</span> monitors = <span class="keyword">await</span> <span class="keyword">this</span>.app.model.Monitor</div><div class="line">      .find(params).sort(<span class="string">'time'</span>).select(<span class="string">'-__v'</span>)</div><div class="line">      .skip(size * (page<span class="number">-1</span>))</div><div class="line">      .limit(size).lean();</div><div class="line"></div><div class="line">    <span class="comment">// 处理要返回的格式</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">list</span>: monitors,</div><div class="line">      <span class="attr">pagination</span>: &#123;</div><div class="line">        count, size, page,</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">## middleware 中间件</div><div class="line">egg 其实基于koa实现的，所以对中间件形式和koa一样是洋葱圈模型。</div><div class="line"></div><div class="line">集成中间件也很简单，在`app/middleware/<span class="string">`下写对应的中间件，再在 `</span>config/config.default.js<span class="string">`下配置即可启用。</span></div><div class="line"></div><div class="line">写中间件</div><div class="line">`<span class="string">``</span>javascript app/middleware/error_handler.js</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">errorHandler</span>(<span class="params">ctx, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">await</span> next();</div><div class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">      <span class="comment">// 所有异常都在 app 上触发一个 error 事件</span></div><div class="line">      ctx.app.emit(<span class="string">'error'</span>, err, ctx);</div><div class="line"></div><div class="line">      <span class="keyword">const</span> status = err.status || <span class="number">500</span>;</div><div class="line">      <span class="comment">// 生产环境时 500 错误的详细错误内容不返回给客户端，可能包含敏感信息</span></div><div class="line">      <span class="keyword">const</span> error = status === <span class="number">500</span> &amp;&amp; ctx.app.config.env === <span class="string">'prod'</span></div><div class="line">        ? <span class="string">'Internal Server Error'</span></div><div class="line">        : err.message;</div><div class="line"></div><div class="line">      <span class="comment">// 从 error 对象上读出各个属性 设置到响应中</span></div><div class="line">      ctx.body = &#123; error &#125;;</div><div class="line">      <span class="keyword">if</span> (status === <span class="number">422</span>) &#123;</div><div class="line">        ctx.body.detail = err.errors;</div><div class="line">      &#125;</div><div class="line">      ctx.status = status;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加配置<br><figure class="highlight javascript"><figcaption><span>app/config/config.default.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span>=&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> config = &#123;</div><div class="line">    <span class="comment">// 中间件配置</span></div><div class="line">    middleware: [<span class="string">'errorHandler'</span>],</div><div class="line"></div><div class="line">    <span class="comment">// errorHandler配置，只对 /api 开头的路由做处理</span></div><div class="line">    errorHandler: &#123;</div><div class="line">      <span class="attr">match</span>: <span class="string">'/api'</span>,</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="阈值发送邮件功能"><a href="#阈值发送邮件功能" class="headerlink" title="阈值发送邮件功能"></a>阈值发送邮件功能</h2><p>这一块要维护两个临时变量数组，三个配置参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> temp = &#123;&#125;;</div><div class="line">temp.errorObj = &#123;</div><div class="line">  <span class="attr">errorArray</span>: [], <span class="comment">// 用来存每次错误上报的时间戳</span></div><div class="line">  sendArray: [], <span class="comment">// 用来存每次发送的时间戳</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> errorConfig = &#123;</div><div class="line">  <span class="attr">maxCount</span>: <span class="number">5</span>, <span class="comment">// 单位时间超过n次就报警</span></div><div class="line">  unitTime: <span class="number">30</span>, <span class="comment">// 单位时间为：n分钟</span></div><div class="line">  maxSend: <span class="number">2</span>, <span class="comment">// 单位时间最多发n封邮件</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">大概的逻辑是， 每次报错的时候， errorArray 塞入一个时间戳，然后判断：</div><div class="line"><span class="number">1.</span> 判断是否到达发送阈值</div><div class="line"><span class="number">2.</span> 根据当前的时间戳和配置来清理过期的数据</div><div class="line"><span class="number">3.</span> 判断单位时间内是否达到发送阈值</div><div class="line"><span class="number">4.</span> 判断单位时间内是否超过发送次数</div><div class="line"><span class="number">5.</span> 构建发送内容， 🚀  处理后续的记录操作</div></pre></td></tr></table></figure></p>
<p>用到的发邮件插件是 <a href="https://www.jianshu.com/p/ee200a67853c" target="_blank" rel="external">nodemailer</a> 简单粗暴 用过都说好</p>
<h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>其实 <code>auto_test_project</code> 最麻烦的是在定义数据库格式的时候，经常定义少一些关键的字段（目前肯定也还存在这种情况的）。<br>还有就是本来以为和 <code>angular</code> 一样，<code>controller</code> 会塞大量的业务逻辑， 等到后面有一个场景是要在某个 <code>controller</code>调用另一个<code>controller</code> 时才发现，原来 controller 主要的职责是负责处理路由和一些参数验证输出等比较对外的工作，对内的基本都写成了<code>service</code>。</p>
<p>前端的小伙伴很多人懂node 可能也只是懂node的语法层 要想真的写后台或者微全栈，还是有很多东西要学的。</p>
<h1 id="列表展示-admin-项目"><a href="#列表展示-admin-项目" class="headerlink" title="列表展示(admin)项目"></a>列表展示(admin)项目</h1><p>列表展示相对简单，没什么好讲的。想用什么技术栈都比较随意，react,vue甚至hbs或者直接在js里面写html字符串循环都ok。</p>
<p>这里推一下一篇文章，介绍工作中的一个项目 <a href="https://jsonz1993.github.io/2018/02/react%E5%85%A8%E5%AE%B6%E6%A1%B6-dva-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/">react全家桶 &amp;&amp; dva最佳实践</a></p>
<h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>跑自动化测试脚本(auto_test)的log<br><img src="./log.png" alt="log.png"></p>
<p>自动化测试成功后提交数据(admin)<br><img src="./success.png" alt="success"></p>
<p>自动化测试失败后将数据上报(admin) 包含了标题，报错信息，链接，截图，标记等<br><img src="./admin.png" alt="admin"></p>
<p>文章作为学习的记录到此结束，这个项目主要学习了 egg,mongodb,puppeteer 等 还是挺有收获的.</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
            <tag> puppeteer </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目代码规范工作流——editor、prettier、eslint、git-check]]></title>
      <url>https://jsonz1993.github.io/2018/03/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E2%80%94%E2%80%94editor%E3%80%81prettier%E3%80%81eslint%E3%80%81git-check/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近部门进了挺多新前端，有实习生 有应届生，人一多<br>代码规范就不能完全依赖 “口口相传” 去约束了， 特别是看到一堆的 有分号，无分号，四缩进，二缩进等问题</p>
<p>对于有小小代码洁癖的我实在是受不了 于是终于在项目中 集成各种用来 规范（约束）的工具。</p>
<p>主要有：</p>
<ul>
<li>editorConfig 编辑器配置文件</li>
<li>Prettier 批量格式化代码</li>
<li>Eslint js、jsx 文件代码检查规范</li>
<li>Flow (暂未集成)</li>
<li>lint-staged 提交到git之前跑一次代码检查</li>
</ul>
<p>本地一些环境：<code>node 8.9.4</code>, <code>npm 5.6.0</code>, <code>oxs 10.13.3</code>， 编辑器 <code>vscodeeeeee</code></p>
<h1 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h1><p>What is EditorConfig?<br>官网给出的答案是：editorconfig帮助开发人员在不同的编辑器和ide之间定义和维护一致的编码风格。<br><strong>简单来说就是跨编辑器使用同一份代码缩进等配置</strong></p>
<p>EditorConfig 集成起来十分简单， 大概就是创建配置文件，安装相应的编辑器插件即可。</p>
<ol>
<li>创建 <a href="http://editorconfig.org/#example-file" target="_blank" rel="external"><code>.editorconfig</code></a> 文件</li>
<li><a href="http://editorconfig.org/#download" target="_blank" rel="external">安装对应编辑器的插件</a></li>
</ol>
<p>我用的是 vscode 直接安装这个 <code>EditorConfig for vs code</code>，安装完重启，编辑器就会根据配置文件里面的配置来控制代码缩进等行为</p>
<p>附上项目的配置文件<br><figure class="highlight"><figcaption><span>.editorconfig</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root = true</div><div class="line"></div><div class="line">[*]</div><div class="line">charset = utf-8</div><div class="line">end_of_line = lf # mac linux/unix 都用lf。 window 设置 cr 在 *nix 有问题</div><div class="line">indent_size = 4</div><div class="line">indent_style = space</div><div class="line">max_line_length = 120</div><div class="line">trim_trailing_whitespace = true</div><div class="line"></div><div class="line">[*.jsx]</div><div class="line">indent_size= 2</div></pre></td></tr></table></figure></p>
<h1 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h1><p>现在有了一些基本的配置，以后写的代码就可以比较规范一点点点，但是原来的旧代码怎么办呢？<br>不可能一个文件一个文件去打开吧，不完全统计 项目有上千个编辑的文件….一个一个去手动打开不符合程序员的风格</p>
<p>so… <a href="https://prettier.io/" target="_blank" rel="external">Prettier</a>就是为我们做这些事情的</p>
<ol>
<li>安装: <code>npm i --save-dev prettier</code></li>
<li>创建 <a href="https://prettier.io/docs/en/configuration.html" target="_blank" rel="external"><code>.prettierrc</code>配置文件</a><br>该配置文件会继承<code>editorConfig</code>的配置</li>
<li>向<code>package.json</code>添加脚本: <code>&quot;prettier&quot;: &quot;prettier --write ./*&quot;</code><blockquote>
<p>我项目里面用的是 <code>&quot;prettier&quot;: &quot;prettier --write &#39;./src/**/*.js&#39; &#39;./src/**/*.jsx&#39; &#39;./src/**/*.css&#39; &#39;./src/**/*.scss&#39;&quot;,</code></p>
</blockquote>
</li>
<li>创建 <code>.prettierignore</code> 文件，用来忽略一些文件 &amp;&amp; 目录</li>
<li>一切准备就绪之后 !!!! <code>npm run prettier</code> 呼呼 看到提示一千个文件更改记录 哈哈哈</li>
</ol>
<p>附上配置文件:<br><figure class="highlight javascript"><figcaption><span>.prettierrc.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// https://prettier.io/docs/en/options.html</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">trailingComma</span>: <span class="string">"es5"</span>, <span class="comment">// 数组 对象尾随逗号 [arr, ] &#123; obj, &#125;</span></div><div class="line">    <span class="comment">// bracketSpacing: true, // 对象空格 &#123; foo: bar &#125;, false=&gt; &#123;foo:bar&#125;</span></div><div class="line"><span class="comment">// jsxBracketSameLine: false, // jsx闭标签是否另起一行 &lt;Test&gt;&lt;/Test&gt;</span></div><div class="line"><span class="comment">// arrowParens: 'avoid', // 箭头函数是否省略括号 a=&gt; a, (a)=&gt; a</span></div><div class="line">    singleQuote: <span class="literal">true</span>, <span class="comment">// 单引号</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>.prettierignore</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/node_modules</div><div class="line">/dist</div><div class="line">/src/lib/</div><div class="line"><span class="regexp">/src/g</span>lobal/fonts</div></pre></td></tr></table></figure>
<h1 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h1><p>有了上面介绍的 <code>editor</code>、<code>prettier</code>还是远远不够的，因为 js语法 不是很严格，比如有没有分号啊 之类的问题还是要用 eslint 来约束的。</p>
<p>在很多年前，我是特别反感 Eslint 的，因为经常写得一点不规范，直接就报 error 整个项目跑不起来。<br>但是 存在即合理，现在觉得这东西贼好用。</p>
<ol>
<li>安装 eslint: <code>npm i --save-dev eslint</code></li>
<li>启动引导脚本: <code>./node_modules/.bin/eslint --init</code> 配置 <code>.eslintrc</code>。<blockquote>
<p>这里可以直接选 <code>Use a popular style guide</code> 然后选行业比较看好的规范 <code>airbnb</code>的，原先是打算选这个，但是后面发现和项目现有的规范很不相同，所以后面就走回答问题选项。</p>
</blockquote>
</li>
<li>向 <code>package.json</code> 添加脚本: <code>&quot;eslint&quot;: &quot;eslint --fix ./&quot;</code><blockquote>
<p>我写的是 <code>&quot;eslint&quot;: &quot;eslint --fix &#39;./src/**/*.{jsx, js}&#39;&quot;,</code></p>
</blockquote>
</li>
<li>创建 <code>.eslintignore</code> 文件，并向其添加需要忽略的文件或目录。</li>
<li>安装 <a href="https://eslint.org/docs/user-guide/integrations" target="_blank" rel="external">编辑器 eslint 插件</a></li>
<li>配置编辑器，我这里用的是 vscode<ul>
<li>“eslint.autoFixOnSave”: true  <code>开启eslint 检查</code></li>
<li>“javascript.validate.enable”: false <code>关闭vscode自带的js检查</code></li>
</ul>
</li>
</ol>
<p>eslint插件会智能检查编辑状态的 JS 文件，并自动修复；<code>npm run eslint</code> 脚本可以检查和智能修复“对应的文件”。 不过亲测修复的效果比较一般，更多的报错需要手动去处理</p>
<p>在配置eslint的时候 遇到了几个比较郁闷的地方</p>
<h2 id="可以先把一些报错项改为-警告项，慢慢迭代-免得一上eslint-要停几天来修改原来的文件"><a href="#可以先把一些报错项改为-警告项，慢慢迭代-免得一上eslint-要停几天来修改原来的文件" class="headerlink" title="可以先把一些报错项改为 警告项，慢慢迭代 免得一上eslint 要停几天来修改原来的文件"></a>可以先把一些报错项改为 警告项，慢慢迭代 免得一上eslint 要停几天来修改原来的文件</h2><h2 id="一些简单的处理可以写脚本去做"><a href="#一些简单的处理可以写脚本去做" class="headerlink" title="一些简单的处理可以写脚本去做"></a>一些简单的处理可以写脚本去做</h2><p>比如说之前项目写的比较不规范，出现了很多类似：<code>export default from &#39;file-path&#39;</code>的语句，但是eslint不认，觉得这是不符合规范的，需要改为 <code>export { default } from &#39;file-path&#39;</code></p>
<p>这点我也比较认同，但是 这么多个文件，一个一个改是不存在的，所以写了个短脚本去处理</p>
<figure class="highlight javascript"><figcaption><span>fix-export-default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">scan</span>(<span class="params">&#123;dirPath&#125;</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> isDirectory = fs.statSync(dirPath).isDirectory();</div><div class="line">    <span class="keyword">if</span> (isDirectory) &#123;</div><div class="line">        <span class="keyword">const</span> childs = fs.readdirSync(dirPath);</div><div class="line">        childs.forEach(<span class="function"><span class="params">child</span>=&gt;</span> &#123;</div><div class="line">            <span class="keyword">const</span> nextPath = path.join(dirPath, child);</div><div class="line">            <span class="keyword">const</span> stat = fs.statSync(nextPath);</div><div class="line">            <span class="keyword">const</span> isDirectory = stat.isDirectory();</div><div class="line">            <span class="keyword">const</span> isFile = stat.isFile();</div><div class="line">            <span class="keyword">const</span> extname = isFile &amp;&amp; path.extname(child);</div><div class="line"></div><div class="line">            <span class="comment">// 文件夹类型 递归</span></div><div class="line">            <span class="keyword">if</span> (isDirectory) scan(&#123;<span class="attr">dirPath</span>: nextPath&#125;);</div><div class="line"></div><div class="line">            <span class="comment">// 排除不是 js jsx 的文件</span></div><div class="line">            <span class="keyword">if</span> (![<span class="string">'.js'</span>, <span class="string">'.jsx'</span>].includes(extname)) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 开始读文件</span></div><div class="line">            <span class="keyword">let</span> fileStr = fs.readFileSync(nextPath) +<span class="string">''</span>;</div><div class="line">            <span class="keyword">const</span> exg = <span class="regexp">/export default from/gi</span>;</div><div class="line">            <span class="keyword">if</span> (exg.exec(fileStr))</div><div class="line">                fileStr = fileStr.replace(<span class="string">'export default from'</span>, <span class="string">'export &#123;default&#125; from'</span>);</div><div class="line">            fs.writeFileSync(nextPath, fileStr, &#123;<span class="attr">encoding</span>: <span class="string">'utf-8'</span>&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">scan(&#123;</div><div class="line">    <span class="attr">dirPath</span>: path.join(process.cwd(), <span class="string">'/src'</span>),</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="webpack别名引用-路径报错问题"><a href="#webpack别名引用-路径报错问题" class="headerlink" title="webpack别名引用 路径报错问题"></a>webpack别名引用 路径报错问题</h2><p>安装对应的 eslint 处理插件: <code>npm i --save-dev eslint-import-resolver-webpack eslint-plugin-import</code></p>
<p>在 <code>.eslint.js</code> 里面加这段配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"settings"</span>: &#123;</div><div class="line">  <span class="string">'import/resolver'</span>: &#123;</div><div class="line">      <span class="attr">webpack</span>: &#123;</div><div class="line">          <span class="attr">config</span>: getWebpackConfig, <span class="comment">// 这里是webpack配置路径</span></div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="其他注意问题"><a href="#其他注意问题" class="headerlink" title="其他注意问题"></a>其他注意问题</h2><p>项目是在 浏览器运行， 又是 es6语法， 又有一些node脚本，会有一些全局的变量引用提示报错，怎么办？<br>改配置!<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"env"</span>: &#123;</div><div class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">es6</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>项目是后端模版渲染的，会有一些全局变量，eslint报错怎么办？<br>改配置!<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="string">"globals"</span>: &#123;</div><div class="line">    <span class="attr">__DEV__</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">__HTTPS__</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">FB</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">ga</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">$</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">ercjs</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">google</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">IS_APP</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">i18n</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">Zepto</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">AdjustEvent</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">Adjust</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">fbq</span>: <span class="literal">true</span>,</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>项目用了很多新语法 eslint 不识别, 用了 react 怎么办？<br>改配置…具体的 谷歌一下 一堆答案 不再赘述</p>
<h1 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h1><p>Flow可以理解为 很轻量型 无侵入的 静态类型检查<br>项目暂时没有考虑集成，所以这里不做过多介绍</p>
<h1 id="git-check"><a href="#git-check" class="headerlink" title="git-check"></a>git-check</h1><p>既然我们 有了编辑器的配置， js编辑实时检查， 但是如果有些小伙伴不遵守规则 搞事情怎么办呢？<br>这时候我们可以在最后一个流程加上验证的部分，  在git 提交的时候跑一些脚本去验证，如果通过就给提交，不通过就提示错误</p>
<p><a href="https://github.com/okonet/lint-staged" target="_blank" rel="external">lint-staged</a> 可以帮我们做这些事情</p>
<ol>
<li>安装 lint-staged husky: <code>npm i --save-dev lint-staged husky</code></li>
<li>向 <code>package.json</code> 添加运行脚本 <code>&quot;precommit&quot;: &quot;lint-staged&quot;</code><blockquote>
<p>这时候在git commit 之前会跑 lint-staged的东西</p>
</blockquote>
</li>
<li>再向 <code>package.json</code> 添加内容:  注意，这时候不是加在 <code>scripts</code>里面，而是加在同级<br><code>&quot;lint-staged&quot;: {
 // 上面提供的“自动化脚本”
 &quot;*.js&quot;: [&quot;eslint --fix&quot;, &quot;git add&quot;],
 &quot;*.json&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;],
 &quot;*.css&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;],
 &quot;*.scss&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;],
 &quot;*.md&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;]
}</code><blockquote>
<p>因为项目是本地打包再推远程，所以我的配置是指定了 src下的<br><code>&quot;src/**/*.js&quot;: [
&quot;eslint --fix&quot;,
&quot;git add&quot;
],
&quot;src/**/*.jsx&quot;: [
&quot;eslint --fix&quot;,
&quot;git add&quot;
],
&quot;src/**/*.css&quot;: [
&quot;prettier --write&quot;,
&quot;git add&quot;
],
&quot;src/**/*.scss&quot;: [
&quot;prettier --write&quot;,
&quot;git add&quot;
]</code></p>
</blockquote>
</li>
</ol>
<p>这样在提交之前就会对 新增的(git add) .js 文件执行 <code>&quot;eslint --fix&quot;</code> 脚本， 以此类推…</p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>emmmmmmmmmmmmmmmmmmmmmmmmm 虽然看起来挺简单的，但是整套结合项目去折腾下来 挺多坑的。<br>特别是eslint这块的配置</p>
<p>第一次跑 <code>airbnb</code> 的项目： <img src="./error1.png" alt="eror1"><br>目前项目配置官方推荐的 esling 之后: <img src="./error2.png" alt="eror2"><br>把error改为 warn保证项目能跑起来: <img src="./error3.png" alt="eror3"><br>git提交检查失败: <img src="./git-check.png" alt="git-check"></p>
<p>最后附上eslint配置<br><figure class="highlight javascript"><figcaption><span>.eslint.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> getWebpackConfig = <span class="built_in">require</span>(<span class="string">'./config/webpack.dev.config'</span>)(process.cwd());</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</div><div class="line">    <span class="string">"extends"</span>: [<span class="string">'eslint:recommended'</span>, <span class="string">"plugin:react/recommended"</span>, <span class="string">"prettier"</span>],</div><div class="line">    <span class="string">"parserOptions"</span>: &#123;</div><div class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">8</span>,</div><div class="line">        <span class="string">"sourceType"</span>: <span class="string">"module"</span>,</div><div class="line">        <span class="string">"ecmaFeatures"</span>: &#123;</div><div class="line">            <span class="string">"jsx"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"modules"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"experimentalObjectRestSpread"</span>: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span>: [<span class="string">"react"</span>],</div><div class="line">    <span class="string">"settings"</span>: &#123;</div><div class="line">        <span class="string">'import/resolver'</span>: &#123;</div><div class="line">            <span class="attr">webpack</span>: &#123;</div><div class="line">                <span class="attr">config</span>: getWebpackConfig,</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"react"</span>: &#123;</div><div class="line">            <span class="string">"pragma"</span>: <span class="string">"React"</span>,</div><div class="line">            <span class="string">"version"</span>: <span class="string">"16.1.1"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"env"</span>: &#123;</div><div class="line">        <span class="attr">browser</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">es6</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">node</span>: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">"globals"</span>: &#123;</div><div class="line">        <span class="attr">__DEV__</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">__HTTPS__</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">FB</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">ga</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">$</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">ercjs</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">google</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">IS_APP</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">i18n</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">Zepto</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">AdjustEvent</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">Adjust</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">fbq</span>: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">"rules"</span>: &#123;</div><div class="line">        <span class="string">"sort-imports"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"import/first"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"import/no-named-as-default"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"import/no-named-as-default-member"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"import/extensions"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"prefer-destructuring"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"no-new"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"react/jsx-filename-extension"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"no-plusplus"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"func-names"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"no-console"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"no-useless-escape"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"semi"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 这些规则后面会改为错误，暂时先警告</span></div><div class="line">        <span class="string">"no-unused-vars"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"react/prop-types"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"react/no-string-refs"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"react/jsx-key"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"react/no-unescaped-entities"</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自动化测试 puppeteer 与qq空间]]></title>
      <url>https://jsonz1993.github.io/2018/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95puppeteer-%E4%B8%8Eqq%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>emmmm 前几天女朋友想加我qq。才想到 万年没用的qq里面qqZone 遗留着千年前的一堆中二留言 &amp;&amp; 中二说说。 刚好最近有接触到 自动化测试 <a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">puppeteer</a> 框架， 就想着写个脚本去自动删掉留言板和说说。 整个项目基于 node8 运行 用的 async await语法。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先 puppeteer 可以理解为 是谷歌出的一个无UI版本的Chrome。</p>
<p><img src="./1.png" alt="1.png"></p>
<p>先从 puppeteer 实例化出一个 <code>Browser</code>， 根据 <code>Browser</code>去new 一个 <code>Page</code>。<br>这个Page可以理解成 我们平时浏览器的一个 tab。 一般操作都是基于 Page去实现的</p>
<p>Page 提供了很多简单易用的api用于操作网页元素， 基本都是异步操作，所以直接用 async/await 非常方便快捷简单易懂。</p>
<ul>
<li>比如获取元素: <code>page.$(&#39;#switcher_plogin&#39;)</code> </li>
<li>在输入框填入特定信息，每次输入间隔100毫秒模拟输入: <code>page.type(&#39;#mytextarea&#39;, &#39;World&#39;, {delay: 100});</code></li>
<li>选择下拉框: <code>Page.select(&#39;select#colors&#39;, &#39;blue&#39;);</code></li>
</ul>
<h1 id="项目细节"><a href="#项目细节" class="headerlink" title="项目细节"></a>项目细节</h1><h2 id="项目初始化与登录步骤"><a href="#项目初始化与登录步骤" class="headerlink" title="项目初始化与登录步骤"></a>项目初始化与登录步骤</h2><p>首先我们要打开 qq空间 的页面 并登录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常用操作的工具函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pageTool</span>(<span class="params">page</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> _page = &#123;</div><div class="line"></div><div class="line">    <span class="keyword">async</span> _click(selector) &#123;</div><div class="line">      <span class="keyword">await</span> page.waitForSelector(selector, &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</div><div class="line">      <span class="keyword">return</span> page.click(selector);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="keyword">async</span> _waitForNavigation(opts = &#123;&#125;) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">await</span> page.waitForNavigation(&#123; <span class="attr">waitUntil</span>: <span class="string">'domcontentloaded'</span>, ...opts &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.assign(page, _page);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</div><div class="line">    <span class="attr">headless</span>: <span class="literal">true</span>, <span class="comment">// 是否显示界面</span></div><div class="line">    devtools: <span class="literal">true</span>, <span class="comment">// 是否显示开发者工具</span></div><div class="line">    slowMo: <span class="number">100</span>, <span class="comment">// 延迟每一次操作的毫秒数</span></div><div class="line">    ignoreHTTPSErrors: <span class="literal">true</span>, <span class="comment">// 是否忽略HTTPS错误</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> loginPage = <span class="keyword">await</span> browser.newPage(); <span class="comment">// 打开新tab 获取当前tab的实例</span></div><div class="line">  <span class="keyword">const</span> page = loginPage;</div><div class="line">  </div><div class="line">  <span class="comment">// 仿真 设置窗口大小与 UA 信息。 这里可以设置为 移动端的。</span></div><div class="line">  <span class="comment">// puppeteer 内置了一些设备可供选择 可以通过以下获取：</span></div><div class="line">  <span class="comment">// const devices = require('puppeteer/DeviceDescriptors');</span></div><div class="line">  <span class="comment">// const iPhone = devices['iPhone 6'];</span></div><div class="line">  loginPage.emulate(&#123; <span class="attr">viewport</span>: &#123; <span class="attr">width</span>: <span class="number">1280</span>, <span class="attr">height</span>: <span class="number">800</span> &#125;, <span class="attr">userAgent</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3347.0 Safari/537.36'</span> &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 打开特定链接，并等待3秒钟</span></div><div class="line">  <span class="comment">// PS: 一般是用 page.waitForNavigation 去等待页面加载，这里网络问题经常会出现卡住 所以简单设置为等3s</span></div><div class="line">  <span class="keyword">await</span> loginPage.goto(<span class="string">'https://i.qq.com/?s_url=http%3A%2F%2Fuser.qzone.qq.com%2F847691625%2Finfocenter&amp;rd=1'</span>);</div><div class="line">  <span class="keyword">await</span> loginPage.waitFor(<span class="number">3000</span>);</div><div class="line">  </div><div class="line">  <span class="comment">// 这里封装了一点点常用的操作</span></div><div class="line">  pageTool(loginPage);</div><div class="line"></div><div class="line">  <span class="comment">// 打开成功之后 我们开始走登录的步骤了</span></div><div class="line">  (<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  </div><div class="line">    <span class="comment">// QQ空间里面是用一个 iframe 去装登录的部分，所以这里要先获取 登录iframe对象再进行操作</span></div><div class="line">    <span class="keyword">const</span> iframeDom = <span class="keyword">await</span> loginPage.frames().filter(<span class="function"><span class="params">iframe</span> =&gt;</span> iframe._name === <span class="string">'login_frame'</span>)[<span class="number">0</span>];</div><div class="line"></div><div class="line">    <span class="comment">// 如果有登录qq的话，可以使用快捷登录模式</span></div><div class="line">    <span class="keyword">const</span> iframeLoginBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">'#img_out_847691625'</span>);</div><div class="line">    <span class="keyword">if</span> (iframeLoginBtn) &#123;</div><div class="line">      <span class="keyword">await</span> iframeLoginBtn.click();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果没有登录qq 直接读配置里面的信息去用账户密码登录</span></div><div class="line">      <span class="keyword">if</span> (data.qq === <span class="string">'你的qq账号'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'先在a.js 输入qq账号和密码'</span>);</div><div class="line">      <span class="comment">// 密码模式</span></div><div class="line">      <span class="keyword">const</span> plogin = <span class="keyword">await</span> iframeDom.$(<span class="string">'#switcher_plogin'</span>);</div><div class="line">      <span class="keyword">await</span> plogin.click(); <span class="comment">//点击账户密码登录的按钮</span></div><div class="line">      <span class="keyword">const</span> userName = <span class="keyword">await</span> iframeDom.$(<span class="string">'#u'</span>);</div><div class="line">      <span class="keyword">await</span> userName.type(data.qq); <span class="comment">// 填入账户</span></div><div class="line">      <span class="keyword">const</span> pw = <span class="keyword">await</span> iframeDom.$(<span class="string">'#p'</span>);</div><div class="line">      <span class="keyword">await</span> pw.type(data.pw); <span class="comment">// 填入密码</span></div><div class="line">      <span class="keyword">const</span> loginBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">'#login_button'</span>);</div><div class="line">      <span class="keyword">await</span> loginBtn.click(); <span class="comment">// 点击登录</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'登录完成'</span>);</div><div class="line">    <span class="comment">// 到这里 登录步骤已经完成 大概涵盖了整个项目的80%操作 其他都是类似的dom操作</span></div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  <span class="comment">/** 删除留言板模块代码，见下一个栏目 **/</span></div><div class="line"></div><div class="line">  <span class="comment">/** 删除说说模块代码，见下下个栏目 **/</span></div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="删除留言板的功能模块"><a href="#删除留言板的功能模块" class="headerlink" title="删除留言板的功能模块"></a>删除留言板的功能模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delCommit</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 等待一个 .head-nav-menu a[title="留言板"] 的元素 css选择器</span></div><div class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">'.head-nav-menu a[title="留言板"]'</span>);</div><div class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</div><div class="line">  <span class="keyword">await</span> page._click(<span class="string">'.head-nav-menu a[title="留言板"]'</span>);</div><div class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">'.app_canvas_frame'</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'留言板iframe加载完成'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 这里重新获取一个 ifrmae 留言板也是用一个iframe 嵌套进来的....没想到整个qq空间是由一堆的ifrmae堆起来</span></div><div class="line">  <span class="keyword">const</span> iframeDom = <span class="keyword">await</span> page.frames().filter(<span class="function"><span class="params">iframe</span> =&gt;</span> iframe.url().includes(<span class="string">'qzs.qq.com/qzone/msgboard/msgbcanvas.html'</span>))[<span class="number">0</span>];</div><div class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'留言板iframe 获取完成 '</span>, iframeDom);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> btnBatchBottom = <span class="keyword">await</span> iframeDom.$(<span class="string">'#btnBatchBottom'</span>);</div><div class="line">  <span class="keyword">await</span> btnBatchBottom.click();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'批量点击成功 '</span>, btnBatchBottom);</div><div class="line"></div><div class="line">  <span class="keyword">let</span> delTime = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 一次完整的删除逻辑</span></div><div class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delOnes</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 开始执行`</span>);</div><div class="line"></div><div class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> $chkSelectAllBottom = <span class="string">'#chkSelectAllBottom'</span>;</div><div class="line">    <span class="keyword">const</span> chkSelectAllBottom = <span class="keyword">await</span> iframeDom.$($chkSelectAllBottom);</div><div class="line">    <span class="keyword">await</span> chkSelectAllBottom.click();</div><div class="line">    <span class="keyword">if</span> (delTime !== <span class="number">1</span>) <span class="keyword">await</span> chkSelectAllBottom.click();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 点击全选`</span>, chkSelectAllBottom);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> $delAll = <span class="string">'#btnDeleteBatchBottom'</span>;</div><div class="line">    <span class="keyword">const</span> delAll = <span class="keyword">await</span> iframeDom.$($delAll);</div><div class="line">    <span class="keyword">await</span> delAll.click();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 点击删除`</span>, delAll)</div><div class="line"></div><div class="line">    <span class="keyword">const</span> $sureBtn = <span class="string">'.qz_dialog_layer_btn.qz_dialog_layer_sub span'</span>;</div><div class="line">    <span class="keyword">await</span> page._click($sureBtn);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 点击确定`</span>)</div><div class="line"></div><div class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">3000</span>);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 执行结束`</span>);</div><div class="line">    delTime++;</div><div class="line"></div><div class="line">    <span class="comment">// 递归</span></div><div class="line">    <span class="keyword">const</span> hasCommit = <span class="keyword">await</span> iframeDom.$(<span class="string">'#ulCommentList .bor3'</span>);</div><div class="line">    <span class="keyword">if</span> (hasCommit) &#123;</div><div class="line">      <span class="keyword">await</span> delOnes();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">await</span> delOnes();</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">// delCommit();</span></div></pre></td></tr></table></figure>
<h2 id="删除说说模块"><a href="#删除说说模块" class="headerlink" title="删除说说模块"></a>删除说说模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delEmotion</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">'.head-nav-menu a[title="说说"]'</span>);</div><div class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</div><div class="line">  <span class="keyword">await</span> page._click(<span class="string">'.head-nav-menu a[title="说说"]'</span>);</div><div class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">'.app_canvas_frame'</span>);</div><div class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'说说iframe加载完成'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> iframeDom = <span class="keyword">await</span> page.frames().filter(<span class="function"><span class="params">iframe</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(iframe.url());</div><div class="line">    <span class="keyword">return</span> iframe.url().includes(<span class="string">'qzs.qq.com/qzone/app/mood_v6/html/index.html'</span>);</div><div class="line">  &#125;)[<span class="number">0</span>];</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'说说iframe 获取完成 '</span>, iframeDom);</div><div class="line"></div><div class="line">  <span class="keyword">let</span> delTime = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delOnes</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 开始执行`</span>);</div><div class="line"></div><div class="line">      <span class="keyword">const</span> moreBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">'.dropdown-trigger.c_tx'</span>);</div><div class="line">      <span class="keyword">await</span> moreBtn.hover();</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 展示删除按钮`</span>);</div><div class="line"></div><div class="line">      <span class="keyword">const</span> delBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">'.del.del_btn.author_display'</span>);</div><div class="line">      <span class="keyword">await</span> delBtn.click();</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 点击删除按钮`</span>);</div><div class="line"></div><div class="line">      <span class="keyword">await</span> page.waitForSelector(<span class="string">'.qz_dialog_layer_btn.qz_dialog_layer_sub span'</span>);</div><div class="line">      <span class="keyword">const</span> delBtnSure = <span class="keyword">await</span> page.$(<span class="string">'.qz_dialog_layer_btn.qz_dialog_layer_sub span'</span>);</div><div class="line">      <span class="keyword">await</span> delBtnSure.click();</div><div class="line"></div><div class="line">      <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 点击确定按钮`</span>);</div><div class="line"></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span> 次删除 执行结束`</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (delTime % <span class="number">10</span> === <span class="number">0</span>) <span class="keyword">await</span> nextPage();</div><div class="line"></div><div class="line">      <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</div><div class="line">      delTime++;</div><div class="line">      <span class="keyword">await</span> delOnes();</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      <span class="built_in">console</span>.log(e, <span class="string">'报错了 尝试方案'</span>);</div><div class="line">      <span class="keyword">await</span> delOnes();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">await</span> delOnes();</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 出错 重新try 一遍`</span>)</div><div class="line">    <span class="keyword">await</span> delOnes();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">nextPage</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次执行 遇到跳转`</span>);</div><div class="line">    <span class="keyword">const</span> nextBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">'a[title="下一页"]'</span>);</div><div class="line">    nextBtn.click();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次执行 点击跳转`</span>);</div><div class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">5000</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次执行 跳转结束`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><p>大概代码都丢👆了 ，附上 <strong><a href="https://github.com/jsonz1993/wheel/tree/master/qqZone" target="_blank" rel="external">源码地址</a></strong> 在 <code>a.js</code> 填上账号密码。<br>再打开源码里面的 <code>// await delCommit();</code> 或者 <code>// await delEmotion();</code> 来删除 留言板或说说。没有做并发操作 所以只能执行一种功能。<br>修改完之后<code>npm install &amp;&amp; node app.js</code> 就可以跑了。</p>
<p>项目中遇到几个问题：</p>
<ol>
<li><p>page.waitForNavigation(options) 一直等不到完成状态, 30s 超时报错<br>可能是一直有一些脚本挂掉或者在loading。所以后面换成 等待3秒 虽然比较 low。。。但是可行</p>
</li>
<li><p>iframe 里面的dom元素不能直接通过 page.$ 获取，需要先获取 iframe 再通过这个 iframe去获取想要的dom元素</p>
</li>
<li><p>就算是浏览器执行 模拟人为删除，但是连续删除太多行数据的时候， 还是会触发 腾讯的验证码机制。<br>原本用 puppeteer 截图api 去获取验证码，然后用 <a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="external">Tesseract</a> 去识别验证码。但是发现说 识别的有效率极低… 也没有去折腾数据训练。 后面就放弃验证码这一块的技术识别，出了验证码就先不跑 隔断时间再跑。</p>
</li>
</ol>
<p>最后给出完整的项目演示</p>
<p>删除留言板功能演示</p>
<video src="./1.mov" width="320" height="240" controls="controls"><br>删除留言板功能演示<br></video>

<p>删除说说功能演示</p>
<video src="./2.mov" width="320" height="240" controls="controls"><br>删除说说功能演示<br></video>

<p>日志输出<br><img src="./log.png" alt="log"></p>
<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/jsonz1993/wheel/tree/master/qqZone" target="_blank" rel="external">源码地址</a></h1>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react全家桶 + dva 实践整理总结]]></title>
      <url>https://jsonz1993.github.io/2018/02/react%E5%85%A8%E5%AE%B6%E6%A1%B6-dva-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>最近接手组内一个前端大牛的项目，大概理清了里面的总理逻辑与数据流向等， 写个总结 方便以后可以查阅参考。</p>
<p>在之前做的后台管理平台里面，就有用到 <code>dva+antd</code>， 到后面直接用 <code>antd-pro</code> 重新整合了一遍，不得不说 <code>antd-pro</code> 真的是开箱即用 优雅粗暴。</p>
<p>但是里面可能很多和我们平时使用习惯有所不同， 所以这次接触的项目是基于 dva 自己再重组了一下 <code>model</code> <code>router</code> 目录结构等。 </p>
<p>使得页面更加的模块化，既 models, routes 不是在一个文件目录里，而是直接按照页面级别来组合。有一个好处就是 本来 models,routes 这些几乎就是不能公用的，那直接按着页面去分 方便问题定位与维护。</p>
<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── README.md</div><div class="line">├── config              # 一些关于 webpack babel dll 等项目构件的配置</div><div class="line">│   ├── babel-plugin-wrap-source.js</div><div class="line">│   ├── babel-plugin-wrap.js</div><div class="line">│   ├── build.log</div><div class="line">│   ├── dist.js</div><div class="line">│   ├── dll</div><div class="line">│   ├── server.js</div><div class="line">│   ├── ssr-middleware.js</div><div class="line">│   ├── theme.config.js</div><div class="line">│   ├── webpack.config.common.js</div><div class="line">│   ├── webpack.config.dll.js</div><div class="line">│   └── webpack.config.prod.js</div><div class="line">├── dist               # 打包好的文件</div><div class="line">│   ├── css</div><div class="line">│   ├── index.html</div><div class="line">│   └── js</div><div class="line">├── package-lock.json</div><div class="line">├── package.json</div><div class="line">├── src</div><div class="line">│   ├── assets        # 放一些静态资源，如 全局一些 less 文件等</div><div class="line">│   ├── common        # 公共文件， 如 config request utils 等</div><div class="line">│   ├── components    # 通用组件, 如 editor loading 等，用了 antd 之后，这个文件夹的文件较少</div><div class="line">│   ├── index-ssr.js</div><div class="line">│   ├── index.js      # 项目入口文件</div><div class="line">│   ├── mock          # mock文件</div><div class="line">│   ├── modules       # 业务页面文件夹  代码的绝大部分放在此处</div><div class="line">│       └── activity  #  业务页面 每个业务页面起一个文件夹</div><div class="line">│           ├── index.js   # 当前页面的路由及动态加载文件的配置文件</div><div class="line">│           ├── model.js   # 当前页面的 dva model</div><div class="line">│           ├── businessUtil.js # </div><div class="line">│           └── view       # 当前页面的 view 文件</div><div class="line">│               └── index.js</div><div class="line">│   ├── router.js     # 总路由入口</div><div class="line">│   └── services      # 后台接口服务</div><div class="line">└── webpack.config.js # webpack 配置</div></pre></td></tr></table></figure>
<h1 id="项目剖析"><a href="#项目剖析" class="headerlink" title="项目剖析"></a>项目剖析</h1><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>和其他项目一样 <code>index.js</code> 处理的东西很简单</p>
<ul>
<li>进行一些关于 dva 的配置初始化</li>
<li>加载配置app model <code>require(modules/app/model)</code></li>
<li>加载配置app router <code>require(&#39;./router&#39;).default</code></li>
<li>&amp;&amp;&amp;&amp;&amp;&amp;&amp; 启动应用</li>
</ul>
<p>这里就引出两个分支， model &amp;&amp; router 前端架构中比较关心的两个。</p>
<h2 id="router-管理"><a href="#router-管理" class="headerlink" title="router 管理"></a>router 管理</h2><p>在 <code>router.js</code> 里面 定义了主 <code>Component</code> 与默认 url</p>
<p>router.childRoutes 也是使用模块的方式，只引用了几个大模块，如 <code>require(&#39;modules/activity&#39;)(app),</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Routers = <span class="function"><span class="keyword">function</span> (<span class="params">&#123; history, app &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> routes = getRoutes(app);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span> <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> <span class="attr">render</span>=<span class="string">&#123;applyRouterMiddleware(useScroll())&#125;</span> /&gt;</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">function getRoutes(app) &#123;</div><div class="line">  return [</div><div class="line">    &#123;</div><div class="line">      path: '/',</div><div class="line">      component: App,</div><div class="line">      childRoutes: [</div><div class="line">        require('modules/activity')(app),</div><div class="line">      ],</div><div class="line">    &#125;,</div><div class="line">  ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>modules/activity/index.js</code> 再去加载构建他的子级路由</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> app=&gt;(&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'url'</span>,</div><div class="line">    getComponent (nextState, cb) &#123;</div><div class="line">        <span class="built_in">require</span>.ensure([], (<span class="built_in">require</span>) =&gt; &#123;</div><div class="line">            app.model(<span class="built_in">require</span>(<span class="string">'./model'</span>)); <span class="comment">// 加载当前模块的model</span></div><div class="line">            cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./view'</span>)); <span class="comment">// 记载当前模块的view</span></div><div class="line">        &#125;, <span class="string">'模块名'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">childRoutes</span>:[</div><div class="line">      <span class="built_in">require</span>(<span class="string">'modules/child1'</span>)(app), </div><div class="line">      <span class="built_in">require</span>(<span class="string">'modules/child2'</span>)(app)</div><div class="line">    ],</div><div class="line">    ...其他配置</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>就这样一层一层的构建自己的路由， 根据页面去配置也可以更加的细腻可控。不会写成长长的一坨。</p>
<h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p>model层用的是 <code>dva</code> 那套， 帮我们整合了 <code>redux</code>, <code>redux-sage</code> and <code>react-router</code> 十分超级好用。</p>
<p>这里只是把目录结构也调整为 页面级别里面，与页面的 路由配置同级。 也是出于更好的定位问题与维护。</p>
<p>一般与<code>model</code> 相关的文件还有各个页面级别文件夹（即<code>modules/activity</code>)里面的 <code>businessUtil.js</code> 文件。</p>
<p>这个文件主要用来辅助处理一些和 model 有关的事情，一般会有三个方法 <code>export { getInitState, convertProps2Params, convertParams2Props }</code>。 分别处理 <code>初始化state</code>, <code>server</code> 端数据与组件 <code>props</code> 之间的差异转换。</p>
<h2 id="mock-数据"><a href="#mock-数据" class="headerlink" title="mock 数据"></a>mock 数据</h2><p>mock 数据，用了 dva 自带的那套。</p>
<p>我们平时写接口的时候，会在 <code>services/</code> 下面起一个文件 里面带有某个接口地址 用来请求数据接口的<br>然后在 <code>mock/</code> 下面也会起一个文件 相同的也会带有一个接口地址<br>这样我们如果这个接口地址改变，岂不是要改两个地方？</p>
<p>为此，我们在 <code>services/</code> 下面的文件，只是简单的写了一些原始数据，如 url, method 等</p>
<figure class="highlight javascript"><figcaption><span>services/feature1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//@wrapFunction: common/request</span></div><div class="line"><span class="comment">// @1 上面那行注释是干什么用的呢？</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">url</span>:<span class="string">'api/feature1'</span>,</div><div class="line">  <span class="attr">method</span>:<span class="string">'POST'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在 <code>mock/</code> 下面就可以直接引入 <code>services/feature1</code> 就可以拿到相同的url， 接口地址改动的话也只需要改动 <code>services</code> 下的文件。</p>
<p>但是如果只是简单的返回一些原始数据，那和一个 <code>config</code> 文件有何区别，这样完全没有放在 <code>services</code> 下面的必要啊。。。  所以我们用了一行注释来做一些操作</p>
<p>大概的原理是 写了一个 babel 插件，用来处理一些操作。<br>如果匹配到 <code>//@wrapFunction:</code> 则用后面的链接 require 一个方法来包着页面上的代码。</p>
<p>这样就能起到，前端跑代码的时候 <code>feature1</code> 是一个接口功能的文件， <code>mock</code> 的时候是一个单纯的数据输出文件.</p>
<h2 id="babel-插件自动处理-services-js"><a href="#babel-插件自动处理-services-js" class="headerlink" title="babel 插件自动处理 services/*.js"></a>babel 插件自动处理 <code>services/*.js</code></h2><p>在上面一小节讲到我们用 babel插件来处理差异化，这里我们具体讲一下是怎么处理的</p>
<p>因为项目用的是 <code>roadhog</code> 搭建的， 所以我们在 <code>.roadhogrc.js</code> 里面配置一下 babel 插件，引进自己插件的文件。 这里我们的插件放置在 <code>/config/babel-plugin-wrap.js</code>;</p>
<ol>
<li>在 <code>services/*.js</code> 里面添加一行注释代码用作 babel 识别的标识</li>
<li>判断页面上有无对应注释</li>
<li>获取注释与目标路径， 把export default 的输出用函数调用表达式替换掉</li>
</ol>
<p>具体的 babel插件编写方式可以看官网 <a href="https://babeljs.cn/docs/plugins/" target="_blank" rel="external">https://babeljs.cn/docs/plugins/</a></p>
<p>了解编译器原理可以参考 上一篇文<a href="https://jsonz1993.github.io/2018/01/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0%E6%9E%81%E7%AE%80%E7%BC%96%E8%AF%91%E5%99%A8-%E2%80%94%E2%80%94-%E4%BA%86%E8%A7%A3%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/">一步步实现极简编译器 —— 了解编译器原理</a></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>剩下的 dll 打包， ssr 以后有用到再去了解。<br>emmm 最近阿里刚出了一个 <a href="https://umijs.org/" target="_blank" rel="external">umiJs</a> 想起知乎上一个评价 用这一时爽 改起来火葬场。<br>在用 <code>antd-pro</code> 的时候就深有体会了。 所以建议如果不是比较小的项目或者灵活性要求高的项目， 还是不要上 <code>antd-pro</code>的好。。。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[划水]]></title>
      <url>https://jsonz1993.github.io/2018/02/%E5%88%92%E6%B0%B4/</url>
      <content type="html"><![CDATA[<h6 id="2-21-《数学之美》"><a href="#2-21-《数学之美》" class="headerlink" title="2.21 《数学之美》"></a>2.21 《数学之美》</h6><h6 id="2-10-《水形物语》"><a href="#2-10-《水形物语》" class="headerlink" title="2.10 《水形物语》"></a>2.10 《水形物语》</h6><h6 id="2-11-《至暗时刻》"><a href="#2-11-《至暗时刻》" class="headerlink" title="2.11 《至暗时刻》"></a>2.11 《至暗时刻》</h6><h6 id="5-19-《css世界》"><a href="#5-19-《css世界》" class="headerlink" title="5.19 《css世界》"></a>5.19 《css世界》</h6><h6 id="5-21-《白金数据》"><a href="#5-21-《白金数据》" class="headerlink" title="5.21 《白金数据》"></a>5.21 《白金数据》</h6><h6 id="5-22-《http小书》"><a href="#5-22-《http小书》" class="headerlink" title="5.22 《http小书》"></a>5.22 《http小书》</h6><p>1</p>
]]></content>
      
        <categories>
            
            <category> live </category>
            
        </categories>
        
        
        <tags>
            
            <tag> book </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一步步实现极简编译器 —— 了解编译器原理]]></title>
      <url>https://jsonz1993.github.io/2018/01/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0%E6%9E%81%E7%AE%80%E7%BC%96%E8%AF%91%E5%99%A8-%E2%80%94%E2%80%94-%E4%BA%86%E8%A7%A3%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="welcome"><a href="#welcome" class="headerlink" title="welcome"></a>welcome</h2><p>今天在看 babel 的时候，无意中被引到一个外链</p>
<blockquote>
<p>关于编译器的优秀/简单的教程，请查看 <a href="https://babeljs.cn/docs/plugins/" target="_blank" rel="external">the-super-tiny-compiler</a> ，同时它也从宏观角度上解释了 Babel 本身是如何工作的。</p>
</blockquote>
<p>觉得挺感兴趣的，加上代码也不多，就跟着思路自己理解敲了一遍。</p>
<p>本文主要是帮助理解编译器的原理 不做过多的其他扩展</p>
<h2 id="编译器的基本组成"><a href="#编译器的基本组成" class="headerlink" title="编译器的基本组成"></a>编译器的基本组成</h2><p>一般简单的编译器可以由以下几部分组成:</p>
<ul>
<li>tokenizer 词法分析器 把代码或文本按类型分开，返回: <code>tokens</code></li>
<li>parser 语法剖析器 对分析后的文本按照语法分析转换成 抽象语法树 返回：ast</li>
<li>transformer 语法转换器 把语法剖析后的抽象语法树转换成我们想要的: newAst</li>
<li>codeGenerator 代码生成器 把AST 转换为 目标代码</li>
</ul>
<blockquote>
<p>babel 初始阶段并没有做任何事，基本上等于 <code>const babel = code=&gt; code</code>;<br>先 tokenizer， parser 解析代码，再 transformer 的时候，完全不改动原来的 ast</p>
</blockquote>
<p>接下来以最简单的编译器组成 一个环节一个环节走下去</p>
<h2 id="tokenizer-词法分析器"><a href="#tokenizer-词法分析器" class="headerlink" title="tokenizer 词法分析器"></a>tokenizer 词法分析器</h2><p>词法分析器其实可以理解为简单的将文本切割，然后将有价值的按照相邻同等类型的 文本组合一起输出。<br><em><small>ps:无价值指对代码生成没有影响的部分，比如js里面非文本 一个空格和一百个空格对编译器来说是没有区别的</small></em></p>
<p>实现思路：</p>
<ol>
<li>有一个值存着当前的光标 <code>current</code></li>
<li>有一个数组用来存放按类型分出来的值 <code>tokens</code></li>
<li>对文本进行循环， 取 <code>current</code> 的值做 分类型处理<ol>
<li><code>(</code></li>
<li><code>)</code></li>
<li>空格</li>
<li>数字</li>
<li>字符串</li>
<li>方法名</li>
</ol>
</li>
<li>将处理后的值存进数组 <code>token</code> 并返回</li>
</ol>
<figure class="highlight javascript"><figcaption><span>tokenizer</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenizer</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</div><div class="line">  <span class="keyword">const</span> tokens = [];</div><div class="line">  <span class="keyword">while</span> (current &lt; input.length) &#123;</div><div class="line">    <span class="keyword">let</span> char = input[current];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (char === <span class="string">"("</span> || char === <span class="string">")"</span>) &#123;</div><div class="line">      tokens.push(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'paren'</span>,</div><div class="line">        <span class="attr">value</span>: char</div><div class="line">      &#125;);</div><div class="line">      current++;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> WHITESPACE = <span class="regexp">/\s/</span>;</div><div class="line">    <span class="keyword">if</span> (WHITESPACE.test(char)) &#123;</div><div class="line">      current++;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> LETTERS = <span class="regexp">/[a-z]/i</span>;</div><div class="line">    <span class="keyword">if</span> (LETTERS.test(char)) &#123;</div><div class="line">      <span class="keyword">let</span> name = <span class="string">""</span>;</div><div class="line">      </div><div class="line">      <span class="keyword">while</span> (LETTERS.test(char)) &#123;</div><div class="line">        name += char;</div><div class="line">        current++;</div><div class="line">        char = input[current];</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      tokens.push(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'name'</span>,</div><div class="line">        <span class="attr">value</span>: name</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> NUMBERS = <span class="regexp">/[0-9]/</span>;</div><div class="line">    <span class="keyword">if</span> (NUMBERS.test(char)) &#123;</div><div class="line">      <span class="keyword">let</span> numbers = <span class="string">""</span>;</div><div class="line"></div><div class="line">      <span class="keyword">while</span>(NUMBERS.test(char)) &#123;</div><div class="line">        numbers += char;</div><div class="line">        current++;</div><div class="line">        char = input[current];</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      tokens.push(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'number'</span>,</div><div class="line">        <span class="attr">value</span>: numbers</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (char === <span class="string">'"'</span>) &#123;</div><div class="line">      <span class="keyword">let</span> string = <span class="string">''</span>;</div><div class="line">      current++;</div><div class="line">      char = input[current];</div><div class="line"></div><div class="line">      <span class="keyword">while</span>(char !== <span class="string">'"'</span>) &#123;</div><div class="line">        string += char;</div><div class="line">        current++;</div><div class="line">        char = input[current];</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      tokens.push(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'string'</span>,</div><div class="line">        <span class="attr">value</span>: string</div><div class="line">      &#125;);</div><div class="line">      current++;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'不知道你输入的是什么鬼东西 '</span> + char);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> tokens;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> input = <span class="string">'(add 2 (subtract 4 2 "djwaqp"))'</span>;</div><div class="line">tokenizer(input);</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">/*</span></div><div class="line">[&#123; type: 'paren', value: '(' &#125;,</div><div class="line">&#123; type: 'name', value: 'add' &#125;,</div><div class="line">&#123; type: 'number', value: '2' &#125;,</div><div class="line">&#123; type: 'paren', value: '(' &#125;,</div><div class="line">&#123; type: 'name', value: 'subtract' &#125;,</div><div class="line">&#123; type: 'number', value: '4' &#125;,</div><div class="line">&#123; type: 'number', value: '2' &#125;,</div><div class="line">&#123; type: 'string', value: 'djwaqp' &#125;,</div><div class="line">&#123; type: 'paren', value: ')' &#125;,</div><div class="line">&#123; type: 'paren', value: ')' &#125;];</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h2><p>语法剖析器就是把 <code>tokens</code> 解析，转化为抽象语法树(AST)🌲🌲🌲，方便后续的处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">'('</span> &#125;, ...]   =&gt;   &#123; <span class="attr">type</span>: <span class="string">'Program'</span>, <span class="attr">body</span>: [...] &#125;</div></pre></td></tr></table></figure>
<p>实现思路：</p>
<ol>
<li>首先也要有一个 <code>current</code> 对 <code>tokens</code> 进行遍历，每一项 <code>token</code> 进行分析处理</li>
<li>有一棵树，顶级结构为 <code>{type: &#39;Program&#39; , body: [...]}</code></li>
<li>根据 <code>token.type</code> 进行相应的归类处理:<ol>
<li><code>number</code>： 直接返回  <code>{type: &#39;NumberLiteral&#39;, value, }</code></li>
<li><code>string</code>： 直接返回 <code>{type: &#39;StringLiteral&#39;, value, }</code></li>
<li><code>paren (</code> ： 对下一个进行递归，直到出现 <code>paren )</code></li>
</ol>
</li>
<li>将处理后的 ast 返回</li>
</ol>
<figure class="highlight javascript"><figcaption><span>parser</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parser</span>(<span class="params">tokens</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</div><div class="line">  <span class="keyword">const</span> ast = &#123; </div><div class="line">    <span class="attr">type</span>: <span class="string">'Program'</span>, </div><div class="line">    <span class="attr">body</span>: []</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> token = tokens[current];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (token.type === <span class="string">'number'</span>) &#123;</div><div class="line">      current ++;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'NumberLiteral'</span>,</div><div class="line">        <span class="attr">value</span>: token.value</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (token.type === <span class="string">'string'</span>) &#123;</div><div class="line">      current ++;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'StringLiteral'</span>,</div><div class="line">        <span class="attr">value</span>: token.value</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (token.type === <span class="string">'paren'</span> &amp;&amp; token.value === <span class="string">'('</span>) &#123;</div><div class="line">      token = tokens[++current];</div><div class="line">      <span class="keyword">let</span> node = &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">"CallExpression"</span>,</div><div class="line">        <span class="attr">name</span>: token.value,</div><div class="line">        <span class="attr">params</span>: []</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      token = tokens[++current];</div><div class="line">      <span class="keyword">while</span> ((token.type !== <span class="string">'paren'</span>) || (token.type === <span class="string">'paren'</span> &amp;&amp; token.value !== <span class="string">')'</span>)) &#123;</div><div class="line">        node.params.push(walk());</div><div class="line">        token = tokens[current];</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      current++;</div><div class="line">      <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(token.type);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(current &lt; tokens.length) &#123;</div><div class="line">    ast.body.push(walk());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> ast;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">input:</div><div class="line">[&#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">'('</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'name'</span>, <span class="attr">value</span>: <span class="string">'add'</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">'('</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'name'</span>, <span class="attr">value</span>: <span class="string">'subtract'</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'4'</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">value</span>: <span class="string">'djwaqp'</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">')'</span> &#125;,</div><div class="line">&#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">')'</span> &#125;]</div><div class="line">=&gt;</div><div class="line">output:</div><div class="line">&#123;</div><div class="line">	<span class="string">"type"</span>: <span class="string">"Program"</span>,</div><div class="line">	<span class="string">"body"</span>: [&#123;</div><div class="line">		<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">		<span class="string">"name"</span>: <span class="string">"ADD"</span>,</div><div class="line">		<span class="string">"params"</span>: [&#123;</div><div class="line">			<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">			<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">		&#125;, &#123;</div><div class="line">			<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">			<span class="string">"name"</span>: <span class="string">"subtract"</span>,</div><div class="line">			<span class="string">"params"</span>: [&#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"4"</span></div><div class="line">			&#125;, &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">			&#125;, &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"StringLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"djwaqp"</span></div><div class="line">			&#125;]</div><div class="line">		&#125;]</div><div class="line">	&#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h2><p>transformer 顾名思义，为转换部分，最复杂 也最常用。<br><code>.babelrc</code> 添加的插件，也只是在这个环节进行操作，将原本的 ast( es6 ) 转换为目标的 newAst (es5)。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ast &#123; <span class="attr">type</span>: <span class="string">'Program'</span>, <span class="attr">body</span>: [...] &#125;   =&gt;   newAst &#123; <span class="attr">type</span>: <span class="string">'Program'</span>, <span class="attr">body</span>: [...] &#125;</div></pre></td></tr></table></figure>
<p>实现思路：</p>
<ol>
<li>首先，要有一颗树，和 ast 一样。 顶级结构为 <code>{ type: &#39;Program&#39;, body: [...] }</code></li>
<li>在 <code>ast</code> 上建一个引用<code>_context</code>到 <code>newAst.body</code>;</li>
<li>对 ast 树进行处理, 直接处理 <code>_context</code></li>
<li>对 ast 上 每个类型都做 enter 处理与 exit处理的钩子<ol>
<li>Number 或 String 直接处理并添加到树节点上即可</li>
<li>CallExpression 则要创建一个数组去存参数</li>
</ol>
</li>
<li>对类型为：<code>Program</code> 或 <code>CallExpression</code> 对子级进行 递归 <code>4</code> 处理</li>
<li>将处理后的 newAst 返回</li>
</ol>
<figure class="highlight javascript"><figcaption><span>transformer 部分</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverser</span>(<span class="params">node, visitor</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseArray</span>(<span class="params">nodeArr, parent</span>) </span>&#123;</div><div class="line">    nodeArr.forEach(<span class="function"><span class="params">child</span> =&gt;</span> traverseNode(child, parent));</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, parent</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> methods = visitor[node.type];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.enter) &#123;</div><div class="line">      methods.enter(node, parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (node.type) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'Program'</span>:</div><div class="line">        traverseArray(node.body, node);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="keyword">case</span> <span class="string">'CallExpression'</span>:</div><div class="line">        traverseArray(node.params, node);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="keyword">case</span> <span class="string">'NumberLiteral'</span>:</div><div class="line">      <span class="keyword">case</span> <span class="string">'StringLiteral'</span>:</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.exit) &#123;</div><div class="line">      methods.exit(node, parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  traverseNode(node, <span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformer</span>(<span class="params">ast</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> newAst = &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'Program'</span>,</div><div class="line">    <span class="attr">body</span>: []</div><div class="line">  &#125;;</div><div class="line">  ast._context = newAst.body;</div><div class="line"></div><div class="line">  traverser(ast, &#123;</div><div class="line"></div><div class="line">    <span class="attr">NumberLiteral</span>: &#123;</div><div class="line">      enter(node, parent) &#123;</div><div class="line">        parent._context.push(&#123;</div><div class="line">          <span class="attr">type</span>: <span class="string">'NumberLiteral'</span>,</div><div class="line">          <span class="attr">value</span>: node.value</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">StringLiteral</span>: &#123;</div><div class="line">      enter(node, parent) &#123;</div><div class="line">        parent._context.push(&#123;</div><div class="line">          <span class="attr">type</span>: <span class="string">'StringLiteral'</span>,</div><div class="line">          <span class="attr">value</span>: node.value,</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">CallExpression</span>: &#123;</div><div class="line">      enter(node, parent) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> expression = &#123;</div><div class="line">          <span class="attr">type</span>: <span class="string">'CallExpression'</span>,</div><div class="line">          <span class="attr">callee</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'Identifier'</span>,</div><div class="line">            <span class="attr">name</span>: node.name</div><div class="line">          &#125;,</div><div class="line">          <span class="attr">arguments</span>: []</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        node._context = expression.arguments;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (parent.type !== <span class="string">'CallExpression'</span>) &#123;</div><div class="line">          expression = &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'ExpressionStatement'</span>,</div><div class="line">            <span class="attr">expression</span>: expression</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        parent._context.push(expression);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> newAst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">input:</div><div class="line">&#123;</div><div class="line">	<span class="string">"type"</span>: <span class="string">"Program"</span>,</div><div class="line">	<span class="string">"body"</span>: [&#123;</div><div class="line">		<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">		<span class="string">"name"</span>: <span class="string">"ADD"</span>,</div><div class="line">		<span class="string">"params"</span>: [&#123;</div><div class="line">			<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">			<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">		&#125;, &#123;</div><div class="line">			<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">			<span class="string">"name"</span>: <span class="string">"subtract"</span>,</div><div class="line">			<span class="string">"params"</span>: [&#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"4"</span></div><div class="line">			&#125;, &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">			&#125;, &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"StringLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"djwaqp"</span></div><div class="line">			&#125;]</div><div class="line">		&#125;]</div><div class="line">	&#125;]</div><div class="line">&#125;</div><div class="line">=&gt;</div><div class="line">output:</div><div class="line">&#123;</div><div class="line">	<span class="string">"type"</span>: <span class="string">"Program"</span>,</div><div class="line">	<span class="string">"body"</span>: [&#123;</div><div class="line">		<span class="string">"type"</span>: <span class="string">"ExpressionStatement"</span>,</div><div class="line">		<span class="string">"expression"</span>: &#123;</div><div class="line">			<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">			<span class="string">"callee"</span>: &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"Identifier"</span>,</div><div class="line">				<span class="string">"name"</span>: <span class="string">"ADD"</span></div><div class="line">			&#125;,</div><div class="line">			<span class="string">"arguments"</span>: [&#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">			&#125;, &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">				<span class="string">"callee"</span>: &#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"Identifier"</span>,</div><div class="line">					<span class="string">"name"</span>: <span class="string">"subtract"</span></div><div class="line">				&#125;,</div><div class="line">				<span class="string">"arguments"</span>: [&#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">					<span class="string">"value"</span>: <span class="string">"4"</span></div><div class="line">				&#125;, &#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">					<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">				&#125;, &#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"StringLiteral"</span>,</div><div class="line">					<span class="string">"value"</span>: <span class="string">"djwaqp"</span></div><div class="line">				&#125;]</div><div class="line">			&#125;]</div><div class="line">		&#125;</div><div class="line">	&#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="codeGenerator"><a href="#codeGenerator" class="headerlink" title="codeGenerator"></a>codeGenerator</h2><p>最后一步就是 <code>codeGenerator</code>， 用 <code>newAst</code> 递归调用，根据 <code>node</code> 与一系列规则去生成一个 string。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">newAst &#123; <span class="attr">type</span>: <span class="string">'Program'</span>, <span class="attr">body</span>: [...] &#125; =&gt; call(argumentsA, ...argumentsN);</div></pre></td></tr></table></figure>
<p>实现思路：</p>
<ol>
<li>根据 node.type 做对应逻辑：</li>
<li><code>Program</code> =&gt; 对 node.body 进行递归</li>
<li><code>ExpressionStatement</code>=&gt; 对 node.expression 进行处理</li>
<li><code>CallExpression</code> =&gt; 对 node.callee 与 node.arguments 进行处理</li>
<li><code>Identifier</code> &amp;&amp; <code>NumberLiteral</code> &amp;&amp; <code>StringLiteral</code> 直接返回对应的字段</li>
</ol>
<figure class="highlight javascript"><figcaption><span>codeGenerator</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeGenerator</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (node.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'Program'</span>:</div><div class="line">      <span class="keyword">return</span> node.body.map(codeGenerator).join(<span class="string">'\n'</span>);</div><div class="line">  </div><div class="line">    <span class="keyword">case</span> <span class="string">'ExpressionStatement'</span>:</div><div class="line">      <span class="keyword">return</span> codeGenerator(node.expression) + <span class="string">';'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">'CallExpression'</span>:</div><div class="line">      <span class="keyword">return</span> (codeGenerator(node.callee) +<span class="string">'('</span> + node.arguments.map(codeGenerator).join(<span class="string">', '</span>) + <span class="string">')'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">'Identifier'</span>:</div><div class="line">      <span class="keyword">return</span> node.name;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="string">'NumberLiteral'</span>:</div><div class="line">      <span class="keyword">return</span> node.value;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">'StringLiteral'</span>:</div><div class="line">      <span class="keyword">return</span> <span class="string">'"'</span> + node.value + <span class="string">'"'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">input:</div><div class="line">&#123;</div><div class="line">	<span class="string">"type"</span>: <span class="string">"Program"</span>,</div><div class="line">	<span class="string">"body"</span>: [&#123;</div><div class="line">		<span class="string">"type"</span>: <span class="string">"ExpressionStatement"</span>,</div><div class="line">		<span class="string">"expression"</span>: &#123;</div><div class="line">			<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">			<span class="string">"callee"</span>: &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"Identifier"</span>,</div><div class="line">				<span class="string">"name"</span>: <span class="string">"ADD"</span></div><div class="line">			&#125;,</div><div class="line">			<span class="string">"arguments"</span>: [&#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">				<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">			&#125;, &#123;</div><div class="line">				<span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</div><div class="line">				<span class="string">"callee"</span>: &#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"Identifier"</span>,</div><div class="line">					<span class="string">"name"</span>: <span class="string">"subtract"</span></div><div class="line">				&#125;,</div><div class="line">				<span class="string">"arguments"</span>: [&#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">					<span class="string">"value"</span>: <span class="string">"4"</span></div><div class="line">				&#125;, &#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"NumberLiteral"</span>,</div><div class="line">					<span class="string">"value"</span>: <span class="string">"2"</span></div><div class="line">				&#125;, &#123;</div><div class="line">					<span class="string">"type"</span>: <span class="string">"StringLiteral"</span>,</div><div class="line">					<span class="string">"value"</span>: <span class="string">"djwaqp"</span></div><div class="line">				&#125;]</div><div class="line">			&#125;]</div><div class="line">		&#125;</div><div class="line">	&#125;]</div><div class="line">&#125;</div><div class="line">=&gt; </div><div class="line">output:</div><div class="line">add(<span class="number">2</span>, subtract(<span class="number">4</span>, <span class="number">2</span>, <span class="string">"djwaqp"</span>));</div></pre></td></tr></table></figure>
<h2 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h2><p>至此，编译器所需的几个步骤： 词法分析，解析，转换，生成都已经完成。</p>
<figure class="highlight javascript"><figcaption><span>compiler</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> tokens = tokenizer(input);</div><div class="line">  <span class="keyword">const</span> ast = parser(tokens);</div><div class="line">  <span class="keyword">const</span> newAst = transformer(ast);</div><div class="line">  <span class="keyword">const</span> output = codeGenerator(newAst);</div><div class="line">  <span class="keyword">return</span> output;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> input = <span class="string">'(add 2 (subtract 4 2 "djwaqp"))'</span>;</div><div class="line"><span class="keyword">const</span> output = compilter(input); <span class="comment">// 'add(2, subtract(4, 2, "djwaqp"));'</span></div></pre></td></tr></table></figure>
<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><p>babel 的工作原理可以理解成就是一个简单的编译器：<code>分析</code> =&gt; <code>转换</code> =&gt; <code>生成代码</code></p>
<p>bable 的篇幅太多，下面直接给出 <a href="https://github.com/jsonz1993/learn/tree/master/finish/babel-plugin-jsonz_test" target="_blank" rel="external">demo源码</a>。<br>具体可以看 <a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-writing-your-first-babel-plugin" target="_blank" rel="external">官方插件手册 babel-handbook</a></p>
<p>我们写的babel 插件，都是在转换的部分运行<br><figure class="highlight javascript"><figcaption><span>自定义插件 babel-plugin-jsonz</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">'babel-types'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports=  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// plugin contents</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">visitor</span>: &#123;</div><div class="line">      <span class="comment">// visitor contents</span></div><div class="line">      BinaryExpression(path, state) &#123;</div><div class="line">        <span class="comment">// 如果操作符不是 === 则返回</span></div><div class="line">        <span class="keyword">if</span> (path.node.operator !== <span class="string">'==='</span>) &#123;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 操作符的左边替换为 sebmck, 右边替换为 dork</span></div><div class="line">        path.node.left = t.identifier(<span class="string">'"sebmck"'</span>);</div><div class="line">        path.node.right = t.identifier(<span class="string">'"dork"'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>目标代码./src/test1.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>===<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>安装相关依赖:<code>npm i babel-cli babel-types --save-dev</code></p>
<p>运行脚本: <code>babel src/ -d build/</code></p>
<figure class="highlight javascript"><figcaption><span>生成后的代码 ./build/test2.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"sebmck"</span> === <span class="string">"dork"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后再推一波关于学习中看到的好网站</p>
<p><a href="https://github.com/jsonz1993/wheel/blob/master/min-compiler/min-compiler.js" target="_blank" rel="external">源码</a><br><a href="http://esprima.org/demo/parse.html#" target="_blank" rel="external">esprima 解析语法树🌲</a><br><a href="http://astexplorer.net/" target="_blank" rel="external">AST Explorer</a><br><a href="https://zh.wikipedia.org/zh-cn/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9" target="_blank" rel="external">ast名词解释</a><br><a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="external">babel-plugin-handbook</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析Promise (一)]]></title>
      <url>https://jsonz1993.github.io/2017/12/%E6%B5%85%E6%9E%90Promise/</url>
      <content type="html"><![CDATA[<p><strong><a href="https://ppt.baomitu.com/d/5624aeb7" target="_blank" rel="external">ppt在此</a></strong><br><strong><a href="https://github.com/jsonz1993/wheel/blob/master/Promise/app.js" target="_blank" rel="external">源码</a> 参照 lie</strong></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在ES6流行之前，我们处理异步的方法一般有 事件模式， 回调模式等。</p>
<h2 id="事件模式"><a href="#事件模式" class="headerlink" title="事件模式"></a>事件模式</h2><p>用户点击按钮或按下键盘上的按钮会触发类似 onClick这样的事件，他会向任务队列添加一个新任务来响应用户的操作。<br>直到事件触发时才执行事件处理程序，且正常执行时上下文与定义时相同<br><figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>demo2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> iEvent <span class="keyword">from</span> <span class="string">'event'</span>;</div><div class="line">iEvent.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;)</div><div class="line">iEvent.emit(<span class="string">'click'</span>);</div></pre></td></tr></table></figure>
<p>事件模型适用于处理简单的交互，如果多个独立的异步调用连接在一起会使应用变得更加复杂。<br>而且要追踪每个事件的事件目标，比如 我先点击 btn1 再给 btn1绑定事件，或者先 emit 再 on 都会不起作用。</p>
<h2 id="回调模式"><a href="#回调模式" class="headerlink" title="回调模式"></a>回调模式</h2><p>为Java打Call<br>为PHP打Call<br>为javascript打CallBack 为Go打Call…</p>
<figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">method1(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	method2(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">		method3(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)) </span>&#123;</div><div class="line">			method4(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'金字塔'</span>);</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>回调模式虽然是js的一大精髓，但是写着写着可能会因为嵌套太多的回调函数，陷入回调地狱 —— 超级金字塔</p>
<p>而且如果要处理类似 两个操作都执行完通知你 或者有一个操作执行完就通知你 那么情况可能会变得比较麻烦</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span> &#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">const</span> random = <span class="built_in">Math</span>.random()</div><div class="line">		<span class="keyword">if</span> ( random&gt; <span class="number">.5</span>) res(random)</div><div class="line">		<span class="keyword">else</span> rej(random)</div><div class="line">	&#125;, <span class="number">1000</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="params">val</span>=&gt;</span> (<span class="built_in">console</span>.log(val), ++val))</div><div class="line">	.then(<span class="function"><span class="params">val</span>=&gt;</span> <span class="built_in">console</span>.log(val))</div><div class="line">	.catch(<span class="function"><span class="params">error</span>=&gt;</span> <span class="built_in">console</span>.warn(error))</div><div class="line"></div><div class="line"><span class="comment">// 输出 random &amp;&amp; random+1 or warn(random)</span></div></pre></td></tr></table></figure>
<p><code>Promise</code> 规范</p>
<p>Promise 规范有很多，如 Promise/A，Promise/B，和Promise/A升级版 =&gt; <a href="http://www.ituring.com.cn/article/66566" target="_blank" rel="external">Promise/A+</a><br>在这里统一一下 以下所有 <code>resolved</code> 都指fulfilled。</p>
<ol>
<li>Promise 本质是一个状态机。每个 promise 只能是 3 种状态中的一种：pending、resolved 或 rejected。状态转变只能是 pending -&gt; resolved 或者 pending -&gt; rejected。状态转变不可逆。</li>
<li>then 方法可以被同一个 promise 调用多次。</li>
<li>then 方法必须返回一个 新 promise。</li>
</ol>
<h2 id="三个状态，状态是不可逆的"><a href="#三个状态，状态是不可逆的" class="headerlink" title="三个状态，状态是不可逆的"></a>三个状态，状态是不可逆的</h2><p>可以在 <code>chrome</code> 控制台看到内部属性 [[PromiseStatus]] 状态值</p>
<ul>
<li>pending： Promise的初始状态，也就是未被fulfilled或者rejected的状态。</li>
<li>resolved： 意味着promise代指的操作已经成功完成。</li>
<li>rejected：意味着promise代指的操作由于某些原因失败。<br><img src="./promise1.png" alt="promise1"></li>
</ul>
<h2 id="then"><a href="#then" class="headerlink" title="then"></a>then</h2><p>所有的 Promise 都有 then(onResolve, onReject) 方法，接受两个参数，<br>第一个是当Promise 状态变为 resolved 时调用的函数，与异步操作相关的值会传递给该函数<br>第二个是当Promise 状态变为 rejected 时调用的函数，与失败状态相关（报错）会传递给该函数</p>
<figure class="highlight javascript"><figcaption><span>then方法可以被同个promise调用多次</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> Promose(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">1</span>))</div><div class="line">promise.then(<span class="function"><span class="params">val</span>=&gt;</span> <span class="built_in">console</span>.log(++val))</div><div class="line">promise.then(<span class="function"><span class="params">val</span>=&gt;</span> <span class="built_in">console</span>.log(++val))</div><div class="line">promise.then(<span class="function"><span class="params">val</span>=&gt;</span> <span class="built_in">console</span>.log(++val))</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>then方法必须返回一个新的promise</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">1</span>))</div><div class="line"><span class="keyword">const</span> promiseA = promise.then(<span class="function"><span class="params">val</span>=&gt;</span> ++val)</div><div class="line"><span class="keyword">const</span> promiseB = promiseA.then(<span class="function"><span class="params">val</span>=&gt;</span> ++val)</div><div class="line"><span class="keyword">const</span> promiseC = promise.then(<span class="function"><span class="params">val</span>=&gt;</span> ++val)</div><div class="line"><span class="built_in">console</span>.log( promiseA == promiseB, promiseC == promiseA, promiseB == promiseC);</div></pre></td></tr></table></figure>
<p>因为promise每次都会返回一个新的promise 所以支持链式写法，上一个 then 的返回值会当成 下一个then的参数<br><figure class="highlight javascript"><figcaption><span>then链式</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Promose(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">1</span>)).then(<span class="function"><span class="params">val</span>=&gt;</span> ++val).then(<span class="function"><span class="params">val</span>=&gt;</span> ++val).then(<span class="function"><span class="params">val</span>=&gt;</span> ++val)</div></pre></td></tr></table></figure></p>
<h2 id="错误情况"><a href="#错误情况" class="headerlink" title="错误情况"></a>错误情况</h2><ol>
<li>在 <code>Promise(fn)</code> fn执行错误</li>
</ol>
<p>每个执行器内部都隐含一个 <code>try...catch...</code>块<br><figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res, rej</span>) </span>&#123;</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'喵喵喵'</span>)</div><div class="line">&#125;)</div><div class="line">promise.catch(<span class="function"><span class="params">err</span>=&gt;</span> <span class="built_in">console</span>.warn(err))</div></pre></td></tr></table></figure></p>
<p>以上代码等同于<br><figure class="highlight javascript"><figcaption><span>demo2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res, rej</span>) </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'喵喵喵'</span>)</div><div class="line">	&#125; <span class="keyword">catch</span>(ex) &#123;</div><div class="line">		rej(ex)</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">promise.then(<span class="literal">null</span>, err=&gt; <span class="built_in">console</span>.warn(err))</div></pre></td></tr></table></figure></p>
<p>此处可以看出 <strong>promise.catch</strong> 其实是 <strong>promise.then(null, catchFn)</strong> 的一个语法糖</p>
<ol>
<li>then 函数内部错误 </li>
</ol>
<figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">1</span>))</div><div class="line">promise.then(<span class="function"><span class="params">val</span>=&gt;</span> val+val1)</div><div class="line">	.catch(<span class="function"><span class="params">err</span>=&gt;</span> <span class="built_in">console</span>.warn(err))</div></pre></td></tr></table></figure>
<p>这里可以简单的理解为 then 内部会生成一个 Promise 示例，把函数体丢到Promise 里去执行，执行完结果当成 <code>res</code> 方法的参数，出错则调用 <code>rej</code></p>
<figure class="highlight javascript"><figcaption><span>伪代码</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">1</span>))</div><div class="line">promise.then(<span class="function"><span class="params">val</span>=&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			res(val + val1)</div><div class="line">		&#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">			rej(e);</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">)</div><div class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span> <span class="built_in">console</span>.warn(err))</div></pre></td></tr></table></figure>
<p>.catch &amp;&amp; then(null, catchFn) 不能对后续的报错进行捕获</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">1</span>))</div><div class="line">promise.then(<span class="function"><span class="params">val</span> =&gt;</span> ++val)</div><div class="line">.catch(<span class="function"><span class="params">e</span>=&gt;</span> <span class="built_in">console</span>.warn(e))</div><div class="line">.then(<span class="function"><span class="params">val</span>=&gt;</span> <span class="built_in">console</span>.log(val+val1))</div><div class="line"></div><div class="line"><span class="comment">// 此处会抛错，因为在抛出错误之后 没有一个 catch来处理这个错误</span></div></pre></td></tr></table></figure>
<p>所以一般会在 Promise 的最末端添加一个 catch 对前面可能出现的问题进行处理<br><img src="promise2.png" alt="promise2"></p>
<h2 id="thenable"><a href="#thenable" class="headerlink" title="thenable"></a>thenable</h2><p>上面说了那么多关于 <code>then</code> 的使用，其实只要实现了上述 <code>then</code> 功能的对象都可以叫 <code>thenable</code>。<br>所有的 Promise 都是 thenable 但是不一定所有有then 方法的对象都叫 thenable。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var thenable = &#123;</div><div class="line">  then: function(res, rej) &#123;</div><div class="line">    res(1)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于 thenable 有什么用 请往下看</p>
<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>上述说到的 Promise 用法，都是 创建一个未完成状态，执行一些操作之后才从 pending 转变为 resolved 或 rejected<br>那么可以直接创建一个完成状态的 Promise 吗？  这里就要用到 静态方法上面的 <code>resolve</code>。</p>
<ul>
<li>Promise.resolve(promise);</li>
<li>Promise.resolve(thenable);</li>
<li>Promise.resolve(object);</li>
</ul>
<h3 id="参数为-promise-时，返回的也是该promise"><a href="#参数为-promise-时，返回的也是该promise" class="headerlink" title="参数为 promise 时，返回的也是该promise"></a>参数为 promise 时，返回的也是该promise</h3><figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;)</div><div class="line"><span class="keyword">const</span> promiseA = <span class="built_in">Promise</span>.resolve(promise)</div><div class="line">promise === promiseA</div></pre></td></tr></table></figure>
<h3 id="参数为thenable-时，返回标准的promise对象，这个对象有then方法"><a href="#参数为thenable-时，返回标准的promise对象，这个对象有then方法" class="headerlink" title="参数为thenable 时，返回标准的promise对象，这个对象有then方法"></a>参数为thenable 时，返回标准的promise对象，这个对象有then方法</h3><p>这里是 resolve 方法用的最多的地方了<br>平时工作用到最多的 thenable 恐怕就是 jQ 或 zepto 的 ajax<br>那么我们如果要把他转为标准的 promise 怎么办呢？ 比如 zepto 的 ajax 返回的就没有 .catche 方法，而是 .fail</p>
<p>这里如果有必要 我们可以做一层封装，把他转变为标准的格式 拥抱未来！！！<br><figure class="highlight javascript"><figcaption><span>demo2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ajax = $.ajax(&#123; url, data &#125;)</div><div class="line"><span class="built_in">Promise</span>.resolve(ajax)</div><div class="line">	.then(<span class="function"><span class="params">response</span>=&gt;</span> &#123;&#125;)</div><div class="line">	.catch(<span class="function"><span class="params">err</span>=&gt;</span> <span class="built_in">console</span>.warn(err))</div></pre></td></tr></table></figure></p>
<h3 id="参数是其他值的情况，会返回一个状态为-resolved-的-promise。终值为传入的值"><a href="#参数是其他值的情况，会返回一个状态为-resolved-的-promise。终值为传入的值" class="headerlink" title="参数是其他值的情况，会返回一个状态为 resolved 的 promise。终值为传入的值"></a>参数是其他值的情况，会返回一个状态为 resolved 的 promise。终值为传入的值</h3><figure class="highlight javascript"><figcaption><span>demo3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve(&#123;<span class="attr">name</span>: <span class="string">"Jsonz"</span>&#125;)</div><div class="line">	.then(<span class="function"><span class="params">val</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">"帅哥是 "</span> + val))</div></pre></td></tr></table></figure>
<h2 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h2><p>Promise.reject 用法与 Promise.resolve 类似 这里不再赘述</p>
<h2 id="多个情况处理"><a href="#多个情况处理" class="headerlink" title="多个情况处理"></a>多个情况处理</h2><p>开头的时候说了，如果要处理两个及以上的异步操作：</p>
<ol>
<li>多个都完成时通知你</li>
<li>有一个完成时通知你<br>那么回调就显得很尴尬，这里 Promise 提供了两个方法来满足你这种小需求</li>
</ol>
<h2 id="all"><a href="#all" class="headerlink" title="all"></a>all</h2><p>业务上经常会有情况是 要等a接口与b接口的数据一起回来才做操作 那么可以用到静态方法 <code>Promise.all</code></p>
<p>Promise.all 会接受一个 Array 类似的参数，里面是Promise 类型， 返回一个新的Promise 这里取名 <code>PromiseAll</code><br>当所有的Promise 都变成 resolved 时，会将 PromiseAll 的状态改为 resolved 参数为每个 promise 的终值<br>如果有一个Promise 为 rejected， 那么 PromiseAll 会直接变为 rejected 状态 参数为 首个变为 rejected 状态的错误信息</p>
<figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">1</span>))</div><div class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> res(<span class="number">2</span>))</div><div class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span> rej(<span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="keyword">const</span> p4 = <span class="built_in">Promise</span>.all([p1, p2]);</div><div class="line">p4.then(<span class="function"><span class="params">val</span>=&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(val))</div><div class="line">	val.forEach(<span class="function"><span class="params">item</span>=&gt;</span> <span class="built_in">console</span>.log(item))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> p5 = <span class="built_in">Promise</span>.all([p1, p3])</div><div class="line">p5.then(<span class="function"><span class="params">v</span>=&gt;</span> <span class="built_in">console</span>.log(v), err=&gt; <span class="built_in">console</span>.log(err))</div></pre></td></tr></table></figure>
<h2 id="race"><a href="#race" class="headerlink" title="race"></a>race</h2><p>Promise.race 对应的是 <em>有一个完成时通知你</em> 这种状态，用法与参数与 all 类似<br>但是 <code>Promise.race</code> 的参数为第一个转为 resolved 状态的终值</p>
<h2 id="继承Promise改造"><a href="#继承Promise改造" class="headerlink" title="继承Promise改造"></a>继承Promise改造</h2><p>如果我们要对原生的 Promise 进行改造，比如添加 success() 或 failure() 方法，那么我们可以直接继承他创建一个新的 JsonzPromise<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonzPromise</span> <span class="keyword">extends</span> <span class="title">Promise</span> </span>&#123;</div><div class="line">	success(resolve, reject) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.then(resolve, reject)</div><div class="line">	&#125;</div><div class="line">	failure(reject) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.catch(reject)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> JsonzPromise(<span class="function">(<span class="params">res, rej</span>)=&gt;</span> res(<span class="number">1</span>))</div><div class="line">	.success(<span class="function"><span class="params">val</span>=&gt;</span> <span class="built_in">console</span>.log(val));</div></pre></td></tr></table></figure></p>
<h2 id="全局的rejected状态处理"><a href="#全局的rejected状态处理" class="headerlink" title="全局的rejected状态处理"></a><a href="#全局的rejected状态处理">全局的rejected状态处理</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onunhandledrejection = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(e)</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.onrejectionhandled = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(e)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>node</code> 则是在 <code>process</code> 绑定监听<br>氮素！！！！ 不知道为何还没跑过成功的demo….</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>emmmmmm 贴出一些比较好的教程吧</p>
<ul>
<li><a href="http://liubin.org/promises-book/#Promise.resolve" target="_blank" rel="external">深入理解ES6 - Promise 篇章](https://www.amazon.cn/dp/B071GW3JDP/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1514389776&amp;sr=1-1&amp;keywords=%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3es6)<br>javascript -  Promise 迷你书</a></li>
<li><a href="http://www.ituring.com.cn/article/66566" target="_blank" rel="external">Promise/A+ 规范中文</a></li>
<li>第二期实现自己的 Promise <a href="https://zhuanlan.zhihu.com/p/25178630" target="_blank" rel="external">参考1</a> <a href="https://github.com/Jocs/jocs.github.io/issues/7" target="_blank" rel="external">参考2</a> <a href="http://coderlt.coding.me/2016/12/03/promise-in-depth-an-introduction-1/" target="_blank" rel="external">参考3</a> <a href="https://github.com/calvinmetcalf/lie" target="_blank" rel="external">参考4</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http与https杂谈]]></title>
      <url>https://jsonz1993.github.io/2017/12/http%E4%B8%8Ehttps%E6%9D%82%E8%B0%88/</url>
      <content type="html"><![CDATA[<p>http &amp;&amp; https</p>
<p><a href="https://www.zhihu.com/question/19577317" target="_blank" rel="external">https://www.zhihu.com/question/19577317</a></p>
<p><a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/" target="_blank" rel="external">http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/</a></p>
<p><a href="https://juejin.im/entry/58d7635e5c497d0057fae036" target="_blank" rel="external">https://juejin.im/entry/58d7635e5c497d0057fae036</a></p>
<p><a href="http://www.jianshu.com/p/37654eb66b58" target="_blank" rel="external">http://www.jianshu.com/p/37654eb66b58</a></p>
<p><a href="http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html" target="_blank" rel="external">http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html</a></p>
<p>https优点<br><a href="http://www.codeceo.com/article/why-http-better-than-https.html" target="_blank" rel="external">http://www.codeceo.com/article/why-http-better-than-https.html</a></p>
<p>SSL/TSL 协议运行机制<br><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a></p>
<p>https 从第一s发生的事情<br><a href="http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html" target="_blank" rel="external">http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html</a></p>
<p>彭彭的文章，名词解释器<br><a href="http://172.16.30.58:8000/index.php/2017/11/22/http-https-tcp-dns/" target="_blank" rel="external">http://172.16.30.58:8000/index.php/2017/11/22/http-https-tcp-dns/</a></p>
<p>说的是项目的东西 不大沾边<br><a href="http://172.16.30.58:8000/index.php/2017/12/02/local-https-principle/" target="_blank" rel="external">http://172.16.30.58:8000/index.php/2017/12/02/local-https-principle/</a></p>
<p>说的是代理<br><a href="http://172.16.30.58:8000/index.php/2017/11/29/local-https-proxy/" target="_blank" rel="external">http://172.16.30.58:8000/index.php/2017/11/29/local-https-proxy/</a></p>
<p>`<br>http 与 https</p>
<ul>
<li>页面资源互相访问</li>
<li>https证书获取的方法，自签，机构认证之类的</li>
</ul>
<h1 id="HTTP-相关"><a href="#HTTP-相关" class="headerlink" title="HTTP 相关"></a>HTTP 相关</h1><h2 id="常见协议头的分析-比如下面的头对-GET-POST-的影响、对传递参数的影响"><a href="#常见协议头的分析-比如下面的头对-GET-POST-的影响、对传递参数的影响" class="headerlink" title="常见协议头的分析, 比如下面的头对 GET POST 的影响、对传递参数的影响"></a>常见协议头的分析, 比如下面的头对 GET POST 的影响、对传递参数的影响</h2><ul>
<li>“content-type”: “application/x-www-form-urlencoded”</li>
<li>“content-type”: “multipart/form-data”</li>
</ul>
<h2 id="HTTP访问控制（CORS）的分析"><a href="#HTTP访问控制（CORS）的分析" class="headerlink" title="HTTP访问控制（CORS）的分析"></a>HTTP访问控制（CORS）的分析</h2><ul>
<li>跨域是什么</li>
<li>为什么有跨域</li>
<li>如何解决</li>
</ul>
<h2 id="GET-和-POST-的真正区别"><a href="#GET-和-POST-的真正区别" class="headerlink" title="GET 和 POST 的真正区别"></a>GET 和 POST 的真正区别</h2><h2 id="session-机制"><a href="#session-机制" class="headerlink" title="session 机制"></a>session 机制</h2><h2 id="缓存机制（跟缓存相关的协议头）"><a href="#缓存机制（跟缓存相关的协议头）" class="headerlink" title="缓存机制（跟缓存相关的协议头）"></a>缓存机制（跟缓存相关的协议头）</h2><p>想屌点的就加一个简单的实例分析演示；抓包演示等</p>
<p>感觉上面建议这些点，比单纯的罗列 HTTP 的理论会更有意义<br>`</p>
<p>理论篇<br>https = http + ssl/tls</p>
<p>ssl =&gt; 安全套接层<br>tls =&gt; 传输层安全性协议</p>
<h1 id="https-作用"><a href="#https-作用" class="headerlink" title="https 作用"></a>https 作用</h1><p>http</p>
<ol>
<li>窃听风险：第三方获取通信内容</li>
<li>篡改风险：第三方可以修改通信内容</li>
<li>冒充风险：第三方可以冒充他人身份参与通信</li>
</ol>
<p>SSL/TLS </p>
<ol>
<li>所有信息加密传输 无法窃听</li>
<li>校验机制 篡改会被发现</li>
<li>配证书 防止被冒充</li>
</ol>
<p>SSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p>
<p>如何保证公钥不被篡改：<br>将公钥放在数字证书中，证书可信你的公钥就是可信</p>
<p>公钥加密计算量太大，如何减少耗用的时间？<br>每一次对话（session），客户端和服务器端都生成一个”对话密钥”（session key），用它来加密信息。由于”对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密”对话密钥”本身，这样就减少了加密运算的消耗时间。</p>
<p>（1） 客户端向服务器端索要并验证公钥。<br>（2） 双方协商生成”对话密钥”。<br>（3） 双方采用”对话密钥”进行加密通信。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flex:1在iOS10.2导致flex-wrap 不起作用]]></title>
      <url>https://jsonz1993.github.io/2017/08/flex-1%E5%9C%A8iOS10-2%E5%AF%BC%E8%87%B4flex-wrap%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8bug/</url>
      <content type="html"><![CDATA[<p>实际上是 <code>flex-basis</code> 的默认值在 <code>iOS10.2</code>及以下为 <code>0</code> 而不是 <code>auto</code> 导致的。</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目上有一个列表要有这种效果： </p>
<ol>
<li>只有一个的情况是一个占一排</li>
<li>有两个的情况是 各占50%</li>
<li>有三个或以上的情况是 每个占 1/3<br>所以这时候用flex是最容易的。<br>大于三个的直接补全至3的倍数即可<br>代码大致思路：<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.demo</span> <span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">min-width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="./demo1.jpg" alt="demo"></p>
<p>本来是完美无缺的，但是在测试过程中，发现说 <code>iOS 10.2</code> 及以下版本会出现 <code>flex-wrap</code>没有正确换行的情况，就算大于三个的情况 全部也都会挤在同一行。 该bug在 <code>10.3</code>不会重现。</p>
<p><img src="./bug.png" alt="iOS10.2下bug"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>本来有考虑不用 <code>flex</code> 而是用 <code>inline-block</code> 或 <code>float</code> 来解决，但是还是觉得 <code>flex</code> 解决比较优雅一点。<br>所以多番尝试后发现说，不写 <code>flex:1</code> 而是写成 <code>flex:1 1 auto</code>就没问题。</p>
<p>在safari调试了一下，发现 iOS10.2及以下 <code>flex-basis</code> 属性的默认值为 <code>0</code> 而不是 <code>auto</code>.<br>所以所有的项都变成挤在一起。</p>
<p>所以在原来代码上加多一行 <code>flex-basis: auto;</code> 重置掉 <code>flex-basis: 0;</code> 带来的问题即可。</p>
<p><img src="./bugfix.png" alt="bugfix"></p>
<p><a href="https://jsonz1993.github.io/demo/flex-ios-10.2/index.html">在线demo</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器css滚动回弹效果 overflow-scrolling]]></title>
      <url>https://jsonz1993.github.io/2017/08/%E6%B5%8F%E8%A7%88%E5%99%A8css%E6%BB%9A%E5%8A%A8%E5%9B%9E%E5%BC%B9%E6%95%88%E6%9E%9C-overflow-scrolling/</url>
      <content type="html"><![CDATA[<p>前几天做全屏fixed布局弹窗的时候，去参考了一下淘宝的布局。</p>
<p>无意中发现里面用到一个没见过的css属性 <code>-webkit-overflow-scrolling</code></p>
<p>该属性控制元素在移动设备上是否使用滚动回弹效果,会有种拟原生的效果 是属于<code>Safari</code>自己实现的css属性 兼容性支持 <code>iOS 5.0</code> 以上。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>; <span class="comment">/* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span></div><div class="line"></div><div class="line"><span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">auto</span>; <span class="comment">/* 当手指从触摸屏上移开，滚动会立即停止 */</span></div></pre></td></tr></table></figure>
<p><a href="https://jsonz1993.github.io/demo/overflow-scrolling/index.html">在线demo</a></p>
<figure class="highlight html"><figcaption><span>示例demo 只在ios手机上有效 浏览器看不出效果</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">overflow</span>: auto;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.scrolling1</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">            <span class="attribute">-webkit-overflow-scrolling</span>: auto;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.scrolling2</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">            <span class="attribute">-webkit-overflow-scrolling</span>: touch;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>-webkit-overflow-scrolling: auto;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scrolling1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>-webkit-overflow-scrolling: touch;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scrolling2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">const</span> divList = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>))</div><div class="line">        <span class="keyword">let</span> str = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>;i&lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            str += <span class="string">`&lt;p&gt;<span class="subst">$&#123;i&#125;</span>&lt;/p&gt;`</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        divList.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</div><div class="line">            item.innerHTML = str</div><div class="line">        &#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参考资料</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-overflow-scrolling" target="_blank" rel="external">MDN</a></p>
</li>
<li><p><a href="https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/css/property/-webkit-overflow-scrolling" target="_blank" rel="external">Safari CSS</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[8月伊始牢骚]]></title>
      <url>https://jsonz1993.github.io/2017/08/8%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8%E7%9A%84%E7%89%A2%E9%AA%9A/</url>
      <content type="html"><![CDATA[<p>看了一下 上一次 commit 的时间。<br>jun 25, 2017<br>从去兰卡威玩之前就开始没写博客了。<br>回来之后又一直很懒散 加上工作实在饱和 差点丢了这个习惯 不好 不好</p>
<p>7月的加班时长，平均时长是 11.30 小时 排公司技术第五</p>
<p>七月尾八月初有个小机会 可以用上react全家桶做一个前端的后台管理系统 [前端性能检测后台 sp]</p>
<p>从只自己捣鼓过 <code>react-native</code> 的小菜鸟 一下子要上手全家桶 真的很蛋疼，好几天都在看 文档api demo</p>
<p>幸亏<code>其毅大哥</code> 此处应该有掌声 整天做我的小 Google GoGoGo</p>
<p>react/redux/redux-sage/react-router/react-redux-router/antd/dva</p>
<p>期间做热力图的内嵌 第一次用了 <code>postMessage</code>。 然后意外发现 不知道是 <code>redux-tool</code>还是<code>redux</code> 用了 <code>web-worker</code> 来做计算线程。 跟发现新大陆一样</p>
<p>这周五排到我分享，打算把 <code>postMessage</code> 简单说一下，下次有机会的时候 说一下 <code>sp</code>后台和 <code>dva</code>的大概思路</p>
<p>8.26号第一次参加 <code>FEDAY</code> 挺开心的 可以去北京。 加油 Jsonz 加油P3</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[postMessage 消息传递]]></title>
      <url>https://jsonz1993.github.io/2017/08/postMessage-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近捣鼓一个小项目， 做了一个后台管理平台 里面要对线上项目做一个操作 显示热力图。<br>所以只能采用 <code>iframe</code> 去嵌套，再做其他操作。<br>包括 加载相对的js脚本（热力图脚本 称heatmap.js)， 在后台筛选日期 地点时 <code>heatmap.js</code> 要做对应的操作<br>因为后台的域和前端不一致 所以跨域操作 首选用 <code>postMessage</code></p>
<h2 id="postMessage-api"><a href="#postMessage-api" class="headerlink" title="postMessage api"></a>postMessage api</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">otherWindow.postMessage(message, targetOrigin, [transfer] )</div><div class="line"></div><div class="line">otherWindow: 其他窗口的一个引用，比如iframe的contentWindow属性、执行<span class="built_in">window</span>.open返回的窗口对象、或者是命名过或数值索引的<span class="built_in">window</span>.frames。</div><div class="line"></div><div class="line">message: 将要发送到其他 <span class="built_in">window</span>的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。</div><div class="line"></div><div class="line">targetOrigin: 通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串<span class="string">"*"</span>（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的orign属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</div><div class="line"></div><div class="line">transfer 可选</div><div class="line">是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</div></pre></td></tr></table></figure>
<p>需要注意的是</p>
<p>message 不可以包含 dom对象, 可以把验证或校对信息放置在 message 一并发送出去</p>
<h2 id="小demo"><a href="#小demo" class="headerlink" title="小demo"></a>小demo</h2><figure class="highlight html"><figcaption><span>a.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"./demo1.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"iframe1"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">const</span> iframeWindow = <span class="built_in">document</span>.iframe1</div><div class="line">        iframeWindow.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            iframeWindow.postMessage(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'script'</span>,</div><div class="line">                <span class="attr">evalFn</span>: <span class="string">'alert(1)'</span></div><div class="line">            &#125;, <span class="string">'*'</span>)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, ()=&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'parent message '</span>)</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>b.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, event=&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log(event)</div><div class="line">            <span class="keyword">const</span> &#123; evalFn, type &#125; = event.data</div><div class="line">            <span class="keyword">const</span> &#123; source &#125; = event</div><div class="line">            <span class="built_in">console</span>.log(type, evalFn)</div><div class="line">            <span class="keyword">if</span> (type === <span class="string">'script'</span>) <span class="built_in">eval</span>(evalFn)</div><div class="line">            source.postMessage(<span class="string">'bilibili'</span>, <span class="string">'*'</span>)</div><div class="line">        &#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="./post_message_data.png" alt="event 输出格式"></p>
<h2 id="实际应用小例子"><a href="#实际应用小例子" class="headerlink" title="实际应用小例子"></a>实际应用小例子</h2><figure class="highlight javascript"><figcaption><span>admin-iframe/index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">const iframeWindow = iframe.contentWindow</div><div class="line"><span class="keyword">this</span>.initMessenger = <span class="keyword">new</span> postMessage(iframeWindow, <span class="string">'initPostMessage'</span>)</div><div class="line"><span class="keyword">this</span>.initMessenger.send(&#123;<span class="attr">type</span>: <span class="string">'asyncLoadScript'</span>, <span class="attr">data</span>: &#123;<span class="attr">src</span>: config.heatmapJs&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment">// heatmapMessage 处理与heatmap-show相关的事件</span></div><div class="line"><span class="keyword">this</span>.heatmapMessenger = <span class="keyword">new</span> postMessage(iframeWindow, <span class="string">'heatmap'</span>)</div><div class="line"><span class="comment">// 每次跳转页面或load 都重新在state 更新事件到heatmap-show</span></div><div class="line"></div><div class="line"><span class="keyword">this</span>.targetMessenger.listen(<span class="string">'loadSuccess'</span>, ()=&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123; startTime, endTime, site, continent, isHeatmap &#125; = <span class="keyword">this</span>.props.heatmap</div><div class="line">  <span class="keyword">this</span>.heatmapMessenger.send(&#123;<span class="attr">type</span>: <span class="string">'initFilter'</span>, <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">date</span>: [startTime, endTime],</div><div class="line">    site,</div><div class="line">    isHeatmap</div><div class="line">  &#125;&#125;)</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>postMessage.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * @Author: Jsonz </div><div class="line"> * @Date: 2017-08-05 15:42:15 </div><div class="line"> * @Last Modified by: Jsonz</div><div class="line"> * @Last Modified time: 2017-08-05 16:15:44</div><div class="line"> * </div><div class="line"> * const messenger = new Messenger(window, 'heatmap')</div><div class="line"> * messenger.send(&#123; type: 'changeType', data: &#123; &#125; &#125;)</div><div class="line"> * messenger.listen(&#123; type: 'changeType', cb: ()=&gt; &#123;&#125; &#125;)</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Messenger</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(target, prefix) &#123;</div><div class="line">    <span class="keyword">this</span>.target = target</div><div class="line">    <span class="keyword">this</span>.prefix = prefix</div><div class="line">    <span class="keyword">this</span>.listenFunc = []</div><div class="line">    <span class="keyword">this</span>.initListen()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  send(msg) &#123;</div><div class="line">    <span class="keyword">if</span> (!msg.type) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'postMessage send 没有传type'</span>)</div><div class="line">    msg.type = <span class="keyword">this</span>.prefix + <span class="string">'__'</span> + msg.type</div><div class="line">    <span class="keyword">this</span>.target.postMessage(msg, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  listen(type, cb) &#123;</div><div class="line">    <span class="keyword">const</span> len = <span class="keyword">this</span>.listenFunc.length</div><div class="line">    type = <span class="keyword">this</span>.prefix + <span class="string">'__'</span> + type</div><div class="line">    <span class="keyword">let</span> cbIsExist = <span class="literal">false</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; len; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.listenFunc[i].type === type) &#123;</div><div class="line">        cbIsExist = <span class="literal">true</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!cbIsExist) <span class="keyword">this</span>.listenFunc.push(&#123; cb, type &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  initListen() &#123;</div><div class="line">    <span class="keyword">const</span> cb= <span class="function"><span class="params">event</span>=&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> messageObj</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> event === <span class="string">'object'</span> &amp;&amp; event.data) messageObj = event.data</div><div class="line">      <span class="keyword">if</span> (!messageObj.type || !messageObj.type.includes(<span class="string">'__'</span>)) <span class="keyword">return</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; <span class="keyword">this</span>.listenFunc.length; i++) &#123;</div><div class="line">        <span class="keyword">let</span> itemFn = <span class="keyword">this</span>.listenFunc[i]</div><div class="line">        <span class="keyword">if</span> (itemFn.type === messageObj.type) itemFn.cb(messageObj.data)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, cb, <span class="literal">false</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// modules.export = Messenger</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Messenger</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/jsonz1993/wheel/tree/master/postMessage" target="_blank" rel="external">github</a></h3><h3 id="postMessage-MDN-文档"><a href="#postMessage-MDN-文档" class="headerlink" title="postMessage MDN 文档"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">postMessage MDN 文档</a></h3><h3 id="caniuse"><a href="#caniuse" class="headerlink" title="caniuse "></a>caniuse <iframe height="498" width="100%" src="http://caniuse.com/#search=postmessage" frameborder="0" allowfullscreen></iframe></h3><h3 id="arale-messenger-index-js"><a href="#arale-messenger-index-js" class="headerlink" title="arale/messenger/index.js"></a>arale/messenger/index.js</h3>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[兼容多种模式规范]]></title>
      <url>https://jsonz1993.github.io/2017/07/%E5%85%BC%E5%AE%B9%E5%A4%9A%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">name, definition</span>) </span>&#123;</div><div class="line">	<span class="comment">// 检测上下文环境是否为 ADM 或 CMD</span></div><div class="line">	<span class="keyword">var</span> hasDefine = <span class="keyword">typeof</span> define === <span class="string">'function'</span>;</div><div class="line">	<span class="comment">// 检查上下文是否为 node </span></div><div class="line">	<span class="keyword">var</span> hasExports = <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (hasDefine) &#123;</div><div class="line">		<span class="comment">// AMD环境 或 CMD环境</span></div><div class="line">		define(definition);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasExports) &#123;</div><div class="line">		<span class="comment">// 定义为普通Node模块</span></div><div class="line">		<span class="built_in">module</span>.exports = definition();</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// 将模块的执行结果挂在window变量中， 在浏览器中 this 指向 window 对象</span></div><div class="line">		<span class="keyword">this</span>[name] = definition();</div><div class="line">	&#125;</div><div class="line">&#125;)(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">	<span class="keyword">return</span> hello;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodeJs 学习导航]]></title>
      <url>https://jsonz1993.github.io/2017/06/nodeJs-%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%88%AA/</url>
      <content type="html"><![CDATA[<h1 id="廖雪峰node教程"><a href="#廖雪峰node教程" class="headerlink" title="廖雪峰node教程"></a>廖雪峰node教程</h1><h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 读取文件</span></div><div class="line">fs.readFile(<span class="string">'demo1.html'</span>, <span class="string">'utf-8'</span>, (err, data)=&gt; &#123;</div><div class="line">	<span class="comment">// console.log(err? err: data)</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 异步读取文件</span></div><div class="line">fs.readFile(<span class="string">'about-us.png'</span>, (err, data)=&gt; &#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">		<span class="built_in">console</span>.log(err)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// console.log(data)</span></div><div class="line">		<span class="comment">// console.log(data.length + ' bytes')</span></div><div class="line"></div><div class="line">		<span class="keyword">let</span> text = data.toString(<span class="string">'utf-8'</span>)</div><div class="line">		<span class="comment">// console.log(text)</span></div><div class="line"></div><div class="line">		<span class="keyword">let</span> buf = <span class="keyword">new</span> Buffer(text, <span class="string">'utf-8'</span>)</div><div class="line">		<span class="comment">// console.log(buf)</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 同步读取文件</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="keyword">const</span> data = fs.readFileSync(<span class="string">'demo2.html'</span>, <span class="string">'utf-8'</span>)</div><div class="line">	<span class="built_in">console</span>.log(data)</div><div class="line">&#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">	<span class="built_in">console</span>.log(err)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 写文件</span></div><div class="line"><span class="keyword">const</span> writeData = <span class="string">'Hello Jsonz'</span></div><div class="line">fs.writeFile(<span class="string">'output.txt'</span>, writeData, err=&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(err || <span class="string">'ok.'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 获取文件信息</span></div><div class="line">fs.stat(<span class="string">'output.txt'</span>, (err, stat)=&gt; &#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">		<span class="built_in">console</span>.log(err)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'isFile: '</span> + stat.isFile())</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'isDirectory: '</span> + stat.isDirectory())</div><div class="line">		<span class="keyword">if</span> (stat.isFile()) &#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'size: '</span> + stat.size)</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'birth time: '</span> + stat.birthtime)</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'modified time: '</span> + stat.mtime)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line">	<span class="keyword">const</span> rs = fs.createReadStream(<span class="string">'output.txt'</span>, <span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 结束</span></div><div class="line">	rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'END'</span>)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="comment">// 错误捕获</span></div><div class="line">	rs.on(<span class="string">'error'</span>, err=&gt; &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'ERROR: '</span> + err)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="comment">// 读取</span></div><div class="line">	rs.on(<span class="string">'data'</span>, chunk=&gt; &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'DATA: '</span>, chunk)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="comment">// 写入文本数据</span></div><div class="line">	<span class="keyword">const</span> ws1 = fs.createWriteStream(<span class="string">'output1.txt'</span>, <span class="string">'utf-8'</span>)</div><div class="line">	ws1.write(<span class="string">'使用Stream写入文本数据...\n'</span>)</div><div class="line">	ws1.write(<span class="string">'END.'</span>)</div><div class="line">	ws1.end()</div><div class="line"></div><div class="line">	<span class="comment">// 写入二进制数据</span></div><div class="line">	<span class="keyword">const</span> rs2 = fs.createWriteStream(<span class="string">'output2.txt'</span>)</div><div class="line">	rs2.write(<span class="keyword">new</span> Buffer(<span class="string">'使用Stream写入文本数据... \n'</span>, <span class="string">'utf-8'</span>))</div><div class="line">	rs2.write(<span class="keyword">new</span> Buffer(<span class="string">'END.'</span>, <span class="string">'utf-8'</span>))</div><div class="line">	rs2.end()</div><div class="line"></div><div class="line">	<span class="comment">// pipe 流</span></div><div class="line">	<span class="keyword">const</span> ws2 = fs.createWriteStream(<span class="string">'copied.txt'</span>)</div><div class="line">	rs.pipe(ws2, &#123; <span class="attr">end</span>: <span class="literal">false</span> &#125;) <span class="comment">// rs Readable流和 ws2 Writable流用 pipe串起来。 默认Readable流数据读取完毕后关闭 Writeable流。可以传参修改</span></div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">	<span class="built_in">console</span>.log(err)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432011939547478fd5482deb47b08716557cc99764e0000" target="_blank" rel="external">简单的协议入门介绍</a></p>
<figure class="highlight javascript"><figcaption><span>简单的http服务器</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>)=&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(request.method + <span class="string">': '</span> + request.url)</div><div class="line">	response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;)</div><div class="line">	response.end(<span class="string">'&lt;h1&gt; Hello World! &lt;/h1&gt;'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'server is running at http://127.0.0.1:8080'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>文件服务器</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> root = path.resolve(process.argv[<span class="number">2</span>] || <span class="string">'.'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Static root dir: '</span> + root)</div><div class="line"></div><div class="line"><span class="comment">// 创建服务器</span></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>)=&gt;</span> &#123;</div><div class="line">	<span class="comment">// 获取URL 的 path, 类似 /css/bootstrap.css</span></div><div class="line">	<span class="keyword">const</span> pathname = url.parse(request.url).pathname</div><div class="line">	<span class="comment">// 获取对应的本地文件路径， 蕾西 /srv/www/css/bootstrap.css</span></div><div class="line">	<span class="keyword">const</span> filepath = path.join(root, pathname)</div><div class="line">	<span class="comment">// 获取文件状态</span></div><div class="line">	fs.stat(filepath, (err, stats)=&gt; &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!err &amp;&amp; stats.isFile) &#123;</div><div class="line">			<span class="comment">// 没有出错且文件存在</span></div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'200 '</span> + request.url)</div><div class="line">			<span class="comment">// 发送200响应</span></div><div class="line">			response.writeHead(<span class="number">200</span>)</div><div class="line">			<span class="comment">// 将文件流导向response</span></div><div class="line">			fs.createReadStream(filepath).pipe(response)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 出错了或者文件不存在</span></div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'404 '</span> + request.url)</div><div class="line">			<span class="comment">// 发送404 响应</span></div><div class="line">			response.writeHead(<span class="number">404</span>)</div><div class="line">			response.end(<span class="string">'404 Not Found'</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'server is running at http://127.0.0.1:8080'</span>)</div></pre></td></tr></table></figure>
<h3 id="crypto-通用的加密算法和哈希算法"><a href="#crypto-通用的加密算法和哈希算法" class="headerlink" title="crypto 通用的加密算法和哈希算法"></a>crypto 通用的加密算法和哈希算法</h3><figure class="highlight javascript"><figcaption><span>crypto实现加密解密</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通用的加密和哈希算法</span></div><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</div><div class="line"><span class="keyword">const</span> hash = crypto.createHash(<span class="string">'md5'</span>)</div><div class="line"><span class="comment">// 可以直接把 md5v 改为 sha1 或更安全的 sha256 sha512</span></div><div class="line"></div><div class="line"><span class="comment">// 可以任意多次调用update 默认字符串编码为 UTF-8</span></div><div class="line">hash.update(<span class="string">'hello world'</span>)</div><div class="line">hash.update(<span class="string">'hello nodejs'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">'hex'</span>))</div><div class="line"></div><div class="line"><span class="comment">// AES 对称加密算法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEncrypt</span>(<span class="params">data, key</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> cipher = crypto.createCipher(<span class="string">'aes192'</span>, key)</div><div class="line">	<span class="keyword">let</span> crypted = cipher.update(data, <span class="string">'utf8'</span>, <span class="string">'hex'</span>)</div><div class="line">	crypted += cipher.final(<span class="string">'hex'</span>)</div><div class="line">	<span class="keyword">return</span> crypted</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesDecrypt</span>(<span class="params">encrypted, key</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> decipher = crypto.createDecipher(<span class="string">'aes192'</span>, key)</div><div class="line">	<span class="keyword">let</span> decrypted = decipher.update(encrypted, <span class="string">'hex'</span>, <span class="string">'utf8'</span>)</div><div class="line">	decrypted += decipher.final(<span class="string">'utf8'</span>)</div><div class="line">	<span class="keyword">return</span> decrypted</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> data = <span class="string">'Hello, this is a secret message!'</span></div><div class="line"><span class="keyword">const</span> key = <span class="string">'Jsonz-password'</span></div><div class="line"><span class="keyword">const</span> encrypted = aesEncrypt(data, key)</div><div class="line"><span class="keyword">const</span> decrypted = aesDecrypt(encrypted, key)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Plain text: '</span> + data)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Encrypted text: '</span> + encrypted)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Decrypted text: '</span> + decrypted)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-native 学习总结]]></title>
      <url>https://jsonz1993.github.io/2017/06/react-native-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>进公司的时候 原部门老大让我去看rn demo 后面项目会用到，于是有了这个项目的开始。</p>
<p>但是一个星期后，我被调去另一个部门，现部门进来之后就一直忙着业务代码 产品迭代。 从github 提交应该也能看出来， 特别从 6.8到6.24 一次commit都没有。</p>
<p>慕课网狗狗说app的开发教程学习，这次的学习可以算是半成品，大概了解了rn 也写了一个较为完整的demo，<br>后面如果有一些简单的rn项目或者app内嵌 上手成本应该低了很多。<br>包括:<br>RN 项目环境配置 折腾了很久 真的很多坑<br>穿插着学了一点点O-C 语法<br>xCode 资源库引用以及常见问题或常见功能使用<br>RN 项目启动 link watchman 等等<br>RN 具体代码 api 组件 学习<br>Koa 与 mongoDB 的简单使用<br>七牛云使用<br>螺丝帽发送验证码使用<br>各种类库 图片插件 倒计时插件 录音 录像 等<br>接下来如果不是项目有使用到的话 应该不会再深入接触rn。</p>
<p>毕竟现在的目标是进军P3 &amp;&amp; 优秀员工。</p>
<p>app部分截图:</p>
<p><img src="./list.png" alt="列表页"><br><img src="./detail.png" alt="视频详情"><br><img src="./comment.png" alt="评论部分"><br><img src="./account.png" alt="账户页"><br><img src="./edit.png" alt="编辑页"></p>
<p><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-dogs" target="_blank" rel="external">最后附上源码 RN 很看 环境和版本，所以跑得起来才是不正常的</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> imooc </tag>
            
            <tag> learn </tag>
            
            <tag> react-native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[置顶]捣鼓目录]]></title>
      <url>https://jsonz1993.github.io/2017/06/%E6%8D%A3%E9%BC%93%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>记录平时工作学习的目录条目， 类似 <a href="https://github.com/jsonz1993/learn" target="_blank" rel="external">Jsonz-learn</a>、 <a href="https://github.com/jsonz1993/wheel" target="_blank" rel="external">Jsonz-wheel</a> 的目录。<br>部分比较大的轮子可能会独立成一个git项目</p>
<h1 id="Doing"><a href="#Doing" class="headerlink" title="Doing"></a>Doing</h1><p>组件开发，最近迫切希望自己能有耐心去开发一系列组件，用了太多的ui没有自己动手 都快生疏了。</p>
<p>服务端方面知识，未想好怎么开始，先从拥有自己的第一台服务器开始吧</p>
<h1 id="目录-排名按时间顺序"><a href="#目录-排名按时间顺序" class="headerlink" title="目录 排名按时间顺序"></a>目录 排名按时间顺序</h1><h2 id="《css世界》常用技巧-——-读书笔记"><a href="#《css世界》常用技巧-——-读书笔记" class="headerlink" title="《css世界》常用技巧 —— 读书笔记"></a><a href="https://jsonz1993.github.io/2018/05/css-world/">《css世界》常用技巧 —— 读书笔记</a></h2><h2 id="浏览器恢复滚动行为-——-history-scrollRestoration"><a href="#浏览器恢复滚动行为-——-history-scrollRestoration" class="headerlink" title="浏览器恢复滚动行为 —— history.scrollRestoration"></a><a href="https://jsonz1993.github.io/2018/05/history-scroll-restoration/">浏览器恢复滚动行为 —— history.scrollRestoration</a></h2><h2 id="create-react-app-源码解析-一"><a href="#create-react-app-源码解析-一" class="headerlink" title="create-react-app 源码解析(一)"></a><a href="https://jsonz1993.github.io/2018/05/create-react-app-o/">create-react-app 源码解析(一)</a></h2><h2 id="create-react-app-源码解析-二"><a href="#create-react-app-源码解析-二" class="headerlink" title="create-react-app 源码解析(二)"></a><a href="https://jsonz1993.github.io/2018/05/create-react-app-t/">create-react-app 源码解析(二)</a></h2><h2 id="git查漏补缺-非常大好全的文章-慢慢适用一下控制台提交，熟悉之后再切客户端"><a href="#git查漏补缺-非常大好全的文章-慢慢适用一下控制台提交，熟悉之后再切客户端" class="headerlink" title="git查漏补缺 非常大好全的文章 慢慢适用一下控制台提交，熟悉之后再切客户端"></a><a href="https://mubu.com/doc/21wNPB_ZJp" target="_blank" rel="external">git查漏补缺 非常大好全的文章</a> 慢慢适用一下控制台提交，熟悉之后再切客户端</h2><h2 id="自动化功能测试流程方案"><a href="#自动化功能测试流程方案" class="headerlink" title="自动化功能测试流程方案"></a><a href="http://l.easyrentcars.com:4000/2018/04/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/" target="_blank" rel="external">自动化功能测试流程方案</a></h2><h2 id="项目代码规范工作流——editor、prettier、eslint、git-check"><a href="#项目代码规范工作流——editor、prettier、eslint、git-check" class="headerlink" title="项目代码规范工作流——editor、prettier、eslint、git-check"></a><a href="http://l.easyrentcars.com:4000/2018/03/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E2%80%94%E2%80%94editor%E3%80%81prettier%E3%80%81eslint%E3%80%81git-check/" target="_blank" rel="external">项目代码规范工作流——editor、prettier、eslint、git-check</a></h2><h2 id="自动化测试-puppeteer-与qq空间"><a href="#自动化测试-puppeteer-与qq空间" class="headerlink" title="自动化测试 puppeteer 与qq空间"></a><a href="http://l.easyrentcars.com:4000/2018/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95puppeteer-%E4%B8%8Eqq%E7%A9%BA%E9%97%B4/" target="_blank" rel="external">自动化测试 puppeteer 与qq空间</a></h2><ul>
<li><a href="https://github.com/jsonz1993/wheel/tree/master/qqZone" target="_blank" rel="external">源码</a></li>
</ul>
<h2 id="react全家桶-dva-实践整理总结"><a href="#react全家桶-dva-实践整理总结" class="headerlink" title="react全家桶 + dva 实践整理总结"></a><a href="http://l.easyrentcars.com:4000/2018/02/react%E5%85%A8%E5%AE%B6%E6%A1%B6-dva-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/" target="_blank" rel="external">react全家桶 + dva 实践整理总结</a></h2><h2 id="了解-babel-写个babel-插件-——-了解编译器原理"><a href="#了解-babel-写个babel-插件-——-了解编译器原理" class="headerlink" title="了解 babel 写个babel 插件 —— 了解编译器原理"></a>了解 babel 写个babel 插件 —— 了解编译器原理</h2><ul>
<li>实现了一个 <a href="https://jsonz1993.github.io/2018/01/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0%E6%9E%81%E7%AE%80%E7%BC%96%E8%AF%91%E5%99%A8-%E2%80%94%E2%80%94-%E4%BA%86%E8%A7%A3%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/">极简的编译器</a></li>
</ul>
<h2 id="react-dva-antd-antd-pro-roadhog-全家桶-项目用ing"><a href="#react-dva-antd-antd-pro-roadhog-全家桶-项目用ing" class="headerlink" title="react/dva/antd/antd-pro/roadhog 全家桶 项目用ing"></a>react/dva/antd/antd-pro/roadhog 全家桶 项目用ing</h2><h2 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a><a href="https://github.com/jsonz1993/wheel/tree/master/postMessage" target="_blank" rel="external">postMessage</a></h2><ul>
<li>简单的对系统自带的postMessage进行封装</li>
<li>支持事件类型监听</li>
<li>更多实现参考 arale/messenger/index.js</li>
</ul>
<h2 id="react-native-dogs"><a href="#react-native-dogs" class="headerlink" title="react-native-dogs"></a><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-dogs" target="_blank" rel="external">react-native-dogs</a></h2><ul>
<li>学习react-native 比较全面的一个路径</li>
<li>虽然不完整，但包含了rn 常用的api 库 等</li>
<li>也涉及到 node koa 七牛云等</li>
</ul>
<h2 id="react-native-countdown-ReactNative的倒计时组件"><a href="#react-native-countdown-ReactNative的倒计时组件" class="headerlink" title="react-native-countdown ReactNative的倒计时组件"></a><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-countdown" target="_blank" rel="external">react-native-countdown ReactNative的倒计时组件</a></h2><ul>
<li>造这个轮子的原因是学习rn的时候，视频推荐额一个组件，但是这个组件已经停止维护 所以只能自己造一个</li>
<li>支持日期与秒数的倒计时</li>
<li>简单粗暴</li>
</ul>
<h2 id="fixedTop-吸顶效果"><a href="#fixedTop-吸顶效果" class="headerlink" title="fixedTop 吸顶效果"></a><a href="https://github.com/jsonz1993/wheel/tree/master/fixedTop" target="_blank" rel="external">fixedTop 吸顶效果</a></h2><ul>
<li>一个很小的常用效果</li>
<li>主要细节 在于改变dom为 fixed布局后在该dom后面生成一个占位的，防止兄弟节点的抖动</li>
</ul>
<h2 id="copyText-复制黏贴板插件"><a href="#copyText-复制黏贴板插件" class="headerlink" title="copyText 复制黏贴板插件"></a><a href="https://github.com/jsonz1993/wheel/tree/master/copyText" target="_blank" rel="external">copyText 复制黏贴板插件</a></h2><ul>
<li>支持h5，PC</li>
<li><code>success</code>, <code>error</code>回调</li>
<li>判断浏览器是否支持该事件接口</li>
</ul>
<h2 id="heatmap-热力图"><a href="#heatmap-热力图" class="headerlink" title="heatmap 热力图"></a><a href="https://github.com/jsonz1993/wheel/tree/master/heatmap" target="_blank" rel="external">heatmap 热力图</a></h2><ul>
<li>老大提的小需求 一两个小时完成</li>
<li>点击页面会间隔(10s)存到<code>sessionLocation</code>。 刷新后会把存在<code>sessionLocation</code> 绘制成热力图展示在页面上</li>
</ul>
<h2 id="validator-小型表单验证插件"><a href="#validator-小型表单验证插件" class="headerlink" title="validator 小型表单验证插件"></a><a href="https://github.com/jsonz1993/wheel/tree/master/validator" target="_blank" rel="external">validator 小型表单验证插件</a></h2><ul>
<li>移动端简单的验证插件</li>
<li>支持自己配置验证项 支持多重验证</li>
</ul>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/cookie" target="_blank" rel="external">cookie</a></h2><ul>
<li>封装了一些cookie常用的api</li>
<li><code>get</code> <code>set</code> <code>remove</code> <code>clear</code> <code>getAll</code></li>
</ul>
<h2 id="ObjectiveC"><a href="#ObjectiveC" class="headerlink" title="ObjectiveC"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/Objective-c" target="_blank" rel="external">ObjectiveC</a></h2><ul>
<li>ObjectiveC 基础</li>
<li>为了学 ReactNative 做一点ios基础铺垫</li>
</ul>
<h2 id="setTimeout-amp-amp-setInterval"><a href="#setTimeout-amp-amp-setInterval" class="headerlink" title="setTimeout &amp;&amp; setInterval"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/setTimeout-setInterval" target="_blank" rel="external">setTimeout &amp;&amp; setInterval</a></h2><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/Event" target="_blank" rel="external">Event</a></h2><ul>
<li>最简单的事件系统</li>
</ul>
<h2 id="handlebars"><a href="#handlebars" class="headerlink" title="handlebars"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/handlebars" target="_blank" rel="external">handlebars</a></h2><ul>
<li>简单的模板引擎<a href="http://handlebarsjs.com" target="_blank" rel="external">http://handlebarsjs.com</a></li>
</ul>
<h2 id="quickskin"><a href="#quickskin" class="headerlink" title="quickskin"></a>quickskin</h2><ul>
<li>简单的PHP模板， 文档很不全 {value}</li>
<li><!-- IF login_id --><!-- ENDIF login_id -->  <code>if</code></li>
<li><!-- BEGIN question_tags_list --><!-- END question_tags_list --> <code>for</code></li>
</ul>
<h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/sass" target="_blank" rel="external">sass</a></h2><ul>
<li>简单的入门语法，因为用过less 所以基本无障碍</li>
</ul>
<h2 id="chrome-extension"><a href="#chrome-extension" class="headerlink" title="chrome-extension"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/chrome-extension" target="_blank" rel="external">chrome-extension</a></h2><ul>
<li>学习chrome插件开发入门</li>
<li>暂存finish，后面会重新学习 比较感兴趣</li>
<li>目前想法是做一个可以在页面比较方便加载js的插件</li>
<li>TODO</li>
</ul>
<h2 id="animate-text"><a href="#animate-text" class="headerlink" title="animate-text"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/animate-text" target="_blank" rel="external">animate-text</a></h2><ul>
<li>一个简单的文字 &amp;&amp; 数字 动画小插件。</li>
<li><a href="https://jsonz1993.github.io/demo/animate-text/index.html">demo</a></li>
<li><a href="https://jsonz1993.github.io/2017/04/animate-text/">文档</a></li>
</ul>
<h2 id="backbone"><a href="#backbone" class="headerlink" title="backbone"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/backbone" target="_blank" rel="external">backbone</a></h2><ul>
<li>历史悠久的MVC框架</li>
<li><a href="https://github.com/jashkenas/backbone" target="_blank" rel="external">https://github.com/jashkenas/backbone</a></li>
</ul>
<h2 id="DesignPattern"><a href="#DesignPattern" class="headerlink" title="DesignPattern"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/DesignPattern" target="_blank" rel="external">DesignPattern</a></h2><ul>
<li>后面会继续学习</li>
<li>《JavaScript设计模式》张容铭</li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B013HO6DNS/ref=sr_1_1?ie=UTF8&amp;qid=1490937378&amp;sr=8-1&amp;keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">亚马逊购买</a></li>
</ul>
<h2 id="ECMAScript-6-Primer"><a href="#ECMAScript-6-Primer" class="headerlink" title="ECMAScript_6_Primer"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/ECMAScript_6_Primer" target="_blank" rel="external">ECMAScript_6_Primer</a></h2><ul>
<li>ES6入门</li>
<li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">阮一峰</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01A18WWAG/ref=sr_1_1?ie=UTF8&amp;qid=1490937483&amp;sr=8-1&amp;keywords=Es6" target="_blank" rel="external">亚马逊购买</a></li>
</ul>
<h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/gulp" target="_blank" rel="external">gulp</a></h2><ul>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文</a></li>
<li><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">https://github.com/gulpjs/gulp</a></li>
</ul>
<h2 id="imooc"><a href="#imooc" class="headerlink" title="imooc"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/imooc" target="_blank" rel="external">imooc</a></h2><ul>
<li>慕课网上的相关学习</li>
<li><a href="imooc.com">imooc.com</a></li>
<li>学习占幅越来越低，看视频的效率没有看书和博客来的快</li>
</ul>
<h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/markdown" target="_blank" rel="external">markdown</a></h2><ul>
<li>markdown语法学习</li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">github markdown</a></li>
</ul>
<h2 id="require"><a href="#require" class="headerlink" title="require"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/require" target="_blank" rel="external">require</a></h2><ul>
<li>JS模块化加载规范 AMD产物</li>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD</a></li>
</ul>
<h2 id="require-backbone"><a href="#require-backbone" class="headerlink" title="require+backbone"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/require%2Bbackbone" target="_blank" rel="external">require+backbone</a></h2><ul>
<li>backbone+require 练习</li>
</ul>
<h2 id="RiotJs"><a href="#RiotJs" class="headerlink" title="RiotJs"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/RiotJs" target="_blank" rel="external">RiotJs</a></h2><ul>
<li>微型类React框架</li>
<li><a href="http://riotjs.com/" target="_blank" rel="external">http://riotjs.com/</a></li>
<li>公司在用，有实战经验</li>
<li><p>v2兼容ie8</p>
</li>
<li><p>edit_config</p>
</li>
<li><p>常用的编辑器配置</p>
</li>
<li><p><strong>Uncle Tom</strong></p>
</li>
<li>汤姆大叔的博客Js教程</li>
<li>强烈推荐!!!!</li>
<li>深入浅出 讲了很多原理性的东西</li>
<li>入门与进阶必备</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html</a></li>
</ul>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/vue" target="_blank" rel="external">vue</a></h2><ul>
<li>vueJs入门部分demo</li>
</ul>
<h2 id="vue-webpack"><a href="#vue-webpack" class="headerlink" title="vue+webpack"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/vue%2Bwebpack" target="_blank" rel="external">vue+webpack</a></h2><ul>
<li><p>vue+webpack demo</p>
</li>
<li><p>jsonz_old</p>
</li>
<li><p>刚入门的时候写的一个在线简历 停止更新</p>
</li>
<li><p>zhangxinxu</p>
</li>
<li>腾讯一个大佬，主要重构方面。</li>
<li>css与html很多疑难杂症 基础知识等都可以在里面找到</li>
<li><a href="http://www.zhangxinxu.com/" target="_blank" rel="external">http://www.zhangxinxu.com/</a></li>
</ul>
<h1 id="Done-log-历史日志，定时把doing更新下来，所以会越来越长…因为不想每次都忘了之前定的是什么，又懒得去找git记录"><a href="#Done-log-历史日志，定时把doing更新下来，所以会越来越长…因为不想每次都忘了之前定的是什么，又懒得去找git记录" class="headerlink" title="Done log: 历史日志，定时把doing更新下来，所以会越来越长…因为不想每次都忘了之前定的是什么，又懒得去找git记录"></a>Done log: 历史日志，定时把doing更新下来，所以会越来越长…因为不想每次都忘了之前定的是什么，又懒得去找git记录</h1><p><em>create-react-app</em> √ 第一次尝试开心<br><em>vue全家桶</em> √ 过了一遍，等有小项目可以练手<br><em>《CSS世界》</em> √ 好书<br>—《http小书》_√ 准能帮你省下不少时间</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> work </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-native-countdown RN的倒计时组件]]></title>
      <url>https://jsonz1993.github.io/2017/06/react-native-countdown-RN%E7%9A%84%E5%80%92%E8%AE%A1%E6%97%B6%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>之所以会写这个小组件是因为学习RN的时候，跟着视频敲代码。 视频推荐了一款<a href="https://github.com/shigebeyond/react-native-sk-countdown" target="_blank" rel="external">倒计时组件</a> 因为长期没有维护（最后一次更新是一年前）， 在我的RN环境下报错。</p>
<p>报错的原因大概是 React 把一个功能独立出去，要重新引进就可以了。 不过想着既然我已经看了源码找到问题，那么我何不自己造一个小轮子呢~</p>
<p><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-countdown" target="_blank" rel="external">项目github</a></p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>需要手动引入，没有传到npm 懒得再维护</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;CountDownText&#125; <span class="keyword">from</span> <span class="string">'react-native-sk-countdown'</span>;</div><div class="line"></div><div class="line">&lt;CountDownText</div><div class="line">    style=&#123;styles.cd&#125;</div><div class="line">    countType='seconds' // 计时类型：seconds / date</div><div class="line">    auto=&#123;true&#125; // 自动开始</div><div class="line">    afterEnd=&#123;() =&gt; &#123;&#125;&#125; // 结束回调</div><div class="line">    timeLeft=&#123;10&#125; // 正向计时 时间起点为0秒</div><div class="line">    step=&#123;-1&#125; // 计时步长，以秒为单位，正数则为正计时，负数为倒计时</div><div class="line">    startText='获取验证码' // 开始的文本</div><div class="line">    endText='获取验证码' // 结束的文本</div><div class="line">    intervalText=&#123;(sec) =&gt; sec + '秒重新获取'&#125; // 定时的文本回调</div><div class="line">  /&gt;</div><div class="line"></div><div class="line">&lt;CountDownText // 倒计时</div><div class="line">    style=&#123;styles.cd&#125;</div><div class="line">    countType='date' // 计时类型：seconds / date</div><div class="line">    auto=&#123;true&#125; // 自动开始</div><div class="line">    afterEnd=&#123;() =&gt; &#123;&#125;&#125; // 结束回调</div><div class="line">    timeLeft=&#123;10&#125; // 正向计时 时间起点为0秒</div><div class="line">    step=&#123;-1&#125; // 计时步长，以秒为单位，正数则为正计时，负数为倒计时</div><div class="line">    startText='' // 开始的文本</div><div class="line">    endText='' // 结束的文本</div><div class="line">    intervalText=&#123;(date, hour, min, sec) =&gt; date + '天' + hour + '时' + min + '分' + sec&#125; // 定时的文本回调</div><div class="line">  /&gt;</div></pre></td></tr></table></figure>
<p><img src="./demo.gif" alt="demo.gif"></p>
<h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><table>
<thead>
<tr>
<th>Prop</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>countType</code></strong></td>
<td>Countdown type, one of ‘seconds’ and ‘date’.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>auto</code></strong></td>
<td>Whether to start countdown right now.</td>
<td><em>false</em></td>
</tr>
<tr>
<td><strong><code>timeLeft</code></strong></td>
<td>Seconds lefted to countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>step</code></strong></td>
<td>Number to increment in each step.</td>
<td><em>-1</em></td>
</tr>
<tr>
<td><strong><code>startText</code></strong></td>
<td>Text before countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>endText</code></strong></td>
<td>Text after countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>intervalText</code></strong></td>
<td>A function to reture a text during countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>afterEnd</code></strong></td>
<td>A callback function after countdown.</td>
<td><em>None</em></td>
</tr>
</tbody>
</table>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
<th>Params</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>start</code></strong></td>
<td>start countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>end</code></strong></td>
<td>finish countdown.</td>
<td><em>None</em></td>
</tr>
</tbody>
</table>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>主要有两个文件，一个是倒计时的逻辑，另一个是夹杂了RN的逻辑。<br><figure class="highlight javascript"><figcaption><span>CountDown.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDown</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">this</span>.setData(props);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取有多少秒</span></div><div class="line">  <span class="keyword">static</span> getSeconds(time) &#123;</div><div class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> time;</div><div class="line">    <span class="keyword">return</span> (type === <span class="string">'number'</span> || type === <span class="string">'string'</span> &amp;&amp; <span class="regexp">/^\d+$/</span>.test(time))</div><div class="line">      ? time</div><div class="line">      : <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() / <span class="number">1000</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 位数补全</span></div><div class="line">  <span class="keyword">static</span> ten(t) &#123;</div><div class="line">    <span class="keyword">return</span> t &lt; <span class="number">10</span>? <span class="string">'0'</span> + t: t;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 设置数据</span></div><div class="line">  setData(props) &#123;</div><div class="line">    <span class="keyword">this</span>.countType = props.countType; <span class="comment">// 支持两种计时方式，两个日期之间 &amp;&amp; 秒数的倒计时</span></div><div class="line">    <span class="keyword">this</span>.timerId = <span class="literal">null</span>; <span class="comment">// 计时器</span></div><div class="line">    <span class="keyword">this</span>.endTime = props.endTime; <span class="comment">// 计时器结束时间</span></div><div class="line">    <span class="keyword">this</span>.startTime = props.startTime; <span class="comment">// 计时器开始时间</span></div><div class="line">    <span class="keyword">this</span>.timeLeft = props.timeLeft; <span class="comment">// 计时器剩余秒数， 区别于上面时间段的计时方式</span></div><div class="line">    <span class="keyword">this</span>.timePassed = <span class="number">0</span>; <span class="comment">// 正向为累计时间，反向为剩余时间</span></div><div class="line">    <span class="keyword">this</span>.onInterval = props.onInterval; <span class="comment">// 定时的回调</span></div><div class="line">    <span class="keyword">this</span>.onEnd = props.onEnd; <span class="comment">// 结束的回调</span></div><div class="line">    <span class="keyword">this</span>.step = props.step; <span class="comment">// 计时步长，以秒为单位，正数为正计时，负数为倒计时</span></div><div class="line">    <span class="keyword">this</span>.counter = <span class="number">0</span>; <span class="comment">// 累加器 TODO 疑问</span></div><div class="line"></div><div class="line">    <span class="comment">// 数据校验</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.countType) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须传入一个 countType: seconds || date'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (</div><div class="line">      (<span class="keyword">this</span>.timeLeft &amp;&amp; (<span class="keyword">this</span>.endTime || <span class="keyword">this</span>.startTime)) ||</div><div class="line">      (!<span class="keyword">this</span>.timeLeft &amp;&amp; !(<span class="keyword">this</span>.endTime || <span class="keyword">this</span>.startTime))</div><div class="line">    ) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须传入一个时间段 [timeLeft] [startTime] [endTime]'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.timeLeft &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>.startTime === <span class="string">'undefined'</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.startTime = <span class="built_in">Date</span>.now()/ <span class="number">1000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.timeLeft) &#123;</div><div class="line">      <span class="keyword">this</span>.timeLeft = <span class="built_in">Math</span>.floor(CountDown.getSeconds(<span class="keyword">this</span>.endTime) - CountDown.getSeconds(<span class="keyword">this</span>.startTime));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.refreshTime(<span class="literal">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 周期启动更新时间</span></div><div class="line">  auto() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.timerId = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">      <span class="comment">// 倒计时到0停止计时</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.timePassed &lt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.step &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">this</span>.end();</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.refreshTime(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    &#125;, <span class="number">1000</span> * <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.step)); <span class="comment">// 时间间隔为整数， 对step求绝对值</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  refreshTime(isStart) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.timePassed  = (<span class="keyword">this</span>.timeLeft * <span class="number">1000</span> + <span class="keyword">this</span>.step * <span class="number">1000</span> * <span class="keyword">this</span>.counter++) / <span class="number">1000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.countType === <span class="string">'date'</span>) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> _timePassed = <span class="keyword">this</span>.timePassed,</div><div class="line">        second = CountDown.ten(_timePassed % <span class="number">60</span>);</div><div class="line">      _timePassed = <span class="built_in">parseInt</span>(_timePassed / <span class="number">60</span>);</div><div class="line">      <span class="keyword">let</span> minute = CountDown.ten(_timePassed % <span class="number">60</span>);</div><div class="line">      _timePassed = <span class="built_in">parseInt</span>(_timePassed / <span class="number">60</span>);</div><div class="line">      <span class="keyword">let</span> hour = CountDown.ten(_timePassed % <span class="number">24</span>);</div><div class="line">      _timePassed = CountDown.ten(<span class="built_in">parseInt</span>(_timePassed / <span class="number">24</span>));</div><div class="line">      <span class="keyword">this</span>.onInterval(_timePassed,hour,minute, second);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.countType === <span class="string">'seconds'</span>) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.onInterval(<span class="keyword">this</span>.timePassed);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isStart &amp;&amp; <span class="keyword">this</span>.auto(); <span class="comment">// 是否开始计时</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 开始计时</span></div><div class="line">  start() &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timerId);</div><div class="line">    <span class="keyword">this</span>.refreshTime(<span class="literal">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 结束： 没有清空计数 + 停止计时</span></div><div class="line">  end() &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timerId);</div><div class="line">    <span class="keyword">this</span>.onEnd(<span class="keyword">this</span>.timeLeft);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reset() &#123;</div><div class="line">    <span class="keyword">this</span>.counter = <span class="number">0</span>;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timerId);</div><div class="line">    <span class="keyword">this</span>.refreshTime(<span class="literal">false</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>CountDownText.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> CountDown <span class="keyword">from</span> <span class="string">'./CountDown'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDownText</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">text</span>: <span class="keyword">this</span>.props.startText,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  counter= <span class="literal">null</span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> isTimeEquals(t1, t2) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(t1 - t2) &lt; <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillReceiveProps(nextProps) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> updating = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 倒计时的情况</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.step === nextProps.step &amp;&amp; <span class="keyword">this</span>.props.step &lt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.endTime) &#123;</div><div class="line">        <span class="comment">// 1. 按起始日期来计时</span></div><div class="line">        updating = !CountDownText.isTimeEquals(<span class="keyword">this</span>.props.endTime, nextProps.endTime);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 2. 按间隔秒数来计时</span></div><div class="line">        updating = !CountDownText.isTimeEquals(nextProps.timeLeft, <span class="keyword">this</span>.counter.timePassed);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (updating) &#123;</div><div class="line">      <span class="comment">// 重置： 清空计数 + 停止计时</span></div><div class="line">      <span class="keyword">this</span>.counter.reset();</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.counter.setData(<span class="built_in">Object</span>.assign(&#123;&#125;, nextProps, &#123;</div><div class="line">        <span class="attr">onInterval</span>: <span class="keyword">this</span>.onInterval.bind(<span class="keyword">this</span>),</div><div class="line">        <span class="attr">onEnd</span>: <span class="keyword">this</span>.onEnd.bind(<span class="keyword">this</span>),</div><div class="line">      &#125;));</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (nextProps.auto) &#123;</div><div class="line">        <span class="keyword">this</span>.start();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.counter =  <span class="keyword">new</span> CountDown(<span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.props, &#123;</div><div class="line">      <span class="attr">onInterval</span>: <span class="keyword">this</span>.onInterval.bind(<span class="keyword">this</span>),</div><div class="line">      <span class="attr">onEnd</span>: <span class="keyword">this</span>.onEnd.bind(<span class="keyword">this</span>),</div><div class="line">    &#125;));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.counter.timeLeft &lt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.counter.step &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.end();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.auto) <span class="keyword">this</span>.start();</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="keyword">this</span>.reset();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  start() &#123;</div><div class="line">    <span class="keyword">this</span>.counter.start();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  end() &#123;</div><div class="line">    <span class="keyword">this</span>.counter.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reset() &#123;</div><div class="line">    <span class="keyword">this</span>.counter.reset();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;this.props.style&#125;</span>&gt;</span> &#123;this.state.text&#125; <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getTimePassed() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.counter.timePassed;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onInterval(...args) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">text</span>: <span class="keyword">this</span>.props.intervalText.apply(<span class="literal">null</span>, args)&#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onEnd(timePassed) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">text</span>: <span class="keyword">this</span>.props.endText,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.props.afterEnd(timePassed);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">CountDownText.defaultProps = &#123;</div><div class="line">  <span class="attr">countType</span>: <span class="string">'seconds'</span>,</div><div class="line">  <span class="attr">onEnd</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">timeLeft</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">step</span>: <span class="number">-1</span>,</div><div class="line">  <span class="attr">startText</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">intervalText</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">endText</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">auto</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">afterEnd</span>: <span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> CountDownText;</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>大量借鉴 <a href="https://github.com/shigebeyond/react-native-sk-countdown" target="_blank" rel="external">https://github.com/shigebeyond/react-native-sk-countdown</a> 项目</p>
<p>其实说白了只是在原来代码上优化改进，主要兼容新版的<code>React-Native</code>、<code>React</code> 和用 <code>ES6</code>语法改写。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端浏览器默认请求 apple-touch-icon.png 问题]]></title>
      <url>https://jsonz1993.github.io/2017/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%AF%B7%E6%B1%82-apple-touch-icon-png-%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>项目有做埋点与请求的记录， 早上发现有用户老是会请求一个<code>location.origin + &quot;/apple-touch-icon.png&quot;</code> 或 <code>location.origin + &quot;/apple-touch-icon-76x76.png&quot;</code>的问题。</p>
<p>这就很纳闷了， 首先，按照我们的代码风格是不会出现 根目录指向的图片 而且后台也不会输出这么系统化的图片名。</p>
<p>一看就知道是 <code>apple</code> 搞的鬼。</p>
<p>于是乎 <code>google</code> 了一下 大概就是ios8及以上<code>safari</code>浏览器的保存桌面操作请求的一张图，用于做icon。</p>
<h2 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h2><p><img src="./1.jpeg" alt="1.jpeg"><br><img src="./2.jpeg" alt="2.jpeg"><br><img src="./3.jpeg" alt="3.jpeg"></p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>可以在head加上这段<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/custom_icon.png"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果要更加精准一点，根据设备来用不同的icon，则可以这样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"touch-icon-iphone.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"152x152"</span> <span class="attr">href</span>=<span class="string">"touch-icon-ipad.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"180x180"</span> <span class="attr">href</span>=<span class="string">"touch-icon-iphone-retina.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"167x167"</span> <span class="attr">href</span>=<span class="string">"touch-icon-ipad-retina.png"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果没有找到符合设备的尺寸，那么会优先选用比预期尺寸大的最小图标。<br>比如设备的适当图标大小为58 x 58，系统会按照下面寻找</p>
<ul>
<li>apple-touch-icon-80x80.png</li>
<li>apple-touch-icon.png</li>
</ul>
<p>默认是去更目录寻找，不过你可以指定一个路径。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><a href="https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="external">更多资料</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工作日常 吸顶效果]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8-%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>吸顶 最常见的就是我们平时网站浏览的时候，下滑到某个程度之后 导航栏就固定到顶部而不随页面滚动而滚动（简单而言就是 fixed 布局 ).<br>最常见的实现方式思路就是 判断页面滚动高度，到某个高度的时候就让这个div改变定位方式</p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>引入 jq ，并加一判断，如果jq(zepto) 没有 outerHeight/outerWidth 手动实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'./jquery-2.1.1'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 如果没有 outerWidth 或 outerHeight 手动实现outerWidth &amp;&amp; outerHeight</span></div><div class="line">(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> $.outerHeight === <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  [<span class="string">'height'</span>, <span class="string">'width'</span>].forEach(<span class="function"><span class="params">dimension</span>=&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> Dimension = dimension.replace(<span class="regexp">/./</span>, m=&gt; m[<span class="number">0</span>].toUpperCase());</div><div class="line"></div><div class="line">    $.fn[<span class="string">'outer'</span> + Dimension] = <span class="function"><span class="keyword">function</span>(<span class="params">margin</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">let</span> size = <span class="keyword">this</span>[dimension](),</div><div class="line">          sides = &#123;</div><div class="line">            <span class="string">'width'</span>: [<span class="string">'left'</span>, <span class="string">'right'</span>],</div><div class="line">            <span class="string">'height'</span>: [<span class="string">'top'</span>, <span class="string">'bottom'</span>],</div><div class="line">          &#125;;</div><div class="line"></div><div class="line">        sides[dimension].forEach(<span class="function"><span class="params">side</span>=&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (margin) size += <span class="built_in">parseInt</span>(<span class="keyword">this</span>.css(<span class="string">'margin-'</span> + side), <span class="number">10</span>);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>实现代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fixedTop = &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * @param el 具体要 fixed 的 dom 的字符串或jqueryDom 或dom</div><div class="line">   * @param opts 其他配置，目前只有 hold 是否要生成一个占位div防止div 脱离文档流后兄弟节点抖动</div><div class="line">   */</div><div class="line">  init(el, opts=&#123; <span class="attr">hold</span>: <span class="literal">true</span>&#125;) &#123;</div><div class="line">  	<span class="comment">// 初始化需要的el</span></div><div class="line">    <span class="keyword">this</span>.$el = el <span class="keyword">instanceof</span> $? el: $(el);</div><div class="line"></div><div class="line">	<span class="comment">// 获取后面要改变样式的具体参数</span></div><div class="line">    <span class="keyword">let</span> offset = <span class="keyword">this</span>.$el.offset();</div><div class="line">    <span class="keyword">this</span>.offsetTop = offset.top;</div><div class="line">    <span class="keyword">this</span>.defaultHeight = <span class="keyword">this</span>.$el.outerHeight(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.defaultState = &#123;</div><div class="line">      <span class="attr">position</span>: <span class="keyword">this</span>.$el.css(<span class="string">'position'</span>),</div><div class="line">      <span class="attr">width</span>: <span class="keyword">this</span>.$el.css(<span class="string">'width'</span>) || <span class="string">'auto'</span>,</div><div class="line">      <span class="attr">top</span>: <span class="keyword">this</span>.$el.css(<span class="string">'top'</span>) || <span class="string">'auto'</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.changeState = &#123;</div><div class="line">      <span class="attr">position</span>: <span class="string">'fixed'</span>,</div><div class="line">      <span class="attr">width</span>: <span class="keyword">this</span>.$el.outerWidth(),</div><div class="line">      <span class="attr">top</span>: <span class="string">'0'</span>,</div><div class="line">      <span class="attr">left</span>: offset.left,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 如果有 hodl 参数， 配置好要生成的 占位dom</span></div><div class="line">    <span class="keyword">this</span>.holdEl = opts.hold? <span class="string">`&lt;div class="J-fixedTop-pad" style="height:<span class="subst">$&#123;<span class="keyword">this</span>.defaultHeight&#125;</span>px; visibility: hidden;"&gt;&lt;/div&gt;`</span>: <span class="string">''</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 绑定事件</span></div><div class="line">    <span class="keyword">this</span>.bindEvent();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  bindEvent() &#123;</div><div class="line">    <span class="keyword">let</span> $win = $(<span class="built_in">window</span>);</div><div class="line">    $win.scroll(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> isTop = ($win.scrollTop() - <span class="keyword">this</span>.offsetTop) &gt;= <span class="number">0</span>,</div><div class="line">        isFixed = <span class="keyword">this</span>.$el.data(<span class="string">'fixed'</span>);</div><div class="line"></div><div class="line">	  <span class="comment">// 判断 如果大于top 并且当前的dom元素没有被改变样式，则执行逻辑</span></div><div class="line">      <span class="keyword">if</span> (isTop &amp;&amp; !isFixed) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.$el.data(<span class="string">'fixed'</span>, <span class="literal">true</span>);</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.$el.next().hasClass(<span class="string">'J-fixedTop-pad'</span>)) &#123;</div><div class="line">          <span class="keyword">this</span>.$el.after(<span class="keyword">this</span>.holdEl);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.addCss();</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isTop &amp;&amp; isFixed)&#123;</div><div class="line"></div><div class="line">      	<span class="comment">// 反之 还原dom样式</span></div><div class="line"></div><div class="line">        <span class="keyword">this</span>.$el.data(<span class="string">'fixed'</span>, <span class="literal">false</span>);</div><div class="line">        <span class="keyword">this</span>.removeCss();</div><div class="line">        <span class="keyword">this</span>.holdEl &amp;&amp; <span class="keyword">this</span>.$el.next().remove();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  addCss() &#123;</div><div class="line">    <span class="keyword">this</span>.$el.css(<span class="keyword">this</span>.changeState);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  removeCss() &#123;</div><div class="line">    <span class="keyword">this</span>.$el.css(<span class="keyword">this</span>.defaultState);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fixedTop.init(<span class="string">'#div'</span>);</div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>很简单的小需求， 是在工作中看到小伙伴的脚本后改进的。 主要是之前没有想到要生成一个占位dom来防止后面的抖动<br><a href="https://github.com/jsonz1993/wheel/tree/master/fixedTop" target="_blank" rel="external">项目源码链接</a></p>
<p>目前只支持吸顶， 后面可以对代码改造，改成可以支持左右上下的</p>
<p>然后有一个css样式可以直接达到这个效果，但是兼容性不乐观， 对布局也有所要求，有兴趣的可以去了解一下.<br><a href="https://mdn.mozillademos.org/en-US/docs/Web/CSS/position$samples/Sticky_positioning?revision=1248065" target="_blank" rel="external">sticky demo</a>。<br><a href="http://caniuse.com/#search=sticky" target="_blank" rel="external">sticky caniuse</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios body事件委托的坑]]></title>
      <url>https://jsonz1993.github.io/2017/05/ios-body%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>部门老大: 这个套餐怎么超出一屏之后点击没反应的…</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>有一个<code>套餐列表</code>是靠接口异步渲染的，所以事件我直接绑定在<code>body</code>上，通过事件委托去触发。<br>这原本没什么问题， 要命的是 <strong>reset.css</strong> 中把 <code>body, html</code> 高度设置为 100%。 这就可能出现下面的情况</p>
<p><img src="./body_100.png" alt="body_100"><br><img src="./body_bug.PNG" alt="body_bug.PNG"></p>
<p>页面过长，拉上去的时候 <code>body</code> 只有 <code>100%</code> 高度，没有覆盖到下面， 所以这时候点击下面的套餐，不算是点击到body上 委托也就无从下手。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法很简单…. 只需要在页面重置掉那个样式即可 如 <code>body=&gt; height: auto</code>。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios9 下 domArray forEach 报错]]></title>
      <url>https://jsonz1993.github.io/2017/05/ios9-%E4%B8%8B-domArray-forEach-%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<p>起因是这样的，产品需求需要输入框输入后，要根据内容高度自适应，最高不能超过3行， 于是写了一个小函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> textareaAutoHeight = <span class="function">(<span class="params">className, &#123;multiple=<span class="number">3</span>&#125;=&#123;&#125;</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">let</span> domList = <span class="built_in">document</span>.querySelectorAll(className);</div><div class="line">    </div><div class="line">    domList.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> _height = item.offsetHeight;</div><div class="line">        <span class="comment">// item.offsetHeight 用zepto 的 height保险一点</span></div><div class="line">        item.addEventListener(<span class="string">'keyup'</span>, (e)=&gt; updateHeight(e, _height*multiple));</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateHeight</span>(<span class="params">e, _height</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> o = e.target;</div><div class="line">        o.style.height = <span class="string">'1px'</span>;</div><div class="line">        o.style.height = <span class="built_in">Math</span>.min(o.scrollHeight, _height) + <span class="string">'px'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传入dom标识加上行数，用的很开心。没毛病 没问题。</p>
<p>项目上线后，发现说在某些机型下会报错，后面排查到是这个函数的错。<br>原因是 ios9 一下。 domList 不是一个数组。</p>
<p>所以改动了一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> textareaAutoHeight = <span class="function">(<span class="params">className, &#123;multiple=<span class="number">3</span>&#125;=&#123;&#125;</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">let</span> domList = [...document.querySelectorAll(className)];</div><div class="line">    </div><div class="line">        domList.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> _height = item.offsetHeight;</div><div class="line">            <span class="comment">// item.offsetHeight 用zepto 的 height保险一点</span></div><div class="line">            item.addEventListener(<span class="string">'keyup'</span>, (e)=&gt; updateHeight(e, _height*multiple));</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateHeight</span>(<span class="params">e, _height</span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> o = e.target;</div><div class="line">            o.style.height = <span class="string">'1px'</span>;</div><div class="line">            o.style.height = <span class="built_in">Math</span>.min(o.scrollHeight, _height) + <span class="string">'px'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123; <span class="built_in">console</span>.warn(<span class="string">'JSONZ textareaAutoHeight'</span>, e)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加了一个 <code>try...catch...</code> 并且把 domList 用es6转为数组类型.</p>
<p>以后写工具类方法，尽量加多一个 <code>try..catch...</code> 至少保证不影响主流程</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack 代码分割(异步加载加快首屏速度)]]></title>
      <url>https://jsonz1993.github.io/2017/05/webpack-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2-%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E5%8A%A0%E5%BF%AB%E9%A6%96%E5%B1%8F%E9%80%9F%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>对于单页应用，将所有代码打包成一个文件，可以减少网络请求，并且后面页面不需要再去加载js 可以减少白页时间。 但是对于首页需要快速加载的情况，我们可能需要重新考虑一下， 是否可以把一些不需要第一时间执行的代码异步加载进来。</p>
<p>Webpack有一个功能可以将您的代码库分解成按需加载的“块”，这个功能叫 <code>代码分割</code>。</p>
<p>Webpack的对于<code>块</code>的执行是， 异步创建<code>&lt;script&gt;</code>标签，把需要加载的脚本加载进来再执行。</p>
<p>具体有两种使用方法:</p>
<ul>
<li><code>CommonJs: require.ensure</code></li>
<li><code>AMD: require</code><br><code>ES6 Modules</code> 暂不支持</li>
</ul>
<h1 id="AMD-require"><a href="#AMD-require" class="headerlink" title="AMD: require"></a>AMD: require</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(dependencies, callback)</div><div class="line"></div><div class="line"><span class="built_in">require</span>([<span class="string">"module-a"</span>, <span class="string">"module-b"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>dependencies: 模块依赖数组</li>
<li>callback: 回调函数</li>
</ul>
<h1 id="CommonJs-require-ensure"><a href="#CommonJs-require-ensure" class="headerlink" title="CommonJs: require.ensure"></a>CommonJs: require.ensure</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure(dependencies, callback, chunkName);</div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"module-a"</span>, <span class="string">"module-b"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"module-a"</span>);</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>dependencies: 依赖的模块数组</li>
<li>callback: 回调函数，该函数调用时会传一个require参数</li>
<li>chunkName: 模块名，用于构建时生成文件时命名使用</li>
</ul>
<p>对于 <code>CommonJs</code> 方法， 个人在项目中都是这么用的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure([],<span class="built_in">require</span>=&gt;&#123;</div><div class="line">	<span class="keyword">const</span> menuBar = <span class="built_in">require</span>(<span class="string">'./menuBar'</span>);</div><div class="line">	<span class="keyword">const</span> upcomingTrips = <span class="built_in">require</span>(<span class="string">'./upcomingTrips'</span>);</div><div class="line">	<span class="built_in">require</span>(<span class="string">'./c'</span>);</div><div class="line"></div><div class="line">	menuBar.init();</div><div class="line">	upcomingTrips.init();</div><div class="line">&#125;,<span class="string">'index_later'</span>);</div></pre></td></tr></table></figure>
<p>依赖不写<code>dependencies</code> 而是直接写在 回调里面。 因为<code>webpack</code>会去递归拿依赖模块，所以就算我 <code>menuBar</code>里面依赖到其他模块，也会被下载下来 所以问题不大。 但是如果对于多模块互相依赖的情况，建议按照官方demo写法 防止重复嵌套打包。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cookie.js 简单的cookie操作插件]]></title>
      <url>https://jsonz1993.github.io/2017/05/cookie-js-%E7%AE%80%E5%8D%95%E7%9A%84cookie%E6%93%8D%E4%BD%9C%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>对操作cookie做一些接口, 包括 <code>set</code>, <code>get</code>, <code>remove</code>, <code>clear</code>, <code>getAll</code> 等， 都支持批量处理。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取</span></div><div class="line">Cookie.get(<span class="string">'name'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置</span></div><div class="line">Cookie.set(&#123;<span class="attr">key</span>: val, <span class="attr">key1</span>: val1&#125;, opts);</div><div class="line">Cookie.set(<span class="string">'key'</span>, <span class="string">'val'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 移除某个值</span></div><div class="line">Cookie.remove(name);</div><div class="line">Cookie.remove([name1, name2]);</div><div class="line"></div><div class="line"><span class="comment">// 清除Cookie</span></div><div class="line">Cookie.clear();</div><div class="line"></div><div class="line"><span class="comment">// 获取所有cookie</span></div><div class="line">Cookie.getAll(); <span class="comment">// &#123;key: val&#125;</span></div></pre></td></tr></table></figure>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>设置cookie, 如果之前没有接触过cookie.set 可以参考文档 <a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/cookies/set" target="_blank" rel="external">https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/cookies/set</a></p>
<p>添加cookie比较特殊，直接用 <code>document.cookie = 你要设置的cookie</code> 就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">set(name, value, opts) &#123;</div><div class="line">	<span class="keyword">if</span> (isObject(name)) &#123;</div><div class="line">	  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> name) &#123;</div><div class="line">	    <span class="keyword">if</span> (name.hasOwnProperty(key)) <span class="keyword">this</span>.set(key, name[key], value);</div><div class="line">	  &#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	  <span class="keyword">let</span> opt = isObject(opts)? opts: &#123; <span class="attr">expires</span>: opts&#125;,</div><div class="line">	    expires = <span class="keyword">typeof</span> opt.expires === <span class="string">'undefined'</span>? <span class="string">''</span>: opt.expires,</div><div class="line">	    expiresType = <span class="keyword">typeof</span> expires,</div><div class="line">	    path = <span class="keyword">typeof</span> opt.path === <span class="string">'undefined'</span>? <span class="string">';path=/'</span>: <span class="string">`;path=<span class="subst">$&#123;opt.path&#125;</span>`</span>,</div><div class="line">	    domain = opt.domain? <span class="string">`;domain=<span class="subst">$&#123;opt.domain&#125;</span>`</span>: <span class="string">''</span>,</div><div class="line">	    secure = opt.secure? <span class="string">';secure'</span>: <span class="string">''</span>;</div><div class="line"></div><div class="line">	  <span class="keyword">if</span> (expiresType === <span class="string">'string'</span> &amp;&amp; expires) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(expires);</div><div class="line">	  <span class="keyword">else</span> <span class="keyword">if</span> (expiresType === <span class="string">'number'</span>) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">new</span> <span class="built_in">Date</span> + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * expires);</div><div class="line">	  <span class="keyword">if</span> (expires !== <span class="string">''</span> &amp;&amp; <span class="string">'toGMTString'</span> <span class="keyword">in</span> expires) expires = <span class="string">';expires='</span> + expires.toGMTString();</div><div class="line"></div><div class="line">	  <span class="built_in">document</span>.cookie = [name, <span class="string">'='</span>, <span class="built_in">encodeURI</span>(value), expires, path, domain, secure].join(<span class="string">''</span>);</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>获取cookie 其实就是遍历 <code>document.cookie</code> 然后根据 <code>name</code> 去匹配</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">get(name) &#123;</div><div class="line">	<span class="keyword">let</span> cookieName = name + <span class="string">'='</span>,</div><div class="line">	  ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ca.length; i++) &#123;</div><div class="line">	  <span class="keyword">let</span> cItem = (ca[i][<span class="number">0</span>] === <span class="string">' '</span>)? ca[i].slice(<span class="number">1</span>): ca[i];</div><div class="line">	  <span class="keyword">if</span> (cItem.indexOf(cookieName) === <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">decodeURI</span>(cItem.substr(cookieName.length+<span class="number">1</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>移除cookie其实就是把这个cookie 设置为过期。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">remove(name) &#123;</div><div class="line">   <span class="keyword">let</span> names = <span class="built_in">Array</span>.isArray(name)? name: [name];</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; names.length; i++) &#123;</div><div class="line">     <span class="keyword">this</span>.set(names[i], <span class="string">''</span>, <span class="number">-1</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> names;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>遍历<code>document.cookie</code> 把所有的cookie 调用一次<code>remove</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clear(name) &#123;</div><div class="line">   <span class="keyword">return</span> name? <span class="keyword">this</span>.remove(name): <span class="keyword">this</span>.remove(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.getAll()));</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="getAll"><a href="#getAll" class="headerlink" title="getAll"></a>getAll</h3><p>获取本地所有的cookie， 返回 <code>{key: value}</code> 形式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getAll() &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="built_in">document</span>.cookie === <span class="string">''</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">   <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>), result = &#123;&#125;;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; cookies.length; i++) &#123;</div><div class="line">     <span class="keyword">let</span> item = cookies[i].split(<span class="string">'='</span>);</div><div class="line">     result[<span class="built_in">decodeURI</span>(item[<span class="number">0</span>])] = <span class="built_in">decodeURI</span>(item[<span class="number">1</span>]);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/jsonz1993/wheel/tree/master/cookie" target="_blank" rel="external">Jsonz-github</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> isObject = <span class="function"><span class="params">obj</span>=&gt;</span> !!value &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Object]'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Cookie = &#123;</div><div class="line">  get(name) &#123;</div><div class="line">    <span class="keyword">let</span> cookieName = name + <span class="string">'='</span>,</div><div class="line">      ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ca.length; i++) &#123;</div><div class="line">      <span class="keyword">let</span> cItem = (ca[i][<span class="number">0</span>] === <span class="string">' '</span>)? ca[i].slice(<span class="number">1</span>): ca[i];</div><div class="line">      <span class="keyword">if</span> (cItem.indexOf(cookieName) === <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">decodeURI</span>(cItem.substr(cookieName.length+<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  set(name, value, opts) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isObject(name)) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> name) &#123;</div><div class="line">        <span class="keyword">if</span> (name.hasOwnProperty(key)) <span class="keyword">this</span>.set(key, name[key], value);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">let</span> opt = isObject(opts)? opts: &#123; <span class="attr">expires</span>: opts&#125;,</div><div class="line">        expires = <span class="keyword">typeof</span> opt.expires === <span class="string">'undefined'</span>? <span class="string">''</span>: opt.expires,</div><div class="line">        expiresType = <span class="keyword">typeof</span> expires,</div><div class="line">        path = <span class="keyword">typeof</span> opt.path === <span class="string">'undefined'</span>? <span class="string">';path=/'</span>: <span class="string">`;path=<span class="subst">$&#123;opt.path&#125;</span>`</span>,</div><div class="line">        domain = opt.domain? <span class="string">`;domain=<span class="subst">$&#123;opt.domain&#125;</span>`</span>: <span class="string">''</span>,</div><div class="line">        secure = opt.secure? <span class="string">';secure'</span>: <span class="string">''</span>;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (expiresType === <span class="string">'string'</span> &amp;&amp; expires) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(expires);</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (expiresType === <span class="string">'number'</span>) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">new</span> <span class="built_in">Date</span> + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * expires);</div><div class="line">      <span class="keyword">if</span> (expires !== <span class="string">''</span> &amp;&amp; <span class="string">'toGMTString'</span> <span class="keyword">in</span> expires) expires = <span class="string">';expires='</span> + expires.toGMTString();</div><div class="line"></div><div class="line">      <span class="built_in">document</span>.cookie = [name, <span class="string">'='</span>, <span class="built_in">encodeURI</span>(value), expires, path, domain, secure].join(<span class="string">''</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  remove(name) &#123;</div><div class="line">    <span class="keyword">let</span> names = <span class="built_in">Array</span>.isArray(name)? name: [name];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; names.length; i++) &#123;</div><div class="line">      <span class="keyword">this</span>.set(names[i], <span class="string">''</span>, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> names;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  clear(name) &#123;</div><div class="line">    <span class="keyword">return</span> name? <span class="keyword">this</span>.remove(name): <span class="keyword">this</span>.remove(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.getAll()));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  getAll() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie === <span class="string">''</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">    <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>), result = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; cookies.length; i++) &#123;</div><div class="line">      <span class="keyword">let</span> item = cookies[i].split(<span class="string">'='</span>);</div><div class="line">      result[<span class="built_in">decodeURI</span>(item[<span class="number">0</span>])] = <span class="built_in">decodeURI</span>(item[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/jaywcjlove/cookie.js" target="_blank" rel="external">https://github.com/jaywcjlove/cookie.js</a><br><a href="https://developer.mozilla.org/en-US/search?q=cookie" target="_blank" rel="external">https://developer.mozilla.org/en-US/search?q=cookie</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CORS 跨域资源共享]]></title>
      <url>https://jsonz1993.github.io/2017/05/CORS-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）</p>
<blockquote>
<p>出于安全考虑，浏览器会限制某些跨域请求。</p>
</blockquote>
<p>而 cors 允许浏览器想跨源服务器发起 <code>XMLHttpRequest</code> 和 <code>Fetch</code> 接口请求。</p>
<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。</p>
<p>那么浏览器是根据什么规则来判定是否为同源呢</p>
<p><code>http://www.zuzuche.com:80</code></p>
<ul>
<li>协议: http</li>
<li>端口: 80 (默认为80 如果没写 浏览器会帮我们做这些工作)</li>
<li>域名 www.zuzuche.com</li>
</ul>
<p>如果协议， 端口， 域名一致，那么浏览器就会认定我们是在同个源下面。否则就会出现跨域问题。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">具体文档等可见</a></p>
<h3 id="简单请求与非简单请求"><a href="#简单请求与非简单请求" class="headerlink" title="简单请求与非简单请求"></a>简单请求与非简单请求</h3><p>简单请求指的是</p>
<ul>
<li>请求方法是以下方法之一<ul>
<li>GET</li>
<li>POST</li>
<li>HEAD</li>
</ul>
</li>
<li>不自定义某些头部字段<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type （需要注意额外的限制）</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
<li>Content-Type 为以下值之一<ul>
<li>application/x-www-form-urlencoded</li>
<li>multipart/form-data</li>
<li>text/plain</li>
</ul>
</li>
</ul>
<p>非简单请求(预检请求)指的是</p>
<ul>
<li>使用了下面任一HTTP方法：<ul>
<li>PUT</li>
<li>DELETE</li>
<li>CONNECT</li>
<li>OPTIONS</li>
<li>TRACE</li>
<li>PATCH</li>
</ul>
</li>
<li>人为设置某些头部字段<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type (but note the additional requirements below)</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
<li>Content-Type的值不属于下列之一<ul>
<li>application/x-www-form-urlencoded</li>
<li>multipart/form-data</li>
<li>text/plain</li>
</ul>
</li>
</ul>
<h4 id="发起一个简单的请求"><a href="#发起一个简单的请求" class="headerlink" title="发起一个简单的请求"></a>发起一个简单的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">''</span>);</div></pre></td></tr></table></figure>
<p>此时会发起一个简单请求，和我们平时写的<code>ajax</code>没多大区别</p>
<h4 id="发起一个非简单请求"><a href="#发起一个非简单请求" class="headerlink" title="发起一个非简单请求"></a>发起一个非简单请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var invocation = new XMLHttpRequest();</div><div class="line">var url = &apos;http://bar.other/resources/post-here/&apos;;</div><div class="line">var body = &apos;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;&apos;;</div><div class="line">    </div><div class="line">function callOtherDomain()&#123;</div><div class="line">  if(invocation)</div><div class="line">    &#123;</div><div class="line">      invocation.open(&apos;POST&apos;, url, true);</div><div class="line">      invocation.setRequestHeader(&apos;X-PINGOTHER&apos;, &apos;pingpong&apos;);</div><div class="line">      invocation.setRequestHeader(&apos;Content-Type&apos;, &apos;application/xml&apos;);</div><div class="line">      invocation.onreadystatechange = function()&#123;&#125;;</div><div class="line">      invocation.send(body); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">callOtherDomain();</div></pre></td></tr></table></figure>
<p>此时发起的是一个非简单请求，所以浏览器会先发一个<code>options</code>请求服务器，以获知浏览器是否允许实际请求，如果允许再会发多一个真实请求。<br><img src="./options请求.png" alt="options"></p>
<h4 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h4><p>我们要跨域获取资源，主要要后台人员配合。</p>
<p>一般情况我们只需要把报错信息给后台人员看就知道怎么做了，比如我直接调用 报了一个跨域问题</p>
<blockquote>
<p>Fetch API cannot load <a href="https://www.baidu.com/" target="_blank" rel="external">https://www.baidu.com/</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="https://developer.mozilla.org" target="_blank" rel="external">https://developer.mozilla.org</a>‘ is therefore not allowed access. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.</p>
</blockquote>
<p>直接把错误丢给后台人员，他们就知道设置一个属性 <code>Access-Control-Allow-Origi</code> 一般设置为 <code>*</code> 谁都可以访问 也可以根据情景设定特定的域名。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> work </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取滚动条宽度]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E8%8E%B7%E5%8F%96%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%AE%BD%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p>平时工作的时候，我们经常会遇到需要全局 <code>loading 加 遮罩层</code> 的功能。这时候一般会设置 <code>body { overflow: hidden }</code> 防止页面滚动。</p>
<p>但是在 pc 端 如果一个页面有滚动条，突然给设置为没有的话， 可能会出现抖动的现象。 所以我们的解决思路是 在设置样式之后，给body(也可以是其他) 加多一个 <code>padding-right</code>来填充原本滚动条的宽度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollBarWidth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">    styles = &#123;</div><div class="line">      <span class="attr">width</span>: <span class="string">'100px'</span>,</div><div class="line">      <span class="attr">height</span>: <span class="string">'10px'</span>,</div><div class="line">      <span class="attr">overflow</span>: <span class="string">'scroll'</span></div><div class="line">    &#125;, scrollWidth = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> styles) &#123;</div><div class="line">    div.style[key] = styles[key];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(div);</div><div class="line">  scrollWidth = div.offsetWidth - div.clientWidth;</div><div class="line">  div.remove();</div><div class="line">  <span class="keyword">return</span> scrollWidth;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 伪代码思路</span></div><div class="line">&#123;</div><div class="line">  body.overflow = hidden;</div><div class="line">  body.paddingRight += getScrollBarWidth();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端长按弹出复制等选项设置]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%95%BF%E6%8C%89%E5%BC%B9%E5%87%BA%E5%A4%8D%E5%88%B6%E7%AD%89%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>今儿产品大佬吐槽一句:</p>
<blockquote>
<p>在手机端<code>chrome</code> 浏览器下 点一个文字老是要弹出一个让我划词 好烦。能不能让他不要弹出那些东西来</p>
</blockquote>
<p>其实现在很多的 app 内嵌 h5 页面都是喜欢把手机默认的长按弹出菜单[选择， 复制， 剪切] 等禁掉。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 给所有样式都加上进制弹出长按菜单属性。</div><div class="line">* &#123;</div><div class="line">	-webkit-user-select: none;</div><div class="line">	user-select: none;	</div><div class="line">&#125;</div><div class="line">// 记得要给表单排除，一般表单都有复制黏贴的需求</div><div class="line">input,textarea &#123;-webkit-user-select: text;user-select: text;&#125;</div></pre></td></tr></table></figure>
<p>兼容问题 移动端基本兼容</p>
<iframe height="498" width="100%" src="http://caniuse.com/#search=user-select" frameborder="0" allowfullscreen></iframe>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native 错误总结]]></title>
      <url>https://jsonz1993.github.io/2017/05/React-Native-%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="No-bundle-URL-present"><a href="#No-bundle-URL-present" class="headerlink" title="No bundle URL present."></a>No bundle URL present.</h2><p><img src="./no_bundle_url_present.png" alt="no_bundle_url_present"><br><a href="https://github.com/facebook/react-native/issues/12754" target="_blank" rel="external">github issues</a></p>
<p>项目创建大概一个月了，最近突然想再捡起<code>react-native</code>学习， 直接跑<code>react-native run-ios</code>就报红屏 <strong>No bundle URL present.</strong><br>github 上的 issues 给出了几种解决方法。</p>
<h3 id="重新安装依赖"><a href="#重新安装依赖" class="headerlink" title="重新安装依赖"></a>重新安装依赖</h3><ul>
<li>Run “react-native run-ios”</li>
<li>When the error appears, run “npm install”</li>
<li>Then run “react-native run-ios” again.</li>
</ul>
<h3 id="adding-NSAllowsLocalNetworking-to-Info-plist"><a href="#adding-NSAllowsLocalNetworking-to-Info-plist" class="headerlink" title="adding NSAllowsLocalNetworking to Info.plist"></a>adding NSAllowsLocalNetworking to Info.plist</h3><p>这个解决方法慎重，如果修改了没有解决 请还原该代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</div><div class="line">	&lt;dict&gt;</div><div class="line">		&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</div><div class="line">		&lt;true/&gt;</div><div class="line">		&lt;key&gt;NSAllowsArbitraryLoadsInWebContent&lt;/key&gt;</div><div class="line">		&lt;true/&gt;</div><div class="line">		&lt;key&gt;NSAllowsLocalNetworking&lt;/key&gt;</div><div class="line">		&lt;true/&gt;</div><div class="line">	&lt;/dict&gt;</div><div class="line">&lt;/key&gt;</div></pre></td></tr></table></figure></p>
<h3 id="8081端口被占用"><a href="#8081端口被占用" class="headerlink" title="8081端口被占用"></a>8081端口被占用</h3><p>mac下kill 该接口，再重新跑 <code>run-ios</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo lsof -i :8071</div><div class="line">kill -9 &lt;PID&gt;</div></pre></td></tr></table></figure>
<h3 id="在-xCode-中启动项目"><a href="#在-xCode-中启动项目" class="headerlink" title="在 xCode 中启动项目"></a>在 xCode 中启动项目</h3><h3 id="删除本地项目中的-ios-build-重新跑-run-ios-build项目"><a href="#删除本地项目中的-ios-build-重新跑-run-ios-build项目" class="headerlink" title="删除本地项目中的 ios/build 重新跑 run-ios build项目"></a>删除本地项目中的 <code>ios/build</code> 重新跑 <code>run-ios</code> build项目</h3><h3 id="关闭本地代理，或者设置不去代理-127-0-0-1"><a href="#关闭本地代理，或者设置不去代理-127-0-0-1" class="headerlink" title="关闭本地代理，或者设置不去代理 127.0.0.1"></a>关闭本地代理，或者设置不去代理 <code>127.0.0.1</code></h3><h3 id="手动查找解决问题"><a href="#手动查找解决问题" class="headerlink" title="手动查找解决问题"></a>手动查找解决问题</h3><p>在终端跑 <code>react-native bundle --platform ios --dev false --entry-file index.ios.js --bundle-output ./ios/release/main.jsbundle --assets-dest ./ios/release/main.jsbundle</code> 可以找到报错原因， 比如我是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bundle: start</div><div class="line">bundle: finish</div><div class="line">bundle: Writing bundle output to: ./ios/release/main.jsbundle</div><div class="line"></div><div class="line">ENOENT: no such file or directory, open &apos;./ios/release/main.jsbundle&apos;</div><div class="line"></div><div class="line">少了 PureRenderMixin 组件</div><div class="line">npm i --save react@16.0.0-alpha.6</div></pre></td></tr></table></figure>
<h3 id="重新设置-本地loaclhost"><a href="#重新设置-本地loaclhost" class="headerlink" title="重新设置 本地loaclhost"></a>重新设置 本地loaclhost</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /private/etc/hosts</div><div class="line"></div><div class="line"># Add this line</div><div class="line">127.0.0.1       localhost</div></pre></td></tr></table></figure>
<h3 id="让-xcode-获取权限再重试"><a href="#让-xcode-获取权限再重试" class="headerlink" title="让 xcode 获取权限再重试"></a>让 xcode 获取权限再重试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo xcodebuild -license</div><div class="line"></div><div class="line">react-native run-ios</div></pre></td></tr></table></figure>
<h3 id="开两个终端"><a href="#开两个终端" class="headerlink" title="开两个终端"></a>开两个终端</h3><p>第一个终端跑 <code>npm start</code><br>第二个终端再跑 <code>react-native</code></p>
<h3 id="清除项目-重装"><a href="#清除项目-重装" class="headerlink" title="清除项目 重装"></a>清除项目 重装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew unlink watchman</div><div class="line">brew install watchman</div><div class="line"></div><div class="line">rm -rf ios/build; rm -rf ios/build; rm -rf android/build; rm -rf android/app/build; rm -rf $TMPDIR/react* ; rm -f ios/main.jsbundle; rm -rf node_modules; rm yarn.lock || true; npm cache clean; yarn cache clean</div><div class="line"></div><div class="line">yarn install or npm install</div></pre></td></tr></table></figure>
<h3 id="我自己的解决方法"><a href="#我自己的解决方法" class="headerlink" title="我自己的解决方法"></a>我自己的解决方法</h3><p>把自己的项目代码拷贝出来后，整个项目删了重新安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">class Parent extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      hit: false</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 次数清零</div><div class="line">  timeReset() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  willHit() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  shouldComponentUpdate() &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUpdate() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidUpdate() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;srtles.container&#125;&gt;</div><div class="line">        &#123;</div><div class="line">          this.state.hit</div><div class="line">          ? &lt;Child /&gt;</div><div class="line">          : null</div><div class="line">        &#125;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.timeReset.bind(this)&#125;&gt;</div><div class="line">          老子心情好，不揍你了</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125; onPress=&#123;this.willHit.bind(this)&#125;&gt;</div><div class="line">          老子揍你一次</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125; onPress=&#123;this.willHitT.bind(this)&#125;&gt;</div><div class="line">          老子要揍你三次</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      times: 0</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  timesPlus() &#123;</div><div class="line">    let time = this.state.times;</div><div class="line">    times++;</div><div class="line">    this.setState(&#123;</div><div class="line">      times</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.timesPlus.bind(this)&#125;&gt;</div><div class="line">          儿子不服</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          你打了我 &#123;this.state.times&#125; 次</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;#333333&apos;,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;imooc&apos;, () =&gt; Parent);</div></pre></td></tr></table></figure>
<h2 id="Cannot-Find-entry-file-index-ios-js-in-any-of-the-project-roots"><a href="#Cannot-Find-entry-file-index-ios-js-in-any-of-the-project-roots" class="headerlink" title="Cannot Find entry file index.ios.js in any of the project roots"></a>Cannot Find entry file index.ios.js in any of the project roots</h2><p>红屏 报错，找不到入口文件。</p>
<h3 id="检查自己的-index-ios-js-里面有没有调用初始化的函数如-AppRegistry-registerComponent-39-Your-project-name-39-gt-indexComponents"><a href="#检查自己的-index-ios-js-里面有没有调用初始化的函数如-AppRegistry-registerComponent-39-Your-project-name-39-gt-indexComponents" class="headerlink" title="检查自己的 index.ios.js 里面有没有调用初始化的函数如 AppRegistry.registerComponent(&#39;Your project name&#39;, () =&gt; indexComponents);"></a>检查自己的 index.ios.js 里面有没有调用初始化的函数如 <code>AppRegistry.registerComponent(&#39;Your project name&#39;, () =&gt; indexComponents);</code></h3><h3 id="https-github-com-facebook-react-native-issues-4968"><a href="#https-github-com-facebook-react-native-issues-4968" class="headerlink" title="https://github.com/facebook/react-native/issues/4968"></a><a href="https://github.com/facebook/react-native/issues/4968" target="_blank" rel="external">https://github.com/facebook/react-native/issues/4968</a></h3><p>github 里面列举了截止编写 300+ 条评论。<br>可以搜， 不过原因应该是某个<code>node_module</code> 升级依赖造成的， 所以没事不要乱升级啊。</p>
<h2 id="TypeError-Network-request-failed"><a href="#TypeError-Network-request-failed" class="headerlink" title="TypeError: Network request failed"></a>TypeError: Network request failed</h2><p>ios 下请求老是失败，莫名其妙的失败。</p>
<p>后面发现说是因为之前 clean project。 没有重新设置 ios 的请求 http 权限。</p>
<ol>
<li>打开<code>xCode</code></li>
<li>找到 <code>Info.plist</code></li>
<li>在 <code>Information Property List</code> 下新增 <code>NSAppTransportSecurity</code> 这时候会提示你已经有了 <code>NSAppTransportSecurity</code> 是否要修改， 点击是</li>
<li>此时你会发现 <code>NSAppTransportSecurity</code> 已经改名为 <code>App Transport Security Settings</code>。 本机xCode 版本为 <code>8.3.2</code>;</li>
<li>点击 <code>App Transport Security Settings</code> 右边的加号 添加<code>NSAllowsArbitraryLoads</code>(8.3.2版本为 <code>Allow Arbitrary Loads</code>) 后面的值改为 <code>YES</code>。</li>
<li>重启项目即可</li>
</ol>
<p>具体可见<a href="https://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http" target="_blank" rel="external">https://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http</a></p>
<h2 id="react-native-image-picker-问题"><a href="#react-native-image-picker-问题" class="headerlink" title="react-native-image-picker 问题"></a><code>react-native-image-picker</code> 问题</h2><h3 id="选择图片时奔溃错误"><a href="#选择图片时奔溃错误" class="headerlink" title="选择图片时奔溃错误"></a>选择图片时奔溃错误</h3><p>其实是因为安装 <code>react-native-image-picker</code> 不够细心，只看到自动安装的时候写着</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native link</div></pre></td></tr></table></figure>
<p>没看到还要手动在 <code>Info.plist</code> 上添加一些信息，用于备注需要 访问照片权限，麦克风权限（录像需要）， 相机权限等。</p>
<p>所以程序会报一个 <strong>SIGABRT</strong> 的错误.</p>
<p><img src="./SIGABRT_ERROR.png" alt="./SIGABRT_ERROR.png"></p>
<h3 id="Cannot-read-property-‘showImagePicker’-of-undefinde"><a href="#Cannot-read-property-‘showImagePicker’-of-undefinde" class="headerlink" title="Cannot read property ‘showImagePicker’ of undefinde"></a>Cannot read property ‘showImagePicker’ of undefinde</h3><p>如果遇到这个问题，是因为你安装该组件后没有重现编译ios代码，重新编译一次即可。</p>
<p>如果还不起作用可以检查一下是否安装正确，再跑命令 <code>rm -rf ios/build &amp;&amp; react-native run-ios</code></p>
<h1 id="React-Native-坑真的是遇过最多的一个"><a href="#React-Native-坑真的是遇过最多的一个" class="headerlink" title="React-Native 坑真的是遇过最多的一个"></a>React-Native 坑真的是遇过最多的一个</h1>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imooc React-Native 文字小游戏]]></title>
      <url>https://jsonz1993.github.io/2017/05/imooc-React-Native-%E6%96%87%E5%AD%97%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>文字小游戏需求：</p>
<p>老子 &amp;&amp; 儿子</p>
<p>-老子打儿子：</p>
<pre><code>- 可以打一次 记仇次数+1
- 可以打三次 记仇次数+3
- 可以给个糖 记仇次数清零
</code></pre><ul>
<li>儿子反驳老子：<ul>
<li>儿子不服 老子打一次</li>
<li>儿子骂老子 老子打三次</li>
<li>儿子买啤酒给老子 记仇次数清零</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> imooc </tag>
            
            <tag> learn </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setTimeout && setInterval 学习]]></title>
      <url>https://jsonz1993.github.io/2017/05/setTimeout-setInterval-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>定时器大家平时做js开发都不陌生了 最常见的应用应该就是验证码的倒计时 或 某段函数的异步执行了。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>js的定时器主要有 <code>setTimeout</code> 和 <code>setInterval</code>.</p>
<p>这两个函数执行后，都会返回一个整数，表示定时器的编号，后面可以通过<code>clearTimeout</code> 或 <code>clearInterval</code>来清除该定时器。</p>
<p><code>setTimeout</code>和<code>setInterval</code>的运行机制都是 将代码移除本次执行，等待下一轮的 Event Loop再检查是否到执行的时间。<br>所以可以用 <code>setTimeout(()=&gt; {}, 0)</code> 来模拟执行异步操作。</p>
<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><h3 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h3><p>setTimeout 是用来制定某段函数或代码，在多少毫秒延迟后执行。<br>如果传入的是一段代码，必须是字符串类型的。这时候js会调用<code>eval</code>来执行该代码， 出于安全与性能考虑 建议直接传入一个函数的形式来执行。<br>delay 为延迟的时间，单位是<code>ms</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timerId = setTimeout(func|code, delay);</div></pre></td></tr></table></figure></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>setTimeout可以有多个参数，第三个参数开始为传入运行方法的参数。<br>很经典的闭包面试题就可以用setTimeout传参来解决<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123; setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i)&#125; ,<span class="number">0</span>) &#125; <span class="comment">// 运行结果是输出10个10</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123; setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123; <span class="built_in">console</span>.log(i)&#125; ,<span class="number">0</span>, i) &#125; <span class="comment">// 运行结果是输出0-9</span></div></pre></td></tr></table></figure></p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>setTimeout的运行环境是全局(eval)。<br><figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">y</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setTimeout(o.y, <span class="number">0</span>); <span class="comment">// 此时输出的是1，因为全局(window)上的x属性是1</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>demo2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">login</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.login = login;</div><div class="line">	<span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.login);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'John'</span>);</div><div class="line">setTimeout(user.sayHi, <span class="number">0</span>); <span class="comment">// undefined 因为执行的时候 全局对象没有 login这个属性</span></div></pre></td></tr></table></figure>
<p>解决方法一： 放到一个匿名函数里面执行<br><figure class="highlight javascript"><figcaption><span>方法1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	user.sayHi();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>解决方法二： 缓存当前的this变量<br><figure class="highlight javascript"><figcaption><span>方法2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		_this.value = <span class="string">'ok'</span>;</div><div class="line">	&#125;)</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>解决方法三： 目前项目中最常用， 用<code>es6</code>的<code>箭头函数</code><br><figure class="highlight javascript"><figcaption><span>方法3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> user.sayHi(), <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p><code>setInterval</code>的使用方法与参数和<code>setTimeout</code>一致。 不过<code>setInterval</code>是间隔 Xms 执行一次该函数。<br>但实际上 函数执行需要时间，所以两次执行函数之间的间隔会小于 <code>setInterval</code>指定的时间.</p>
<h3 id="setInterval-执行时间"><a href="#setInterval-执行时间" class="headerlink" title="setInterval 执行时间"></a>setInterval 执行时间</h3><p>假定<code>setInterval</code>指定每100ms执行一次，每次执行的函数耗时为 5ms, 那么第一次执行结束后的 95ms 后会执行第二段函数。<br>如果某次执行特别耗时 如 105ms, 那么 当它结束后，会立即执行下一次的函数。 <strong>此段为某博客看到的，个人实践得出执行时间有快与慢的偏差没有绝对提前执行</strong></p>
<p>下面看代码例子<br><figure class="highlight javascript"><figcaption><span>demo3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 耗时 5ms 的某个操作</span></div><div class="line">	handleMouseClick();</div><div class="line">	<span class="comment">// 耗时 5ms 的某个操作</span></div><div class="line">	setInterval(timerTask, <span class="number">10</span>);</div><div class="line">	<span class="comment">// 耗时 5ms 的某个操作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMouseClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 耗时 8ms 的某个操作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timerTask</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 耗时 2ms 的某个操作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">init();</div></pre></td></tr></table></figure></p>
<p>网上博客说法（此处保留意见）：<br>0-15ms: 运行init<br>15-23ms: 运行handleMouseClick函数。请注意，这个函数是在5ms时触发的，应该在那个时候就立即运行，但是由于单线程的关系，必须等到init函数完成之后再运行。<br>23-25ms: 运行timerTask函数。 规定每10ms运行一次，既在20ms， 30ms， 40ms会运行。但是由于当前还有任务在运行，因此必须延迟到前面任务完成后再运行<br>30-32ms: 运行timerTask<br>40-42ms: 运行timerTask</p>
<p>由于平时debug调试时，在<code>handleMouseClick</code>应该不会等到<code>init</code>运行后再执行。于是抱着学习的态度自己写了一段代码<br><figure class="highlight javascript"><figcaption><span>demo4</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_init</span>(<span class="params"></span>) </span>&#123; demo(<span class="number">10</span>);<span class="built_in">console</span>.log(<span class="number">1</span>); demo(<span class="number">10</span>); handle(); demo(<span class="number">10</span>);<span class="built_in">console</span>.log(<span class="number">2</span>); setInterval(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setInterval'</span>), <span class="number">1000</span>); <span class="built_in">console</span>.log(<span class="number">3</span>) &#125;; <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;demo(<span class="number">15</span>); <span class="built_in">console</span>.log(<span class="string">'handle'</span>)&#125;;<span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">i</span>) </span>&#123;<span class="keyword">var</span> sum = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i * <span class="number">1000000</span>; j++) &#123;sum += j;&#125;&#125;;</div><div class="line">_init();</div></pre></td></tr></table></figure></p>
<p>利用for循环来造成运行实践的延长<br>运行 <code>_init()</code> 结果是：<br>① 输出<code>1</code> 隔26ms后 输出<code>handle</code> 隔10ms后 输出<code>2</code> 同一时间输出<code>3</code>(此处可以理解成执行的时间小于1ms)。此时 _init()执行结束 由于没有返回值，所以会默认返回 <code>undefined</code><br>② <code>_init()</code>执行结束之后 再去跑 <code>setInterval定时器</code> 所以 隔 1000ms(实际是1005ms) 后输出第一个<code>setInterval</code>。间隔 999ms后输出第二个<code>setInterval</code> 间隔 997ms后输出第三个 <code>setInterval</code><br>所以觉得说<code>setInterval</code>是当前所有函数运行后才开启定时的，而不是执行到<code>setInterval</code>的时候开始计时。<br>而且运行的间隔不是固定偏多或偏少</p>
<p>最后再给出一个例子理解<code>setTimeout</code>的异步执行机制<br><figure class="highlight javascript"><figcaption><span>demo5</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Timeout"</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"a() 开始运行"</span>);</div><div class="line">    b(x);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"a() 结束运行"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">y</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"b() 开始运行"</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"传入的值为"</span> + y);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"b() 结束运行"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"当前任务开始"</span>);</div><div class="line">a(<span class="number">42</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"当前任务结束"</span>);</div></pre></td></tr></table></figure></p>
<p>运行结果为<br>当前任务开始<br>a() 开始运行<br>b() 开始运行<br>传入的值是 42<br>b() 运行结束<br>a() 运行结束<br>当前任务结束<br>timeout</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>无。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webstorm 快捷键整理]]></title>
      <url>https://jsonz1993.github.io/2017/05/webstorm/</url>
      <content type="html"><![CDATA[<p><code>alt</code> =&gt; <code>option</code><br><code>command</code> =&gt; <code>开始</code><br><code>control</code> =&gt; <code>ctrl</code><br><code>button 1 click</code> 鼠标左键<br><code>button 2 click</code> 鼠标右键<br><em>斜体</em> 为不常用<br><strong>粗体</strong> 为常用</p>
<h3 id="Editor-Actions"><a href="#Editor-Actions" class="headerlink" title="Editor Actions"></a>Editor Actions</h3><ul>
<li><strong>Add or Remove Caret  =&gt;  类似sublime的多行编辑功能 =&gt; <code>alt + button1 Click</code></strong></li>
<li><em>Add Rectangular selection on mouse drag =&gt;  鼠标矩形选择 =&gt; <code>remove keyMap</code> 没啥卵用</em></li>
<li>Backspace =&gt; 退格（既删除）=&gt; <code>Backspace</code> 键盘上的退格键，没什么可说的</li>
<li><em>Move Caret Backward  a Paragraph  =&gt; 移动光标到上一个段落（既上一个空行处） =&gt; 默认<code>无</code></em></li>
<li>Choose lookup item =&gt; <code>Enter</code> =&gt; 既选择当前智能提示的项</li>
<li><em>Choose Lookup Item and Invoke Complete Statement =&gt; 不知道有什么用</em></li>
<li><em>Choose Lookup Item and Insert Dot =&gt; 选择当前项并再最后加入<code>.</code> 既自动完成<code>Enter + .</code></em></li>
<li><em>Choose Lookup Item Replace =&gt;  不知道有什么用</em></li>
<li><em>Clone Caret Above =&gt; 在当前行上创建多一个光标，不常用</em></li>
<li><em>Clone Caret Below =&gt; 在当前行下创建多一个光标，不常用</em></li>
<li><em>Move Caret to Code Block End =&gt; 将光标移至块代码结束 =&gt; <code>command + ]</code> || <code>alt + ]</code></em></li>
<li><em>Move Caret to Code Block Start =&gt; 将光标移至块代码开始 =&gt; <code>command + [</code> || <code>atl + [</code></em></li>
<li><em>Move Caret to Code Block End with Selection =&gt; 将光标移至块代码结束并选择, 不常用</em></li>
<li><em>Move Caret to Code Block Start with Selection =&gt; 将光标移至块代码开始并选择, 不常用</em></li>
<li><em>Complete Current Statement =&gt; 完成当前声明（语句），既如果该行结束则加<code>;</code> 如果是 <code>if (a = 10)</code> 则开一个<code>{}</code> 并将光标移至花括号内 =&gt; 默认 <code>ctrl + shift + enter</code> 不常用</em></li>
<li><em>Create Rectangular Selection =&gt; 创建矩形选择 =&gt; <code>alt+shift+button2 click</code></em></li>
<li><em>Cut Line Backward =&gt; 从当前光标向前选择并剪切</em></li>
<li><em>Cut up to Line End =&gt; 从当前光标向后选择并剪切</em></li>
<li><em>Decrease Font Size =&gt; 缩小字体</em></li>
<li>Delete =&gt; 删除 (和Backspace用起来效果一致) =&gt; 退格键</li>
<li><em>Delete Line =&gt; 删除整行 一般我都会用 <code>command + x</code> || <code>ctrl + x</code> 代替，既直接剪切整行</em></li>
<li><em>Delete to Line End =&gt; 当前光标删除到行尾，一般我用<code>command + 箭头 + shift</code>选中后再删除</em></li>
<li><em>Delete to Line Start 同上</em></li>
<li><em>Delete to word end &amp;&amp; Delete to word start 等同理不赘述</em></li>
<li>Down with Selection 向下并选择 <code>Shift + 向下箭头</code></li>
<li><em>Duplicate Line or Selection 复制该行 =&gt; 默认为<code>ctrl + d</code>， 但我移除了</em></li>
<li><em>Move caret forward a Paragraph 同上</em></li>
<li><em>Hungry Backspace 不知道有什么用</em></li>
<li><em>Increase Font Size 放大字体</em></li>
<li><strong>Join Lines =&gt; 把下一行添加到本行，既删除换行符与空格 =&gt; <code>ctrl + shift + j</code></strong></li>
<li><em>Kill selected region，Save to Kill Ring ，kill the word end, kill the word start 不知道有什么用</em></li>
<li><strong>Move Caret to Line End =&gt; 将光标移至行尾，类似win上的end =&gt; <code>command + →</code></strong> TODO: window 上修改成一致</li>
<li><strong>Move Caret to Line End with Selection 移动光标至行尾并选中 =&gt; <code>command + shift + →</code></strong> TODO: window上修改一致</li>
<li><strong>Move Caret to Matching Brace 将光标移至当前匹配的括号 =&gt; <code>control + m</code></strong> TODO: window 上的确定</li>
<li><strong>Move Caret to Page Bottom 将光标移至页面底部 =&gt; <code>command + 下箭头</code></strong></li>
<li><em>Move Caret to Page Top with Selection 将光标移至页首并选中</em></li>
<li><strong>Move Caret to Next Word 移动光标到下一个单词 =&gt; <code>alt + →</code> </strong> TODO: window确定</li>
<li><strong>Move Caret to Prev Word 等同理</strong></li>
<li><strong>Move Cartet to Next Word with Selection 移动光标到下个单词并选中 =&gt; <code>alt + shift + →</code></strong>  </li>
<li><strong>Page Down 页面向下滚动一屏 <code>fn + 下箭头</code></strong> TODO: window</li>
<li><strong>Page Down with Selection 页面向下滚动一屏并选中该屏 =&gt; <code>fn + shift + 下箭头</code> </strong> TODO: window</li>
<li><strong>Page Up &amp;&amp; Page Up with Selection 同理</strong></li>
<li><em>Paste from X clipboard 不知道有什么用</em></li>
<li><em>Paste Simple 不知道有什么用</em></li>
<li><em>Reset Font Size</em> 重置字体大小</li>
<li>Right Left Down Up 等….</li>
<li>Scroll To Bottom, Scroll Down …等等 都是滚动方向</li>
<li><em>Duplicate Line or Selection 复制整行或选中的区域 一般都会手动选择整行去复制</em></li>
<li><em>Duplicate Entire Lines </em></li>
<li><em>Extend Selection 扩展选择 <code>alt + 上箭头</code></em>  解除</li>
<li>Split Line 光标下添加多一行 =&gt; <code>command + enter</code> TODO: window</li>
<li>Start New Line 开启新的一行 相当于光标移至行尾，回车 =&gt; <code>shift + enter</code> TODO: window</li>
<li>Start New Line Before Current 在当前行的上一行新建一行并将光标移至此处 相当于光标移到上行尾再回车</li>
<li><em>Swap selection boundaries 交换选择边界</em></li>
<li><strong>Tab <code>tab</code></strong></li>
<li><em>Move Caret to Text End, Move Caret To Text Start 等</em></li>
<li><em>Toggle Case 光标在大小写切换</em></li>
<li><em>Toggle Insert/Overwrite =&gt; 切换插入/替换 window 上的 <code>insert</code> 功能</em></li>
<li><em>shrink Selection 缩小选择 =&gt; <code>shift + 下箭头</code>  不知道有什么用</em> </li>
<li>​<em>Emacs tab, Fill Paragraph, Expand Live Template / Emmet Abbreviation, Next Paramete, Prev Paramete 不知道什么用</em></li>
</ul>
<h3 id="Main-menu"><a href="#Main-menu" class="headerlink" title="Main menu"></a>Main menu</h3><p>列举平日用得到的</p>
<p>##### </p>
<ul>
<li><strong>new =&gt; 新建文件 =&gt; <code>command + N</code></strong></li>
<li><strong>new Scratch File 新建临时文件，比如可以新建一个es6语法的临时文件，里面写完再复制到某些地方 提供语法支持 =&gt; <code>shift + command + n</code></strong></li>
<li><strong>Preferences 打开设置 =&gt; <code>command + ,</code> window: <code>alt + ctrl + s</code></strong></li>
<li><strong>Synchronize 重新加载磁盘文件并同步 =&gt; <code>alt + command + y</code></strong></li>
<li><strong>Navigate File… =&gt; 按文件名查找文件 =&gt; <code>command + shift + O</code> 改 <code>command + p</code> 和sublime Text保持一致</strong></li>
</ul>
<h3 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h3><ul>
<li><strong>Undo =&gt; 撤销 =&gt; <code>command + z</code></strong></li>
<li><strong>Redo =&gt; 撤销的反方向 =&gt; <code>shift + command + z</code></strong></li>
<li><strong>Cut =&gt; 剪切 =&gt; <code>command + x</code></strong></li>
<li><strong>Copy =&gt; 复制 =&gt; <code>command + c</code></strong></li>
<li><strong>Copy Paths =&gt; 复制路径 =&gt; <code>command + c + shift</code></strong></li>
<li><strong>Paste =&gt; 黏贴 =&gt; <code>command + v</code></strong><br>— <strong>Paste from History =&gt; 打开黏贴板历史 =&gt; <code>command + shift + v</code></strong></li>
<li><strong>Find… =&gt; 查找 =&gt; <code>command + f</code></strong></li>
<li><strong>Replace… =&gt; 替换 =&gt; <code>Command + r</code></strong></li>
<li><strong>Add Selection for Next Occurrence =&gt; 选中相同的词 =&gt; 默认 <code>ctrl + g</code> 改 <code>ctrl + d</code></strong></li>
<li><strong>Select All =&gt; 选择所有 =&gt; <code>command + A</code></strong></li>
</ul>
<h3 id="自己修改的比较常见的"><a href="#自己修改的比较常见的" class="headerlink" title="自己修改的比较常见的"></a>自己修改的比较常见的</h3><ul>
<li><strong>Select In… =&gt; <code>alt 1 then 1</code> 定位到当前正在编辑的文件，这个功能vscode 自动完成的 还是比较常用</strong></li>
</ul>
<p>以前很喜欢用<code>webstorm</code>, 后面在mac上面不习惯快捷键就放弃转战其他 <code>atom</code>等。 这次特地下来回来，设置了快捷键但最后 还是用回了<code>vs code</code>。<br>最后附上配置<a href="./webstorm_settings.jar" download="./settings">Mac</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> editor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的网页点击热力图]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E7%82%B9%E5%87%BB%E7%83%AD%E5%8A%9B%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>前两天老大突然喊我和一小伙子出去开会，说有个好玩的东西给你们玩。 想给网站做个简单的热力图， 记录用户点击了什么位置。<br>要求是，怎么简单怎么实现 先做一版出来 后面再慢慢迭代优化， 定的工作量大概是两人一天。。。。</p>
<p>之前没接触过图表，虽然有接触过埋点统计/talkingData 不过对于这种都是一知半解。<br>具体有两个步骤，一个是数据的记录（入库），一个是展示模式（读取）。</p>
<p>于是下班回到家后没事就先查了资料，想大概写个能定位置的出来看着先。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol>
<li>需要传递给后台保存的数据<ol>
<li>url 当前页面url(包不包括search, hash 等)</li>
<li>screenHeight 屏幕高度</li>
<li>screenWidth 屏幕高度</li>
<li>list 具体坐标的数组 {x: 鼠标相对于屏幕x轴坐标, y: 鼠标相对于屏幕y轴坐标, pageX: 鼠标相对于dom文档的x轴坐标, pageY: 鼠标相对于dom文档的y轴坐标}</li>
<li>代表用户的一个code</li>
</ol>
</li>
<li>不能每次点击都发送，间隔10秒发送一次</li>
<li>后台还没做先在本地sessionLocation做模拟测试</li>
</ol>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h4 id="鼠标点击对象属性"><a href="#鼠标点击对象属性" class="headerlink" title="鼠标点击对象属性"></a>鼠标点击对象属性</h4><p>特别推荐 Mozilla 开发者平台，现在基本上js html等东西想了解具体或详细的属性都会上这个网站查询<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/</a>大部分有多语言标签。</p>
<p>可以先到这里查看鼠标的具体属性解析<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent" target="_blank" rel="external">developer.mozilla</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">以下两个指的都是已可视区域左上角为原点(<span class="number">0</span>, <span class="number">0</span>) 向右 向下正坐标</div><div class="line">MouseEvent.clientX   clientX属性代表点击在元素上的鼠标指针的X坐标；</div><div class="line">MouseEvent.clientY   clientY属性代表点击在元素上的鼠标指针的Y坐标；</div><div class="line"></div><div class="line">以下两个指的都是物理屏幕以左上角为原点（<span class="number">0</span>， <span class="number">0</span>） 向右 向下正坐标</div><div class="line">MouseEvent.screenX</div><div class="line">MouseEvent.screenY</div></pre></td></tr></table></figure>
<p>这里传递给后台的 <code>x</code> 采用的是 <code>MouseEvent.clientX</code>; <code>y</code> 取的是 <code>MouseEvent.clientY</code>; <code>pageX</code> 取的是 <code>页面滚动宽度 + x</code>; <code>PageY</code> 取的是 <code>页面滚动高度 + y</code> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">页面滚动高度: <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></div><div class="line">页面滚动宽度: <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span></div></pre></td></tr></table></figure>
<p>具体页面滚动高度与宽度的兼容问题可以查看 <a href="http://www.cnblogs.com/xwgli/p/3490466.html" target="_blank" rel="external">http://www.cnblogs.com/xwgli/p/3490466.html</a></p>
<h4 id="屏幕高度宽度"><a href="#屏幕高度宽度" class="headerlink" title="屏幕高度宽度"></a>屏幕高度宽度</h4><p><a href="http://www.jb51.net/article/36840.htm" target="_blank" rel="external">屏幕高度宽度</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.screen.height, 屏幕高度</div><div class="line"><span class="built_in">window</span>.screen.width, 屏幕宽度</div><div class="line"><span class="built_in">window</span>.screen.availHeight, 屏幕可用工作区高度，如mac的除去顶部工具条外的高度</div><div class="line"><span class="built_in">window</span>.screen.availWidth  同上</div></pre></td></tr></table></figure>
<h4 id="监听url变化"><a href="#监听url变化" class="headerlink" title="监听url变化"></a>监听url变化</h4><p>后期优化需求，因为还不确定是要每条基本<code>location.namepath</code>当成一个页面还是要把每个不同的 <code>search、hash</code>都当成一个独立的页面。</p>
<h4 id="绘制热力图"><a href="#绘制热力图" class="headerlink" title="绘制热力图"></a>绘制热力图</h4><p>绘制热力图暂时的展示效果在原页面添加一个文档大小的<code>canvas</code>，然后采用一个js 热力图插件<a href="https://github.com/pa7/heatmap.js" target="_blank" rel="external">https://github.com/pa7/heatmap.js</a>传递坐标来生成热力图。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>因为只是晚上回家临时写了一个可以看效果的，所以没有代码分离 脏数据检查 等功能<br><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// style Util Fn</span></div><div class="line"><span class="keyword">const</span> styleFn = <span class="function">(<span class="params">el, styleObj = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (!el) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(el);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(styleObj)) &#123;</div><div class="line">    el.style[key] = value;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> el;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 需要发送到后台的数据</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeatCollect</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(opts = &#123;&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.initProps(opts); <span class="comment">// 初始化属性</span></div><div class="line">    <span class="keyword">this</span>.setDataForServer(); <span class="comment">// 启动定时器 定时发送数据给服务器</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  initProps(opts) &#123;</div><div class="line">    <span class="keyword">this</span>.list = [];</div><div class="line">    <span class="keyword">this</span>.url = location.href;</div><div class="line">    <span class="keyword">this</span>.screenHeight = <span class="built_in">window</span>.screen.height;</div><div class="line">    <span class="keyword">this</span>.screenWidth = <span class="built_in">window</span>.screen.width;</div><div class="line">    <span class="keyword">this</span>.serverCode = <span class="string">'1001'</span>;</div><div class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.timer = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.time = opts.time || <span class="number">10</span>; <span class="comment">// 默认10秒</span></div><div class="line">    <span class="keyword">this</span>.maxLength = opts.maxLength || <span class="number">100</span>; <span class="comment">// 默认最多可以存100个坐标</span></div><div class="line">    <span class="keyword">this</span>.Time = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.queue = []; <span class="comment">// 队列 暂存请求的坐标</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 向当前类添加坐标</span></div><div class="line">  push(obj) &#123;</div><div class="line">    obj.index = ++<span class="keyword">this</span>.index;</div><div class="line">    <span class="keyword">this</span>.list.push(obj);</div><div class="line">    <span class="keyword">this</span>.list = <span class="keyword">this</span>.list.splice(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// 防止恶意过长</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取向服务器传递的数据格式</span></div><div class="line">  getServerData() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">list</span>: <span class="keyword">this</span>.queue,</div><div class="line">      <span class="attr">url</span>: <span class="keyword">this</span>.url,</div><div class="line">      <span class="attr">screenHeight</span>: <span class="keyword">this</span>.screenHeight,</div><div class="line">      <span class="attr">screenWidth</span>: <span class="keyword">this</span>.screenWidth,</div><div class="line">      <span class="attr">serverCode</span>: <span class="keyword">this</span>.serverCode,</div><div class="line">      <span class="attr">timestamp</span>: <span class="built_in">Date</span>.now(),</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 发送数据到服务器</span></div><div class="line">  setDataForServer() &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timer);</div><div class="line">    <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.queue = <span class="keyword">this</span>.list.splice(<span class="number">0</span>, <span class="built_in">Math</span>.min(<span class="keyword">this</span>.list.length, <span class="number">100</span>));</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.queue.length) <span class="keyword">return</span> <span class="keyword">this</span>.setDataForServer();</div><div class="line"></div><div class="line">      Server.setData(<span class="keyword">this</span>.getServerData()).then((&#123;</div><div class="line">        code</div><div class="line">      &#125;) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (code === <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.queue = [];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.list = <span class="keyword">this</span>.queue.concat(<span class="keyword">this</span>.list);</div><div class="line">        &#125;</div><div class="line">      &#125;, () =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.list = <span class="keyword">this</span>.queue.concat(<span class="keyword">this</span>.list);</div><div class="line">      &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.setDataForServer();</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125;, <span class="keyword">this</span>.time * <span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制函数</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.initCanvas();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 初始化展示的dom</span></div><div class="line">  initDom() &#123;</div><div class="line">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">      domParent = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    dom.id = <span class="string">'heatmapContainer'</span>;</div><div class="line">    domParent.id = <span class="string">'heatmapContainerWrapper'</span>;</div><div class="line">    domParent.appendChild(dom);</div><div class="line">    domParent.style.height = <span class="built_in">document</span>.documentElement.offsetHeight + <span class="string">'px'</span>;</div><div class="line">    domParent.style.width = <span class="built_in">document</span>.documentElement.offsetWidth + <span class="string">'px'</span> ;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(domParent);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 初始化展示的canvas</span></div><div class="line">  initCanvas() &#123;</div><div class="line">    <span class="keyword">this</span>.initDom();</div><div class="line">    <span class="keyword">this</span>.heatmap = h337.create(&#123;</div><div class="line">      <span class="attr">container</span>: <span class="built_in">document</span>.getElementById(<span class="string">'heatmapContainer'</span>),</div><div class="line">      <span class="attr">maxOpacity</span>: <span class="number">.6</span>,</div><div class="line">      <span class="attr">radius</span>: <span class="number">50</span>,</div><div class="line">      <span class="attr">blur</span>: <span class="number">.90</span>,</div><div class="line">      <span class="attr">backgroundColor</span>: <span class="string">'rgba(0, 0, 0, 0)'</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 遍历绘制canvas上的热点</span></div><div class="line">  draw(list) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">      <span class="keyword">this</span>.heatmap.addData(<span class="keyword">this</span>.getDrawData(list[i]));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取要绘制的数据格式</span></div><div class="line">  getDrawData(data) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">x</span>: data.pageX,</div><div class="line">      <span class="attr">y</span>: data.pageY,</div><div class="line">      <span class="attr">value</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理兼容等工具类</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> Util = &#123;</div><div class="line"></div><div class="line">  <span class="comment">// 获取鼠标坐标</span></div><div class="line">  getMouseInfo(e) &#123;</div><div class="line">    <span class="keyword">let</span> &#123;</div><div class="line">      officeX,</div><div class="line">      officeY</div><div class="line">    &#125; = <span class="keyword">this</span>.getPageOffice(), &#123;</div><div class="line">      <span class="attr">clientX</span>: x,</div><div class="line">      <span class="attr">clientY</span>: y</div><div class="line">    &#125; = e;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">pageX</span>: officeX + x,</div><div class="line">      <span class="attr">pageY</span>: officeY + y,</div><div class="line">      x,</div><div class="line">      y,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 获取页面高宽</span></div><div class="line">  getPageOffice() &#123;</div><div class="line">    <span class="keyword">let</span> officeY = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>,</div><div class="line">      officeX = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      officeX,</div><div class="line">      officeY</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 入口函数</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> Main = &#123;</div><div class="line">  init() &#123;</div><div class="line">    <span class="keyword">this</span>.infoData = <span class="keyword">new</span> HeatCollect();</div><div class="line">    <span class="keyword">this</span>.draw = <span class="keyword">new</span> Draw();</div><div class="line">    <span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, (e) =&gt; <span class="keyword">this</span>.mouseEvent(e));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  mouseEvent(e) &#123;</div><div class="line">    <span class="keyword">let</span> _mouseData = Util.getMouseInfo(e);</div><div class="line">    <span class="keyword">this</span>.infoData.push(_mouseData);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  drawFn() &#123;</div><div class="line">    <span class="keyword">let</span> list = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'test'</span>) || <span class="string">'&#123;&#125;'</span>).list || [];</div><div class="line">    <span class="keyword">this</span>.draw.draw(list);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">Main.init();</div><div class="line">Main.drawFn();</div><div class="line"></div><div class="line"><span class="comment">// 模拟发送请求</span></div><div class="line"><span class="keyword">const</span> Server = &#123;</div><div class="line">  setData(data) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> isSuccess = <span class="built_in">Math</span>.random() &lt; <span class="number">.95</span>;</div><div class="line">        <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">          <span class="keyword">let</span> oldData = sessionStorage.getItem(<span class="string">'test'</span>);</div><div class="line">          <span class="keyword">if</span> (oldData) &#123;</div><div class="line">            oldData = <span class="built_in">JSON</span>.parse(oldData);</div><div class="line">            oldData.list = oldData.list.concat(data.list);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            oldData = data;</div><div class="line">          &#125;</div><div class="line">          sessionStorage.setItem(<span class="string">'test'</span>, <span class="built_in">JSON</span>.stringify(oldData));</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'success'</span>, oldData.list);</div><div class="line">          res(&#123;</div><div class="line">            <span class="attr">code</span>: <span class="number">0</span>,</div><div class="line">            data</div><div class="line">          &#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          rej(&#123;</div><div class="line">            <span class="attr">code</span>: <span class="number">5000</span></div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">3000px</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">2000px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#heatMap</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">position</span>: relative;</div><div class="line">        <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#heatmapContainer</span> &#123; <span class="attribute">width</span>:<span class="number">100%</span>; <span class="attribute">height</span>:<span class="number">100%</span>; &#125;</div><div class="line">    <span class="selector-id">#heatmapContainerWrapper</span> &#123; <span class="attribute">position</span>:absolute; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"heatmap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/pa7/heatmap.js/blob/master/build/heatmap.js" target="_blank" rel="external">html中引入的热力图</a></p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p><img src="./heatMap.png" alt="效果图">效果图<br>至此 简单的热力图实现完成， 隔天回到公司，老大说 公司已经和第三方服务平台购买了统计之类的服务。。。。。。于是乎当做是自己饭后无聊写点代码消遣消遣。不过热力图很多东西需要处理，不是一两个人短时间可以完成的。最后附上效果与<br><a href="https://github.com/jsonz1993/wheel/tree/master/heatmap" target="_blank" rel="external">项目目录</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imooc-react-native实战 项目入门知识学习]]></title>
      <url>https://jsonz1993.github.io/2017/05/imooc-react-native%E5%AE%9E%E6%88%98-%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>选用的版本的 <code>v0.22.2</code></p>
<p>组件生命周期<br><code>初始化开始</code> =&gt; <code>getDefaultProps</code> =&gt; <code>getInitialState</code> =&gt; <code>componentWillMount</code> =&gt; <code>render</code> =&gt; <code>componentDidMount</code> =&gt; <code>组件运行中， state状态改变</code> =&gt; <code>shouldComponentUpdate 判断是否要更新 return true</code> =&gt; <code>componentWillUpdate</code> =&gt; <code>render</code> 继续循环 =&gt; <code>外部props改变</code> =&gt; <code>componentWillReceiveProps</code> =&gt; <code>unmount 卸载组件</code> =&gt; <code>componentWillUnmount</code> 等等</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> imooc </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios网络操作基础教程]]></title>
      <url>https://jsonz1993.github.io/2017/05/ios%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/learn/tree/master/Objective-c/net-learn" target="_blank" rel="external">demo源码</a></p>
<h2 id="网络解析"><a href="#网络解析" class="headerlink" title="网络解析"></a>网络解析</h2><h3 id="与网络请求有关的类"><a href="#与网络请求有关的类" class="headerlink" title="与网络请求有关的类"></a>与网络请求有关的类</h3><ul>
<li><code>NSURL</code>: 客户端访问哪台服务器的制定资源</li>
<li><code>NSURLRequest</code>: 客户端发起的网络请求内容</li>
<li><code> </code>: 客户端服务器建立的网络连接</li>
<li><code>NSURLResponse</code>: 服务端给予客户端的响应结果</li>
</ul>
<h3 id="发起第一个网络请求"><a href="#发起第一个网络请求" class="headerlink" title="发起第一个网络请求"></a>发起第一个网络请求</h3><figure class="highlight objectivec"><figcaption><span>AppDelegate.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个url对象 用来表示访问的服务器</span></div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.imooc.com"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 客户端发起的网络请求的请求内容</span></div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL: url];</div><div class="line">    </div><div class="line">    <span class="built_in">NSURLConnection</span> *connection = [[<span class="built_in">NSURLConnection</span> alloc] initWithRequest:request delegate:<span class="keyword">self</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 启动网络请求</span></div><div class="line">    [connection start];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) connection: (<span class="built_in">NSURLConnection</span> *) connection didReceiveResponse: (<span class="built_in">NSURLResponse</span> * )response &#123;</div><div class="line">    <span class="comment">// 服务器给客户端的响应结果</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"response: %@"</span>, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>键入以上代码后按<code>cmd+r</code>运行一下，此时控制台并没有输出我们想要的结果，而是输出了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&apos;s Info.plist file.</div></pre></td></tr></table></figure></p>
<p>提示我们已经阻止了明文http请求，因为他是不安全的，可以通过<code>Info.plist</code>配置解除请求。<br>在项目根目录里打开<code>Info.plist</code>， 添加 <code>App Transport Security Settings</code> 并在<code>App Transport Security Settings</code>下添加<code>Allow Arbitrary Loads</code>值为<code>YES</code>。<br><img src="./info-plist.png" alt="info-plist.png"> 然后重新运行就好了</p>
<h2 id="使用Get方式发送请求"><a href="#使用Get方式发送请求" class="headerlink" title="使用Get方式发送请求"></a>使用Get方式发送请求</h2><h3 id="搭建用户信息界面"><a href="#搭建用户信息界面" class="headerlink" title="搭建用户信息界面"></a>搭建用户信息界面</h3><p>api接口已经返回的参数格式结构<br><img src="./get-api.png" alt="get-api"></p>
<p>新建项目<br>新建<code>cocoa Class</code>=&gt;<code>UserInfoViewController</code>继承<code>UIViewController</code><br>新建<code>cocoa Class</code>=&gt;<code>KeyValueView</code>继承<code>UIView</code><br>如图<br><img src="./project-folder.png" alt="project-folder"></p>
<p>先在<code>KeyValueView.h</code> 声明所需的变量已经方法<br><figure class="highlight objectivec"><figcaption><span>KeyValueView.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KeyValueView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span> *keyLabel;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span> *valueLabel;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) setupKey: (<span class="built_in">NSString</span> *)key value:(<span class="built_in">NSString</span> *)value;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>并在<code>KeyValueView.m</code>实现<br><figure class="highlight objectivec"><figcaption><span>KeyValueView.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"KeyValueView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KeyValueView</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">id</span>) initWithFrame:(<span class="built_in">CGRect</span>)frame</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 添加keyLabel</span></div><div class="line">        <span class="comment">// 如果存在父级，则创建一个 UILabel x:0, y:0, 宽：父级宽度1/3, 高: 父级高度</span></div><div class="line">        _keyLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame: <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame) /<span class="number">3</span>, <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.frame))];</div><div class="line">        <span class="comment">// 设置背景色为透明</span></div><div class="line">        _keyLabel.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">        <span class="comment">// 文字居左对齐</span></div><div class="line">        _keyLabel.textAlignment = <span class="built_in">NSTextAlignmentLeft</span>;</div><div class="line">        <span class="comment">// 设置字体大小</span></div><div class="line">        _keyLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize: <span class="number">16</span>];</div><div class="line">        <span class="comment">// 设置字体颜色</span></div><div class="line">        _keyLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">        <span class="comment">// 添加到父级</span></div><div class="line">        [<span class="keyword">self</span> addSubview: _keyLabel];</div><div class="line">        </div><div class="line">        <span class="comment">// 添加valueLabel</span></div><div class="line">        <span class="comment">// 如果存在父级，则创建一个 UILabel x:0, y:0, 宽：父级宽度1/3, 高: 父级高度</span></div><div class="line">        _valueLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame: <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame) /<span class="number">3</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame) * <span class="number">2</span> /<span class="number">3</span>, <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.frame))];</div><div class="line">        <span class="comment">// 设置背景色为透明</span></div><div class="line">        _valueLabel.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">        <span class="comment">// 文字居左对齐</span></div><div class="line">        _valueLabel.textAlignment = <span class="built_in">NSTextAlignmentLeft</span>;</div><div class="line">        <span class="comment">// 设置字体大小</span></div><div class="line">        _valueLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize: <span class="number">16</span>];</div><div class="line">        <span class="comment">// 设置字体颜色</span></div><div class="line">        _valueLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">        <span class="comment">// 添加到父级</span></div><div class="line">        [<span class="keyword">self</span> addSubview: _valueLabel];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setupKey:(<span class="built_in">NSString</span> *)key value:(<span class="built_in">NSString</span> *)value</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 给keyLabel &amp;&amp; valueLabel 赋值的方法</span></div><div class="line">    [_keyLabel setText:key];</div><div class="line">    [_valueLabel setText:value];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着我们要在<code>UserInfoViewController</code>去调用<code>keyValueView</code>的UIView类<br><figure class="highlight objectivec"><figcaption><span>UserInfoViewController.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"><span class="comment">// 引入keyvalue</span></div><div class="line"><span class="meta">#import <span class="meta-string">"KeyValueView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UserInfoViewController</span> : <span class="title">UIViewController</span></span></div><div class="line"></div><div class="line"><span class="comment">// 把所有个人信息录到这里 ( 声明 )</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *userNameView; <span class="comment">// 用户名信息</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *userSexView; <span class="comment">// 用户性别</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *birthdayView; <span class="comment">// 生日</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *emailView; <span class="comment">// email</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *phoneView; <span class="comment">// 手机号</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>UserInfoViewController.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UserInfoViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义两个宏 屏幕宽度与高度，一般项目都会定义方便使用</span></div><div class="line"><span class="meta">#define KScreenWidth [[UIScreen mainScreen] bounds].size.width</span></div><div class="line"><span class="meta">#define KScreenHeight [[UIScreen mainScreen] bounds].size.height</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UserInfoViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UserInfoViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    <span class="comment">// 给父级加背景色</span></div><div class="line">    [<span class="keyword">self</span>.view setBackgroundColor: [<span class="built_in">UIColor</span> whiteColor]];</div><div class="line">    </div><div class="line">    <span class="comment">// 手动创建一个标题</span></div><div class="line">    <span class="built_in">UILabel</span> *titleLable = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">40</span>, KScreenWidth, <span class="number">20</span>)];</div><div class="line">    <span class="comment">// 设置标题信息</span></div><div class="line">    [titleLable setText:<span class="string">@"个人用户信息"</span>];</div><div class="line">    titleLable.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">    titleLable.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">18</span>];</div><div class="line">    titleLable.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview: titleLable];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户名控件</span></div><div class="line">    _userNameView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _userNameView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_userNameView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户性别控件</span></div><div class="line">    _userSexView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span> + <span class="number">30</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _userSexView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_userSexView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户生日控件</span></div><div class="line">    _birthdayView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span>+<span class="number">30</span>*<span class="number">2</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _birthdayView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_birthdayView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户邮箱控件</span></div><div class="line">    _emailView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span> + <span class="number">30</span>*<span class="number">3</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _emailView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_emailView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户手机号控件</span></div><div class="line">    _phoneView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span> + <span class="number">30</span>*<span class="number">4</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _phoneView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_phoneView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">#pragma mark - Navigation</div><div class="line"></div><div class="line">// In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</div><div class="line">    // Get the new view controller using [segue destinationViewController].</div><div class="line">    // Pass the selected object to the new view controller.</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>view</code> &amp;&amp; <code>controller</code>都写好之后，我们去修改一下<code>AppDelegate</code>，因为默认主view为项目根目录的<code>ViewControll</code>，所以如果我们没有把view设置为我们的<code>UserInfoViewController</code> 运行是没有任何效果的。</p>
<figure class="highlight objectivec"><figcaption><span>AppDelegate.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    <span class="comment">// 第二节 get请求</span></div><div class="line">    UserInfoViewController *userInfoVC = [[UserInfoViewController alloc] init];</div><div class="line">    <span class="keyword">self</span>.window.rootViewController = userInfoVC;</div><div class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改完成后再次运行看效果。此时只出现了标题。<br><img src="./first-run.png" alt="first-run"></p>
<p>这时候我们可以打开调试看一下为什么我们只出现标题，没有出现<code>KeyValueView</code>呢<br>依次打开xCode菜单<code>Debug</code>=&gt;<code>View Debugging</code>=&gt;<code>Show View Frames</code>这时候可以看到我们的<code>labelView</code>其实是有被加到<code>view</code>中，只是没有数据展示 所以看不出来，接下来我们正式开始发起网络请求数据填充view<br><img src="./view-debugging.png" alt="view-debugging"></p>
<h3 id="发起网络请求数据"><a href="#发起网络请求数据" class="headerlink" title="发起网络请求数据"></a>发起网络请求数据</h3><p><a href="http://www.imooc.com/video/11982" target="_blank" rel="external">http://www.imooc.com/video/11982</a></p>
<p><a href="http://www.imooc.com/video/11978" target="_blank" rel="external">imooc ios网络操作学习指南</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS基础教程之界面初体验]]></title>
      <url>https://jsonz1993.github.io/2017/04/iOS%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E7%95%8C%E9%9D%A2%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/learn/tree/master/Objective-c" target="_blank" rel="external">demo源码</a> 如果找不到，则到<a href="https://github.com/jsonz1993/learn/tree/master/finish" target="_blank" rel="external">finish</a>文件下找</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>因为要学的是 <code>UIwindow</code>， 所以创建的不再是之前的<code>Command Line Tool</code>。 选择<code>iOS=&gt;Single View Application</code>.<br>语言选择<code>ObjectiveC</code>, 项目名根据自己喜欢的取。</p>
<h3 id="Hello-UIwindow"><a href="#Hello-UIwindow" class="headerlink" title="Hello UIwindow"></a>Hello UIwindow</h3><p><code>main.m</code> 入门文件不再出现在根目录上，而是在<code>Supporting Files</code>下。<br>默认引用了 <code>&lt;UIKit/UIKit.h&gt;</code> 和 <code>&quot;AppDelegate.h&quot;</code> </p>
<p>点击项目文件<br><img src="点击项目文件.png" alt="点击项目文件"></p>
<p>删除 Main Interface的默认值<code>Main</code><br><img src="main-interface.png" alt="main-interface"></p>
<p>然后打开<code>AppDelegate.m</code> 开始来手动来设置一下mainInterfacez</p>
<figure class="highlight objectivec"><figcaption><span>AppDelegate.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line">    <span class="comment">// 设置大小和位置 `UIScreen mainScreen` 可以得到手机主屏幕 `bounds`是获得大小</span></div><div class="line">    _window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[[<span class="built_in">UIScreen</span> mainScreen] bounds]];</div><div class="line">    <span class="comment">// 设置颜色为红色</span></div><div class="line">    _window.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    <span class="comment">// 设置根视频控制器</span></div><div class="line">    _window.rootViewController = [[<span class="built_in">UIViewController</span> alloc] init];</div><div class="line">    <span class="comment">// 将window设置为我们的主window</span></div><div class="line">    [_window makeKeyAndVisible];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改后按 <code>cmd(⌘)+R</code>或按左上角的三角形按钮来 <code>run app</code>。骚等片刻就可以看到 一个全屏红色的模拟器.<br><img src="run-app.png" alt="run-app">;</p>
<h2 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h2><p>新建一个项目。</p>
<ul>
<li>UI的基类， 基础</li>
<li>UIView的属性</li>
<li>UIView的方法</li>
<li>UIView的自适应  </li>
</ul>
<figure class="highlight objectivec"><figcaption><span>ViewController.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.m</span></div><div class="line"><span class="comment">//  UIwindow</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/27.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"bilibili"</span>);</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 视图</span></div><div class="line">    <span class="built_in">UIView</span> *view1 = [[<span class="built_in">UIView</span> alloc] init]; <span class="comment">// 实例化view</span></div><div class="line">    <span class="comment">// 状态栏高度为20px 所以写view的时候一般会让出20px</span></div><div class="line">    view1.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">375</span><span class="number">-20</span>, <span class="number">667</span><span class="number">-20</span>);</div><div class="line">    <span class="comment">// 背景颜色</span></div><div class="line">    view1.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    <span class="comment">// 将视图加入到父视图中</span></div><div class="line">    [<span class="keyword">self</span>.view addSubview: view1]; <span class="comment">// self.view 是view1的父视图</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"frame = x:%f y:%f w:%f h:%f"</span>, view1.frame.origin.x, view1.frame.origin.y, view1.frame.size.width, view1.frame.size.height);</div><div class="line">    <span class="comment">// 一般叫边框大小， x &amp;&amp; y 永远为0 w&amp;&amp;h 一致</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"bounds = x:%f y:%f w:%f h:%f"</span>, view1.bounds.origin.x, view1.bounds.origin.y, view1.bounds.size.width, view1.bounds.size.height);</div><div class="line">    <span class="comment">// center - 中心点</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"center - x:%f y:%f"</span>, view1.center.x, view1.center.y);</div><div class="line">    </div><div class="line">    <span class="comment">// 图片 1.png</span></div><div class="line">    <span class="comment">// 如果是二倍视网膜屏幕 准备 1@2x.png</span></div><div class="line">    <span class="comment">// 同理还有 1@3x.png</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"w:%f h:%f"</span>,[[<span class="built_in">UIScreen</span> mainScreen] bounds].size.width, [[<span class="built_in">UIScreen</span> mainScreen] bounds].size.height);</div><div class="line">    </div><div class="line">    <span class="comment">// 父视图 只会有一个</span></div><div class="line">    <span class="built_in">UIView</span> *superView = view1.superview;</div><div class="line">    superView.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *view2 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view2.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>); <span class="comment">// 坐标全是根据自身父视图来设置的，不会跨层</span></div><div class="line">    <span class="comment">// 给view设置唯一标识，方便父级视图获取辨认</span></div><div class="line">    view2.tag = <span class="number">2</span>;</div><div class="line">    view2.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    [view1 addSubview:view2];</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *view3 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view3.frame = <span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    view3.tag = <span class="number">3</span>;</div><div class="line">    view3.backgroundColor = [<span class="built_in">UIColor</span> purpleColor];</div><div class="line">    [view1 addSubview:view3];</div><div class="line">    </div><div class="line">    <span class="comment">// 子视图 会有多个</span></div><div class="line">    <span class="built_in">NSArray</span> *subViewsArray = view1.subviews;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> subViewsArray)</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (view.tag == <span class="number">2</span>)</div><div class="line">            view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor]; <span class="comment">// view2变白色</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果知道子视图的tag 可以通过tag得到对应的子视图</span></div><div class="line">    <span class="built_in">UIView</span> *subView = [view1 viewWithTag:<span class="number">3</span>];</div><div class="line">    subView.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</div><div class="line">    </div><div class="line">    <span class="comment">// 修改层级 类似css 的 zIndex</span></div><div class="line">    <span class="comment">// 当层交换之后， 对应的子视图的数组下标也会进行改变</span></div><div class="line">    <span class="comment">// 同一个父视图中，先加入的view层级会比较低</span></div><div class="line">    <span class="built_in">UIView</span> *view4 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view4.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</div><div class="line">    view4.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</div><div class="line">    [<span class="keyword">self</span>.view insertSubview:view4 atIndex:<span class="number">0</span>]; <span class="comment">// 这时候 view4会盖住view1的所有界面</span></div><div class="line">    </div><div class="line">    <span class="comment">// 交换两个层的视图</span></div><div class="line">    [superView exchangeSubviewAtIndex:<span class="number">0</span> withSubviewAtIndex:<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//插入一个视图到指定层</span></div><div class="line">    <span class="built_in">UIView</span> *view5 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view5.frame = <span class="built_in">CGRectMake</span>(<span class="number">7</span>, <span class="number">80</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    view5.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    [view1 insertSubview:view5 atIndex:<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 将一个view 放最顶层或最底层</span></div><div class="line">    [view1 bringSubviewToFront:view2]; <span class="comment">// 顶层</span></div><div class="line">    [view1 sendSubviewToBack: view2]; <span class="comment">// 底层</span></div><div class="line">    </div><div class="line">    <span class="comment">// 自适应</span></div><div class="line">    <span class="built_in">UIView</span> *backView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    backView.frame = <span class="built_in">CGRectMake</span>([<span class="built_in">UIScreen</span> mainScreen].bounds.size.width / <span class="number">2</span> - <span class="number">25</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height /<span class="number">2</span> - <span class="number">25</span>, <span class="number">50</span>, <span class="number">50</span>); <span class="comment">// 自适应到屏幕中部</span></div><div class="line">    backView.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">    backView.tag = <span class="number">1001</span>;</div><div class="line">    <span class="comment">// 准许子视图自适应</span></div><div class="line">    backView.autoresizesSubviews = <span class="literal">YES</span>;</div><div class="line">    [<span class="keyword">self</span>.view addSubview: backView];</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *topView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    topView.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line">    topView.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</div><div class="line">    <span class="comment">// 再设置子视图的适应方式 左侧适应</span></div><div class="line">    topView.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleRightMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleLeftMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleTopMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleBottomMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleWidth</span> | <span class="built_in">UIViewAutoresizingFlexibleHeight</span>; <span class="comment">// 右， 左， 上， 下， 宽， 高 跟随父级自适应</span></div><div class="line">    [backView addSubview: topView];</div><div class="line">    </div><div class="line">    <span class="comment">// 按钮 下节课会讲到</span></div><div class="line">    <span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType: <span class="built_in">UIButtonTypeSystem</span>];</div><div class="line">    btn.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">550</span>, <span class="number">355</span>, <span class="number">30</span>);</div><div class="line">    btn.backgroundColor = [<span class="built_in">UIColor</span> brownColor];</div><div class="line">    [btn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(btnClick) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview: btn];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)btnClick</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIView</span> *view = [<span class="keyword">self</span>.view viewWithTag:<span class="number">1001</span>];</div><div class="line">    view.frame = <span class="built_in">CGRectMake</span>(view.frame.origin.x - <span class="number">5</span>, view.frame.origin.y <span class="number">-5</span>, view.frame.size.width + <span class="number">10</span>, view.frame.size.height + <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h2><ul>
<li>文本标签</li>
<li>UIColor 颜色类</li>
</ul>
<p>新建一个项目</p>
<figure class="highlight objectivec"><figcaption><span>ViewController</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 文本标签</span></div><div class="line">    <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] init];</div><div class="line">    label.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">30</span>);</div><div class="line">    label.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</div><div class="line">    </div><div class="line">    <span class="comment">// 文本</span></div><div class="line">    label.text = <span class="string">@"我是一个IOS FONT"</span>;</div><div class="line">    <span class="comment">// 文字布局 NSTextAlignmentCenter NSTextAlignmentLeft NSTextAlignmentRight 等等</span></div><div class="line">    label.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">    <span class="comment">// 文字颜色</span></div><div class="line">    <span class="comment">// clearColor透明色</span></div><div class="line">    <span class="comment">// colorWithRed green blue alpha 类似css的rgba</span></div><div class="line">    label.textColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">.1</span> green:<span class="number">.8</span> blue:<span class="number">.2</span> alpha:<span class="number">1</span>];</div><div class="line">    <span class="comment">// label的透明度</span></div><div class="line">    label.alpha = <span class="number">.9</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 字体设置 label.font里面</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> systemFontOfSize: <span class="number">25</span>]; <span class="comment">// 字号</span></div><div class="line">    <span class="comment">// 加粗或倾斜</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">25</span>];<span class="comment">// 加粗和25号字，会覆盖前面设置</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> italicSystemFontOfSize:<span class="number">25</span>]; <span class="comment">// 倾斜</span></div><div class="line">    </div><div class="line">    <span class="comment">// 看系统有哪些字体</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *name <span class="keyword">in</span> [<span class="built_in">UIFont</span> familyNames])</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"font = %@"</span>, name);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 设置字体</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"Bodoni 72 Smallcaps"</span> size:<span class="number">25</span>];</div><div class="line">    <span class="comment">// 文字阴影</span></div><div class="line"><span class="comment">//    label.shadowColor = [UIColor redColor];</span></div><div class="line"><span class="comment">//    label.shadowOffset = CGSizeMake(1, 1);</span></div><div class="line">    </div><div class="line">    <span class="comment">// 多文字处理 会自动出现...</span></div><div class="line">    label.text = <span class="string">@"topView.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight; // 右， 左， 上， 下， 宽， 高 跟随父级自适应[backView addSubview: topView]"</span>;</div><div class="line">    <span class="comment">// 如果要换行</span></div><div class="line">    <span class="comment">// 1. 首先label要足够大</span></div><div class="line">    <span class="comment">// 2. 设置换行模式</span></div><div class="line">    <span class="comment">// 3. 设置显示行数</span></div><div class="line">    label.frame = <span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">20</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - <span class="number">40</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height - <span class="number">40</span>);</div><div class="line">    label.lineBreakMode = <span class="built_in">NSLineBreakByCharWrapping</span>;</div><div class="line">    label.numberOfLines = <span class="number">2</span>; <span class="comment">// 如果设置到-1或0 就不会限制行数，能显示多少行就显示多少行</span></div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.view addSubview:label];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UIImageView-图片view"><a href="#UIImageView-图片view" class="headerlink" title="UIImageView 图片view"></a>UIImageView 图片view</h2><p>新建一个项目,添加自己喜欢的照片到项目里。 比如我 肯定是添加<a href="http://baike.baidu.com/link?url=5a-QxerL5Nm6COTiB0ehVsx9e7aJ_i1nUVrlmYKx9xNLxD7UJtX6A284F0VbLfq3J46gw9ZcxdFN_-MTcH7aGwxafMh3mZ8SzWIhAg_fpzR97b4bUd5CnoC4XFmZa5Fo" target="_blank" rel="external">GAKKI</a>的</p>
<p><img src="add-files.png" alt="add-files"></p>
<figure class="highlight objectivec"><figcaption><span>ViewController.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 首先 随便加载几张图片到项目中</span></div><div class="line">    </div><div class="line">    <span class="comment">// 获取图片路径</span></div><div class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] resourcePath]; <span class="comment">// 工程目录</span></div><div class="line">    <span class="built_in">NSString</span> *imgPath = [<span class="built_in">NSString</span> stringWithFormat: <span class="string">@"%@/2.jpg"</span>, path]; <span class="comment">// 拼接图片路径</span></div><div class="line">    <span class="comment">// 后面参数为图片路径</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc] initWithContentsOfFile: imgPath]; <span class="comment">// 加载完会释放，不会存在内存中，不过每次都会去加载</span></div><div class="line"><span class="comment">//    image = [UIImage alloc] initWithData:&lt;#(nonnull NSData *)#&gt; 2进制格式图片加载</span></div><div class="line"><span class="comment">//    UIImage *image1 = [UIImage imageNamed:@"2"]; // 这种直接写文件名，如果是png格式的，可以省略后缀名 这种方式直接把图片放到内存中，占用内存但是下次调用会很快。 比如qq表情，可以放到缓存（内存）中</span></div><div class="line">    </div><div class="line">    <span class="comment">// 图片显示必须要有载体</span></div><div class="line">    <span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] initWithImage: image];</div><div class="line">    <span class="comment">// image.size.width image.size.height</span></div><div class="line">    imageView.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">400</span>,  <span class="number">400</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 内容模式 居中： UIViewContentModeCenter</span></div><div class="line">    <span class="comment">// 默认为UIViewContentModeScaleToFill 拉伸充满整个载体</span></div><div class="line">    <span class="comment">// UIViewContentModeScaleAspectFit 拉伸但不改变比例，充满小的边框</span></div><div class="line">    <span class="comment">// UIViewContentModeScaleAspectFill 拉伸但不改变比例，充满大的边框</span></div><div class="line">    <span class="comment">// 学过css的 应该都很容易理解 background-size模式</span></div><div class="line">    imageView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFit</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// UIImageView 动画 - 播放序列图 略!</span></div><div class="line">    </div><div class="line"> </div><div class="line">    <span class="comment">// 图片显示在屏幕上的大小是载体来控制的</span></div><div class="line">    [<span class="keyword">self</span>.view addSubview: imageView];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Foundation 入门]]></title>
      <url>https://jsonz1993.github.io/2017/04/Foundation-%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>Foundation(基础框架) 课程知识比较多，所以后面会每个学习内容新建一个类去写。<br><img src="./foundation.png" alt="foundation"></p>
<p>新建一个项目， <a href="https://github.com/jsonz1993/learn/tree/master/Objective-c/foundation" target="_blank" rel="external">文章源码,找不到则到finish里面找</a></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>新建一个<code>String</code>类<br><figure class="highlight objectivec"><figcaption><span>String.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">String</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) stringBaseFn; <span class="comment">// 声明一个函数，后面有关的字符串函数知识都写在该方法内</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入并调用该方法，主要是一些字符串的方法 以及输出</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"String.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        String *str = [[String alloc] init];</div><div class="line">        [str stringBaseFn];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>String.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  String.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/23.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"String.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">String</span></span></div><div class="line">-(<span class="keyword">void</span>) stringBaseFn</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *s = <span class="string">"Hello C"</span>; <span class="comment">// c语言字符串 char 类型 *号代表对象</span></div><div class="line">    <span class="comment">// OC 中@代表对象</span></div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"Hello ObjectiveC"</span>; <span class="comment">// OC 字符串 NSString 类型 *号代表对象</span></div><div class="line">    <span class="comment">// OC 与 C字符串的类型转换</span></div><div class="line">    <span class="comment">// C -&gt; OC</span></div><div class="line">    <span class="built_in">NSString</span> *str1 = [<span class="built_in">NSString</span> stringWithUTF8String:s];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str1 = %@"</span>, str1);</div><div class="line">    <span class="comment">// OC -&gt; C</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str2 = %s"</span>, [str UTF8String]);</div><div class="line">    </div><div class="line">    <span class="comment">// 这样创建字符串，不需要自己手动去释放内存等</span></div><div class="line">    <span class="built_in">NSString</span> *str3 = <span class="string">@"IOS"</span>;</div><div class="line">    <span class="comment">// 这种需要手动释放内存</span></div><div class="line">    <span class="built_in">NSString</span> *str4 = [[<span class="built_in">NSString</span> alloc] init];</div><div class="line">    str4 = <span class="string">@"ios"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// **格式化字符串** 重要</span></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="built_in">NSString</span> *str5 = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"a = %d str3 = %@"</span>, a, str3];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str5 为 %@"</span>, str5);</div><div class="line">    </div><div class="line">    <span class="comment">// 拼接字符串</span></div><div class="line">    <span class="built_in">NSString</span> *str6 = [str5 stringByAppendingString: [<span class="built_in">NSString</span> stringWithUTF8String: s]];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str6 = %@"</span>, str6);</div><div class="line">    </div><div class="line">    <span class="comment">// 大小写的转换问题</span></div><div class="line">    <span class="built_in">NSString</span> *str7 = <span class="string">@"HELLO JSONZ"</span>;</div><div class="line">    <span class="built_in">NSString</span> *str8 = [str7 lowercaseString];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str8 = %@"</span>, str8);</div><div class="line">    </div><div class="line">    <span class="comment">// 转换大写</span></div><div class="line">    <span class="built_in">NSString</span> *str9 = [str8 uppercaseString];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str9 = %@"</span>, str9);</div><div class="line">    </div><div class="line">    <span class="comment">// 前缀和后缀的判断</span></div><div class="line">    <span class="built_in">NSString</span> *str10 = <span class="string">@"www.imooc.com"</span>;</div><div class="line">    <span class="comment">// 判断前缀</span></div><div class="line">    <span class="built_in">BOOL</span> hasPreFix = [str10 hasPrefix:<span class="string">@"www."</span>];</div><div class="line">    <span class="keyword">if</span> (hasPreFix)</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"有对应前缀"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"没有对应前缀"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 后缀</span></div><div class="line">    <span class="built_in">BOOL</span> hasSuffix = [str10 hasSuffix:<span class="string">@".com"</span>];</div><div class="line">    <span class="keyword">if</span> (hasSuffix)</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"有对应后缀"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"没有对应后缀"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 判断字符串是否相同</span></div><div class="line">    <span class="built_in">NSString</span> *str11 = <span class="string">@"Hello"</span>;</div><div class="line">    <span class="built_in">NSString</span> *str12 = <span class="string">@"Hello"</span>;</div><div class="line">    <span class="keyword">if</span> ([str11 isEqualToString:str12])</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"str11 与 str12 一致"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"不一致"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 分割字符串</span></div><div class="line">    <span class="comment">// 1. 按照指定字符分割字符串 返回数组</span></div><div class="line">    <span class="built_in">NSString</span> *str13 = <span class="string">@"a,b,c,d,e,f,g"</span>;</div><div class="line">    <span class="built_in">NSArray</span> *strArray = [str13 componentsSeparatedByString:<span class="string">@","</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> strArray)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 2. 按照范围截取字符串</span></div><div class="line">    <span class="built_in">NSRange</span> range = <span class="built_in">NSMakeRange</span>(<span class="number">1</span>, <span class="number">5</span>);</div><div class="line">    <span class="built_in">NSString</span> *str14 = [str13 substringWithRange:range];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str14 = %@"</span>, str14);</div><div class="line">    <span class="comment">// 3. 从某一位开始截取到结束</span></div><div class="line">    <span class="built_in">NSString</span> *str15 = [str13 substringFromIndex:<span class="number">2</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str15 = %@"</span>, str15);</div><div class="line">    <span class="comment">// 4.从开头到某一位</span></div><div class="line">    <span class="built_in">NSString</span> *str16 = [str13 substringToIndex:<span class="number">7</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str16 = %@"</span>, str16);</div><div class="line">    <span class="comment">// 5.将字符串拆分为每一个字符, 从字符串取出某一位</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [str13 length]; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%c"</span>, [str13 characterAtIndex:i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 查找</span></div><div class="line">    <span class="built_in">NSString</span> *str17 = <span class="string">@"ab cd ef gh ij ab"</span>;</div><div class="line">    <span class="comment">// 查找指定字符串的位置 正向查找</span></div><div class="line">    <span class="built_in">NSRange</span> range1 = [str17 rangeOfString:<span class="string">@"ab"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"range1.location: %ld range1.length: %ld"</span>, range1.location, range1.length);</div><div class="line">    </div><div class="line">    <span class="comment">// 替换</span></div><div class="line">    <span class="built_in">NSString</span> *str18 = <span class="string">@"Hello ios, Hello imooc"</span>;</div><div class="line">    <span class="comment">// 替换某一个范围的内容</span></div><div class="line">    <span class="built_in">NSString</span> *str19 = [str18 stringByReplacingCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">5</span>)  withString:<span class="string">@"你好"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str19 = %@"</span>, str19);</div><div class="line">    </div><div class="line">    <span class="comment">// 用指定字符串替换原字符串</span></div><div class="line">    <span class="built_in">NSString</span> *str20 = [str18 stringByReplacingOccurrencesOfString:<span class="string">@"Hello ios"</span> withString: <span class="string">@"第一个参数为源字符串中要被替换的内容， 第二个为替换成的字符串"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str20 = %@"</span>, str20);</div><div class="line">    </div><div class="line">    <span class="comment">// 读取文件</span></div><div class="line">    <span class="comment">// 1. 本地文件； 2.网络文件</span></div><div class="line">    <span class="comment">// 路径类</span></div><div class="line">    <span class="built_in">NSString</span> *str21 = <span class="string">@"www.baidu.com"</span>;</div><div class="line">    <span class="comment">// 网络路径</span></div><div class="line">    <span class="built_in">NSURL</span> *httpURL = [<span class="built_in">NSURL</span> URLWithString:str21];</div><div class="line">    <span class="comment">//本地路径</span></div><div class="line"><span class="comment">//    NSString *fileURL = [NSURL fileURLWithPath:str21];</span></div><div class="line">    <span class="comment">// 读取网络文件</span></div><div class="line">    <span class="built_in">NSString</span> *httpStr = [<span class="built_in">NSString</span> stringWithContentsOfURL:httpURL encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"httpStr = %@"</span>, httpStr);</div><div class="line">    <span class="comment">// 读取本地文件</span></div><div class="line">    <span class="built_in">NSString</span> *fileStr = [<span class="built_in">NSString</span> stringWithContentsOfFile: <span class="string">@"/Users/jsonz/Documents/learn/Objective-c/foundation/foundation/app.txt"</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error: <span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"fileStr = %@"</span>, fileStr);</div><div class="line">    <span class="comment">// 写入文件</span></div><div class="line">    <span class="built_in">NSString</span> *str22 = <span class="string">@"Hello JSer"</span>;</div><div class="line">    <span class="built_in">BOOL</span> isOk = [str22 writeToFile:<span class="string">@"/Users/jsonz/Documents/learn/Objective-c/foundation/foundation/app.js"</span> atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (isOk) <span class="built_in">NSLog</span>(<span class="string">@"文件写入成功"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">NSLog</span>(<span class="string">@"文件写入失败"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="NSMutableString-可变字符串"><a href="#NSMutableString-可变字符串" class="headerlink" title="NSMutableString 可变字符串"></a>NSMutableString 可变字符串</h2><p>新建一个 <code>NSMutableStringClass</code> 类。 NSMutableString是字符串的子类</p>
<figure class="highlight objectivec"><figcaption><span>NSMutableString.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSStringClass.h</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/25.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMutableStringClass</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) ShowNSMutableString;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>NSMutableString.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSStringClass.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/25.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSMutableStringClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableStringClass</span></span></div><div class="line">-(<span class="keyword">void</span>) ShowNSMutableString</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 可变字符串的简单方法</span></div><div class="line">    <span class="comment">// 可变字符串是字符串的子类</span></div><div class="line">    <span class="comment">// 实例化</span></div><div class="line">    <span class="built_in">NSMutableString</span> *str = [[<span class="built_in">NSMutableString</span> alloc] initWithCapacity:<span class="number">10</span>]; <span class="comment">// 分类长度不可以超过10， 性能优化。不过超过10 也不会报错</span></div><div class="line">    [str setString:<span class="string">@"hello "</span>];</div><div class="line"></div><div class="line">    <span class="comment">// 1.追加字符串</span></div><div class="line">    [str appendString:<span class="string">@"ObjectiveC"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    <span class="comment">// 追加格式化字符串</span></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    [str appendFormat:<span class="string">@" - %d"</span>, a];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    </div><div class="line">    <span class="comment">// 2.替换字符串</span></div><div class="line">    <span class="built_in">NSRange</span> range = [str rangeOfString:<span class="string">@"ObjectiveC"</span>];</div><div class="line">    [str replaceCharactersInRange:range withString:<span class="string">@"IOS"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    </div><div class="line">    <span class="comment">// 3. 插入字符串</span></div><div class="line">    [str insertString:<span class="string">@"A"</span> atIndex: <span class="number">4</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    </div><div class="line">    <span class="comment">// 4. 删除字符串</span></div><div class="line">    <span class="built_in">NSRange</span> range1 = [str rangeOfString:<span class="string">@"IOS"</span>];</div><div class="line">    [str deleteCharactersInRange:range1];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m 调用前记得引入类</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableStringClass</span> *_NSMutableString = [[<span class="built_in">NSMutableStringClass</span> alloc] init];</div><div class="line">[_NSMutableString ShowNSMutableString];</div></pre></td></tr></table></figure>
<h2 id="NSArray-不可变数组"><a href="#NSArray-不可变数组" class="headerlink" title="NSArray 不可变数组"></a>NSArray 不可变数组</h2><p>新建一个<code>arr</code>类</p>
<figure class="highlight objectivec"><figcaption><span>Arr.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Arr.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"Arr.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Arr</span></span></div><div class="line">-(<span class="keyword">void</span>) showArrFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"不可变数组"</span>);</div><div class="line">    <span class="comment">// OC数组。 可以存储不同类型对象,只能存储对象.(int, char)不可以</span></div><div class="line">    <span class="comment">// 只存对象指针（js一样)</span></div><div class="line">    <span class="built_in">NSArray</span> *arr1 = [[<span class="built_in">NSArray</span> alloc] initWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="string">@"4"</span>, <span class="string">@"5"</span>, <span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 数组长度</span></div><div class="line">    <span class="keyword">int</span> count = (<span class="keyword">int</span>)arr1.count;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"count = %d"</span>, count);</div><div class="line">    </div><div class="line">    <span class="comment">// 判断是否有该对象</span></div><div class="line">    <span class="built_in">BOOL</span> isHave = [arr1 containsObject: <span class="string">@"2"</span>];</div><div class="line">    <span class="keyword">if</span> (isHave)</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"存在"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"不存在"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 取得数组中所需元素</span></div><div class="line">    <span class="built_in">NSString</span> *str = [arr1 lastObject];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"最后一个对象为 %@"</span>, str);</div><div class="line">    str = [arr1 firstObject];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第一个对象为 %@"</span>, str);</div><div class="line">    str = [arr1 objectAtIndex: <span class="number">3</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第三个元素为 %@"</span>, str);</div><div class="line">    <span class="comment">// 查找某个对象为第几个下标, 不存在则 -1</span></div><div class="line">    <span class="keyword">int</span> index = (<span class="keyword">int</span>)[arr1 indexOfObject:<span class="string">@"3"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"查找某个对象为第几个下标 %d"</span>, index);</div><div class="line">    </div><div class="line">    <span class="comment">// 数组的遍历 1.for; 2. for in; 3.枚举迭代</span></div><div class="line">    <span class="comment">// for 循环 注意类型问题</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.count; i++) &#123;</div><div class="line">        <span class="built_in">NSString</span> *str1 = [arr1 objectAtIndex:i];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"for str1 = %@"</span>, str1);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 快速枚举 数组的元素类型要保持一致</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str2 <span class="keyword">in</span> arr1) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"for in str2 = %@"</span>, str2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 迭代枚举(慕课没有该点视频)</span></div><div class="line">    [arr1 enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"id= %@"</span>, obj);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="NSMutableArr-可变数组"><a href="#NSMutableArr-可变数组" class="headerlink" title="NSMutableArr 可变数组"></a>NSMutableArr 可变数组</h2><p>与可变字符串一样，数组也有可变的。一般项目中如果有修改数组的就用这个，如果不希望数组被修改则用不可变数组</p>
<figure class="highlight objectivec"><figcaption><span>NSMutableArrClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSMutableArrClass.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSMutableArrClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableArrClass</span></span></div><div class="line">-(<span class="keyword">void</span>)showArrFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *array = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">    <span class="built_in">NSString</span> *str1 = <span class="string">@"bili"</span>;</div><div class="line">    <span class="comment">// 添加元素</span></div><div class="line">    [array addObject: str1];</div><div class="line">    <span class="built_in">NSArray</span> *arr1 = [[<span class="built_in">NSArray</span> alloc] initWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="string">@"4"</span>, <span class="string">@"5"</span>, <span class="literal">nil</span>];</div><div class="line">    [array addObject:arr1];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"array = %@"</span>, array);</div><div class="line">    </div><div class="line">    <span class="comment">// 删除所有元素</span></div><div class="line">    [array removeAllObjects];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    [array addObject:arr1];</div><div class="line">    [array addObject: str1];</div><div class="line">    <span class="comment">// 删除最后一个元素</span></div><div class="line">    [array removeLastObject];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    [array addObject: str1];</div><div class="line">    <span class="comment">// 删除指定元素</span></div><div class="line">    [array removeObject:<span class="string">@"bili"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    <span class="comment">// 删除指定index的元素</span></div><div class="line">    [array removeObjectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    </div><div class="line">    [array addObject:arr1];</div><div class="line">    [array addObject: str1];</div><div class="line">    </div><div class="line">    <span class="comment">// 交换元素位置</span></div><div class="line">    [array exchangeObjectAtIndex:<span class="number">1</span> withObjectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"交换后 %@"</span>, array);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="字典-NSDictionary"><a href="#字典-NSDictionary" class="headerlink" title="字典 NSDictionary"></a>字典 NSDictionary</h2><p>相当于js 里的对象<code>{}</code>. 新建一个类<code>NSDic</code></p>
<figure class="highlight objectivec"><figcaption><span>NSDictionary.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDictionary.h</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDic</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) showNSDictionaryFn;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>NSDictionary.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDictionary.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSDic.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDic</span></span></div><div class="line">-(<span class="keyword">void</span>) showNSDictionaryFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"test"</span>);</div><div class="line"><span class="comment">//   字典： 相当于js的对象~ py的字典。</span></div><div class="line">    <span class="comment">// 声明后不可以改</span></div><div class="line">    <span class="built_in">NSDictionary</span> *dict1 = [<span class="built_in">NSDictionary</span> dictionaryWithObject:<span class="string">@"1"</span> forKey:<span class="string">@"a"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict1 = %@"</span>, dict1);</div><div class="line">    </div><div class="line">    <span class="comment">// 多个键值对</span></div><div class="line">    <span class="built_in">NSDictionary</span> *dict2 = [<span class="built_in">NSDictionary</span> dictionaryWithObjects:[<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="literal">nil</span>] forKeys:[<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="string">@"c"</span>, <span class="literal">nil</span>]];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict2 %@"</span>, dict2);</div><div class="line">    </div><div class="line">    <span class="comment">// 简便写法</span></div><div class="line">    <span class="built_in">NSDictionary</span> *dict3 = @&#123;</div><div class="line">                            <span class="string">@"1"</span>: <span class="string">@"a"</span>,</div><div class="line">                            <span class="string">@"2"</span>: <span class="string">@"b"</span></div><div class="line">                            &#125;;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict3 %@"</span>, dict3);</div><div class="line">    </div><div class="line">    <span class="comment">// 长度</span></div><div class="line">    <span class="keyword">int</span> count = (<span class="keyword">int</span>)[dict2 count];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"count %d"</span>, count);</div><div class="line">    </div><div class="line">    <span class="comment">// 获取对应key的 value</span></div><div class="line">    <span class="built_in">NSString</span> *value = [dict2 valueForKey: <span class="string">@"b"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"value = %@"</span>, value);</div><div class="line">    <span class="built_in">NSString</span> *value2 = [dict2 objectForKey: <span class="string">@"b"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"value2 = %@"</span>, value2);</div><div class="line">    </div><div class="line">    <span class="comment">// 数组 字典所有的值</span></div><div class="line">    <span class="built_in">NSArray</span> *allValues = [dict2 allValues];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"allValues = %@"</span>, allValues);</div><div class="line">    </div><div class="line">    <span class="comment">// 数组 所有的key</span></div><div class="line">    <span class="built_in">NSArray</span> *allKeys = [dict2 allKeys];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"allKeys = %@"</span>, allKeys);</div><div class="line">    </div><div class="line">    <span class="comment">// 遍历</span></div><div class="line">    <span class="built_in">NSArray</span> *array = [dict2 objectsForKeys:[<span class="built_in">NSArray</span> arrayWithObjects: <span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="string">@"d"</span>, <span class="literal">nil</span>] notFoundMarker:<span class="string">@"Not Fount"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"array = %@"</span>, array);</div><div class="line">    </div><div class="line">    <span class="comment">// 遍历字典</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> dict2) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ = %@"</span>, key, [dict2 objectForKey:key]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 枚举器</span></div><div class="line">    <span class="built_in">NSEnumerator</span> *en = [dict2 keyEnumerator];</div><div class="line">    <span class="keyword">id</span> key = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">while</span> (key = [en nextObject]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"key = %@"</span>, key);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [dict2 enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span> key, <span class="keyword">id</span> obj, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"id = %@, obj = %@"</span>, key, obj);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="可变字段-NSMutableDictionary"><a href="#可变字段-NSMutableDictionary" class="headerlink" title="可变字段 NSMutableDictionary"></a>可变字段 NSMutableDictionary</h2><figure class="highlight objectivec"><figcaption><span>NSDic2.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDic2.h</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDic2</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) showFn;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>NSDic2.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDic2.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSDic2.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDic2</span></span></div><div class="line"><span class="comment">// 可变字典</span></div><div class="line">-(<span class="keyword">void</span>) showFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *dict = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line">    <span class="comment">// 添加键值对</span></div><div class="line">    [dict setObject:<span class="string">@"1"</span> forKey: <span class="string">@"a"</span>];</div><div class="line">    [dict setObject: <span class="string">@"2"</span> forKey: <span class="string">@"b"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 删除键值对</span></div><div class="line">    [dict removeObjectForKey:<span class="string">@"a"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict 删除forKey %@"</span>, dict);</div><div class="line">    </div><div class="line">    <span class="comment">// 删除所有</span></div><div class="line">    [dict removeAllObjects];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict 删除所有 %@"</span>, dict);</div><div class="line"></div><div class="line">    [dict setObject:<span class="string">@"1"</span> forKey: <span class="string">@"a"</span>];</div><div class="line">    [dict setObject: <span class="string">@"2"</span> forKey: <span class="string">@"b"</span>];</div><div class="line">    [dict setObject: <span class="string">@"3"</span> forKey: <span class="string">@"c"</span>];</div><div class="line">    [dict removeObjectsForKeys: [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="literal">nil</span>]];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict 批量删除  %@"</span>, dict);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C 面向对象初体验]]></title>
      <url>https://jsonz1993.github.io/2017/04/Objective-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h2><p>语言的面向对象都是换汤不换药 来来去去那几个概念</p>
<ul>
<li>OOP（Object Oriented Programming) 基本概念</li>
<li>对象 （男人，女人，程序员）</li>
<li>抽象 - 类（人）</li>
</ul>
<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul>
<li>创建类(人)、得到对象（程序员）</li>
<li>成员变量： 内部使用，比如 大脑 眼睛 嘴</li>
<li>属性： 给外部使用 比如 职业</li>
<li>类的实例为对象</li>
</ul>
<h4 id="创建demo"><a href="#创建demo" class="headerlink" title="创建demo"></a>创建demo</h4><ol>
<li>同<a href="https://jsonz1993.github.io/2017/04/%E5%BE%81%E6%88%98Objective-C/">征战Objective-C</a>一样 创建一个<code>Command Line Tool</code> 写示例代码</li>
<li>创建一个文件，类型为<code>Cocoa Class</code>,<code>name: People</code>, <code>Subclass of: NSObject</code>, <code>language: Objective-C</code> 。点击Next之后会生成两个文件 <code>People.h</code>,<code>People.m</code>。</li>
</ol>
<h4 id="引入与实例化"><a href="#引入与实例化" class="headerlink" title="引入与实例化"></a>引入与实例化</h4><p>在 <code>main.m</code> 里面引入文件并实例化对象, 后面如果没有特别说明， 都是在 <code>main @autoreleasepool</code> 里面写代码<br><figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"People.h"</span> // 引入类</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">// 实例化对象</span></div><div class="line">        <span class="comment">// 类名    对象名(星号代表是指针类型) = [[类名/对象名] 方法名]</span></div><div class="line">        <span class="comment">// People p1/p2                  = [[People alloc] init]</span></div><div class="line">        <span class="comment">// alloc - 为对象分配内存空间</span></div><div class="line">        <span class="comment">// init - 进行初始化操作</span></div><div class="line">        People *p1 = [[People alloc] init];</div><div class="line">        People *p2 = [[People alloc] init];</div><div class="line">        People *p3 = [People new]; <span class="comment">// new 在Objective-C 用得少</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1 - %p"</span>, p1);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p2 - %p"</span>, p2);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p3 - %p"</span>, p3);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="创建成员变量与属性"><a href="#创建成员变量与属性" class="headerlink" title="创建成员变量与属性"></a>创建成员变量与属性</h4><figure class="highlight objectivec"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 姓名，年龄，性别</span></div><div class="line"><span class="comment">// 类内使用成员变量(m)， 类外使用属性(h)</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">People</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 声明类的属性 声明后 main.m 就可以通过 p1.peopleName = @"Jsonz"; 访问修改属性</span></div><div class="line"><span class="comment">// 属性就是成员变量的外部接口 h 文件写。外部使用</span></div><div class="line"><span class="comment">//设置与获取Name</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSString</span> *peopleName;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>People.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// 成员变量 m 文件定义 内部使用</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">People</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> _peopleAge;</div><div class="line">    <span class="keyword">int</span> _peopleSex;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">instancetype</span>) init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _peopleName = <span class="string">@"张三"</span>; <span class="comment">// 成员变量 类内使用</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>此时<code>main.m</code> 可以使用<code>peopleName</code>属性</p>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性的使用</span></div><div class="line">p1.peopleName = <span class="string">@"jsonz"</span>;</div><div class="line">p2.peopleName = <span class="string">@"李四"</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"p1.peopleName - %@"</span>, p1.peopleName);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"p2.peopleName - %@"</span>, p2.peopleName);</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="加号方法-减号方法-的声明与调用"><a href="#加号方法-减号方法-的声明与调用" class="headerlink" title="加号方法 减号方法 的声明与调用"></a>加号方法 减号方法 的声明与调用</h3><p>在<code>People.h</code> 声明方法<br><figure class="highlight plain"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * - 、+ (减号代表对象方法，加号代表类方法)</div><div class="line"> * 对象方法既是在实例上调用，而类方法则是在类上面调用，如: People *p1 = [[People alloc] init]</div><div class="line"> * 此时 People是类， p1是对象</div><div class="line"> * h 文件进行声明， m 进行实现</div><div class="line"> */</div><div class="line">-(void) report; // 减号方法</div><div class="line">+(void) report1; // void 代表不用返回， +号方法</div><div class="line">-(int) returnInt; // 改变返回值的函数</div></pre></td></tr></table></figure></p>
<p>在<code>People.m</code>实现该方法<br><figure class="highlight objectivec"><figcaption><span>People.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>) report</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"减号 Report"</span>);</div><div class="line">    <span class="comment">// 如何在减号方法调加号方法</span></div><div class="line">    <span class="comment">// [People report1]; </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *_peopleName1; <span class="comment">// 静态变量，供加号方法内调用</span></div><div class="line">+(<span class="keyword">void</span>) report1</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"加号 Report"</span>);</div><div class="line">    _peopleName1 = <span class="string">@"张三"</span>; <span class="comment">// 调用静态变量 不能调用成员变量</span></div><div class="line">    <span class="comment">// 如何在加号方法调减号方法</span></div><div class="line">    <span class="comment">// [[People alloc] report]</span></div><div class="line">&#125;</div><div class="line">-(<span class="keyword">int</span>) returnInt</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 前面是int，所以该函数必须返回一个int类型</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">People *p1 = [[People alloc] init]</div><div class="line">[p1 report]; <span class="comment">// 减号方法</span></div><div class="line">[People report1]; <span class="comment">// 加号方法</span></div><div class="line"></div><div class="line"><span class="comment">// [[People alloc] init]</span></div><div class="line"><span class="comment">// [People alloc]会返回一个对象，这时候才能调用 init 所以 alloc是加号方法， init是减号方法</span></div></pre></td></tr></table></figure></p>
<h3 id="函数参数类型"><a href="#函数参数类型" class="headerlink" title="函数参数类型"></a>函数参数类型</h3><figure class="highlight objectivec"><figcaption><span>People.h 声明</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数参数问题</span></div><div class="line">-(<span class="keyword">int</span>)showWithA: (<span class="keyword">int</span>) a; <span class="comment">// 有一个int类型参数 函数名为 `showWithA:`</span></div><div class="line">-(<span class="keyword">int</span>)showWithA: (<span class="keyword">int</span>)a andB:(<span class="keyword">int</span>)b; <span class="comment">// 有两个int类型参数  函数名为 `showWithA: andB:`</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>People.m 实现</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数问题</span></div><div class="line">-(<span class="keyword">int</span>)showWithA:(<span class="keyword">int</span>)a</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line">-(<span class="keyword">int</span>)showWithA:(<span class="keyword">int</span>)a andB:(<span class="keyword">int</span>)b</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m 调用</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数的参数使用</span></div><div class="line"><span class="keyword">int</span> a1 = [p1 showWithA:<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> a2 = [p1 showWithA:<span class="number">20</span> andB:<span class="number">30</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"a1 = %d"</span>, a1);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"a2 = %d"</span>, a2);</div></pre></td></tr></table></figure>
<h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><p>平时调用一个类的对象方法都是这么调用的 <code>People *p1 = [[People alloc] init]</code>， 但此时这个init具体做了什么事情，我们并不知道。</p>
<p>我们可以在类里面重写掉这个<code>init</code> 方法;</p>
<figure class="highlight objectivec"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对于初始化方法来说 id || instancetype 没有区别，对于其他方法，一般 instancetype 比 id用的多</span></div><div class="line"><span class="comment">// -(id)init; // 万能类型，可以返回各种类型对象</span></div><div class="line">-(<span class="keyword">instancetype</span>)init; <span class="comment">// 当前类的类型，比如当前类是People类型，那么instancetype就是People类型</span></div><div class="line">-(<span class="keyword">void</span>) showPeopleProperty; <span class="comment">// 定义一个方法来输出类的属性</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>People.m 重写init</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果此时提示 Duplicate declaration of method ‘init' 则代表你上面本来就声明了一个init 此时删除该init 或者把逻辑移到那个函数内即可</span></div><div class="line"><span class="comment">// init 固有的模式</span></div><div class="line">- (<span class="keyword">instancetype</span>) init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init]; <span class="comment">// 自己继承父级的 init 此处是 NSObject</span></div><div class="line">    <span class="comment">// 内部进行一些初始化的设定</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _peopleName = <span class="string">@"Jsonz"</span>; <span class="comment">// 成员变量 类内使用</span></div><div class="line">        _peopleAge = <span class="number">30</span>;</div><div class="line">        _peopleSex = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>; <span class="comment">// 返回自身</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出People的对象初始化值</span></div><div class="line">-(<span class="keyword">void</span>) showPeopleProperty</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"peopleName = %@"</span>, _peopleName);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"peopleAge = %d"</span>, _peopleAge);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"peopleAge = %d"</span>, _peopleSex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们来自定义一个初始化的方法<br><figure class="highlight objectivec"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">instancetype</span>)initWithPeopleName:(<span class="built_in">NSString</span> *) peopleName andPeopleAge:(<span class="keyword">int</span>)peopleAge</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>People.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 既然我们是自定义一个初始化方法，那也要按照初始化方法的写法，把一些结构给加上</span></div><div class="line">-(instancetupe)initWithPeopleName:(<span class="built_in">NSString</span> *)peopleName andPeopleAge:(<span class="keyword">int</span>)peopleAge</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 初始化方法的结构</span></div><div class="line">	<span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">		_peopleName = peopleName;</div><div class="line">        _peopleAge = peopleAge;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自己实现的初始化方法</span></div><div class="line">People *pSelf = [[People alloc] initWithPeopleName:<span class="string">@"Jsonz"</span> andPeopleAge: <span class="number">23</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"自己实现的init 的属性有哪些: ---- "</span>);</div><div class="line">[pSelf showPeopleProperty];</div></pre></td></tr></table></figure>
<h2 id="面向对象三部曲"><a href="#面向对象三部曲" class="headerlink" title="面向对象三部曲"></a>面向对象三部曲</h2><p>新建一个项目，避免学习太混乱</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>新建一个类，叫MyClass<br><figure class="highlight objectivec"><figcaption><span>MyClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 成员变量访问修饰符的问题</span></div><div class="line">    <span class="comment">// 默认为 protected 受保护的</span></div><div class="line">    <span class="keyword">@public</span> <span class="comment">// 公有 - 在类内 类外都可以使用，并且可以被继承</span></div><div class="line">    <span class="keyword">int</span> _classInt;</div><div class="line">    </div><div class="line">    <span class="keyword">@private</span> <span class="comment">// 私有 - 在类内可以使用， 类外无法调用 并且无法被继承</span></div><div class="line">    <span class="keyword">@protected</span> <span class="comment">// 受保护 - 默认的 在类内可以使用，类外无法调用 并且可以被继承</span></div><div class="line">    <span class="built_in">NSString</span> *_classStr;</div><div class="line">    <span class="keyword">@package</span> <span class="comment">// 框架权限 - 在框架内相当于受保护(可被调用与继承)， 在框架外相当于私有(类外无法使用与继承)</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSString</span> *className;</div><div class="line"><span class="comment">// 方法是没有访问修饰符的， 同C语言一样。</span></div><div class="line"><span class="comment">// 如果想要一个方法可以在类外可以使用，则要在h声明，m实现。</span></div><div class="line"><span class="comment">// 如果不想在类外使用， 直接在m写实现， h 不写声明。</span></div><div class="line">-(<span class="keyword">void</span>) report;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>MyClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></div><div class="line">-(<span class="keyword">void</span>)report</div><div class="line">&#123;</div><div class="line">    _classStr = <span class="string">@"ClassStr bilibilii"</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ClassName - %@"</span>, _className);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"classInt - %d"</span>, _classInt);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        MyClass *mc = [[MyClass alloc] init];</div><div class="line">        mc.className = <span class="string">@"我的类"</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// 类外使用 public 成员变量</span></div><div class="line">        mc-&gt;_classInt = <span class="number">1001</span>; <span class="comment">// 使用指向来调用类中的公有成员变量</span></div><div class="line">        </div><div class="line">        [mc report];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>创建两个类</p>
<ul>
<li>父类 ParentClass</li>
<li>子类 ChildClass, 创建的时候记得选上继承 ParentClass， 如果忘了选也没关系 后面手动修改一下就可以</li>
</ul>
<figure class="highlight objectivec"><figcaption><span>ParentClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// NSObject - 基类 此处的:(冒号)是代表继承关系</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ParentClass</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 受保护变量 可继承 不可外部调用</span></div><div class="line">    <span class="keyword">int</span> _classInt;</div><div class="line">    </div><div class="line">    <span class="comment">// 私有变量</span></div><div class="line">    <span class="keyword">@private</span></div><div class="line">    <span class="built_in">NSString</span> *_classStr;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSString</span> *className;</div><div class="line">-(<span class="keyword">void</span>)report; <span class="comment">// 如果此处不声明，则类外不能调。 子类也不继承</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>ParentClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ParentClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ParentClass</span></span></div><div class="line">-(<span class="keyword">void</span>)report</div><div class="line">&#123;</div><div class="line">    _classInt = <span class="number">1002</span>;</div><div class="line">    _classStr = <span class="string">@"Jsonz's 私有变量"</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ClassName - %@"</span>, _className);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"classInt - %d"</span>, _classInt);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"classStr - %@"</span>, _classStr); <span class="comment">// 此处在 ChildClass 中也会被打印出来，因为继承了该方法，所以会被打印</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>ChildClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ParentClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ChildClass</span> : <span class="title">ParentClass</span></span></div><div class="line">-(<span class="keyword">void</span>)show;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>ChildClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ChildClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ChildClass</span></span></div><div class="line">-(<span class="keyword">void</span>)show</div><div class="line">&#123;</div><div class="line">    _classInt = <span class="number">1003</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"show 此处_classInt 变化了 - %d"</span>, _classInt);</div><div class="line"><span class="comment">//    NSLog(@"show 打印父类的私有方法NSString %@", _classStr);  此处因为是父级的私有变量，所以外部无法访问</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用</span></div><div class="line"><span class="comment">// 父类</span></div><div class="line">ParentClass *pc = [[ParentClass alloc] init];</div><div class="line">pc.className = <span class="string">@"parentClass ClassName"</span>;</div><div class="line">[pc report];</div><div class="line"></div><div class="line"><span class="comment">// 子类</span></div><div class="line">ChildClass *cc = [[ChildClass alloc] init];</div><div class="line">cc.className = <span class="string">@"ChildClass ClassName"</span>; <span class="comment">// 此处为父类继承过来的属性</span></div><div class="line">[cc show];</div><div class="line">[cc report]; <span class="comment">// 此处还是1002 因为 cc中的 report 继承 pc 的report，此处重新复制了并打印。所以是1002</span></div></pre></td></tr></table></figure>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul>
<li>方法重写 基于父类方法继承重写，返回值，函数名，参数等都一致</li>
<li>方法重载 (OC 不支持) 函数名一致，返回值 参数 参数类型等都不一致</li>
</ul>
<p>创建一个类<code>ColorPrint</code> 用于演示多态，后面会基于 <code>ParentClass</code>, <code>ChildClass</code> 与<code>ColorPrint</code> 来说明多态。</p>
<p>父类实现一个打印机方法<br><figure class="highlight objectivec"><figcaption><span>ParentClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>) print;</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>ParentClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>) print</div><div class="line">&#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"普通打印机"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>子类重写不需要声明，直接在<code>m</code>文件去重写实现即可<br><figure class="highlight objectivec"><figcaption><span>ChildClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)print</div><div class="line">&#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"我是黑白打印机"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>ColorPrinter.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)print</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 如果此处要调用父类的方法可以这么写：</span></div><div class="line">	[<span class="keyword">super</span> print];</div><div class="line">	<span class="comment">// 调用当前类的方法可以用 self 父类可以用 super</span></div><div class="line">    <span class="comment">// [self print];</span></div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"我是彩色打印机"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用</span></div><div class="line">ChildClass *cc = [[ChilClass alloc] init];</div><div class="line">[cc print]; <span class="comment">// 黑白</span></div><div class="line">ColorPrinter *cc2 = [[ColorPrinter alloc] init];</div><div class="line">[cc2 print]; <span class="comment">// 彩色打印机</span></div><div class="line"></div><div class="line"><span class="comment">// 如果已经引入了子类的头文件，默认父类h文件（子类头文件所引入的头文件）也会被引入了。</span></div><div class="line"><span class="comment">// 可以这么写</span></div><div class="line">ParentClass *color = [[ColorPrinter alloc] init];</div><div class="line">[color print]; <span class="comment">// 此处也是才是打印机</span></div></pre></td></tr></table></figure>
<p><a href="">demo</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn - ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[征战Objective-C]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E5%BE%81%E6%88%98Objective-C/</url>
      <content type="html"><![CDATA[<p><code>Objective-C</code> 下面简称<code>OC</code></p>
<h3 id="源代码文件扩展名对比"><a href="#源代码文件扩展名对比" class="headerlink" title="源代码文件扩展名对比"></a>源代码文件扩展名对比</h3><p>一般来说，头文件是放声明， 实现文件放实现的代码</p>
<table>
<thead>
<tr>
<th></th>
<th>头文件</th>
<th>实现文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>c语言</td>
<td>.h</td>
<td>.c</td>
</tr>
<tr>
<td>c++语言</td>
<td>.h</td>
<td>.cpp</td>
</tr>
<tr>
<td>oc语言</td>
<td>.h</td>
<td>.m</td>
</tr>
<tr>
<td>oc&amp;c++</td>
<td>.h</td>
<td>.mm</td>
</tr>
</tbody>
</table>
<h3 id="面向对象概览"><a href="#面向对象概览" class="headerlink" title="面向对象概览"></a>面向对象概览</h3><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当前的SimpleClass 继承 NSObject 类</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SimpleClass</span>: <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="类的属性申明"><a href="#类的属性申明" class="headerlink" title="类的属性申明"></a>类的属性申明</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>:</span></div><div class="line"><span class="built_in">NSObject</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span></div><div class="line">*firstName;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span></div><div class="line">*lastName;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span> *yearOfBirth;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="keyword">int</span> yearOfBirth;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSString</span> *firstName;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="减号方法（普通方法又称对象方法）声明"><a href="#减号方法（普通方法又称对象方法）声明" class="headerlink" title="减号方法（普通方法又称对象方法）声明"></a>减号方法（普通方法又称对象方法）声明</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>: <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>) someMethod;</div><div class="line">- (<span class="keyword">void</span>) someMethodWithValue: (SomeType)value;</div><div class="line">- (<span class="keyword">void</span>) someMethodWithFirstValue: (SomeType)info1 secondValue: (AnotherType)info2;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="加号方法-类方法，-又称静态方法-声明"><a href="#加号方法-类方法，-又称静态方法-声明" class="headerlink" title="加号方法 (类方法， 又称静态方法) 声明"></a>加号方法 (类方法， 又称静态方法) 声明</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span>: <span class="title">NSObject</span></span></div><div class="line">+(<span class="keyword">id</span>)string;</div><div class="line">+(<span class="keyword">id</span>)stringWithString:(<span class="built_in">NSString</span> *)aString;</div><div class="line">+(<span class="keyword">id</span>)stringWithFormat:(<span class="built_in">NSString</span> *)format, ..;</div><div class="line">+(<span class="keyword">id</span>)stringWithContentsOfFile: (<span class="built_in">NSString</span> *)path</div><div class="line">encoding: (<span class="built_in">NSStringEncoding</span>)enc error:(<span class="built_in">NSError</span> **)error;</div><div class="line">+(<span class="keyword">id</span>)stringWithCString: (<span class="keyword">const</span> <span class="keyword">char</span> *)cString</div><div class="line">encoding: (<span class="built_in">NSStringEncoding</span>)enc;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="类的实现"><a href="#类的实现" class="headerlink" title="类的实现"></a>类的实现</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import 'XYZPerson.h'</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XYZPerson</span></span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="完成的例子"><a href="#完成的例子" class="headerlink" title="完成的例子"></a>完成的例子</h4><figure class="highlight objectivec"><figcaption><span>XYZPerson.h 文件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XYZPerson</span>: <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>)sayHello;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>XYZPerson.m 文件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"XYZPerson.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XYZPerson</span></span></div><div class="line">-(<span class="keyword">void</span>)sayHello &#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"Hello, World!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>首先去app store 下载xCode. 打开xCode</p>
<p>选择左侧 <code>Create a new Xcode project</code>=&gt;<code>macOS</code>=&gt; <code>Command Line Tool</code> ，<code>选择保存项目的位置</code>。<br><img src="./create.png" alt="create"></p>
<p>进入项目后点击左上角箭头运行，如果下面控制台有输出 <code>hello world</code> 则代表运行成功了。<br><img src="./run.png" alt="run"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">    	<span class="comment">// 真正开始写代码的地方</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ObjectiveC-变量与表达式"><a href="#ObjectiveC-变量与表达式" class="headerlink" title="ObjectiveC 变量与表达式"></a>ObjectiveC 变量与表达式</h3><h4 id="声明变量与简单运算"><a href="#声明变量与简单运算" class="headerlink" title="声明变量与简单运算"></a>声明变量与简单运算</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</div><div class="line">b = <span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> c = a + b;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"变量a+ b的值等于: %d"</span>, c); <span class="comment">// %d 格式化输出，后面加个逗号再加变量</span></div></pre></td></tr></table></figure>
<h4 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">int</span> a = <span class="number">0</span>; 整数 占<span class="number">32</span>位<span class="number">2</span>进制</div><div class="line"><span class="keyword">float</span> <span class="keyword">float</span> a = <span class="number">1.0</span>; 浮点数 占<span class="number">32</span>位<span class="number">2</span>进制</div><div class="line"><span class="keyword">double</span> <span class="keyword">double</span> num; 双精度 占<span class="number">64</span>位 可以保存更大的数</div><div class="line"><span class="keyword">char</span> <span class="keyword">char</span> c = <span class="string">'A'</span>; 单字符串 单引号</div><div class="line"><span class="built_in">NSString</span>: <span class="string">@"Hello world"</span> 使用比较多 双引号 (高级类型)</div><div class="line">C语言字符串类型 <span class="string">"hello world"</span> 使用比较少</div></pre></td></tr></table></figure>
<h4 id="限定词"><a href="#限定词" class="headerlink" title="限定词"></a>限定词</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span>: <span class="keyword">long</span> <span class="keyword">int</span> a; 比<span class="keyword">int</span> 更大的整形</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span>: <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a; 比 <span class="keyword">long</span> <span class="keyword">int</span> 更大 具体应用才会涉及 比如大数据等</div><div class="line"><span class="keyword">short</span>: <span class="keyword">short</span> <span class="keyword">int</span> a; <span class="keyword">short</span> a; 小于或等于整形， <span class="number">16</span>位 比较省类型，但是比较少用这些，一般直接用 <span class="keyword">int</span></div><div class="line"><span class="keyword">unsigned</span>: <span class="keyword">unsigned</span> <span class="keyword">int</span> a; 无符号</div><div class="line"><span class="keyword">signed</span>: <span class="keyword">signed</span> <span class="keyword">int</span> a; 有符号(正负类型)</div></pre></td></tr></table></figure>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">a++;</div><div class="line">++a;</div><div class="line">a--;</div><div class="line">--a;</div><div class="line"></div><div class="line">一元 ++, --,</div><div class="line">二元 +, -, *, /, %</div><div class="line">三元 <span class="number">2</span>&gt;<span class="number">3</span>?Yes:Not</div><div class="line">逻辑符号 &lt;, &gt;, &gt;=, &lt;=, ==, !=</div></pre></td></tr></table></figure>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果是真的会返回 1，如果未假返回 0;</span></div><div class="line"><span class="keyword">if</span> (True) &#123;</div><div class="line">  <span class="comment">// is True</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 只要非0就是真的。</span></div><div class="line"><span class="keyword">if</span> (<span class="number">1</span>) <span class="built_in">NSLog</span>(<span class="string">@"对"</span>); <span class="keyword">else</span> <span class="built_in">NSLog</span>(<span class="string">@"错"</span>); <span class="comment">// 单行可以不写括号</span></div></pre></td></tr></table></figure>
<h4 id="goto语法"><a href="#goto语法" class="headerlink" title="goto语法"></a>goto语法</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">a: &#123;</div><div class="line">	i++;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"i的值为 %d"</span>, i); <span class="comment">// 先输出一个 i = 0;</span></div><div class="line">&#125;</div><div class="line">	<span class="keyword">if</span> (i &lt; <span class="number">5</span>) <span class="keyword">goto</span> a; <span class="comment">// 执行到这里i &lt; 5 跳转到a 去执行。 直到 i == 5</span></div><div class="line">	<span class="comment">// 最后输出 0, 1, 2, 3, 4</span></div></pre></td></tr></table></figure>
<h4 id="while-循环-比较常用"><a href="#while-循环-比较常用" class="headerlink" title="while 循环 比较常用"></a>while 循环 比较常用</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> ( a &lt; <span class="number">5</span>) &#123;</div><div class="line">	a++;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"a的变量是 %d"</span>, a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="for循环-比较常用"><a href="#for循环-比较常用" class="headerlink" title="for循环 比较常用"></a>for循环 比较常用</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"i=%d"</span>, i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="do-while-肯定会执行一次再判断是否循环"><a href="#do-while-肯定会执行一次再判断是否循环" class="headerlink" title="do while 肯定会执行一次再判断是否循环"></a>do while 肯定会执行一次再判断是否循环</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"hehe"</span>);</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h4 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">break</span> 可以在 循环中 退出循环</div><div class="line"><span class="keyword">continue</span> 可以在 循环中 跳出当前循环，继续下一项循环</div></pre></td></tr></table></figure>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">10.0</span>;</div><div class="line">      <span class="comment">// char int float</span></div><div class="line">      <span class="keyword">switch</span> (i) &#123;</div><div class="line">          <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 1"</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 2"</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 10"</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">default</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 10.0"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 最后会输出一个 10。</span></div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 求矩形面积的函数 s = a * b;</span></div><div class="line"><span class="comment">// 返回的类型 函数名 ([(参数类型， 参数名)， (参数类型， 参数名)])</span></div><div class="line"><span class="keyword">double</span> qiumianji(<span class="keyword">double</span> a, <span class="keyword">double</span> b) &#123;</div><div class="line">    <span class="keyword">double</span> s = a * b;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用 main 函数内。</span></div><div class="line"><span class="comment">// 一个相同类型的变量来接收返回值</span></div><div class="line"><span class="keyword">double</span> s = qiumianji(<span class="number">10.0</span>, <span class="number">5.0</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"s 的值为 %f"</span>, s); <span class="comment">// %d 输出整数， %f 输出浮点数</span></div><div class="line"></div><div class="line"><span class="comment">// 如果没有返回值，则调用函数的时候不用一个变量去接收</span></div><div class="line"><span class="keyword">void</span> show() &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a test !"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a test2 !"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a test3 !"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main 函数内调用</span></div><div class="line">show();</div></pre></td></tr></table></figure>
<h3 id="main函数中的默认参数"><a href="#main函数中的默认参数" class="headerlink" title="main函数中的默认参数"></a>main函数中的默认参数</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"argc=%d"</span>, argc);</div><div class="line"><span class="comment">// argv 参数为 命令行输入命令运行的参数如： les1 -h -c -a -l 则有5个参数[les1, -h, -c, -a, -l]</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; argc; i++) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, argv[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出目前遇到的总结"><a href="#输出目前遇到的总结" class="headerlink" title="输出目前遇到的总结"></a>输出目前遇到的总结</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"type %d"</span>, a); </div><div class="line">- %d <span class="keyword">int</span>; </div><div class="line">- %s <span class="keyword">char</span> *; </div><div class="line">- %f <span class="keyword">float</span>;</div><div class="line">- %p 指针类型</div><div class="line">- %@ <span class="built_in">NSString</span></div><div class="line">- %ld  目前遇到过的有 <span class="built_in">NSRange</span>.length || <span class="built_in">NSRange</span>.location</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单事件系统]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E7%AE%80%E5%8D%95%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>最简单的事件系统 应该包含四个接口 <code>on</code>, <code>off</code>, <code>once</code>, <code>trigger</code>。</p>
<h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">E</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">E.prototype = &#123;</div><div class="line">	<span class="attr">on</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">	<span class="attr">off</span>: ...,</div><div class="line">	<span class="attr">trigger</span>: ...,</div><div class="line">	<span class="attr">once</span>: ...,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="on-事件绑定"><a href="#on-事件绑定" class="headerlink" title="on 事件绑定"></a>on 事件绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">on: <span class="function"><span class="keyword">function</span>(<span class="params">name, cb, ctx</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> e = <span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;);</div><div class="line">	(e[name] || (e[name] = [])).push(&#123;</div><div class="line">		<span class="attr">fn</span>: cb,</div><div class="line">		<span class="attr">ctx</span>: ctx</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="off-事件解绑"><a href="#off-事件解绑" class="headerlink" title="off 事件解绑"></a>off 事件解绑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">off: <span class="function"><span class="keyword">function</span>(<span class="params">name, cb, ctx</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> e = <span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;);</div><div class="line">	<span class="keyword">var</span> evts = e[name];</div><div class="line">	<span class="keyword">var</span> liveEvents = [];</div><div class="line">	<span class="keyword">if</span> (evts &amp;&amp; cb) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i= <span class="number">0</span>, len= evts.length; i&lt; len; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (evts[i].fn !== cb &amp;&amp; evts[i].fn._ !== cb) liveEvents.push(evts[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	(liveEvents.length)</div><div class="line">		? e[name] = liveEvents</div><div class="line">		: <span class="keyword">delete</span> e[name];</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="once-绑定单次"><a href="#once-绑定单次" class="headerlink" title="once 绑定单次"></a>once 绑定单次</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">once: <span class="function"><span class="keyword">function</span>(<span class="params">name, cb, ctx</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		self.off(name, listener);</div><div class="line">		cb.apply(ctx, <span class="built_in">arguments</span>);</div><div class="line">	&#125;</div><div class="line">	listener._ = cb;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.on(name, listener, ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="trigger-事件触发"><a href="#trigger-事件触发" class="headerlink" title="trigger 事件触发"></a>trigger 事件触发</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">trigger: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> data = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">	<span class="keyword">var</span> evtArr = ((<span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;))[name] || []).slice();</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> len = evtArr.length;</div><div class="line">	<span class="keyword">for</span> (i; i&lt; len; i++) &#123;</div><div class="line">		evtArr[i].fn.apply(evtArr[i].ctx, data);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单的调用"><a href="#简单的调用" class="headerlink" title="简单的调用"></a>简单的调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"./e.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> E();</div><div class="line">e.on(<span class="string">'bilibili'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'on'</span>);</div><div class="line">&#125;).once(<span class="string">'once'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'once'</span>)</div><div class="line">&#125;).on(<span class="string">'off'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'off'</span>)</div><div class="line">&#125;);</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		e.trigger(<span class="string">'off'</span>)</div><div class="line">			.off(<span class="string">'off'</span>)</div><div class="line">			.trigger(<span class="string">'bilibili'</span>)</div><div class="line">			.trigger(<span class="string">'once'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>最后附上<a href="https://github.com/jsonz1993/learn/tree/master/finish/Event" target="_blank" rel="external">源码</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[复制黏贴板插件-CopyText]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E5%A4%8D%E5%88%B6%E9%BB%8F%E8%B4%B4%E6%9D%BF%E6%8F%92%E4%BB%B6-CopyText/</url>
      <content type="html"><![CDATA[<p>最近公司有个需求是要在移动端实现操作黏贴板功能，简单来说就是点击一个一个评论弹出菜单，其中有一个就是复制的选项。其中<code>安卓</code>和<code>ios</code>中的app还好，有原生提供接口，web端就要自己去实现了。</p>
<p>公司原本有一个copy的插件，但是亲测没效，找到github上面一些copy的插件用的start最高的是<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="external">clipboard</a> 截止此文有16k个start。</p>
<p>官方说明是 </p>
<blockquote>
<p>Modern copy to clipboard. No Flash. Just 3kb gzipped.</p>
</blockquote>
<p>只有3k!而且官方插件提供的接口不是我想要的那种，遂有了造个自己用的小轮子念头。</p>
<h2 id="简单思路"><a href="#简单思路" class="headerlink" title="简单思路"></a>简单思路</h2><h3 id="创建一个虚拟的textarea-设置好样式让其显示在用户看不到的界面"><a href="#创建一个虚拟的textarea-设置好样式让其显示在用户看不到的界面" class="headerlink" title="创建一个虚拟的textarea 设置好样式让其显示在用户看不到的界面"></a>创建一个虚拟的textarea 设置好样式让其显示在用户看不到的界面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">selectFake() &#123;</div><div class="line">        <span class="keyword">const</span> isRTL = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">'dir'</span>);</div><div class="line">        <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandlerCallback = <span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandler = <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.fakeHandlerCallback) || <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.fakeEl = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</div><div class="line">        <span class="keyword">let</span> yPosition = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTo;</div><div class="line">        styleFn(<span class="keyword">this</span>.fakeEl, &#123;</div><div class="line">            <span class="attr">fontSize</span>: <span class="string">'12pt'</span>,</div><div class="line">            <span class="attr">border</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">margin</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">padding</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">            [isRTL? <span class="string">'right'</span>: <span class="string">'left'</span>]: <span class="string">'-9999px'</span>,</div><div class="line">            <span class="attr">top</span>: <span class="string">`<span class="subst">$&#123;yPosition&#125;</span>px`</span>,</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.fakeEl.setAttribute(<span class="string">'readonly'</span>, <span class="string">''</span>);</div><div class="line">        <span class="keyword">this</span>.fakeEl.value = <span class="keyword">this</span>.text;</div><div class="line"></div><div class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.selectedText = <span class="keyword">this</span>.selectDom(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.copyText();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="选择该dom，既选中textarea的文字区域"><a href="#选择该dom，既选中textarea的文字区域" class="headerlink" title="选择该dom，既选中textarea的文字区域"></a>选择该dom，既选中textarea的文字区域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">selectDom(el) &#123;</div><div class="line">  <span class="keyword">let</span> selectedText;</div><div class="line">  el.select();</div><div class="line">  el.setSelectionRange(<span class="number">0</span>, el.value.length);</div><div class="line">  el.removeAttribute(<span class="string">'readonly'</span>);</div><div class="line">  <span class="keyword">return</span> el.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="执行copy事件"><a href="#执行copy事件" class="headerlink" title="执行copy事件"></a>执行copy事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">copyText() &#123;</div><div class="line">  <span class="keyword">let</span> succeeded;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    succeeded = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    succeeded = fale;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.handleResult(succeeded); <span class="comment">// 事件回调处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码加注释"><a href="#源码加注释" class="headerlink" title="源码加注释"></a>源码加注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Jsonz@github.com/jsonz1993 on 17/04/16</div><div class="line"> * CopyText 将文本copy到剪切板 支持pc &amp;&amp; web。 有兼容问题 H5 建议用原生copy接口</div><div class="line"> * @param &#123;Object&#125; options 配置参数</div><div class="line"> * @property &#123;String&#125; text 要复制的文本</div><div class="line"> * @property &#123;Function&#125; success 成功回调</div><div class="line"> * @property &#123;Function&#125; error 失败回调</div><div class="line"> * </div><div class="line"> * CopyText.isSupported 判断当前环境是否支持copy事件</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyText</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(options) &#123;</div><div class="line">        <span class="keyword">this</span>.resolveOptions(options);</div><div class="line">        <span class="keyword">this</span>.init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 配置参数</span></div><div class="line">    resolveOptions(options= &#123;&#125;) &#123;</div><div class="line">        <span class="keyword">this</span>.text = options.text;</div><div class="line">        <span class="keyword">this</span>.successCb = <span class="keyword">typeof</span> options.success === <span class="string">'function'</span>? options.success: <span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.errorCb = <span class="keyword">typeof</span> options.error === <span class="string">'function'</span>? options.error: <span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化函数</span></div><div class="line">    init() &#123;</div><div class="line">        <span class="keyword">if</span> (CopyText.isSupported()) <span class="keyword">this</span>.selectFake();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">this</span>.handleResult(<span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建虚拟dom &amp;&amp; copy</span></div><div class="line">    selectFake() &#123;</div><div class="line">        <span class="keyword">const</span> isRTL = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">'dir'</span>);</div><div class="line">        <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandlerCallback = <span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandler = <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.fakeHandlerCallback) || <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.fakeEl = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</div><div class="line">        <span class="keyword">let</span> yPosition = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTo;</div><div class="line">        styleFn(<span class="keyword">this</span>.fakeEl, &#123;</div><div class="line">            <span class="attr">fontSize</span>: <span class="string">'12pt'</span>,</div><div class="line">            <span class="attr">border</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">margin</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">padding</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">            [isRTL? <span class="string">'right'</span>: <span class="string">'left'</span>]: <span class="string">'-9999px'</span>,</div><div class="line">            <span class="attr">top</span>: <span class="string">`<span class="subst">$&#123;yPosition&#125;</span>px`</span>,</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.fakeEl.setAttribute(<span class="string">'readonly'</span>, <span class="string">''</span>);</div><div class="line">        <span class="keyword">this</span>.fakeEl.value = <span class="keyword">this</span>.text;</div><div class="line"></div><div class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.selectedText = <span class="keyword">this</span>.selectDom(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.copyText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 移除虚拟dom</span></div><div class="line">    removeFake() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fakeHandler) &#123;</div><div class="line">            <span class="built_in">document</span>.body.removeEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.fakeHandlerCallback);</div><div class="line">            <span class="keyword">this</span>.fakeHandler = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">this</span>.fakeHandlerCallback = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fakeEl) &#123;</div><div class="line">            <span class="built_in">document</span>.body.removeChild(<span class="keyword">this</span>.fakeEl);</div><div class="line">            <span class="keyword">this</span>.fakeEl = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 选择dom</span></div><div class="line">    selectDom(el) &#123;</div><div class="line">        <span class="keyword">let</span> selectedText;</div><div class="line">        el.select();</div><div class="line">        el.setSelectionRange(<span class="number">0</span>, el.value.length);</div><div class="line">        el.removeAttribute(<span class="string">'readonly'</span>);</div><div class="line">        <span class="keyword">return</span> el.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// copy</span></div><div class="line">    copyText() &#123;</div><div class="line">        <span class="keyword">let</span> succeeded;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            succeeded = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</div><div class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">            succeeded = fale;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.handleResult(succeeded); <span class="comment">// 事件回调处理</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 回调</span></div><div class="line">    handleResult(succeeded) &#123;</div><div class="line">        succeeded? <span class="keyword">this</span>.successCb(): <span class="keyword">this</span>.errorCb();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断是否支持该事件</span></div><div class="line">    <span class="keyword">static</span> isSupported(action= <span class="string">'copy'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !!<span class="built_in">document</span>.queryCommandSupported &amp;&amp; !!<span class="built_in">document</span>.queryCommandSupported(action);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styleFn = <span class="function">(<span class="params">el, opts</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts !== <span class="string">'object'</span> || !el.nodeType) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> opts) &#123;</div><div class="line">        el.style[key] = opts[key];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> CopyText <span class="keyword">from</span> <span class="string">'./CopyText'</span>;</div><div class="line"><span class="keyword">new</span> CopyText(&#123;</div><div class="line">  <span class="attr">text</span>: <span class="string">'文本复制'</span>,</div><div class="line">  success() &#123;&#125;,</div><div class="line">  error() &#123;&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 可以自行判断环境是否支持copy事件</span></div><div class="line">CopyText.isSupported() <span class="comment">// Boolean</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sublime text 3 配置]]></title>
      <url>https://jsonz1993.github.io/2017/04/sublime-text-3-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>这篇博客主要讲怎么配置自己的<code>sublime text</code>， 安装可以去<a href="http://www.sublimetext.com/" target="_blank" rel="external">官网</a>下载自行安装。</p>
<h2 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h2><p>之后我们要安装<code>Package Control</code>, 既sublime的包管理工具 后面我们的包下载安装都用他。</p>
<p>按快捷键<code>ctrl + ` </code> 调出或者菜单<code>view&gt; show Control</code> 调出control</p>
<p>复制下面代码到control</p>
<p>sublime Text 3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = &apos;2915d1851351e5ee549c20394736b442&apos; + &apos;8bc59f460fa1548d1514676163dafc88&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure></p>
<p>sublime Text 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib2,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), &apos;wb&apos; ).write(by) if dh == h else None; print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h) if dh != h else &apos;Please restart Sublime Text to finish installation&apos;)</div></pre></td></tr></table></figure></p>
<p>复制完敲回车就可以安装，稍等片刻出现即可，安装完成后在 <code>Preferences</code>菜单下会出现 <code>Package Control</code> 选项</p>
<p>详细安装可看<a href="https://packagecontrol.io/installation" target="_blank" rel="external">Package Control</a></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>打开 <code>Package Control</code>或按快捷键<code>cmd/ctrl + shift + p</code>， 输入 <code>install package</code> 选中第一个选项既进入安装插件的列表。</p>
<p>这时候可能需要等一会加载远程仓库，具体在左下角会有一个loading标识， 加载完在弹窗输入要安装的插件即可。</p>
<p><img src="./package.png" alt="package list"></p>
<p>所有的插件都可以在<a href="https://packagecontrol.io/" target="_blank" rel="external">https://packagecontrol.io/</a> 找到，下面列出比较常用的几个插件</p>
<h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><p>sublime 编辑器虽然轻巧强大，但是默认的主题实在有点看不下去。<br>主题可以在<a href="https://packagecontrol.io/browse/labels/theme" target="_blank" rel="external">https://packagecontrol.io/browse/labels/theme</a> 找自己喜欢的。<br>目前个人使用的是 <code>Material Theme</code> 。</p>
<p>直接在<code>install package</code> 弹窗输入 <code>Material Theme</code> 选第一个即可（后面安装方法类似）。</p>
<p>安装完成后会弹出一个README，根据提示修改一下配置。<br>打开<code>Preferences &gt; settings &gt; User</code><br>添加以下配置，保存即可生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,</div><div class="line">&quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,</div></pre></td></tr></table></figure></p>
<h4 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a>Material Theme</h4><p><img src="./material.gif" alt="material"></p>
<p>个人比较喜欢的主题还有</p>
<h4 id="ayu"><a href="#ayu" class="headerlink" title="ayu"></a>ayu</h4><p><img src="./ayu.png" alt="ayu"></p>
<h4 id="Agila-Theme"><a href="#Agila-Theme" class="headerlink" title="Agila Theme"></a>Agila Theme</h4><p><img src="./agila.png" alt="Agila"></p>
<h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><p>前端工程师使用sublime编辑的必备插件，可以极大提高开发效率。<br>最简单的应用就是在空白的<code>.html</code>页面输入<code>!</code>再按 <code>tab</code>键会自动生成html5基本页面解构。<br>还有基本如 <code>#div1&gt;span.child{这是子级}*2+button.name[disabled]{按钮}</code>快捷语法等<br>具体看<a href="https://www.emmet.io/" target="_blank" rel="external">emmet</a>, <a href="https://packagecontrol.io/packages/Emmet" target="_blank" rel="external">Emmet-package</a></p>
<h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p>sublime 自带的侧边栏文件（夹）功能特别少，这个插件可以为其添加很多其他功能。<a href="https://packagecontrol.io/packages/SideBarEnhancements" target="_blank" rel="external">docs</a></p>
<h3 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a>BracketHighlighter</h3><p>前后标签高亮的插件，如<code>[], (), {}, &quot;&quot;, &#39;&#39;, &lt;tag&gt;&lt;/tag&gt;</code>等，可以比较方便看清代码块的起始点。<a href="https://packagecontrol.io/packages/BracketHighlighter" target="_blank" rel="external">docs</a></p>
<h3 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a>AutoFileName</h3><p>按照路径提示该路径目录下的文件名，对于引入文件资源等很有帮助</p>
<h3 id="All-AutoComplete"><a href="#All-AutoComplete" class="headerlink" title="All AutoComplete"></a>All AutoComplete</h3><p>让代码自动完成的匹配从所有打开的文件里去匹配，而不是只在当前文件里匹配。</p>
<h3 id="HTML-CSS-JS-Prettify"><a href="#HTML-CSS-JS-Prettify" class="headerlink" title="HTML-CSS-JS Prettify"></a>HTML-CSS-JS Prettify</h3><p>html, css, js &amp;&amp; Json 的格式化插件。需要本地安装了node。<br>默认格式化快捷键为<code>ctrl+shift+h</code></p>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>基本上比较通用的插件就这些，可以发现这些插件基本上都在<code>package Control</code>前十位。<br>学会举一反三，工作中用到的另一些插件再上<a href="https://packagecontrol.io/" target="_blank" rel="external">https://packagecontrol.io/</a> 搜索关键字安装<br>如 <code>git</code>, <code>less</code>, <code>vuejs</code>等等。</p>
<p>最后附上自己的配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"color_scheme"</span>: <span class="string">"Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme"</span>,</div><div class="line">	<span class="attr">"ignored_packages"</span>:</div><div class="line">	[</div><div class="line">		<span class="string">"Vintage"</span></div><div class="line">	],</div><div class="line">	<span class="attr">"always_show_minimap_viewport"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"theme"</span>: <span class="string">"Material-Theme-Lighter.sublime-theme"</span>,</div><div class="line">	<span class="attr">"word_wrap"</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">"wrap_width"</span>: <span class="number">120</span>,</div><div class="line">	<span class="attr">"font_size"</span>: <span class="number">10</span>,</div><div class="line">	<span class="attr">"line_padding_bottom"</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">"line_padding_top"</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">"highlight_line"</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">"font_face"</span>: <span class="string">"Monaco"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> editor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome插件开发]]></title>
      <url>https://jsonz1993.github.io/2017/04/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>先放上入门的英语文档<a href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="external">https://developer.chrome.com/extensions/getstarted</a></p>
<p>后面的教程是参照文档学习的。</p>
<h2 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h2><p>首先创建一个<code>manifest.json</code> 用于整个项目的配置文件， 类似平时 <code>js</code> 的 <code>package.json</code>。 包含了项目的版本号， 项目名（扩展插件名）， 描述等。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "manifest_version": 2,</div><div class="line"></div><div class="line">  "name": "Getting started example",</div><div class="line">  "description": "This extension shows a Google Image search result for the current page",</div><div class="line">  "version": "1.0",</div><div class="line"></div><div class="line">  "browser_action": &#123;</div><div class="line">    "default_icon": "icon.png",</div><div class="line">    "default_popup": "popup.html"</div><div class="line">  &#125;,</div><div class="line">  "permissions": [</div><div class="line">    "activeTab",</div><div class="line">    "https://ajax.googleapis.com/"</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  "manifest_version": 2, // 版本号</div><div class="line">  "name": "Getting started example", // 项目名</div><div class="line">  "description": "This extension shows a Google Image search result for the current page", // 描述</div><div class="line">  "version": "1.0", // 项目版本号</div><div class="line">  "browser_action": &#123;</div><div class="line">    "default_icon": "icon.png", // 默认icon</div><div class="line">    "default_popup": "popup.html" // 默认弹窗</div><div class="line">  &#125;,</div><div class="line">  "permissions": [</div><div class="line">    "activeTab", // </div><div class="line">    "https://ajax.googleapis.com/"</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><p>在配置文件中我们定义了一个 <code>default_icon</code> 和 <code>default_popup</code>， 现在让我们来创建他们。</p>
<h3 id="default-icon"><a href="#default-icon" class="headerlink" title="default_icon"></a>default_icon</h3><p><code>default_icon</code> 指向的是用于显示在工具栏的图标 可以选自己喜欢的图片，不过要选取 <code>19px</code> 的 <code>.png</code>文件。</p>
<p>可以用google提供的例子 <a href="https://developer.chrome.com/extensions/examples/tutorials/getstarted/icon.png" target="_blank" rel="external">icon.png</a></p>
<h3 id="popup-html"><a href="#popup-html" class="headerlink" title="popup.html"></a>popup.html</h3><p><code>popup.html</code>用于用户点击时弹出的一个操作框。为<code>html</code> 文件 所以你可以自己捣鼓自己想显示的东西。</p>
<p>可以用google提供的例子 <a href="https://developer.chrome.com/extensions/examples/tutorials/getstarted/popup.html" target="_blank" rel="external">popup.html</a></p>
<p>主要的逻辑以外部js的格式独立写在一个js文件里。 <a href="https://developer.chrome.com/extensions/examples/tutorials/getstarted/popup.js" target="_blank" rel="external">popup.js</a></p>
<p>现在你的文件夹里应该有四个文件:</p>
<ul>
<li>icon.png</li>
<li>popup.html</li>
<li>popup.js</li>
<li>manifest.json</li>
</ul>
<p>这些完成之后，我们接下来就在<code>chrome</code>加载我们的插件</p>
<h3 id="加载插件调试"><a href="#加载插件调试" class="headerlink" title="加载插件调试"></a>加载插件调试</h3><p>chrome 访问 <strong>chrome://extensions</strong> 或手动从菜单进入 <code>扩展程序</code></p>
<p>打开右上角的开发者模式</p>
<p><img src="./dev-checkbox.jpeg" alt="打开开发者模式"></p>
<p>如果电脑没有装chrome….趁早装一个</p>
<h3 id="点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello-Chrome-扩展插件"><a href="#点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello-Chrome-扩展插件" class="headerlink" title="点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello Chrome 扩展插件"></a>点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello Chrome 扩展插件</h3><p>此时双击审查代码可以调试写的插件。</p>
<p>附上后续学习链接<a href="https://developer.chrome.com/extensions" target="_blank" rel="external">https://developer.chrome.com/extensions</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[animate-text]]></title>
      <url>https://jsonz1993.github.io/2017/04/animate-text/</url>
      <content type="html"><![CDATA[<h2 id="animate-text"><a href="#animate-text" class="headerlink" title="animate-text"></a>animate-text</h2><h3 id="文字动画和数字动画-animate-text"><a href="#文字动画和数字动画-animate-text" class="headerlink" title="文字动画和数字动画 animate text"></a>文字动画和数字动画 animate text</h3><p><a href="https://jsonz1993.github.io/demo/animate-text/index.html">查看DEMO</a> <a href="https://github.com/jsonz1993/learn/tree/master/finish/animate-text" target="_blank" rel="external">git仓库</a></p>
<p>轻巧的文字动画库, 使用简单, 文件大小4k<br>可以给文字添加出现动画, 支持字符串打字效果和数字变化效果, 支持监听动画结束事件</p>
<p><strong><a href="https://github.com/qgh810/animate-text" target="_blank" rel="external">项原项目地址</a>, 这里对其代码改造优化。</strong></p>
<p><img src="./demo.gif"></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> AnimateText <span class="keyword">from</span> <span class="string">'./animate-text'</span></div><div class="line"></div><div class="line"><span class="comment">// 最简单的使用方法</span></div><div class="line"><span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 如果需要定义动画时间可以这样初始化</span></div><div class="line"><span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>, <span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment">// 如果还有其它设置 请这样写</span></div><div class="line"><span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>, &#123;</div><div class="line">  <span class="attr">time</span>: <span class="number">1000</span>, <span class="comment">// 动画时长</span></div><div class="line">  isNumber: <span class="literal">true</span>, <span class="comment">// 是否渲染为数字动画</span></div><div class="line">  startNumber: <span class="number">0</span>, <span class="comment">// 渲染为数字动画时 动画的开始数字</span></div><div class="line">  changeCount: <span class="number">32</span>, <span class="comment">// 数字动画数字变化次数</span></div><div class="line">  onAnimated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'动画结束'</span>)&#125; <span class="comment">// 动画结束事件回调</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>AnimateText接收两个参数, 例如: new AnimateText(element, options)</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">类型</th>
<th style="text-align:center">是否必填</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">element</td>
<td style="text-align:left">String or Object</td>
<td style="text-align:center">是</td>
<td style="text-align:left">可以是选择器或者dom节点对象(请保证这个节点内只有文本而没有其它节点)</td>
</tr>
<tr>
<td style="text-align:center">options</td>
<td style="text-align:left">Number or Object</td>
<td style="text-align:center">否</td>
<td style="text-align:left">如果第二个参数是数字, 则当作动画时间处理, 如果有其他参数, 以对象格式传递, 具体每个属性的描述请看下方的 options说明</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="options说明"><a href="#options说明" class="headerlink" title="options说明"></a>options说明</h3><p>第二个参数options详细说明</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">类型</th>
<th style="text-align:center">默认值</th>
<th style="text-align:center">是否必填</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">time</td>
<td style="text-align:left">Number</td>
<td style="text-align:center">500</td>
<td style="text-align:center">否</td>
<td style="text-align:left">动画持续的时间</td>
</tr>
<tr>
<td style="text-align:center">isNumber</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:center">false</td>
<td style="text-align:center">否</td>
<td style="text-align:left">是否渲染为数字动画</td>
</tr>
<tr>
<td style="text-align:center">startNumber</td>
<td style="text-align:left">Number</td>
<td style="text-align:center">0</td>
<td style="text-align:center">否</td>
<td style="text-align:left">数字动画的开始数字</td>
</tr>
<tr>
<td style="text-align:center">changeCount</td>
<td style="text-align:left">Number</td>
<td style="text-align:center">32</td>
<td style="text-align:center">否</td>
<td style="text-align:left">数字动画变化次数 也就是数字经过多少次跳动才变为最终数字</td>
</tr>
<tr>
<td style="text-align:center">onAnimated</td>
<td style="text-align:left">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:center">否</td>
<td style="text-align:left">动画结束监听函数</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="实例对象方法说明"><a href="#实例对象方法说明" class="headerlink" title="实例对象方法说明"></a>实例对象方法说明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实例化</span></div><div class="line"><span class="keyword">var</span> animateText = <span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 实例化对象后 对象提供play方法重新播放动画</span></div><div class="line"><span class="comment">// 接受参数作为动画时间</span></div><div class="line"><span class="comment">// 不传递参数则使用实例化的时间</span></div><div class="line">animateText.play(<span class="number">1000</span>)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-第三方服务集成]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<p>静态站点拥有一定的局限性，因此我们需要借助于第三方服务来扩展站点的功能。 以下是 NexT 目前支持的第三方服务，你可以根据你的需求集成一些功能进来。</p>
<h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>NexT 支持多款评论系统。<br>如需取消某个 页面/文章 的评论，在 <code>md</code> 文件的 <code>front-matter</code> 中增加 <code>comments: false</code></p>
<p>暂没开评论，多说准备下架。</p>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>本站用 Hexo 提供的 Local Search， 原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="安装-hexo-generator-search"><a href="#安装-hexo-generator-search" class="headerlink" title="安装 hexo-generator-search"></a>安装 hexo-generator-search</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-<span class="built_in">search</span></div></pre></td></tr></table></figure>
<h5 id="安装-hexo-generator-searchdb"><a href="#安装-hexo-generator-searchdb" class="headerlink" title="安装 hexo-generator-searchdb"></a>安装 hexo-generator-searchdb</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<h4 id="修改站点配置"><a href="#修改站点配置" class="headerlink" title="修改站点配置"></a>修改站点配置</h4><p>编辑 <code>站点配置</code>  根目录下的<code>_config.yml</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">post</span></div><div class="line"><span class="attr">  format:</span> <span class="string">html</span></div><div class="line"><span class="attr">  limit:</span> <span class="number">10000</span></div></pre></td></tr></table></figure></p>
<p><a href="http://www.ezlippi.com/blog/2017/02/hexo-search.html" target="_blank" rel="external">站内搜索原文教程-EZLippi-浮生志</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[next-主题设置]]></title>
      <url>https://jsonz1993.github.io/2017/04/next-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>下面的<code>主题配置</code>指的是 <code>themes&gt;Next&gt;_config.yml</code>, <code>站点配置</code>指的是根目录下的<code>_config.yml</code>;</p>
<h3 id="添加-标签-页面"><a href="#添加-标签-页面" class="headerlink" title="添加[标签]页面"></a>添加[标签]页面</h3><p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">标签测试文章</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Testing</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Another</span> <span class="string">Tag</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<h4 id="新建tags页面"><a href="#新建tags页面" class="headerlink" title="新建tags页面"></a>新建<code>tags</code>页面</h4><p>使用<code>hexo new page tags</code> 新建一个页面，命名为<code>tags</code>:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cd</span> you-hexo-site</div><div class="line">$ hexo <span class="keyword">new</span> page <span class="keyword">tags</span></div></pre></td></tr></table></figure></p>
<h4 id="设置新建的tags页面类型，改为tags"><a href="#设置新建的tags页面类型，改为tags" class="headerlink" title="设置新建的tags页面类型，改为tags"></a>设置新建的<code>tags</code>页面类型，改为<code>tags</code></h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">tags</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-04</span><span class="bullet">-03</span> <span class="number">11</span><span class="string">:35:36</span></div><div class="line"><span class="attr">type:</span> <span class="string">"tags"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span> <span class="comment"># tags页面自定义是否要开启评论（前提你已经集成了评论）</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<h4 id="修改主题配置文件，把tag添加到menu中"><a href="#修改主题配置文件，把tag添加到menu中" class="headerlink" title="修改主题配置文件，把tag添加到menu中"></a>修改主题配置文件，把tag添加到menu中</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></div></pre></td></tr></table></figure>
<h3 id="添加-分类-页面"><a href="#添加-分类-页面" class="headerlink" title="添加[分类]页面"></a>添加[分类]页面</h3><p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: 分类测试文章</div><div class="line">categories: Testing</div><div class="line">---</div></pre></td></tr></table></figure>
<p>分类和标签的区别详见<a href="https://hexo.io/zh-cn/docs/front-matter.html#分类和标签" target="_blank" rel="external">Hexo的分类与标签文档</a></p>
<h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><p>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">$</span> <span class="string">cd</span> <span class="string">your-hexo-site</span></div><div class="line"><span class="string">$</span> <span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">categories</span></div><div class="line"><span class="string">```</span> </div><div class="line"></div><div class="line"><span class="comment">#### 设置页面类型</span></div><div class="line"><span class="string">编辑刚新建的页面，将页面的</span> <span class="string">`type`</span> <span class="string">设置为</span> <span class="string">`categories`</span> <span class="string">，主题将自动为这个页面显示分类。页面内容如下：</span></div><div class="line"><span class="string">```yml</span></div><div class="line"><span class="attr">title:</span> <span class="string">分类</span></div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></div><div class="line"><span class="attr">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h4 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h4><p>在菜单中添加链接。编辑 <code>主题配置文件</code> ， 添加 <code>categories</code> 到 <code>menu</code> 中，如下:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></div></pre></td></tr></table></figure></p>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>Next提供了5个特定范围的字体设定</p>
<ul>
<li>全局字体：定义的字体将在全站范围使用</li>
<li>标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6）</li>
<li>文章字体：文章所使用的字体</li>
<li>Logo字体：Logo 所使用的字体</li>
<li>代码字体： 代码块所使用的字体</li>
</ul>
<p>该配置中的 <code>external</code> 可以用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小）。</p>
<h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 <code>normal</code> 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>：<br>可以自行更改 <code>highlight_theme</code> 字段， 设置成你自己喜欢的高亮主题。</p>
<h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 <code>主题配置文件</code> 中。</p>
<h4 id="设置链接"><a href="#设置链接" class="headerlink" title="设置链接"></a>设置链接</h4><p>在 <code>主题配置</code> 中找到 <code>social</code>字段， 其格式为 <code>显示文本: 链接地址</code>。</p>
<figure class="highlight yml"><figcaption><span>scoial</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">social:</span></div><div class="line"><span class="attr">  Github:</span> <span class="attr">https://github.com/jsonz1993</span></div><div class="line">  <span class="string">微博:</span> <span class="attr">http://weibo.com/u/1638841204</span></div></pre></td></tr></table></figure>
<h4 id="设置图标"><a href="#设置图标" class="headerlink" title="设置图标"></a>设置图标</h4><p>在 <code>主题配置</code> 中找到 <code>social_icons</code>字段， 其格式为 <code>匹配键: Font Awesome 图标名称</code>。<br><code>enable</code> 为是否显示图标控制。 注意此时的匹配建要与 <code>social</code>的键一致,图标依旧是<code>Font Awesome</code>图标</p>
<h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 <code>© 2013 - 2015</code>。 编辑 <code>主题配置文件</code>，新增字段 <code>since</code>。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">since:</span> <span class="number">2013</span></div></pre></td></tr></table></figure>
<h3 id="设置「动画效果」"><a href="#设置「动画效果」" class="headerlink" title="设置「动画效果」"></a>设置「动画效果」</h3><p>NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 <code>false</code> 来关闭动画。<br>编辑 <code>主题配置文件</code>， 搜索 <code>use_motion</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code> 即可：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">use_motion:</span> <span class="literal">true</span> <span class="comment"># 开启动画</span></div></pre></td></tr></table></figure></p>
<h3 id="设置「背景动画」"><a href="#设置「背景动画」" class="headerlink" title="设置「背景动画」"></a>设置「背景动画」</h3><p>NexT 自带两种背景动画效果</p>
<p>编辑 <code>主题配置文件</code>， 搜索 <code>canvas_nest</code> 或 <code>three_waves</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code> 即可：<br>只能同时开启一种背景效果， 建议酌情开启，会影响电脑网页性能(macbook pro或笔记本容易出现过热现象).<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span> <span class="string">//关闭动画</span></div><div class="line"><span class="attr">three_waves:</span> <span class="literal">true</span> <span class="string">//开启动画</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hello next]]></title>
      <url>https://jsonz1993.github.io/2017/04/hellp-next/</url>
      <content type="html"><![CDATA[<p>next 入门配置</p>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p><strong>下面Next下的<code>_config</code>称<code>主题配置</code>， 根目录Hexo的<code>_config</code>称<code>站点配置</code></strong></p>
<h4 id="安装next-到目录-themes-next"><a href="#安装next-到目录-themes-next" class="headerlink" title="安装next 到目录 themes/next:"></a>安装next 到目录 <code>themes/next</code>:</h4><p>注意安装完themes下应该有一个 <code>next</code> 文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<h4 id="启动主题"><a href="#启动主题" class="headerlink" title="启动主题"></a>启动主题</h4><p>修改 <code>站点配置</code>:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">theme:</span> <span class="string">next</span></div></pre></td></tr></table></figure></p>
<h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><p>先清除缓存再启动服务，启动完成后打开 <code>http://localhost:4000/</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean &amp;&amp; hexo s</div></pre></td></tr></table></figure></p>
<h3 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h3><h4 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h4><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。在<code>主题配置</code>配置中的<code>Scheme</code>选项。目前提供三种方案：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>目前使用的是 <code>scheme: Mist</code>方案</p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>在<code>站点配置</code> <code>language</code> 中设置 <code>zh-Hans</code> (简体中文)。<br>支持的语言可在 <code>themes/next/languages</code> 中查看</p>
<h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><p>菜单格式为 <code>item name: link</code><br>此处只是将 url映射到对应 菜单上，若要具体显示文案需要到语言配置文件修改<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="comment"># 主页</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">/categories</span> <span class="comment"># 分类</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives</span> <span class="comment"># 归档</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">/tags</span> <span class="comment"># 标签</span></div><div class="line"><span class="attr">  about:</span> <span class="string">/about</span> <span class="comment"># 关于我</span></div></pre></td></tr></table></figure></p>
<p>设置菜单图标<br>图标可从<a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a>选择<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># 是否显示图标</span></div><div class="line">  <span class="comment"># Icon Mapping.</span></div><div class="line"><span class="attr">  home:</span> <span class="string">home</span></div><div class="line"><span class="attr">  about:</span> <span class="string">user</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">th</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">tags</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">archive</span></div><div class="line"><span class="attr">  commonweal:</span> <span class="string">heartbeat</span></div></pre></td></tr></table></figure></p>
<h4 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h4><ol>
<li><p>设置侧栏位置：<br><code>主题配置</code> 修改 <code>sidebar.position</code> 的值，支持 <code>left</code> &amp; <code>right</code><br>但目前只有<code>Pisces Scheme</code>支持该设置</p>
</li>
<li><p>设置侧栏显示的时机<br><code>主题配置</code> 修改 <code>sidebar.display</code>，目前支持的有：</p>
<ul>
<li><code>post</code> 默认行文，文展页面自动展开 <code>首页</code>等不自动展开</li>
<li><code>always</code> 所有页面都自动展开</li>
<li><code>hide</code> 所有页面都隐藏，可以手动展开</li>
<li><code>remove</code> 完全移除</li>
</ul>
</li>
<li><p>设置头像<br><code>主题配置</code> 修改 <code>avatar</code>字段。<br>支持互联网URI 如 <code>https://www.img.com/img.jpg</code><br>或站内地址 <code>/images/avatar.jpg</code></p>
</li>
</ol>
<h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ol>
<li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>， 定位到站点的代码获取页面</li>
<li>复制 hm.js? 后面那串统计脚本 id，如:<br><code>hm.src = &quot;https://hm.baidu.com/hm.js?dksjklsajdlkasjkl&quot;;</code><br>则id = <code>dksjklsajdlkasjkl</code></li>
<li>修改<code>主题配置</code> <code>baidu_analytics</code> 字段，改为上述id</li>
<li>骚等一段时间后可以自行登录<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>查看<code>PV</code>,<code>UV</code>等数据。</li>
</ol>
<h4 id="文章阅读量统计"><a href="#文章阅读量统计" class="headerlink" title="文章阅读量统计"></a>文章阅读量统计</h4><p><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="external">为Next主题添加文章阅读量</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-辅助函数]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>主要用于模板中辅助的函数，如 <code>date(Date, &#39;YYYY-DD-MM&#39;)</code></p>
<p>详见<a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/helpers.html</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-变量]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>变量主要用于 <code>layout</code> 等的应用</p>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">site</td>
<td style="text-align:left">网站变量</td>
</tr>
<tr>
<td style="text-align:left">page</td>
<td style="text-align:left">针对该页面的内容以及 front-matter 所设定的变量。</td>
</tr>
<tr>
<td style="text-align:left">config</td>
<td style="text-align:left">网站配置</td>
</tr>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left">主题配置。继承自网站配置。</td>
</tr>
<tr>
<td style="text-align:left">_ (单下划线)</td>
<td style="text-align:left">Lodash 函数库</td>
</tr>
<tr>
<td style="text-align:left">path</td>
<td style="text-align:left">当前页面的路径（不含根路径）</td>
</tr>
<tr>
<td style="text-align:left">url</td>
<td style="text-align:left">当前页面的完整网址</td>
</tr>
<tr>
<td style="text-align:left">env</td>
<td style="text-align:left">环境变量</td>
</tr>
</tbody>
</table>
<h4 id="网站变量"><a href="#网站变量" class="headerlink" title="网站变量"></a>网站变量</h4><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">site.posts</td>
<td style="text-align:left">所有文章</td>
</tr>
<tr>
<td style="text-align:left">site.pages</td>
<td style="text-align:left">所有分页</td>
</tr>
<tr>
<td style="text-align:left">site.categories</td>
<td style="text-align:left">所有分类</td>
</tr>
<tr>
<td style="text-align:left">site.tags</td>
<td style="text-align:left">所有标签</td>
</tr>
</tbody>
</table>
<h4 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h4><h6 id="页面page"><a href="#页面page" class="headerlink" title="页面page"></a>页面page</h6><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.title</td>
<td style="text-align:left">页面标题</td>
</tr>
<tr>
<td style="text-align:left">page.date</td>
<td style="text-align:left">页面建立日期（Moment.js 对象）</td>
</tr>
<tr>
<td style="text-align:left">page.updated</td>
<td style="text-align:left">页面更新日期（Moment.js 对象）</td>
</tr>
<tr>
<td style="text-align:left">page.comments</td>
<td style="text-align:left">留言是否开启</td>
</tr>
<tr>
<td style="text-align:left">page.layout</td>
<td style="text-align:left">布局名称</td>
</tr>
<tr>
<td style="text-align:left">page.content</td>
<td style="text-align:left">页面的完整内容</td>
</tr>
<tr>
<td style="text-align:left">page.excerpt</td>
<td style="text-align:left">页面摘要</td>
</tr>
<tr>
<td style="text-align:left">page.more</td>
<td style="text-align:left">除了页面摘要的其余内容</td>
</tr>
<tr>
<td style="text-align:left">page.source</td>
<td style="text-align:left">页面原始路径</td>
</tr>
<tr>
<td style="text-align:left">page.full_source</td>
<td style="text-align:left">页面的完整原始路径</td>
</tr>
<tr>
<td style="text-align:left">page.path</td>
<td style="text-align:left">页面网址（不含根路径）。我们通常在主题 中使用 url_for(page.path)。</td>
</tr>
<tr>
<td style="text-align:left">page.permalink</td>
<td style="text-align:left">页面的完整网址</td>
</tr>
<tr>
<td style="text-align:left">page.prev</td>
<td style="text-align:left">上一个页面。如果此为第一个页面则为 null。</td>
</tr>
<tr>
<td style="text-align:left">page.next</td>
<td style="text-align:left">下一个页面。如果此为最后一个页面则为  null。</td>
</tr>
<tr>
<td style="text-align:left">page.raw</td>
<td style="text-align:left">文章的原始内容</td>
</tr>
<tr>
<td style="text-align:left">page.photos</td>
<td style="text-align:left">文章的照片（用于相簿）</td>
</tr>
<tr>
<td style="text-align:left">page.link</td>
<td style="text-align:left">文章的外部链接（用于链接文章）</td>
</tr>
</tbody>
</table>
<h6 id="文章post"><a href="#文章post" class="headerlink" title="文章post"></a>文章post</h6><p>与<code>page</code>类似 但是添加了下列变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.published</td>
<td style="text-align:left">如果该文章已发布则为True</td>
</tr>
<tr>
<td style="text-align:left">page.categories</td>
<td style="text-align:left">该文章的所有分类</td>
</tr>
<tr>
<td style="text-align:left">page.tags</td>
<td style="text-align:left">该文章的所有标签</td>
</tr>
</tbody>
</table>
<h6 id="首页-index"><a href="#首页-index" class="headerlink" title="首页 index"></a>首页 index</h6><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.per_page</td>
<td style="text-align:left">每页显示的文章数量</td>
</tr>
<tr>
<td style="text-align:left">page.total</td>
<td style="text-align:left">总文章数</td>
</tr>
<tr>
<td style="text-align:left">page.current</td>
<td style="text-align:left">目前页数</td>
</tr>
<tr>
<td style="text-align:left">page.current_url</td>
<td style="text-align:left">目前分页的网址</td>
</tr>
<tr>
<td style="text-align:left">page.posts</td>
<td style="text-align:left">本页文章</td>
</tr>
<tr>
<td style="text-align:left">page.prev</td>
<td style="text-align:left">上一页的页数。如果此页是第一页的话则为 0。</td>
</tr>
<tr>
<td style="text-align:left">page.prev_link</td>
<td style="text-align:left">上一页的网址。如果此页是第一页的话则为 ‘’。</td>
</tr>
<tr>
<td style="text-align:left">page.next</td>
<td style="text-align:left">下一页的页数。如果此页是最后一页的话则为 0。</td>
</tr>
<tr>
<td style="text-align:left">page.next_link</td>
<td style="text-align:left">下一页的网址。如果此页是最后一页的话则为 ‘’。</td>
</tr>
<tr>
<td style="text-align:left">page.path</td>
<td style="text-align:left">当前页面的路径（不含根目录）。我们通常在主题中使用 url_for(page.path)。</td>
</tr>
</tbody>
</table>
<h6 id="归档-archive"><a href="#归档-archive" class="headerlink" title="归档 (archive)"></a>归档 (archive)</h6><p>与 <code>index</code> 布局相同， 但新增了以下变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.archive</td>
<td style="text-align:left">等于 true</td>
</tr>
<tr>
<td style="text-align:left">page.year</td>
<td style="text-align:left">年份归档 (4位)</td>
</tr>
<tr>
<td style="text-align:left">page.month</td>
<td style="text-align:left">月份归档 (没有前导零的2位数)</td>
</tr>
</tbody>
</table>
<h6 id="分类-category"><a href="#分类-category" class="headerlink" title="分类 (category)"></a>分类 (category)</h6><p>与 <code>index</code> 布局相同， 但新增了以下变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.category</td>
<td style="text-align:left">分类名称</td>
</tr>
</tbody>
</table>
<h6 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签(tag)"></a>标签(tag)</h6><p>与 <code>index</code> 布局相同， 但新增了以下变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.tag</td>
<td style="text-align:left">标签名称</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-模板]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 index 模板，以下是各页面相对应的模板名称：</p>
<table>
<thead>
<tr>
<th>模板</th>
<th style="text-align:center">用途</th>
<th>回调</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td style="text-align:center">首页</td>
<td></td>
</tr>
<tr>
<td>post</td>
<td style="text-align:center">文章</td>
<td>index</td>
</tr>
<tr>
<td>page</td>
<td style="text-align:center">分页</td>
<td>index</td>
</tr>
<tr>
<td>archive</td>
<td style="text-align:center">归档</td>
<td>index</td>
</tr>
<tr>
<td>category</td>
<td style="text-align:center">分类归档</td>
<td>archive</td>
</tr>
<tr>
<td>tag</td>
<td style="text-align:center">标签归档</td>
<td>archive</td>
</tr>
</tbody>
</table>
<h4 id="布局-Layout"><a href="#布局-Layout" class="headerlink" title="布局 Layout"></a>布局 Layout</h4><p>布局这块可参考 <code>next</code> 主题看, Hexo 默认的引擎模板为<a href="http://www.iqianduan.net/blog/how_to_use_swig" target="_blank" rel="external">swig</a></p>
<p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 <code>body</code> 变量的内容，如此一来模板的内容才会被显示，举例来说：</p>
<figure class="highlight plain"><figcaption><span>index.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index</div></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>生成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>index<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>每个模板都默认使用 <code>layout</code> 布局，您可在 front-matter 指定其他布局，或是设为 <code>false</code> 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。</p>
<h4 id="局部模板-Partial"><a href="#局部模板-Partial" class="headerlink" title="局部模板 Partial"></a>局部模板 Partial</h4><p>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。</p>
<p>官网说的都是<code>ejs</code>语法， 目前next采用的是<code>swig</code> 语法。</p>
<p>TODO 后面再补上 <code>Next</code>主题学习 &amp;&amp; <code>swig</code> </p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-主题概述]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E4%B8%BB%E9%A2%98%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>了解一款主题的文件结构可以让你在有自定义需求的时候，快速定位到目标文件，也为后面的定制化主题做铺垫。</p>
<p>创建 Hexo 主题非常容易，您只要在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题。一个主题可能会有以下的结构：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span></div><div class="line"><span class="string">├──</span> <span class="string">_config.yml</span></div><div class="line"><span class="string">├──</span> <span class="string">languages</span></div><div class="line"><span class="string">├──</span> <span class="string">layout</span></div><div class="line"><span class="string">├──</span> <span class="string">scripts</span></div><div class="line"><span class="string">└──</span> <span class="string">source</span></div></pre></td></tr></table></figure>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>主题的配置文件。修改时会自动更新，无需重启服务器。</p>
<h4 id="languages"><a href="#languages" class="headerlink" title="languages"></a>languages</h4><p>语言文件夹。请参见 <a href="https://hexo.io/zh-cn/docs/internationalization.html" target="_blank" rel="external">国际化 (i18n)</a>。</p>
<h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <code>Swig</code> 模板引擎，您可以另外安装插件来获得 <code>EJS</code>、<code>Haml</code> 或 <code>Jade</code> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">layout.ejs   - 使用 EJS</div><div class="line">layout.swig  - 使用 Swig</div></pre></td></tr></table></figure></p>
<p>详细见 <a href="https://hexo.io/zh-cn/docs/templates.html" target="_blank" rel="external">模板</a></p>
<h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><p>脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，详细见 <a href="https://hexo.io/zh-cn/docs/plugins.html" target="_blank" rel="external">插件</a> 。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。</p>
<p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹</p>
<h4 id="发布（略）"><a href="#发布（略）" class="headerlink" title="发布（略）"></a>发布（略）</h4>]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-永久链接]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>你可以在<code>_config.yml &gt; permalink</code>配置网站的永久链接或者每篇文章的Front-matter自定义该文章的永久链接, 如: <code>:year/:month/:title/</code> 对应 <code>2017/04/hexo-永久链接/</code></p>
<h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><p>除了下列变量外，您还可使用 Front-matter 中的所有属性。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:year</td>
<td style="text-align:center">文章的发表年份（4 位数）</td>
</tr>
<tr>
<td>:month</td>
<td style="text-align:center">文章的发表月份（2 位数）</td>
</tr>
<tr>
<td>:i_month</td>
<td style="text-align:center">文章的发表月份（去掉开头的零）</td>
</tr>
<tr>
<td>:day</td>
<td style="text-align:center">文章的发表日期 (2 位数)</td>
</tr>
<tr>
<td>:i_day</td>
<td style="text-align:center">文章的发表日期（去掉开头的零）</td>
</tr>
<tr>
<td>:title</td>
<td style="text-align:center">文件名称</td>
</tr>
<tr>
<td>:id</td>
<td style="text-align:center">文章 ID</td>
</tr>
<tr>
<td>:category</td>
<td style="text-align:center">分类。如果文章没有分类，则是 default_category 配置信息。</td>
</tr>
</tbody>
</table>
<p>也可以在 <code>permalink_defaults</code> 参数下调整永久链接中各变量的默认值：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"><span class="attr">  lang:</span> <span class="string">en</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-生成文件与部署]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>生成文件一般是用于生成静态资源文件部署服务器用的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line"></div><div class="line">快捷方式为:</div><div class="line"></div><div class="line">$hexo g</div></pre></td></tr></table></figure>
<p>也可以让Hexo在监视到文件变动后立即重新生成静态文件，<br>在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --watch</div></pre></td></tr></table></figure></p>
<p>一般会跑以下命令，方便在Hexo生成文件后直接部署到Github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --deploy</div><div class="line">$ hexo deploy --generate</div><div class="line">(上面两条命令效果一样)</div><div class="line"></div><div class="line">或者简写</div><div class="line"></div><div class="line">$ hexo g -d</div><div class="line">$ hexo d -g</div><div class="line">(上面两条命令效果一样)</div></pre></td></tr></table></figure></p>
<h2 id="部署服务器"><a href="#部署服务器" class="headerlink" title="部署服务器"></a>部署服务器</h2><p>在部署之前先要在 <code>_config.yml</code> 将部署信息补充完整，此处以 Github 为例:</p>
<figure class="highlight yml"><figcaption><span>_config.yml配置</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span> <span class="comment"># type</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/jsonz1993/jsonz1993.github.io.git</span> <span class="comment"># 仓库地址</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span> <span class="comment"># 分支 可不填自动识别</span></div><div class="line"><span class="attr">  message:</span> <span class="string">"feat(hexo)-生成文件与部署"</span> <span class="comment"># 提交的信息</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>参数说明</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repo	库（Repository）地址</div><div class="line">branch	分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</div><div class="line">message	自定义提交信息 (默认为 Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;)</div></pre></td></tr></table></figure>
<p>确保本地安装了 <code>hexo-deployer-git</code>， 可通过以下方法安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>你也可以通过 <code>generate</code> 生成静态资源，再手动copy或上传到服务器.</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-本地服务器]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>一般安装hexo时会自动安装服务器，如果本地没有安装hexo服务器可通过以下命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-server --save</div></pre></td></tr></table></figure></p>
<p>安装完成后，启动服务器，会启动一个（默认4000端口）本地服务器，可通过 <code>http://localhost:4000</code> 访问，Hexo会监视文件变动自动更新，如果是改动配置，需要手动重启服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><figcaption><span>缩写</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server -p 5000</div></pre></td></tr></table></figure></p>
<h4 id="自定义IP"><a href="#自定义IP" class="headerlink" title="自定义IP"></a>自定义IP</h4><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server -i 192.168.1.1</div></pre></td></tr></table></figure></p>
<p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-资源文件夹与数据文件夹]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      <content type="html"><![CDATA[<h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>
<h6 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h6><p>可以通过设置 <code>_config.yml</code> 来使生成的每个文章都有对应的静态资源文件夹。</p>
<figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 <code>source/_data</code> 内的 <code>YAML</code> 或 <code>JSON</code> 文件，如此一来您便能在网站中复用这些文件了。</p>
<p>举例来说，在 <code>source/_data</code> 文件夹中新建 <code>menu.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Home: /</div><div class="line">Gallery: /gallery/</div><div class="line">Archives: /archives/</div></pre></td></tr></table></figure>
<p>您就能在模板中使用这些资料：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% for link in site.data.menu %&#125;</div><div class="line">  &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot;&gt;&#123;&#123; loop.key &#125;&#125;&lt;/a&gt;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tag plugins]]></title>
      <url>https://jsonz1993.github.io/2017/04/tag-plugins/</url>
      <content type="html"><![CDATA[<p>tag plugins 用于在文章中快速插入特定内容的插件,下面列出常用几种 具体参见<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/tag-plugins.html</a></p>
<h4 id="引用快"><a href="#引用快" class="headerlink" title="引用快"></a>引用快</h4><p>在文章中插入引言，可包含作者、来源和标题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote @Jsonz http://weibo.com/u/1638841204 %&#125;</div><div class="line">引用内容</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>
<blockquote><p>引用内容</p>
<footer><strong>@Jsonz</strong><cite><a href="http://weibo.com/u/1638841204" target="_blank" rel="external">weibo.com/u/1638841204</a></cite></footer></blockquote>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>样式可以在 <code>themes&gt;next&gt;source&gt;css</code>修改<br>[language] [title] [url] [link text] code snippet</p>
<figure class="highlight javascript"><figcaption><span>这是标题</span><a href="https://github.com/jsonz1993" target="_blank" rel="external">,Jsonz's Github</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">  [...<span class="string">"123"</span>].forEach(<span class="function"><span class="params">item</span>=&gt;</span> ++item);</div><div class="line">  <span class="keyword">return</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe url [width] [height] %&#125;</div></pre></td></tr></table></figure>
<iframe src="https://hexo.io/zh-cn/docs/tag-plugins.html" width="100%" height="200px" frameborder="0" allowfullscreen></iframe>
<h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><p>插入指定大小图片<br><img src="https://imgsa.baidu.com/baike/c0%3Dbaike60%2C5%2C5%2C60%2C20/sign=e1f5e7b9dcc451dae2fb04b9d7943903/7acb0a46f21fbe099143bcf36a600c338744ad3c.jpg" class="img-class" width="200" title="新垣结衣"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hello Hexo]]></title>
      <url>https://jsonz1993.github.io/2017/04/hello-hexo/</url>
      <content type="html"><![CDATA[<p>折腾了一晚上终于把搭好自己喜欢的主题的Hexo博客。<br>接下来一步一步配置 Hexo <code>__config.yml</code> 文件<br><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo 官网配置项 </a></p>
<p>一步一步跟着改配置，比较麻烦的是每次修改配置都要<code>hexo s</code> 重启一下服务器看效果<br>如果修改配置后重启服务看不到效果，可以先运行<code>hexo clean</code>清除缓存再重启服务</p>
<h6 id="Site-网站"><a href="#Site-网站" class="headerlink" title="Site 网站"></a>Site 网站</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">jsonz1993</span> <span class="comment"># 网站标题，也会显示在该主题导航左上角</span></div><div class="line"><span class="attr">subtitle:</span> <span class="comment"># 网站副标题 会生成在导航栏主标题旁边（这里隐藏了）</span></div><div class="line"><span class="attr">description:</span> <span class="string">前端开发</span> <span class="string">Jsonz</span> <span class="string">张欣欣</span> <span class="comment"># 网站描述，会出现在head，侧边菜单上 主要用做SEO</span></div><div class="line"><span class="attr">author:</span> <span class="string">Jsonz</span> <span class="comment"># 博客作者 Your Name</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment"># 语言，支持的语言可以在themes&gt;your-thems&gt;languages 找到</span></div><div class="line"><span class="attr">timezone:</span> <span class="comment"># 默认使用电脑的时区，一般不填</span></div></pre></td></tr></table></figure>
<h6 id="URL-网址"><a href="#URL-网址" class="headerlink" title="URL 网址"></a>URL 网址</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">url:</span> <span class="attr">https://jsonz1993.github.io/</span></div><div class="line"><span class="attr">root:</span> <span class="string">/</span></div><div class="line"><span class="comment"># 文章永久链接的格式 [https://hexo.io/zh-cn/docs/permalinks.html]</span></div><div class="line"><span class="comment"># 可以使用的变量有[:year, :month, :day, :title, :id, :category, Front-matter所有属性]</span></div><div class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span> </div><div class="line"><span class="attr">permalink_defaults:</span> <span class="comment"># 可以给变量指定默认值</span></div></pre></td></tr></table></figure>
<h6 id="Directory-目录"><a href="#Directory-目录" class="headerlink" title="Directory 目录"></a>Directory 目录</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义文件目录, 这部分一般用默认的就可以</span></div><div class="line"><span class="attr">source_dir:</span> <span class="string">source</span></div><div class="line"><span class="attr">public_dir:</span> <span class="string">public</span></div><div class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></div><div class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></div><div class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></div><div class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></div><div class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></div><div class="line"><span class="attr">skip_render:</span></div></pre></td></tr></table></figure>
<h6 id="Writing-文章相关配置"><a href="#Writing-文章相关配置" class="headerlink" title="Writing 文章相关配置"></a>Writing 文章相关配置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新文章的名称 我喜欢配合年月按文件夹分类，这样后面方便管理</span></div><div class="line"><span class="comment"># 此时生成的文件位于: source/_posts/:year/:month/:title.md</span></div><div class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span> </div><div class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#命令行 hexo new &lt;layout&gt; name 中 layout默认值</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># 标题转换为首字母大写</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># 是否在新标签打开连接</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span> <span class="comment"># 文件名大小写转换 (0)不转换（1)小写 (2)大写</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment"># 显示草稿</span></div><div class="line"><span class="comment"># 启动资源文件夹 看个人可用可不用</span></div><div class="line"><span class="comment"># 主要每次创建文件都会生成一个同名文件夹用于存放图片等资源</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment"># 把链接改为与根目录的相对位址</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment"># 显示下一条文章</span></div><div class="line"><span class="attr">highlight:</span> <span class="comment"># 代码块设置 既现在看到的这块</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  tab_replace:</span></div></pre></td></tr></table></figure>
<h6 id="Category-amp-Tag-分类-amp-标签"><a href="#Category-amp-Tag-分类-amp-标签" class="headerlink" title="Category &amp; Tag 分类&amp;标签"></a>Category &amp; Tag 分类&amp;标签</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># 默认的分类</span></div><div class="line"><span class="attr">category_map:</span> <span class="comment"># 分类映射（别名）</span></div><div class="line"><span class="attr">tag_map:</span> <span class="comment"># 标签映射（别名）</span></div></pre></td></tr></table></figure>
<h6 id="Date-Time-format-日期-amp-时间格式"><a href="#Date-Time-format-日期-amp-时间格式" class="headerlink" title="Date / Time format 日期&amp;时间格式"></a>Date / Time format 日期&amp;时间格式</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></div><div class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></div></pre></td></tr></table></figure>
<h6 id="Pagination-分页设置"><a href="#Pagination-分页设置" class="headerlink" title="Pagination 分页设置"></a>Pagination 分页设置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文章数量有限，未实践过该功能</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment"># 每页文章数量 0 为关闭分页</span></div><div class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment"># 分页的目录</span></div></pre></td></tr></table></figure>
<h6 id="Extensions-其他拓展设置"><a href="#Extensions-其他拓展设置" class="headerlink" title="Extensions 其他拓展设置"></a>Extensions 其他拓展设置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 此处有插件与主题设置</span></div><div class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment">#设置的主题应存放在 根目录/themes下</span></div></pre></td></tr></table></figure>
<h6 id="将草稿转为文章"><a href="#将草稿转为文章" class="headerlink" title="将草稿转为文章"></a>将草稿转为文章</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] <span class="symbol">&lt;filename&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
