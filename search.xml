<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的2020</title>
    <url>/2020/</url>
    <content><![CDATA[<blockquote>
<p>想想还是需要上来写点东西，不然都快忘了有这么一个博客</p>
</blockquote>
<p>2020总体评分应该三到四颗星吧~<br>回顾一下，2019年抱怨述职ppt没什么好写的，今年好像也是，不过已经有了一点好的迹象，至少有了一锅石头汤，剩下的就是往里面加。</p>
<h1 id="自考-⭐️⭐️⭐️⭐️⭐️"><a href="#自考-⭐️⭐️⭐️⭐️⭐️" class="headerlink" title="自考 ⭐️⭐️⭐️⭐️⭐️"></a>自考 ⭐️⭐️⭐️⭐️⭐️</h1><p>20年的第一个标签就是自考，今年自考也开始进入尾声。20年把所有的理论课都过了，电子技术基础，<strong>英语（二）</strong> ，高级程序设计，概率论与数理统计还有计算机应用的实践。<br>总体还是不错，从19年开始好像报考都能过，现在好像没了早上七点起来学习的习惯。<br>最开心的一点是 英语（二） 过了，现在就剩下 电子技术基础实践，学位英语和论文了。<br>但是时间点就很尴尬了，实践抱抱佛脚两周肯定没问题，但是一般五月份考，知道成绩估计都得七月份了<br>论文四月交终稿，如果自考的论文都是比较水的话，那这个没有特别担心，最担心的还是学位英语，如果上半年考不过又得拖时间。<br>按照最理想的来算，五月份实践考完，论文搞定，学位英语过了，也得下半年才能毕业，有一点出入的话还得拖到21年…<br>一直在补年轻的债啊<br><img data-src="./01.png" width="400"/></p>
<h1 id="工作-⭐️⭐️"><a href="#工作-⭐️⭐️" class="headerlink" title="工作 ⭐️⭐️"></a>工作 ⭐️⭐️</h1><p>今年工作还是很一般，基本没长进，虽然有好的点，但是还是不及格.</p>
<p>舔着脸找老大说要提工资也没有通过（boss不给，说职级的薪资就这么多，要么提高职级要么拉倒）。<br>问了一圈，基本上同事都没有涨工资心里多少平衡一丁点，不过我也不没有抱很大希望。<br>比起19年的话，可能有两个小点，一个是又开始记录一些工作上的总结，但是这远远不够，想要更多的是一些工作上的思考更深层次的东西，而不是一些 <strong>使用心得</strong> 。这一方面霜爷确实是楷模。另一方面是开始有了一些小小的沉淀，如果你什么都做不好的，那就从一件事情开始入手。<br>也渐渐明白了切图、增删查改不是技术没有长进的接口</p>
<p>举个例子,有一个需求是要做合同模版的</p>
<ol>
<li>做几套模版，留出一个插槽填值</li>
<li>用组件去拼接这些模版</li>
<li>写一个DSL，让产品自己去拼接这些逻辑</li>
</ol>
<p>所以这明显就是个人对技术和需求的追求….上面的DSL就霜爷做需求的时候想到再反向和产品提的建议<br><img data-src="./02.png" width="200"/></p>
<h1 id="身体-⭐️⭐️"><a href="#身体-⭐️⭐️" class="headerlink" title="身体 ⭐️⭐️"></a>身体 ⭐️⭐️</h1><p>身体和19年没什么大的变化，主要还是没有形成一个锻炼的习惯，后面讲到习惯的时候再补充。 不及格</p>
<h1 id="阅读-⭐️⭐️⭐️⭐️"><a href="#阅读-⭐️⭐️⭐️⭐️" class="headerlink" title="阅读 ⭐️⭐️⭐️⭐️"></a>阅读 ⭐️⭐️⭐️⭐️</h1><p>得益于今年年初疫情在家的原因，定的十二本书目标完成~<br><img data-src="./03.png" width="400"/></p>
<p>如果按照罗老师的说法，今年读的书分类也还好，没有太过功利性。这里的罗老师不是老罗…<br>推一手罗老师的视频<a href="https://www.bilibili.com/video/BV1BK411L7DJ?from=search&seid=17380124644798402912">我们为什么要读书</a></p>
<p>这里的我认为的功利性指的是适用性技能和工作上的技术书，而不是鸡汤成功学（泛指卡耐基为代表的的鸡汤）。<br>视频里面有一句话说的很好“只有非功利的读书才能抵制成功主义的读书”，但是在深圳这种地方真的很难静下心来读书，至少现在还没有很多这种情境。<br>印象中读闲书（我喜欢把非功利性的书称为闲书）的时间基本都是发生在考试过后的一两个月，这时候放松下来读闲书是最快乐的。真的就有五柳先生的那种心境 _好读书,不求甚解;每有会意,便欣然忘食_。<br>今年读书的一个好一点点的习惯就是开始有了简单的记录，虽然大部分记录都是功能性书的总结，但是总归有个好的开始，还是得鼓励一下。</p>
<p>20201年想读的书没有一个强制性的书单，都是偶尔在哪里看到一本书想读的就记录下来，后面有空了就去翻翻。再不济就去书店逛一圈，读读畅销书，不过最近感兴趣的分类大概分布在 社会学，历史，传记，哲学和一些经典文学。<br>这里感谢《美国vs美国》打开了我对社会学的兴趣，不过翻了一圈中国好像很少有这种类型的书，毕竟这种题材比较敏感，能找到的相对类似的也是在几十年前的《乡土中国》。<br><img data-src="./04.png" width="200"/></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="自闭"><a href="#自闭" class="headerlink" title="自闭"></a>自闭</h2><p>今年好像更自闭了，和大学相比，少了很多自信和锋芒，多了几份自卑。也开始不愿走出房门，这里说的不是家门是宿舍房门。不愿与人沟通，程序员的内敛逐渐显现，感觉一大部分的原因是因为目前工作和生活和预期的有落差，导致自卑不愿与人交流，当然工作上还是没什么问题主要指的是生活的扩展。<br>好在最近又开始注重形象了（像个正常的人）。接下来就是多参加一些活动还有扩展自己的兴趣。</p>
<h2 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h2><p>咦，按照《程序员修炼之道》和《掌控习惯》，想着2021年的话，每个月取一个小主题，一个季度一个大主题。因为如果目标和重心太分散的话，真的很难有什么成果。</p>
<p>每个月培养三个小习惯，开始把以前的习惯捡起来，比如上下班地铁十分钟可以背背单词；晚上散步、跑步、运动半个小时；作息早睡早起七点起床十一点半上床等等。</p>
<p>每个月读一本非技术书（功能性或闲书），每两个月读一本技术书。<br>程序员修炼之道里面写的是一个月一本技术书，但是我想着上半年我可能精力还是在准备论文和考试，没那么多精力投入，下半年再看要不要调整吧。</p>
<p>每年学一门语言，这里指的是技术向，所以今年的ts算吗？</p>
<p>每月一个新的技术点尝试，比如git终端的使用，不一定说全要用terminal，但是大部分的命令还是练练，熟能生巧</p>
<p>每年坚持一个爱好发展为技能，每两周一个爱好实践</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title>create-own-package</title>
    <url>/create-own-package/</url>
    <content><![CDATA[<p>首先我们罗列一下，一个npm工具包需要包含哪些通用的内容</p>
<ul>
<li>package.json √</li>
<li>dist目录 √</li>
<li>src目录 √</li>
<li>开发服务（编译）√</li>
<li>example √</li>
<li>单元测试</li>
<li>Readme and docs</li>
<li>eslint √</li>
<li>githook</li>
<li>发布相关</li>
</ul>
<h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>首先，必要的字段有 <strong>“name”</strong> 和 <strong>“version”</strong><br>建议直接用 <code>npm init</code>跑一遍就好，也可以偷个懒直接 <code>npm init -y</code>使用预设的默认值</p>
<p>可以在terminal上键入以下命令设置一些默认值<br><code>npm set init.author.email &quot;jsonz@qq.com&quot;</code><br><code>npm set init.author.name &quot;jsonz&quot;</code></p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>可以参照<br><a href="https://docs.npmjs.com/about-semantic-versioning">npm semantic versioning</a></p>
<p>总结一下就是 版本号为<code>x.y.z</code>：向后兼容的bug修复补丁递增z；向后兼容的features新功能递增y；破坏性改动递增x版本号</p>
<p>更详细的可以看 <a href="https://semver.org/lang/zh-CN/">semver version</a></p>
<h3 id="版本符号问题"><a href="#版本符号问题" class="headerlink" title="版本符号问题"></a>版本符号问题</h3><p>常见的版本定义</p>
<ul>
<li>version 相当于锁版本，只能安装该版本 “1.0.0”</li>
<li>&gt;version </li>
<li>&gt;=version </li>
<li>&lt;version </li>
<li>&lt;= version</li>
<li><del>version 小版本变动，比如 “</del>1.0.1” 代表大于等于 1.0.1，且小于 1.1.0，既z版本变动</li>
<li>^version 中版本与小版本变动，比如 “^1.0.1” 代表大于等于 1.0.1 且小于 2.0.0，既 y 与 z版本的变动</li>
<li>1.0.x y版本任意</li>
<li>tag 比如 “latest”</li>
<li>path 本地的包 “file:../package1”</li>
</ul>
<p><strong>本地包不是手动写一个url，而是用 <code>npm install /Filepath</code> 去安装的</strong></p>
<p>还有一些 url 相关的可以看 <a href="https://docs.npmjs.com/configuring-npm/package-json.html#urls-as-dependencies">package.json dependencies url</a></p>
<p>最后补上一个特别实用的版本计算器<br><a href="https://semver.npmjs.com/">npm semver calculator</a></p>
<h3 id="npm-version-用法"><a href="#npm-version-用法" class="headerlink" title="npm version 用法"></a>npm version 用法</h3><p>在当前版本已经修改完之后，commit 更改<br>再根据改动跑 <code>npm run major|minor|patch</code>，该命令会处理几项任务</p>
<ol>
<li>自动修改 package.json 的version</li>
<li>打个当前version的tag</li>
<li>git commit 且提交信息为当前 version </li>
</ol>
<h2 id="devDependencies-amp-amp-dependencies-amp-amp-peerDependencies等等"><a href="#devDependencies-amp-amp-dependencies-amp-amp-peerDependencies等等" class="headerlink" title="devDependencies &amp;&amp; dependencies &amp;&amp; peerDependencies等等"></a>devDependencies &amp;&amp; dependencies &amp;&amp; peerDependencies等等</h2><p>一个是你项目的开发依赖，一个是你项目中的依赖<br>举个例子，我们项目里用到的 <code>lodash</code>属于 __dependencies__，而项目开发的时候用到的<code>webpack</code> 则属于 <strong>devDependencies</strong></p>
<p><a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json#peerdependencies">peer</a></p>
<p>对于一些需要准确安装peerDependencies的，可以利用 <code>install-peerdeps</code>，例如 <code>npx install-peerdeps --dev eslint-config-airbnb</code>就会安装 eslint-config-airbnb 前置依赖，eslint, eslint-plugin-import, eslint-plugin-react, eslint-plugin-react-hooks, and eslint-plugin-jsx-a11y。</p>
<h2 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h2><p>当前程序需要什么版本支持，比如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;engines&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;&gt;=10.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;npm&quot;</span>: <span class="string">&quot;&gt;=6.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="dist-tag"><a href="#dist-tag" class="headerlink" title="dist-tag"></a>dist-tag</h2><p><a href="https://docs.npmjs.com/adding-dist-tags-to-packages">https://docs.npmjs.com/adding-dist-tags-to-packages</a></p>
<p>比如最新的自动会打上一个  <strong>latest</strong> 标签，一般我们不需要去关注这一块的东西</p>
<h2 id="description、keywords-包的描述"><a href="#description、keywords-包的描述" class="headerlink" title="description、keywords 包的描述"></a>description、keywords 包的描述</h2><p>用于 <code>npm search</code> 匹配用户搜索的关键字</p>
<h2 id="homepage-主页、文档"><a href="#homepage-主页、文档" class="headerlink" title="homepage 主页、文档"></a>homepage 主页、文档</h2><p>用于 <code>npm home</code>和 <code>npm docs</code>跳转的</p>
<h2 id="bugs-问题反馈"><a href="#bugs-问题反馈" class="headerlink" title="bugs 问题反馈"></a>bugs 问题反馈</h2><p>用于 <code>npm bugs</code>跳转</p>
<h2 id="license"><a href="#license" class="headerlink" title="license"></a>license</h2><p>@TODO 占坑展开几个比较常见的协议</p>
<h2 id="author"><a href="#author" class="headerlink" title="author"></a>author</h2><p>可以是单行 <code>&lt;name&gt; &lt;email&gt; (&lt;homePage&gt;)</code> 也可以是对象形式，包含 <strong>name</strong>, <strong>email</strong> 和 <strong>url</strong> 三个字段</p>
<h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p>你的包包括哪一些文件，如果项目中有 <strong>.npmignore</strong> 则包含除了该文件外的其他文件，如果没有 __.npmignore__，但是有 <strong>.gitignore</strong> 则会用 __.gitignore__。 具体见 <a href="https://docs.npmjs.com/configuring-npm/package-json.html#files">packages.json files</a></p>
<p>但是不管怎么设置都会包含这些文件</p>
<ul>
<li>package.json</li>
<li>README</li>
<li>CHANGES / CHANGELOG / HISTORY</li>
<li>LICENSE / LICENCE</li>
<li>NOTICE</li>
<li>package.json <code>main</code> 字段包含的文件</li>
</ul>
<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>配置一个文件路径，当别人引入你的模块时默认会加载这个文件。一般指向__”commonjs”__文件</p>
<h2 id="browser"><a href="#browser" class="headerlink" title="browser"></a>browser</h2><p>只能在浏览器使用的文件</p>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>引入 <strong>esm</strong> 模块的文件</p>
<p><a href="https://rollupjs.org/guide/en/#outputformat">https://rollupjs.org/guide/en/#outputformat</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/129310389">https://zhuanlan.zhihu.com/p/129310389</a></p>
<p><a href="https://juejin.im/post/5cfe6d3be51d454d544abf30">https://juejin.im/post/5cfe6d3be51d454d544abf30</a></p>
<p><a href="https://github.com/SunshowerC/blog/issues/8">https://github.com/SunshowerC/blog/issues/8</a></p>
<p>@TODO 补充更详细的介绍 esm  commonjs main 等情况？ <a href="https://github.com/SunshowerC/blog/issues/8">https://github.com/SunshowerC/blog/issues/8</a></p>
<h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>可执行文件，写在这里的可执行文件会被软链到 __node_module/.bin__下面。<br>比如 <code>jest</code>，当我们 <code>npm install jest</code> 之后，直接在当前目录执行 <code>jest</code>就会去跑 __node_module/jest`下面 package.json 的bin字段指定的可执行文件</p>
<p><a href="https://docs.npmjs.com/configuring-npm/package-json.html#bin"> package.json bin</a></p>
<h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><p>当前包的仓库， <code>npm repo</code> 时跳转</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/jsonz1993/project.git&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>占坑</p>
<h1 id="README-or-Docs"><a href="#README-or-Docs" class="headerlink" title="README or Docs"></a>README or Docs</h1><h2 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h2><p>README一般包含了最简单的使用教程，包括 安装、配置、使用等</p>
<p>如果你写的包有很多功能或接口的话，则推荐有 docs 模块介绍当前包的接口的，如果只是比较简单的接口，则可以也写在<code>README.md</code></p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><h2 id="npmignore"><a href="#npmignore" class="headerlink" title=".npmignore"></a>.npmignore</h2><p>对于不重要的东西，可以使用 <code>.npmignore</code> 避免上传到 npm 上，比如 <code>.babelrc</code>, <code>.editorconfig</code>, <code>docs/</code>, <code>test/</code> 等等</p>
<p><a href="https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package">.npmignore guide</a></p>
<h2 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h2><p><a href="https://docs.npmjs.com/configuring-npm/npmrc.html">.npmrc guide</a><br>当前项目的npm配置，会覆盖全局的 .npmrc，比如我发的是公司内部的私有包，可以在项目下新建一个 .npmrc。然后写上 <strong>registry</strong> 等字段</p>
<h2 id="不再维护-or-弃用"><a href="#不再维护-or-弃用" class="headerlink" title="不再维护 or 弃用"></a>不再维护 or 弃用</h2><p>如果说你不想再维护某个包，或者某个版本有严重bug，你不想用户去使用它，可以弃用该包。使用场景比较少，具体参照<a href="https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions">官方文档</a></p>
<h1 id="常用的cli"><a href="#常用的cli" class="headerlink" title="常用的cli"></a>常用的cli</h1><h2 id="npm-bugs-直接打开反馈bug的网站"><a href="#npm-bugs-直接打开反馈bug的网站" class="headerlink" title="npm bugs 直接打开反馈bug的网站"></a>npm bugs 直接打开反馈bug的网站</h2><p><code>npm bugs react</code>是打开react github repos 的issues</p>
<h2 id="npm-config"><a href="#npm-config" class="headerlink" title="npm config"></a>npm config</h2><p>处理npm 配置相关问题</p>
<h2 id="npm-docs"><a href="#npm-docs" class="headerlink" title="npm docs"></a>npm docs</h2><p><code>npm docs react</code>打开react 官网主页</p>
<h2 id="npm-link-本地开发必备"><a href="#npm-link-本地开发必备" class="headerlink" title="npm link 本地开发必备"></a>npm link 本地开发必备</h2><p>占坑</p>
<h2 id="npm-repo-打开包的仓库"><a href="#npm-repo-打开包的仓库" class="headerlink" title="npm repo 打开包的仓库"></a>npm repo 打开包的仓库</h2><p>一般直接打开 github repo</p>
<h1 id="开发服务（编译）"><a href="#开发服务（编译）" class="headerlink" title="开发服务（编译）"></a>开发服务（编译）</h1><p>目前比较流行的 <strong>webpack</strong>,<strong>roolup</strong>,__parcel__和比较年轻的__snowpack__。</p>
<h1 id="关于本地调试npm"><a href="#关于本地调试npm" class="headerlink" title="关于本地调试npm"></a>关于本地调试npm</h1><p>在开发的npm包下面跑 <code>npm link </code><br>在要用的地方跑 <code>npm i packageName</code></p>
<p>调试完之后 开发的包下面 <code>npm unlink</code><br>要用的地方 <code>npm uninstall packageName &amp;&amp; npm install packageName</code></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
  </entry>
  <entry>
    <title>vscode项目alias设置</title>
    <url>/vscode-alias/</url>
    <content><![CDATA[<p>一般我们在会在webpack配alias，比如 <code> &#123; &#39;@&#39;: path.resolve(__diranme, &#39;./src&#39;) &#125;</code></p>
<p>如果在项目上直接这么写，vscode是跳不到目标文件，比如<code>import router from &#39;@/router&#39;</code>。</p>
<p>所以可以在vscode上加一个配置用来让vscode识别这些。</p>
<p>如果项目上用的是 ts ，则配 <code>tsconfig.json</code>，js 则在项目根目录上新建 <code>jsconfig.json</code></p>
<figure class="highlight javascript"><figcaption><span>jsconfig.json || tsconfig.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://code.visualstudio.com/docs/languages/jsconfig">更多配置看官网</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>学好Git 拒绝背锅</title>
    <url>/code-check/</url>
    <content><![CDATA[<p><a href="https://github.com/jsonz1993/ac939016">仓库demo</a></p>
<p>今天下午同事找到我，说有个锅要我背一下，在vsc的<code>gitLens</code>看到某个文件里面的某行代码是我写的。</p>
<p>但是我有印象这些代码是我复制过来的，大概的场景是这样：</p>
<blockquote>
<p>先有个a文件，写了某些代码，后面发现说a文件的某些代码应该归到b文件里面，所以就把这块代码移过去，这时候整个仓库就只有b文件出现这些代码，看文件历史的时候就会觉得这些代码是我写的…</p>
</blockquote>
<p>这时候我们就需要找一下这些代码是从哪里copy过来的</p>
<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95">git blame</a><br><code>git blame [&lt;options&gt;] &lt;file&gt;</code> 可以查看某文件的每一行是什么时候谁修改的，类似 vsc的<code>gitLens FILE HISTORY</code><br>这个命令可以加个 -C 的选项，Git 会分析你正在标注的文件， 并且尝试找出文件中从别的地方复制过来的代码片段的原始出处。</p>
<p>不过这个功能我没试过是有用的…比如这次就没有提示说这行代码是从哪里复制过来的</p>
<p>这时候我们就要用git的另一个搜索工具 <code>git log</code></p>
<p><code>git log -S Text</code>可以查看Text出现在哪些commit中，这就很有用了。</p>
<p>直接 <code>git log -S &quot;userName = &#39;jsonz1993&#39;&quot;</code>查看发现在之前a同事提交过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -S <span class="string">&quot;userName = &#x27;jsonz1993&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">commit ac9390164c24e4abc60f65a5604a3e2cb1f3ad66 (HEAD -&gt; master)</span><br><span class="line">Author: jsonz1993 &lt;jsonz@qq.com&gt;</span><br><span class="line">Date:   Thu Apr 9 17:08:16 2020 +0800</span><br><span class="line"></span><br><span class="line">    把user信息都归到一起</span><br><span class="line"></span><br><span class="line">commit ee7f357fa8a9b8eefc99e6f446bd983b7020ba34</span><br><span class="line">Author: a同事 &lt;jsonz@qq.com&gt;</span><br><span class="line">Date:   Thu Apr 9 17:06:08 2020 +0800</span><br><span class="line"></span><br><span class="line">    添加userName</span><br></pre></td></tr></table></figure>

<p>切换到 <code>ee7f357f</code> 再查看文件历史，确保没有丢错锅</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout ee7f357f; git blame a.js</span><br><span class="line"></span><br><span class="line">^ee7f357 (a同事 2020-04-09 17:06:08 +0800 1) <span class="built_in">export</span> const userName = <span class="string">&#x27;jsonz1993&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查看之后发现这个文件只有a同事改过…成功甩锅</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础</title>
    <url>/git-learn-basic/</url>
    <content><![CDATA[<h1 id="Git-Basic"><a href="#Git-Basic" class="headerlink" title="Git Basic"></a>Git Basic</h1><h2 id="获取仓库"><a href="#获取仓库" class="headerlink" title="获取仓库"></a>获取仓库</h2><p><code>git clone url &lt;folder&gt;</code></p>
<p>发现commit信息写错了，重新提交commit信息 <code>git commit --amend</code> </p>
<h2 id="记录每次更新"><a href="#记录每次更新" class="headerlink" title="记录每次更新"></a>记录每次更新</h2><p>git status 短模式<br><code>git status -s --short</code><br>暂存区状态 工作区状态 文件</p>
<p>.gitignore <a href="https://github.com/github/gitignore">githubIgnore</a></p>
<ul>
<li>所有空行或者以 # 开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li>
<li>匹配模式可以以（/）开头防止递归。</li>
<li>匹配模式可以以（/）结尾指定目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 忽略所有的 .a 文件</span><br><span class="line">*.a</span><br><span class="line"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span><br><span class="line">!lib.a</span><br><span class="line"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略任何目录下名为 build 的文件夹</span><br><span class="line">build/</span><br><span class="line"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><code>git rm</code> 直接从git仓库删除，并删除文件库<br><code>git rm --cached</code> 只删除git追踪，不删除磁盘文件，比如忘了把node_module加到.gitignore，就可以通过 git rm –cached删除追踪<br>支持 glob 模式匹配</p>
<h2 id="重命名-移动文件"><a href="#重命名-移动文件" class="headerlink" title="重命名/移动文件"></a>重命名/移动文件</h2><p><code>git mv oldFile newFile</code><br>相当于执行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv oldFile newFile</span><br><span class="line">git add newFile</span><br><span class="line">git rm oldFile</span><br></pre></td></tr></table></figure>

<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">git log</a></h2><p>限制显示的条数 <code>git log -l</code> 例如 <code>git log -2</code></p>
<p>查看每次commit改动的代码 <code>git log -p</code></p>
<p>增加总结，commit时各个文件增删多少行以及汇总 <code>git log --stat</code></p>
<p>一行输出 <code>git log --oneline</code></p>
<p>自定义format <code>git log --pretty=format:&quot;formation&quot;</code> 具体看链接文档</p>
<p>图形展示 <code>git log --graph</code></p>
<p>限制时间 <code>git log --since=2.days</code> 具体看链接文档</p>
<p>不展示merge节点 <code>git log --no-merges</code></p>
<h2 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h2><p><code>git reset file</code> 把暂存区的文件取出来<br><code>git checkout -- file</code> 把工作区文件修改撤销(变为已暂存/已提交的文件状态)</p>
<h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><p><code>git remote -v</code> 显示git读写的仓库地址<br><code>git remote add &lt;name&gt; &lt;url&gt;</code> 添加远程仓库 git add origin <a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#46;&#120;&#120;&#120;&#x78;">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#46;&#120;&#120;&#120;&#x78;</a></p>
<h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><p>添加tag<br><code>git tag -a tagName </code> 简单模式<br><code>git tag -a tagName -m message</code> 添加tag的说明</p>
<p>展示tag<br><code>git show tagName</code><br><code>git tag</code><br><code>git tag -l &#39;tagName glob</code></p>
<p>删除tag<br><code>git tag -d tagName</code> 只会删除本地<br><code>git push origin --delete tagName</code> 删除本地与远程<br><code>git push origin :refs/tags/tagName</code> 同上</p>
<p>检出标签<br><code>git checkout -b brand-version2 tagName</code></p>
<h2 id="Git别名"><a href="#Git别名" class="headerlink" title="Git别名"></a>Git别名</h2><p>可以让我们的终端操作更加方便快捷<br><code>git config --global alias.unstage &#39;reset HEAD --&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当我们执行 git unstage 时相当于执行了 reset HEAD --</span><br><span class="line">即</span><br><span class="line">git unstage fileA</span><br><span class="line">git reset HEAD -- fileA</span><br></pre></td></tr></table></figure>

<p>再比如我们经常看最后一次更改的话，可以设置个别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --gloabl alias.last &#x27;git log -1 HEAD&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h1><h2 id="创建、合并与删除"><a href="#创建、合并与删除" class="headerlink" title="创建、合并与删除"></a>创建、合并与删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout xxxx 检出分支</span><br><span class="line">git checkout -b xxx 创建并检出分支</span><br><span class="line">git branch xxxx 创建分支</span><br><span class="line"></span><br><span class="line">合并</span><br><span class="line">git checkout master</span><br><span class="line">git merge hotfix</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">git branch -d xxxx</span><br><span class="line">git push origin --delete xxxx 删除远程分支</span><br></pre></td></tr></table></figure>

<p>冲突</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mergetool </span><br><span class="line">git mergetool --tool-help 查看有什么diff工具</span><br><span class="line">git config merge.tool xxxx 设置merge tool</span><br></pre></td></tr></table></figure>

<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>git branch 查看分支<br>git branch -v 查看分支&amp;&amp;最后一次commit<br>git branch -vv 查看分支&amp;&amp;远程跟踪分支&amp;&amp;最后一次commit<br>git branch –merged/–no-merged 查看分支是否有被merge过，如果被merge过的分支，删掉该分支也没问题<br>git push <romote> <branch> 推动不同远程分支<br>git checkout –track <remote>/<branch> 切换并追踪分支<br>git branch -u/–set-upstream-to <remote>/<branch> 显示设置追踪远程分支<br>git push origin –delete xxxx 删除远程分支</p>
<h2 id="变基"><a href="#变基" class="headerlink" title="变基"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">变基</a></h2><p>merge的操作是三方合并（当前节点，待合并节点，共同祖先节点）<br>rebase更像是把所有提交重新在当前分支跑一遍，不过rebase有时候更灵活</p>
<p><code>git rebase --onto master server client</code><br>取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样</p>
<p><em>变基还是比较疑惑</em></p>
<h1 id="Git-Utils"><a href="#Git-Utils" class="headerlink" title="Git Utils"></a>Git Utils</h1><h2 id="贮藏与清理-git-stash"><a href="#贮藏与清理-git-stash" class="headerlink" title="贮藏与清理 git stash"></a>贮藏与清理 git stash</h2><p>贮藏 <code>git stash push</code><br>取出 <code>git stash pop</code><br>查看贮藏列表 <code>git stash list</code><br>骚操作 交互式贮藏，这个功能fork暂时不支持，所以只能通过命令行来实现 <code>git stash --patch</code><br>创建一个分支用来apply贮藏的东西 <code>git stash branch &lt;new branchName&gt;</code></p>
<p><code>git clean</code> 可以用来清理一些未被跟踪的文件，包括新建的和被ignore的<br>更好的方法是用 <code>git stash push --all</code>来暂存所有文件，因为clean删除操作是不可逆的</p>
<p>预演一遍会删除什么文件 <code>git clean -n</code><br>强制删除 <code>git clean -f</code><br>交互式 <code>git clean -i</code><br>静默模式 <code>git clean -q</code><br>也删除忽略的文件 <code>git clean -x</code><br>只删除忽略文件 <code>git clean -X</code><br>删除整个文件 <code>git clean -d</code></p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><code>git grep</code> 强大的搜索功能，不过一般好像都用ide直接搜或者用</p>
<p>搜索git仓库中的 removeSignoffAttachments 常用的命令<br><code>git grap -n removeSignoffAttachment</code> -n是为了显示在第几行<br><code>git grap -c removeSignoffAttachment</code> –count 显示在某个文件共出现多少次</p>
<h2 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">重写历史</a></h2><p>如果你的commit信息写错了，但是还没有推送到远程可以用 <code>git commit --amend</code>重新修改</p>
<p><strong>交互式变基</strong><br><code>git rebase -i HEAD~3</code> 交互式变基操作最近的三个commit</p>
<p>我们可以利用交互式变基做很多事情，比如修改多个交易信息。<code>git rebase -i HEAD~3</code> 然后再编辑器里面修改，如果只是修改commit信息，把<code>pick</code>改为<code>r</code>再改后面的信息就好。</p>
<p>你也可以在这里删除掉某个commit。 或者你想把commit合并成一个，可以把后面两个的 <code>pick</code> 改为 <code>squash</code>，git就会把后面两个的commit内容合并到第一个</p>
<h2 id="重写大量提交-filter-branch"><a href="#重写大量提交-filter-branch" class="headerlink" title="重写大量提交 filter-branch"></a>重写大量提交 filter-branch</h2><p>从每一个提交中移除一个文件: <code>git filter-branch --tree-filter &#39;rm -f passwords.txt&#39; HEAD</code></p>
<p>全局修改邮箱地址:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git filter-branch --commit-filter &#x27;</span><br><span class="line">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;schacon@localhost&quot; ];</span><br><span class="line">then</span><br><span class="line">        GIT_AUTHOR_NAME=&quot;Scott Chacon&quot;;</span><br><span class="line">        GIT_AUTHOR_EMAIL=&quot;schacon@example.com&quot;;</span><br><span class="line">        git commit-tree &quot;$@&quot;;</span><br><span class="line">else</span><br><span class="line">        git commit-tree &quot;$@&quot;;</span><br><span class="line">fi&#x27; HEAD</span><br></pre></td></tr></table></figure>

<h2 id="重置解密"><a href="#重置解密" class="headerlink" title="重置解密"></a>重置解密</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD~ 默认选项，把上个提交修改文件置于工作区</span><br><span class="line">git reset --soft HEAD~ 上个提交的修改置于暂存区</span><br><span class="line">git reset --hard HEAD~ 直接将指针指向上个修改，强制覆盖了工作目录中的文件。如果你的commit没有Push的话，那估计找不到了</span><br><span class="line"></span><br><span class="line">reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：</span><br><span class="line"></span><br><span class="line">1. 移动 HEAD 分支的指向 （若指定了 --soft，则到此停止）</span><br><span class="line">2. 使索引看起来像 HEAD （若未指定 --hard，则到此停止）</span><br><span class="line">3. 使工作目录看起来像索引</span><br></pre></td></tr></table></figure>

<h2 id="reset-合并提交"><a href="#reset-合并提交" class="headerlink" title="reset 合并提交"></a>reset 合并提交</h2><p>除了<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2#_squashing">压缩提交</a>以外，还可以用reset来合并提交，前提也是你的代码还没push</p>
<p>假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。</p>
<p><code>git reset --soft HEAD~2</code> 就会把前两个commit给撤回，并把修改都放在暂存区，这时候再一起commit</p>
<h2 id="高级合并"><a href="#高级合并" class="headerlink" title="高级合并"></a>高级合并</h2><p>正常合并冲突直接在ied里面解决冲突会比命令行人性化很多</p>
<h2 id="查看每行的修改信息"><a href="#查看每行的修改信息" class="headerlink" title="查看每行的修改信息"></a>查看每行的修改信息</h2><p>类似vscode的 <code>File Blame</code>功能<br><code>git blame [-L 1,200] index.jsx</code> 查看 index.jsx的第1~200行的修改信息，如果加<code>-C</code>参数还可以看到这几行最原始出现的地方，也就是说有可能是其他地方copy过来的</p>
<h2 id="查看第一次出现在仓库是什么时候"><a href="#查看第一次出现在仓库是什么时候" class="headerlink" title="查看第一次出现在仓库是什么时候"></a>查看第一次出现在仓库是什么时候</h2><p><code>git log -S text</code> 可以知道仓库什么时候提交出现过这些 text</p>
<h2 id="git-子模块（子git）"><a href="#git-子模块（子git）" class="headerlink" title="git 子模块（子git）"></a>git 子模块（子git）</h2><p>添加子模块 <code>git submodule add &lt;repo&gt; [&lt;dir&gt;]</code></p>
<p>当仓库中有子模块时，需要用 <code>git submodule init &amp;&amp; git submit update</code>来初始化并检出父项目中列出的合适的提交<br>当然你也可以在克隆的时候直接加参数来处理<code>git clone &lt;repo&gt; --recurse-submodules</code></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>用github actions部署你的应用(hexo)</title>
    <url>/github-actions/</url>
    <content><![CDATA[<p>之前github pages 一直都是用 travis-ci 部署的，除了慢一点没什么毛病，所以一直没有转向Github Actions的念头。<br>但是最近又重新买了个服务器，正好趁这个时间学一下 Actions，Actions对比travis有个很大的亮点就是他的生态很好，你要用什么插件搜一下直接就可以用了，减少很多工作。</p>
<h1 id="access-token"><a href="#access-token" class="headerlink" title="access token"></a>access token</h1><p>因为我们构建完需要Push到仓库，所以得有个 <a href="https://github.com/settings/tokens">Github access token</a>，可以直接点进链接申请，<strong>勾选repo的选项</strong> ，然后点击生成Token，这时候先别关闭页面，后面要用到这个token。</p>
<h1 id="secrets"><a href="#secrets" class="headerlink" title="secrets"></a>secrets</h1><p>进入要部署的项目的setting，左边有个导航进 secrets，在这里生成Actions需要用到的所有秘钥，只要你觉得有隐私的或者需要保密的全都在这里定义字段，然后配置文件直接使用就好。</p>
<p>我的Secrets总共有四个，如果只是部署到 github pages的话，你只需要token一个就够了</p>
<ul>
<li>token: 存放上一步生成的 access token</li>
<li>SSH_PRIVATE: 存放SSH到服务器的私钥</li>
<li>USERNAME: 要登录服务器的用户</li>
<li>HOST: 要登录的服务器host</li>
</ul>
<h1 id="Action-workflow"><a href="#Action-workflow" class="headerlink" title="Action workflow"></a>Action workflow</h1><p>点击项目顶部导航进入 Actions，随便点一个模板进去，或者直接 <code>set up workflow yourself</code>新建一个新的</p>
<p>我的workflow基本就是搬 travis 的，按照github actions的格式改了下而已。</p>
<p><strong>大概流程是： 拉取代码，初始化环境，生成静态资源，推送到目标仓库 或 部署到目标服务器</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">deployer</span> <span class="comment"># 当前workflow的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发的时机 当 master 分支有 push 的操作时执行</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span> <span class="comment"># jobs一般都是并行执行</span></span><br><span class="line">  <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">publish</span> </span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 运行环境</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 使用 actions/checkout 这个插件 用于拉取当前仓库的master分支</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line"></span><br><span class="line">      <span class="comment"># 使用 actions/setup-node@v1 插件配置node环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装 hexo-cli 与项目所需的 node_modules</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">      <span class="comment"># 生成静态资源</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">public</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 部署到 Github Pages 这里没有用到 hexo的 Deploy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GH_REF:</span> <span class="string">github.com/jsonz1993/jsonz1993.github.io</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 配置本地git</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;Jsonz1993&quot; </span></span><br><span class="line"><span class="string">          git config --global user.email &quot;jsonz@qq.com&quot;</span></span><br><span class="line"><span class="string">          # 生成 commit message 默认抓取最后一次提交信息</span></span><br><span class="line"><span class="string">          git log --pretty=format:&quot;CI: %s&quot; --date=short -n 1  &gt; commit-message.log</span></span><br><span class="line"><span class="string">          git clone https://$&#123;GH_REF&#125; .deploy_git</span></span><br><span class="line"><span class="string">          cd .deploy_git</span></span><br><span class="line"><span class="string">          git checkout master</span></span><br><span class="line"><span class="string">          cd ../</span></span><br><span class="line"><span class="string">          mv .deploy_git/.git/ ./public/</span></span><br><span class="line"><span class="string">          cd ./public/</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -F ../commit-message.log</span></span><br><span class="line"><span class="string">          git push --force --quiet &quot;https://$&#123;&#123; secrets.token &#125;&#125;/@$&#123;GH_REF&#125;&quot; master:master</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment"># 部署到自己的服务器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Private</span> <span class="string">Server</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">cd</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_PATH</span> <span class="string">&#125;&#125;</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">pull</span></span><br></pre></td></tr></table></figure>


<p><a href="https://help.github.com/cn/actions/automating-your-workflow-with-github-actions">使用 GitHub 操作自动化工作流程</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰 Github Actions</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2019</title>
    <url>/2019-end/</url>
    <content><![CDATA[<p>转眼2019剩下 5% 不到了，是时候水一下总结</p>
<p>下午在做部门的下半年述职PPT的时候，才发现这下半年什么事情都没做，划水划过去了，结果ppt没啥好写的 可恶！</p>
<h1 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h1><p>不得不说，今年下半年的重心更多是倾向学习这块，虽然没有达到百分之百，不过也算满意，啃了高数和计算机原理。</p>
<p>原定要过八科，普通逻辑不用考，过了六科 算是还行。</p>
<p>但是自从十一月成绩公布以来，懒懒散散的，之前七点早起的习惯也没了…而且现在搬到生态园，中午和晚上学习的地方也还没找到合适的 真是让人惆怅。<br>不过也还好，可以利用中午的时间把之前微信收藏的几十篇文章慢慢过一下。</p>
<p>2020定的学习计划比今年还要重，五个考试和三个实践，当立个flag🚩🚩🚩，早点把这个东西搞定才能把心思都放在工作上。<br>还特地听了吴苏三胖的话，去买了本新概念1，打算从头开始学英语，把英语给考了。如果是按照下半年那个学习的劲头倒还可以尝试，如果是这一个月来的划水状态，真的是浪费时间 叹口气加油吧</p>
<h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><p>如果说学习方面评为良好的话，工作应该算是不及格吧。 年中定的计划现在一个都没完成，ppt胡搞瞎搞都不知道怎么搞，明天上台也不知道能怎么扯个八分钟。</p>
<p>算是鞭挞一下自己</p>
<ul>
<li>原生知识还是只懂毛皮，写写demo，自己小的项目都做不了，大失败！</li>
<li>后台知识基本没涉及，不过也不在计划之内</li>
<li>前端知识，更加熟练的流水工而已，没啥突破</li>
<li>和霜爷一起做开源，做了两个星期就不搭理人家 哈哈哈哈，写ppt的时候还可以蹭个名字 笑死</li>
</ul>
<p>难搞哦。</p>
<p>20年的话，emmmmmm 应该会放点精力在java端，得跟着朋友做点小项目才行，应付毕业设计和实践考试；然后公司项目上输出一点文章到km，也尝试着一起参与项目表单模式设计；最重要的是得找到一个可以真正学习实践的点，现在扯什么全栈是最不靠谱的。</p>
<p>具体的得等和老大沟通才知道，不过真的这些事情得主动，这次算是吃了个教训。</p>
<p>不过今年倒是去听了几场内部的小型分享会。</p>
<img data-src="./mysql_maria.jpg" width="500"/>
MySQL和MariaDB之父 Michael 分享，全场听下来只记得他说的几句话
> 大女儿叫 "My" 所以第一个数据库起名`MySQL`，二女儿叫Maria...所以后面写的数据库叫`MariaDB`...这...

<img data-src="./node_deno.jpg" width="500">
node.js 和 deno.js之父Ryan Dahl
承认deno设想很好，但是没有生态注定不能商业化，如果兼容node的话，又很难撇清关系，现在node已经有慢慢通过升级改掉很多毛病，剩下的用一些工具也可以完成，没必要特地开个新语言来整合，所以听完还是不大看好。

<h1 id="关于健康"><a href="#关于健康" class="headerlink" title="关于健康"></a>关于健康</h1><p>哎呀，今年真的和算命先生说的一样，这儿疼哪儿痛的（一个做it的会相信算命先生的话， 没想到吧 (～￣▽￣)～ ）。<br>弄了几个牙齿，看了皮肤科，最后还去理了肠胃。</p>
<p>其他还好暂时告一段落，就是胃镜这玩意真不是人照的，最有印象的话是医生看完胃镜说了句“年纪轻轻就萎缩了”，哎 以后爱惜身体咯</p>
<p>看了下今年除去刷医保的钱以外，看病总共花了八千多…不过里面有老爸老妈体检费，所以也没有那么夸张，后面买个重疾啥的，又得花钱。</p>
<p>至于19年的运动计划，等老命保住再说吧，现在养身多了，可乐咖啡都不怎么敢喝，周末没事都要出去走走散散步。</p>
<h1 id="关于其他"><a href="#关于其他" class="headerlink" title="关于其他"></a>关于其他</h1><ul>
<li>工资的目标算是达到了，不过以前在广州，现在在深圳，也没有多很多 勉勉强强。不过明年不敢定工资计划了，现在没技术，没学历混口饭吃先。</li>
<li>拿了驾照，还行 还行 虽然没车，不过总算完成了。</li>
<li>原生开发的目标算是黄的彻底</li>
<li>存款一方面应该是定的偏少了，另一方面是股市回血了一点点 还行勉强接受 哈哈。本来存个一两万不是很想写进来，后面想想还是要有个交代才能继续。</li>
<li>考试的计算也算是可以接受</li>
</ul>
<p>emmm 这么一看，好像除了作息不规律，健康有点问题；以及工作没啥进取以外 其他都还行。</p>
<p>不过现在的焦虑感一年比一年更强，想想汕头的朋友几个都结婚小孩都有了，某坤少也是，再看看自己房子没有，老婆没有，车子没有，票子也没有。<br>当然最大的焦虑其实是怕脚步赶不上老爸老妈老去的速度。<br>今天下午老妈在群里问我和老姐，家里不要的衣服可不可以拿去捐了？<br>这事让我有点激动，我们在学习进步的时候 老妈子也与时俱进，至少今年学会微信简单操作，平时视频聊天啥的没毛病，真好 科技改变生活。</p>
<hr>
<p>前几天大学几个朋友在群里聊天，一个说到：</p>
<blockquote>
<p>算一算，能陪父母的时间可能也就十几年了，这么一想好像一下子无法接受。想早点成家满足家里人抱孙子的愿望</p>
</blockquote>
<p>是啊，像我现在在外面的，时间更少，以后也不知道定居在哪里。唯有少玩点游戏，少刷点抖音减少负罪感。</p>
<p>说到游戏和抖音，最近一个月就是因为这两个玩意搞得无心学习，这玩意对我这个毫无自制力的人来说太可怕了，记得有一天玩到晚上四点，隔天起床立马把游戏卸了，控制不住自己的话，至少可以提高玩的成本。</p>
<p>还有就是抖音，记得之前看过一个公众号就是说这个的，这种基于推荐系统的软件都不是什么好软件，特别容易沉迷。<br>不过抖音有一个积极的方面就是以后可以有什么小tip就在上面搜一下， 算半个知乎，实用技巧啊，科普啥的应该还行，先留着吧。</p>
<p>再叨两句，下午散步的时候刷知乎看到一个问题，大概是:</p>
<blockquote>
<p>大学本科，同学都作弊，我没有作弊，我得到什么？</p>
</blockquote>
<p>有一个回答写的是什么都没有得到。看到这个标题的时候，我是挺有感触的，因为我也是这类人，虽然不是说从小到大没有作弊过，但是自认为很多时候还是比较正派耿直（其实就是胆小），所以可能会错失很多捷径或机会。</p>
<p>想想他们作弊的人以后绝大部分是不会得到什么鬼报应，而我坚持不作弊也不会有什么好处，当然看这个问题的时候，想的肯定不只是作弊的问题，可以延伸到生活中的各个场景，所以有时候觉得这种老实巴交的人，活该赚不了钱。</p>
<p>真想2020年可以学会狡猾？奸诈？一点？ 你看，连一个褒义的词都想不出一个，用圆滑吧。</p>
<p>所以2020年关键字是：<strong>自考</strong> <strong>健康</strong> <strong>英语</strong> __专业__。</p>
<p>最后的最后，放多一张照片，今天下午散步拍的，刚好看到左上角有一群小鸟在飞。<br>希望能和这些小鸟一样，在大城市有个自己的小角落。<br><img data-src="./2019_end.jpeg" width="500"></p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title>服务端入门汇总</title>
    <url>/server-beginner/</url>
    <content><![CDATA[<p>这里只有简单的服务端入门东西没啥好看…</p>
<hr>
<h1 id="mac-查看端口占用"><a href="#mac-查看端口占用" class="headerlink" title="mac 查看端口占用"></a>mac 查看端口占用</h1><p><a href="https://www.cnblogs.com/peida/archive/2013/02/26/2932972.html"><code>lsof -i:port</code></a><br><a href="https://www.cnblogs.com/peida/archive/2013/03/08/2949194.html"><code>netstat -ant | grep &#39;port&#39;</code></a></p>
<hr>
<h1 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h1><p>由于项目上后台用到redis，如果开发下大家用同一个容易被人改数据，造成奇葩的事情，所以本地搭了一个自己玩。</p>
<p>记录一下本地brew安装redis的过程</p>
<p>按着官网说明下载安装 <a href="https://redis.io/download">https://redis.io/download</a></p>
<p>mac下建议直接用brew管理</p>
<ol>
<li><code>brew install redis</code></li>
<li>可以用 <code>brew list redis</code>查看redis安装的位置</li>
<li>brew 安装的软件，配置一般都在<code>/usr/local/etc</code>，可以直接进去修改配置</li>
</ol>
<p>安装完之后，直接根据提示 <code>brew services start xxxx(redis)</code> 或者改完配置要重启reids <code>brew services restart xxx(redis)</code>。这些都是 brew 的常规操作了</p>
<p>配置的话，我这边根据项目没什么需要改的，端口直接用默认端口，就设了个密码，本来本地跑想直接把密码写在 conf 文件，想想这样显得太不专业了，建议直接用commit设置</p>
<p>命令行跑<code>redis-cli</code> 然后输入 <code>CONFIG SET requirepass $YOUR_PASSWORD</code><br>如果这时候输出 <code>ok</code> 则设置成功 可以用 <code>AUTH $YOUR_PASSWORD</code> 来校验。</p>
<p>一切ok之后，键入 exit 退出 redis-cli，结束。</p>
<hr>
<h1 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><p>本文只是单纯分享下怎么配置 免密登录服务器以及github clone，和网上99%没差异，只是整理一下后面如果又需要的话可以看</p>
<p>只适用于mac，linux应该也适用</p>
<p><strong>基本配置</strong></p>
<ol>
<li>创建.ssh目录 <code>mkdir -p ~/.ssh</code></li>
<li>创建秘钥 <code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code> 输完直接敲回车即可</li>
<li>此时你的 <code>~/.ssh</code>就会多了几个文件 id_rsa与id_rsa.pub分别是公钥和私钥</li>
<li>私钥自己留着，公钥如果你想要免密登录哪台服务器就拷贝到那台服务器的<code>authorized_keys</code>里面</li>
</ol>
<p>如果你的机器本来就有 id_rsa 与 id_rsa.pub 则可以直接跳过1，2，3步。</p>
<p>如果你有私钥的话，你可能需要有一个 <code>.ssh/config</code> 文件用来存储你的秘钥配置，关于这块后面有用到我再来补充</p>
<p>关于第四步拷贝到远程机器的<code>authorized_keys</code>里面，可以直接使用命令<code>ssh-copy-id user@host</code>或者<code>ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></p>
<p><strong>github配置</strong></p>
<p>至于github其实也是一样的，只是他的 <code>authorized_keys</code> 是用设置来配置，具体在个人 <a href="https://github.com/settings/keys"><code>setting/ssh</code></a>里面</p>
<p><strong>简单原理</strong></p>
<p>最后SSH的原理简单可以这么理解<br>我生成了一个私钥和一个公钥，私钥存放在本地，公钥放到远程机器上<br>当我链接远程机器的时候，机器就会发一串随机字符串给我，我用私钥加密只会再发回去。<br>远程主机再用存放在 <code>authorized_keys</code> 的公钥去解密，如果成功且匹配，意味着这个用户是可信任的。</p>
<p><strong>相关参考 or 收藏链接</strong></p>
<p><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a><br><a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh">github关于ssh</a><br><a href="https://shanyue.tech/op/init.html">服务器登录相关</a></p>
<p><a href="https://shanyue.tech/op/">服务器基础教程</a> 这是个好教程，基本上都是一些入门级的东西 对新手很友好</p>
<hr>
<h1 id="nginx-amp-amp-ssl"><a href="#nginx-amp-amp-ssl" class="headerlink" title="nginx &amp;&amp; ssl"></a>nginx &amp;&amp; ssl</h1><p>Centos7系统</p>
<ul>
<li>安装 <code>yum install nginx</code></li>
<li>启动直接 命令行键入<code>nginx</code>就好</li>
<li>要查看是否启动可以看最简单直接查看有没有Nginx进程。 <code>ps -ef | grep nginx</code></li>
<li>常用的命令，测试配置文件 <code>nginx -t</code>，<code>nginx -s [signal]</code></li>
</ul>
<p>配置基本看这几篇就够用了 <a href="https://zhuanlan.zhihu.com/p/34943332">8分钟带你深入浅出搞懂Nginx</a>, <a href="https://juejin.im/post/5d81906c518825300a3ec7ca#heading-12">nginx 这一篇就够了</a></p>
<p>ssl 推荐直接用 <a href="https://certbot.eff.org/">certbot</a> 简单易用好操作</p>
<p>centos的可以直接进这个网址，傻瓜式才做即可 <a href="https://certbot.eff.org/lets-encrypt/centos6-nginx">https://certbot.eff.org/lets-encrypt/centos6-nginx</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks食用指南</title>
    <url>/react-hooks/</url>
    <content><![CDATA[<p><a href="https://github.com/jsonz1993/react-source-learn">react16 Hooks食用指南</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>hello angular1.5</title>
    <url>/hello-angular1-5/</url>
    <content><![CDATA[<p><a href="http://docs.ngnice.com/guide/filter">http://docs.ngnice.com/guide/filter</a><br><a href="https://devdocs.io/angularjs~1.5/api/ng/directive">https://devdocs.io/angularjs~1.5/api/ng/directive</a><br><a href="https://code.angularjs.org/1.5.3/docs/guide">https://code.angularjs.org/1.5.3/docs/guide</a></p>
<p>组件、控制器、服务、指令、过滤器<br>对应项目上的 components、modules、services、xx、filter</p>
<p>控制器 ng-controller =&gt; create scope</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化，涉及 scope root 作用域等待</span></span><br><span class="line"><span class="keyword">var</span> App = angular.module(<span class="string">&#x27;app&#x27;</span>, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器 C 将 M 和 V 绑定(MVC)</span></span><br><span class="line">App.controller(<span class="string">&#x27;ctrl&#x27;</span>, $scope=&gt; &#123;</span><br><span class="line">  $scope.data= &#123;&#125;;</span><br><span class="line">  <span class="comment">// 不建议直接用 $scope.message = &#x27;&#x27;; 改动的话，内存地址改变容易导致ng不能触发监听</span></span><br><span class="line">  $scope.onClick = <span class="function">()=&gt;</span> &#123;&#125;; <span class="comment">// `ng-click=&quot;onClick&quot;`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>双向绑定: <code>ng-model</code><br>条件判断: <code>ng-if</code>、<code>ng-show</code>、<code>ng-hide</code><br>循环: <code>ng-repeat</code> <code>ng-repeat=&quot;x in xx&quot; $index, x.xxx</code></p>
<p>//过滤器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">App.filter(<span class="string">&#x27;xxxx&#x27;</span>, <span class="function">()=&gt;</span> <span class="function"><span class="params">text</span>=&gt;</span> textFilter);</span><br><span class="line"><span class="string">`&#123;&#123; data.message | xxxxFilter &#125;&#125;`</span></span><br><span class="line"><span class="comment">// 搜索 `ng-repeat=&quot;x in xxxx | filter: searchText&quot;`</span></span><br><span class="line">searchText = [<span class="string">&#x27;T&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;T&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;T&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;H&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure>

<p>样式选择器 <code>ng-class</code>,<code>ng-style</code><br>下拉列表选项 <code>ng-options</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$scope.colors = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;black&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">&quot;FirstCtrl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">&quot;colorChoosen&quot;</span> <span class="attr">ng-options</span>=<span class="string">&quot;color.name for color in colors&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>ng-include</code>和<code>ng-template</code> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">&quot;views/part.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">&quot;template.url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">&quot;getUrl()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">&quot;views/part.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://devdocs.io/angularjs~1.5/api/ng/directive/nginclude">更多</a></p>
<p>directive</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 名字命名用驼峰，使用用-</span></span><br><span class="line">App.directive(<span class="string">&#x27;people&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">restrict</span>: <span class="string">&#x27;E&#x27;</span>, <span class="comment">// 类型 element A: attribute, C: class</span></span><br><span class="line">    <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">// 是否直接代替顶级标签</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;xxx&#x27;</span> <span class="comment">// `templateUrl`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.directive(<span class="string">&#x27;te&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">scope</span>: &#123;</span><br><span class="line">      <span class="comment">// = 对象; @ 文本; &amp; 函数</span></span><br><span class="line">      <span class="attr">info</span>: <span class="string">&#x27;=&#x27;</span> <span class="comment">// 从 attr 中获取 info 属性，存储到 scope.info中,, 双向数据绑定，改成@ 为只读.</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">link</span>(<span class="params">scope, element, attrs</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// scope 作用域</span></span><br><span class="line">      <span class="comment">// element 封装过的页面dom。 element.children(&#x27;h1&#x27;).addClass(&#x27;text&#x27;)</span></span><br><span class="line">      <span class="comment">// attrs 传入的所有 attrs</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">transclude</span>: <span class="literal">true</span>, <span class="comment">// 把 directive 变成一个容器 这里有点像 React.children 的概念，或者vue里面的 slot</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`xxxxx&lt;div ng-transclude&gt;&lt;/div&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里传入了 data</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">te</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>ng表单，验证等</p>
<p>作用域广播<code>broadcasted</code>父级=&gt;子级；<code>emitted</code>子级=&gt; 父级</p>
<p>filter 自定义筛选器<br>data binding 双向绑定<br>dependency injection 引来注入<br>ng-src directive 内置指令<br>event ng-click 事件系统指令</p>
<p>server 注入自定义server<br>  angular.module(‘xxxx’, [])<br>    .factory(‘serverName’, [], fn)</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart核心库常见方法学习</title>
    <url>/dart-library/</url>
    <content><![CDATA[<blockquote>
<p>这几篇关于Dart的文章，只是在看官网教程的时候敲一遍巩固记忆而写的</p>
</blockquote>
<h1 id="Dart-core"><a href="#Dart-core" class="headerlink" title="Dart:core"></a>Dart:core</h1><p>每个文件都会默认引入这个包，包括numbers,collections,strings等等</p>
<h1 id="print"><a href="#print" class="headerlink" title="print"></a>print</h1><p>打印，默认会调用打印的对象的 <code>toString</code> 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(anObject)</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Jsonz&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I\&#x27;m <span class="subst">$name</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h1><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>解析把字符串转为数字</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="built_in">int</span>.parse(<span class="string">&#x27;42&#x27;</span>) == <span class="number">42</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">int</span>.parse(<span class="string">&#x27;0x42&#x27;</span>) == <span class="number">66</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">double</span>.parse(<span class="string">&#x27;0.50&#x27;</span>) == <span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">num</span>.parse(<span class="string">&#x27;42&#x27;</span>) <span class="keyword">is</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">num</span>.parse(<span class="string">&#x27;0x42&#x27;</span>) <span class="keyword">is</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">num</span>.parse(<span class="string">&#x27;0.50&#x27;</span>) <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">int</span>.parse(<span class="string">&#x27;42&#x27;</span>, radix: <span class="number">16</span>) == <span class="number">66</span>);</span><br></pre></td></tr></table></figure>

<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>将数字转为字符串</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Convert an int to a string.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">42.</span>toString() == <span class="string">&#x27;42&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert a double to a string.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">123.456</span>.toString() == <span class="string">&#x27;123.456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specify the number of digits after the decimal.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">123.456</span>.toStringAsFixed(<span class="number">2</span>) == <span class="string">&#x27;123.46&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specify the number of significant figures.</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">123.456</span>.toStringAsPrecision(<span class="number">2</span>) == <span class="string">&#x27;1.2e+2&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">double</span>.parse(<span class="string">&#x27;1.2e+2&#x27;</span>) == <span class="number">120.0</span>);</span><br></pre></td></tr></table></figure>
<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="search-inside-a-string"><a href="#search-inside-a-string" class="headerlink" title="search inside a string"></a>search inside a string</h2><p>字符串的查找搜索</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Never odd or even&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(str.contains(<span class="string">&#x27;odd&#x27;</span>));</span><br><span class="line"><span class="keyword">assert</span>(str.startsWith(<span class="string">&#x27;Never&#x27;</span>));</span><br><span class="line"><span class="keyword">assert</span>(str.endsWith(<span class="string">&#x27;even&#x27;</span>));</span><br><span class="line"><span class="keyword">assert</span>(str.indexOf(<span class="string">&#x27;odd&#x27;</span>) == <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Extracting-data-from-a-string"><a href="#Extracting-data-from-a-string" class="headerlink" title="Extracting data from a string"></a>Extracting data from a string</h2><p>从字符串提取数据</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Never odd or even&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(str.substring(<span class="number">6</span>, <span class="number">9</span>) == <span class="string">&#x27;odd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parts = str.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(parts.length == <span class="number">4</span>);</span><br><span class="line"><span class="keyword">assert</span>(parts[<span class="number">0</span>] == <span class="string">&#x27;Never&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(str[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> char <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span>.split(<span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">  <span class="built_in">print</span>(char);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> codeUnitList = str.codeUnits.toList();</span><br><span class="line"><span class="keyword">assert</span>(codeUnitList[<span class="number">0</span>] == <span class="number">78</span>);</span><br></pre></td></tr></table></figure>

<h2 id="converting-to-uppercase-or-lowercase"><a href="#converting-to-uppercase-or-lowercase" class="headerlink" title="converting to uppercase or lowercase"></a>converting to uppercase or lowercase</h2><p>切换大小写</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Never odd or even&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(str.toUpperCase() == <span class="string">&#x27;NEVER ODD OR EVEN&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(str.toLowerCase() == <span class="string">&#x27;never odd or even&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="trimming-amp-amp-empty"><a href="#trimming-amp-amp-empty" class="headerlink" title="trimming &amp;&amp; empty"></a>trimming &amp;&amp; empty</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;   hello &#x27;</span>.trim() == <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;&#x27;</span>.isEmpty);</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27; &#x27;</span>.isNotEmpty);</span><br></pre></td></tr></table></figure>

<h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> greetingTemplate = <span class="string">&#x27;Hello, Name!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greeting = greetingTemplate.replaceAll(<span class="built_in">RegExp</span>(<span class="string">&#x27;Name&#x27;</span>), <span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(greeting); <span class="comment">// Hello, Bob!</span></span><br><span class="line"><span class="keyword">assert</span>(greeting != greetingTemplate);</span><br></pre></td></tr></table></figure>

<h2 id="building-a-string"><a href="#building-a-string" class="headerlink" title="building a string"></a>building a string</h2><p>在调用<code>toString</code>之前不会生成新的字符串对象。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sb = <span class="built_in">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">sb</span><br><span class="line">  ..write(<span class="string">&#x27;use a stringBuffer for &#x27;</span>)</span><br><span class="line">  ..writeAll([<span class="string">&#x27;efficient&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;creation&#x27;</span>], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  ..write(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullString = sb.toString();</span><br><span class="line"><span class="keyword">assert</span>(fullString ==  <span class="string">&#x27;Use a StringBuffer for efficient string creation.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> numbers = <span class="built_in">RegExp</span>(<span class="string">r&#x27;\d+&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allCharacters = <span class="string">&#x27;llamas live fifteen to twenty years&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> someDigits = <span class="string">&#x27;llamas live 15 to 20 years&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(!allCharacters.contains(numbers));</span><br><span class="line"><span class="keyword">assert</span>(someDigits.contains(numbers));</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> exedOut = someDigits.replaceAll(numbers, <span class="string">&#x27;XX&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(exedOut == <span class="string">&#x27;llamas live XX to XX years&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(numbers.hasMatch(someDigits));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> match <span class="keyword">in</span> numbers.allMatches(someDigits)) &#123;</span><br><span class="line">  <span class="built_in">print</span>(match.group(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><p>List、Set、Map</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>普通数组</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础操作</span></span><br><span class="line">listBase() &#123;</span><br><span class="line">  <span class="comment">// Use a List constructor.</span></span><br><span class="line">  <span class="keyword">var</span> vegetables = <span class="built_in">List</span>();</span><br><span class="line">  <span class="keyword">assert</span>(vegetables.length == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// simply use a list literal.</span></span><br><span class="line">  <span class="keyword">var</span> fruits = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line">  <span class="comment">// add to a list.</span></span><br><span class="line">  fruits.add(<span class="string">&#x27;kiwis&#x27;</span>);</span><br><span class="line">  <span class="comment">// add multiple items to a list.</span></span><br><span class="line">  fruits.addAll([<span class="string">&#x27;grapes&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the list length.</span></span><br><span class="line">  <span class="keyword">assert</span>(fruits.length == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove a single item.</span></span><br><span class="line">  <span class="keyword">var</span> appleIndex = fruits.indexOf(<span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">  fruits.removeAt(appleIndex);</span><br><span class="line">  <span class="keyword">assert</span>(fruits.length == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove all elements from a list</span></span><br><span class="line">  fruits.clear();</span><br><span class="line">  <span class="keyword">assert</span>(fruits.length == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(fruits[<span class="number">0</span>] == <span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(fruits.indexOf(<span class="string">&#x27;apples&#x27;</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort 方法</span></span><br><span class="line">listSort() &#123;</span><br><span class="line">  <span class="keyword">var</span> fruits = [<span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line">  <span class="comment">// Sort a list.</span></span><br><span class="line">  fruits.sort((a, b) =&gt; a.compareTo(b));</span><br><span class="line">  <span class="keyword">assert</span>(fruits[<span class="number">0</span>] == <span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list type </span></span><br><span class="line">listType() &#123;</span><br><span class="line">  <span class="keyword">var</span> fruits = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  fruits.add(<span class="string">&#x27;apples&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> fruit = fruits[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">assert</span>(fruit <span class="keyword">is</span> <span class="built_in">String</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>去重类数组</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set base</span></span><br><span class="line">setBase() &#123;</span><br><span class="line">  <span class="keyword">var</span> ingredients = <span class="built_in">Set</span>();</span><br><span class="line">  ingredients.addAll([<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]);</span><br><span class="line">  <span class="keyword">assert</span>(ingredients.length == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  ingredients.add(<span class="string">&#x27;gold&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(ingredients.length == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  ingredients.remove(<span class="string">&#x27;gold&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(ingredients.length == <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否包含</span></span><br><span class="line">setContains() &#123;</span><br><span class="line">  <span class="keyword">var</span> ingredients= <span class="built_in">Set</span>();</span><br><span class="line">  ingredients.addAll([<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check whether an item is in the set.</span></span><br><span class="line">  <span class="keyword">assert</span>(ingredients.contains(<span class="string">&#x27;titanium&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check whether all the items are in the set.</span></span><br><span class="line">  <span class="keyword">assert</span>(ingredients.containsAll([<span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line">setIntersection() &#123;</span><br><span class="line">  <span class="keyword">var</span> ingredients= <span class="built_in">Set</span>();</span><br><span class="line">  ingredients.addAll([<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;titanium&#x27;</span>, <span class="string">&#x27;xenon&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create the intersection of thw sets.</span></span><br><span class="line">  <span class="keyword">var</span> nobleGases = <span class="built_in">Set</span>.from([<span class="string">&#x27;xenon&#x27;</span>, <span class="string">&#x27;argon&#x27;</span>]);</span><br><span class="line">  <span class="keyword">var</span> intersection = ingredients.intersection(nobleGases);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(intersection.length == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">assert</span>(intersection.contains(<span class="string">&#x27;xenon&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://api.dartlang.org/stable/dart-core/Set-class.html">关于Set的更多方法</a></p>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>js对象</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础创建</span></span><br><span class="line">mapBase() &#123;</span><br><span class="line">  <span class="keyword">var</span> hawaiianBeaches = &#123;</span><br><span class="line">    <span class="string">&#x27;Oahu&#x27;</span>: [<span class="string">&#x27;Waikiki&#x27;</span>, <span class="string">&#x27;Kailua&#x27;</span>, <span class="string">&#x27;Waimanalo&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Big Island&#x27;</span>: [<span class="string">&#x27;Wailea bay&#x27;</span>, <span class="string">&#x27;Pololu Beach&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Kauai&#x27;</span>: [<span class="string">&#x27;Hanalei&#x27;</span>, <span class="string">&#x27;Poipu&#x27;</span>],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> searchTerms = <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nobleGases = <span class="built_in">Map</span>&lt;<span class="built_in">int</span>, <span class="built_in">String</span>&gt;(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line">mapRemove() &#123;</span><br><span class="line">  <span class="keyword">var</span> nobleGases = &#123;</span><br><span class="line">    <span class="number">54</span>: <span class="string">&#x27;xenon&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">assert</span>(nobleGases[<span class="number">54</span>] == <span class="string">&#x27;xenon&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(nobleGases.containsKey(<span class="number">54</span>));</span><br><span class="line"></span><br><span class="line">  nobleGases.remove(<span class="number">54</span>)  ;</span><br><span class="line">  <span class="keyword">assert</span>(!nobleGases.containsKey(<span class="number">54</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keys &amp;&amp; values</span></span><br><span class="line">mapKeyValue() &#123;</span><br><span class="line">  <span class="keyword">var</span> hawaiianBeaches = &#123;</span><br><span class="line">    <span class="string">&#x27;Oahu&#x27;</span>: [<span class="string">&#x27;Waikiki&#x27;</span>, <span class="string">&#x27;Kailua&#x27;</span>, <span class="string">&#x27;Waimanalo&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Big Island&#x27;</span>: [<span class="string">&#x27;Wailea bay&#x27;</span>, <span class="string">&#x27;Pololu Beach&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Kauai&#x27;</span>: [<span class="string">&#x27;Hanalei&#x27;</span>, <span class="string">&#x27;Poipu&#x27;</span>],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// keys</span></span><br><span class="line">  <span class="keyword">var</span> keys = hawaiianBeaches.keys;</span><br><span class="line">  <span class="keyword">assert</span>(keys.length == <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">assert</span>(<span class="built_in">Set</span>.from(keys).contains(<span class="string">&#x27;Oahu&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// values</span></span><br><span class="line">  <span class="keyword">var</span> values = hawaiianBeaches.values;</span><br><span class="line">  <span class="keyword">assert</span>(values.length == <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">assert</span>(values.any((v)=&gt; v.contains(<span class="string">&#x27;Waikiki&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check a keys</span></span><br><span class="line">  <span class="keyword">assert</span>(hawaiianBeaches.containsKey(<span class="string">&#x27;Oahu&#x27;</span>));</span><br><span class="line">  <span class="keyword">assert</span>(!hawaiianBeaches.containsKey(<span class="string">&#x27;Florida&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// putIfAbsent 当且仅当没有该Key赋值，才会执行该函数</span></span><br><span class="line">  <span class="keyword">var</span> teamAssignments = &#123;&#125;;</span><br><span class="line">  teamAssignments.putIfAbsent(<span class="string">&#x27;Catcher&#x27;</span>, ()=&gt; <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(teamAssignments[<span class="string">&#x27;Catcher&#x27;</span>] != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://api.dartlang.org/stable/dart-core/Map-class.html">更多关于Maps的API</a></p>
<h2 id="通用-Map-Set-List-的方法"><a href="#通用-Map-Set-List-的方法" class="headerlink" title="通用(Map,Set,List)的方法"></a>通用(Map,Set,List)的方法</h2><p>Iterable(迭代器)方法指Set和List，因为他们是继承Iterable class<br>Collections指 Set、List和Map.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">commonSetList() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Iterables 指的是List和Set，因为都是继承该类实现的</span></span><br><span class="line">  <span class="comment">// Collections 指的是List,Set,Map</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> coffees = [];</span><br><span class="line">  <span class="keyword">var</span> teas = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;chamomile&#x27;</span>, <span class="string">&#x27;earl grey&#x27;</span>];</span><br><span class="line">  <span class="keyword">var</span> teasSet = &#123;<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">var</span> teasMap = &#123;</span><br><span class="line">    <span class="string">&#x27;tea1&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tea2&#x27;</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iterables: isEmpty isNotEmpty</span></span><br><span class="line">  <span class="keyword">assert</span>(coffees.isEmpty);</span><br><span class="line">  <span class="keyword">assert</span>(teas.isNotEmpty);</span><br><span class="line">  <span class="keyword">assert</span>(teasSet.isNotEmpty);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Collections: forEach</span></span><br><span class="line">  teas.forEach((tea)=&gt; &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I drink <span class="subst">$tea</span>&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  teasMap.forEach((teaKey, teaValue)=&gt; &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$teaKey</span>, <span class="subst">$teaValue</span>&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iterbables: map. map使用的是惰性模式，即在上一个返回之前，不会执行下一个函数</span></span><br><span class="line">  <span class="keyword">var</span> loudTeas = teas.map((tea)=&gt; tea.toUpperCase());</span><br><span class="line">  loudTeas.forEach(<span class="built_in">print</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果想要立即执行，可以使用 toList 或 toSet</span></span><br><span class="line">  <span class="keyword">var</span> loudTeas2 = teas.map((tea)=&gt; tea.toUpperCase()).toList();</span><br><span class="line">  <span class="built_in">print</span>(loudTeas2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// where any every 和js一样的功能，分别是查找所有符合的，有任意符合返回true，所有符合返回true</span></span><br><span class="line">  <span class="built_in">bool</span> isDecaffeinated(<span class="built_in">String</span> teaName)=&gt; teaName == <span class="string">&#x27;chamomile&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> decaffeinatedTeas = teas.where(isDecaffeinated);</span><br><span class="line">  <span class="built_in">print</span>(decaffeinatedTeas);</span><br><span class="line">  <span class="keyword">assert</span>(teas.any(isDecaffeinated));</span><br><span class="line">  <span class="keyword">assert</span>(!teas.every(isDecaffeinated));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h1><p>URI主要提供一些解码和编码url的功能</p>
<h2 id="解码与编码"><a href="#解码与编码" class="headerlink" title="解码与编码"></a>解码与编码</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">encodeAndDecode() &#123;</span><br><span class="line">  <span class="keyword">var</span> uri = <span class="string">&#x27;http://example.org/api?foo=some message&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> encoded = <span class="built_in">Uri</span>.encodeFull(uri);</span><br><span class="line">  <span class="keyword">assert</span>(encoded == <span class="string">&#x27;http://example.org/api?foo=some%20message&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> decode = <span class="built_in">Uri</span>.decodeFull(encoded);</span><br><span class="line">  <span class="keyword">assert</span>(uri == decode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> encodeComponent = <span class="built_in">Uri</span>.encodeComponent(uri);</span><br><span class="line">  <span class="keyword">assert</span>(encodeComponent == <span class="string">&#x27;http%3A%2F%2Fexample.org%2Fapi%3Ffoo%3Dsome%20message&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> decoded = <span class="built_in">Uri</span>.decodeComponent(encodeComponent);</span><br><span class="line">  <span class="keyword">assert</span>(uri == decoded);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析与构建"><a href="#解析与构建" class="headerlink" title="解析与构建"></a>解析与构建</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">parseAndBuild() &#123;</span><br><span class="line">  <span class="keyword">var</span> uri = <span class="built_in">Uri</span>.parse(<span class="string">&#x27;http://example.org:8080/foo/bar#frag&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.scheme == <span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.host == <span class="string">&#x27;example.org&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.path == <span class="string">&#x27;/foo/bar&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.fragment == <span class="string">&#x27;frage&#x27;</span>);</span><br><span class="line">  <span class="keyword">assert</span>(uri.origin == <span class="string">&#x27;http://example.org:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> buildUri = <span class="built_in">Uri</span>(</span><br><span class="line">    scheme: <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">    host: <span class="string">&#x27;example.org&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/foo/bar&#x27;</span>,</span><br><span class="line">    fragment: <span class="string">&#x27;frag&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">assert</span>(buildUri.toString() == <span class="string">&#x27;http://example.org/foo/bar#frag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dates-and-times"><a href="#Dates-and-times" class="headerlink" title="Dates and times"></a>Dates and times</h1><p>时间日期相关</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">date() &#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a now DateTime with the local time zone.</span></span><br><span class="line">  <span class="keyword">var</span> y2k = <span class="built_in">DateTime</span>(<span class="number">2000</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定月份和日期</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// specify the date as a UTC time.</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.utc(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Specify a date and time in ms since the Unix epoch.</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.fromMillisecondsSinceEpoch(<span class="number">946684800000</span>, isUtc: <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Parse an ISO 8601 date</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.parse(<span class="string">&#x27;2000-01-01T00:00:00Z&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回从1970到目标的毫秒数</span></span><br><span class="line">  y2k = <span class="built_in">DateTime</span>.utc(<span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">assert</span>(y2k.millisecondsSinceEpoch == <span class="number">946684800000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> unixEpoch = <span class="built_in">DateTime</span>.utc(<span class="number">1970</span>);</span><br><span class="line">  <span class="keyword">assert</span>(unixEpoch.millisecondsSinceEpoch == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间操作方法</span></span><br><span class="line">dateOptions() &#123;</span><br><span class="line">  <span class="keyword">var</span> y2k = <span class="built_in">DateTime</span>.utc(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">Duration</span>(days: <span class="number">366</span>));</span><br><span class="line">  <span class="keyword">var</span> y2001 = y2k.add(<span class="built_in">Duration</span>(days: <span class="number">366</span>));</span><br><span class="line">  <span class="keyword">assert</span>(y2001.year == <span class="number">2001</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subtract 30 days</span></span><br><span class="line">  <span class="keyword">var</span> december2000 = y2001.subtract(<span class="built_in">Duration</span>(days: <span class="number">30</span>));</span><br><span class="line">  <span class="keyword">assert</span>(december2000.year == <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">assert</span>(december2000.month == <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate the difference between two dates.</span></span><br><span class="line">  <span class="comment">// Returns a Duration object.  </span></span><br><span class="line">  <span class="keyword">var</span> duration = y2001.difference(y2k);</span><br><span class="line">  <span class="keyword">assert</span>(duration.inDays == <span class="number">366</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://api.dartlang.org/stable/dart-core/DateTime-class.html">更多DateTime API</a><br><a href="https://api.dartlang.org/stable/dart-core/Duration-class.html">更多Duration API</a></p>
<p><a href="https://www.dartlang.org/guides/libraries/library-tour#utility-classes">未完待续</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart基础语法（二）</title>
    <url>/dart-learn-2/</url>
    <content><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p><code>Dart</code>是一个面向对象的语言，具有类和基于mixin的继承。每个对象都是一个class的实例，所有的class都是基于Object。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有未初始化的变量都为null</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line">  <span class="built_in">num</span> z = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">num</span> d;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="comment">// Point(num x, num y) &#123;</span></span><br><span class="line">  <span class="comment">//   this.x = x;</span></span><br><span class="line">  <span class="comment">//   this.y = y;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更简便的写法</span></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数的命名</span></span><br><span class="line">  Point.origin() &#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">  point.x = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">assert</span>(point.x == <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">assert</span>(point.d == <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="构造函数与继承"><a href="#构造函数与继承" class="headerlink" title="构造函数与继承"></a>构造函数与继承</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  <span class="keyword">var</span> y;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 简单的构造函数使用，相当于 Point(x, y) &#123; this.x = x; this.y = y; &#125;</span></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在开发环境下可以用 assert对参数进行断言</span></span><br><span class="line">  Point.withAssert(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y): <span class="keyword">assert</span>(x&gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in person.withAssert(): (<span class="subst">$x</span>, <span class="subst">$y</span>)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这一块的初始化列表有点像 java 还是 c++</span></span><br><span class="line">  Point.fromJson2(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">num</span>&gt; json):</span><br><span class="line">    x = json[<span class="string">&#x27;x&#x27;</span>],</span><br><span class="line">    y = json[<span class="string">&#x27;y&#x27;</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;In Person.fromJson2() : (<span class="subst">$x</span>, <span class="subst">$y</span>)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部使用构造函数</span></span><br><span class="line">  Point.alongXAxis(<span class="built_in">num</span> x): <span class="keyword">this</span>(x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getDefaultData() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> firstName;</span><br><span class="line">  Person.fromJson(<span class="built_in">Map</span> data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in Person&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  Employee.fromJson(<span class="built_in">Map</span> data): <span class="keyword">super</span>.fromJson(data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in Employee&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 因为调用构造函数之前会计算超类构造函数的参数，所以参数可以是一个表达式</span></span><br><span class="line">  Employee(): <span class="keyword">super</span>.fromJson(getDefaultData());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> emp = <span class="keyword">new</span> Employee.fromJson(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (emp <span class="keyword">is</span> Person) &#123;</span><br><span class="line">    emp.firstName = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  (emp <span class="keyword">as</span> Person).firstName = <span class="string">&#x27;bob&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title="常量构造函数"></a>常量构造函数</h3><p>如果你的类不需要改变，你可以将他写成编译时常量，但是要确保所有的实例变量都是<code>final</code>。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImmutablePoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> ImmutablePoint origin = <span class="keyword">const</span> ImmutablePoint(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 确保所有的实例变量都是 final</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> x, y;</span><br><span class="line">  <span class="keyword">const</span> ImmutablePoint(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = ImmutablePoint(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> b = ImmutablePoint(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(a == b);</span><br></pre></td></tr></table></figure>

<h3 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title="工厂构造函数"></a>工厂构造函数</h3><p>在实现并不总是创建其类的新实例的构造函数时，请使用factory关键字。例如，工厂构造函数可能从缓存中返回实例，或者它可能返回子类型的实例。</p>
<p>注意 工厂构造函数不能访问<code>this</code>。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂构造函数,不需要经常实例化的情况，会从缓存获取</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">bool</span> mute = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _cache is library-private, thanks to the _ in front of its name.</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Logger&gt; _cache = &lt;<span class="built_in">String</span>, Logger&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Logger(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_cache.containsKey(name)) <span class="keyword">return</span> _cache[name];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> logger = Logger._internal(name);</span><br><span class="line">      _cache[name] = logger;</span><br><span class="line">      <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Logger._internal(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> log(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mute) <span class="built_in">print</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Methods-方法"><a href="#Methods-方法" class="headerlink" title="Methods(方法)"></a>Methods(方法)</h2><h3 id="Instance-methods-实例方法"><a href="#Instance-methods-实例方法" class="headerlink" title="Instance methods(实例方法)"></a>Instance methods(实例方法)</h3><p>普通的实例方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通的方法</span></span><br><span class="line">  <span class="built_in">num</span> distanceTo(Point other) &#123;</span><br><span class="line">    <span class="keyword">var</span> dx = x - other.x;</span><br><span class="line">    <span class="keyword">var</span> dy = y - other.y;</span><br><span class="line">    <span class="keyword">return</span> sqrt(dx * dx + dy * dy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Getters-amp-amp-Setters"><a href="#Getters-amp-amp-Setters" class="headerlink" title="Getters &amp;&amp; Setters"></a>Getters &amp;&amp; Setters</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> left, top, width, height;</span><br><span class="line"></span><br><span class="line">  Rectangle(<span class="keyword">this</span>.left, <span class="keyword">this</span>.top, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> right =&gt; left + width;</span><br><span class="line">  <span class="keyword">set</span> right(<span class="built_in">num</span> value)=&gt; left = value - width;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> bottom =&gt; top + height;</span><br><span class="line">  <span class="keyword">set</span> bottom(<span class="built_in">num</span> value)=&gt; top = value - height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Abstract-methods-Abstract-Class"><a href="#Abstract-methods-Abstract-Class" class="headerlink" title="Abstract methods/ Abstract Class"></a>Abstract methods/ Abstract Class</h3><p>抽象类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> doSomething(); <span class="comment">// 定义了一个抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EffectiveDoer</span> <span class="keyword">extends</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> doSomething() &#123; <span class="built_in">print</span>(<span class="string">&#x27;xxx&#x27;</span>); &#125; <span class="comment">// 实现该方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Implicit-interfaces"><a href="#Implicit-interfaces" class="headerlink" title="Implicit interfaces"></a>Implicit interfaces</h3><p>接口和java很像</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// implicit interfaces</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A person. The implicit interface contains greet().</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// In the interface, but visible only in this library</span></span><br><span class="line">  <span class="keyword">final</span> _name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Not in the interface, since this is a constructor.</span></span><br><span class="line">  Person(<span class="keyword">this</span>._name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// In the interface</span></span><br><span class="line">  <span class="built_in">String</span> greet(<span class="built_in">String</span> who) =&gt; <span class="string">&#x27;Hello, <span class="subst">$who</span>. I am <span class="subst">$_name</span>&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// an implementation of the Person interface.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Impostor</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> _name =&gt; <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> greet(<span class="built_in">String</span> who)=&gt; <span class="string">&#x27;Hi <span class="subst">$who</span>. Do you know who I am?&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> greetBob(Person person)=&gt; person.greet(<span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(greetBob(Person(<span class="string">&#x27;Jsonz&#x27;</span>)));</span><br><span class="line">  <span class="built_in">print</span>(greetBob(Impostor()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>, <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="extending-a-class扩展继承"><a href="#extending-a-class扩展继承" class="headerlink" title="extending a class扩展继承"></a>extending a class扩展继承</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line"> <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;television turnOn&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="keyword">super</span>.turnOn();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;SmartTelevision&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="overriding-members-重写方法"><a href="#overriding-members-重写方法" class="headerlink" title="overriding members 重写方法"></a>overriding members 重写方法</h3><p>子类重写实例方法,但是有加和没加和什么区别呢？这个疑惑在<a href="https://stackoverflow.com/questions/51224205/what-is-the-purpose-of-override-used-in-flutter">stackoverflow有解答</a></p>
<blockquote>
<p><code>@override</code> just points out that the function is also defined in an ancestor class, but is being redefined to do something else in the current class. It’s also used to annotate the implementation of an abstract method. It is optional to use but recommended as it improves readability.</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Overridable-operators"><a href="#Overridable-operators" class="headerlink" title="Overridable operators"></a>Overridable operators</h3><p>重写操作符？ 看看就好</p>
<h3 id="Enumerated-types"><a href="#Enumerated-types" class="headerlink" title="Enumerated types"></a>Enumerated types</h3><p>枚举类型</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123; red, green, blue &#125;</span><br><span class="line">enums() &#123;</span><br><span class="line">  <span class="comment">// 枚举类型: 表示固定数量的常数值</span></span><br><span class="line">  <span class="keyword">assert</span>(Color.red.index == <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">assert</span>(Color.green.index == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">assert</span>(Color.blue.index == <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">List</span>&lt;Color&gt; colors = Color.values;</span><br><span class="line">  <span class="keyword">assert</span>(colors[<span class="number">2</span>] == Color.blue);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> aColor = Color.blue;</span><br><span class="line">  <span class="keyword">switch</span> (aColor) &#123;</span><br><span class="line">    <span class="keyword">case</span> Color.red:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">      <span class="built_in">print</span>(aColor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p><code>mixins</code>使用<code>with</code>关键字，<code>Class TAS = A with S</code>,则 <code>TAS</code>包含了所有<code>A</code>和<code>S</code>的方法属性，以<code>S</code>为最终覆盖，即如果A与S有相同的方法，则S覆盖A。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">  a() &#123; <span class="built_in">print</span>(<span class="string">&#x27;S.a&#x27;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  a() &#123; <span class="built_in">print</span>(<span class="string">&#x27;A.a&#x27;</span>); &#125;</span><br><span class="line">  b() &#123; <span class="built_in">print</span>(<span class="string">&#x27;A.b&#x27;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  a() &#123; <span class="built_in">print</span>(<span class="string">&#x27;B.a&#x27;</span>); &#125;</span><br><span class="line">  b() &#123; <span class="built_in">print</span>(<span class="string">&#x27;B.b&#x27;</span>); &#125;</span><br><span class="line">  c() &#123; <span class="built_in">print</span>(<span class="string">&#x27;B.c&#x27;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TAS</span> = <span class="title">A</span> <span class="title">with</span> <span class="title">S</span>;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">TBAS</span> = <span class="title">B</span> <span class="title">with</span> <span class="title">A</span>, <span class="title">S</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">main</span>() </span>&#123;</span><br><span class="line">  TAS t = <span class="keyword">new</span> TAS();</span><br><span class="line">  t.a(); <span class="comment">// S.a</span></span><br><span class="line">  t.b(); <span class="comment">// A.b</span></span><br><span class="line">  TBAS b = <span class="keyword">new</span> TBAS();</span><br><span class="line">  b.a(); <span class="comment">// S.a</span></span><br><span class="line">  b.b(); <span class="comment">// A.b</span></span><br><span class="line">  b.c(); <span class="comment">// B.c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Class-variables-and-methods"><a href="#Class-variables-and-methods" class="headerlink" title="Class variables and methods"></a>Class variables and methods</h2><p>静态方法与静态属性<code>static</code>关键字实现</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> name = <span class="string">&#x27;queue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">num</span> log(<span class="built_in">String</span> str) &#123;</span><br><span class="line">    <span class="built_in">print</span>(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue.log(Queue.name);</span><br></pre></td></tr></table></figure>

<h1 id="Generics-泛型"><a href="#Generics-泛型" class="headerlink" title="Generics 泛型"></a>Generics 泛型</h1><p>泛型这块后面用到的话还要补，确实不是很熟</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line"><span class="comment">// 等于 var names = &lt;String&gt;[];</span></span><br><span class="line">name.addAll([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">name.add(<span class="number">2</span>); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<h2 id="类型限制"><a href="#类型限制" class="headerlink" title="类型限制"></a>类型限制</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]; <span class="comment">// list</span></span><br><span class="line"><span class="keyword">var</span> uniqueNames = &lt;<span class="built_in">String</span>&gt;&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;; <span class="comment">// set</span></span><br><span class="line"><span class="keyword">var</span> pages = &lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; &#123;</span><br><span class="line">  <span class="string">&#x27;index.html&#x27;</span>: <span class="string">&#x27;homePage&#x27;</span>,</span><br><span class="line">&#125; <span class="comment">// map</span></span><br><span class="line"><span class="keyword">var</span> nameSet = <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt;.from(names);</span><br><span class="line"><span class="keyword">var</span> newMap = <span class="built_in">Map</span>&lt;<span class="built_in">int</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names <span class="keyword">is</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h1><p>引入用<code>import</code>关键字</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:html&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:test/test.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为某个库指定别名，jser比较喜欢这种，不会全局变量到处飘！</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/lib.dart&#x27;</span> <span class="keyword">as</span> lib;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/lib.dart&#x27;</span> <span class="keyword">show</span> foo; <span class="comment">// 只引入foo</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/lib.dart&#x27;</span> <span class="keyword">hide</span> foo; <span class="comment">// 除了foo其他都引入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒加载</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:greetings/hello.dart&#x27;</span> <span class="keyword">deferred</span> <span class="keyword">as</span> hello;</span><br><span class="line"></span><br><span class="line">Future greet() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> hello.loadLibrary(); <span class="comment">// 先加载 loadLibrary会返回一个Future</span></span><br><span class="line">  hello.printGreeting(); <span class="comment">// 再使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建一个库"><a href="#创建一个库" class="headerlink" title="创建一个库"></a>创建一个库</h2><p><a href="https://www.dartlang.org/guides/libraries/create-library-packages">create library packages</a></p>
<h1 id="asynchrony-support-异步支持"><a href="#asynchrony-support-异步支持" class="headerlink" title="asynchrony support 异步支持"></a>asynchrony support 异步支持</h1><p>Dart一般用<code>Future</code>和<code>Stream</code>来处理异步。</p>
<h2 id="handling-Futures"><a href="#handling-Futures" class="headerlink" title="handling Futures"></a>handling Futures</h2><p><a href="https://www.dartlang.org/guides/libraries/library-tour#future">Future</a></p>
<p>使用<code>await/async</code>,所以<code>Futures</code>类似<code>js</code>的<code>Promise</code>?</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future checkVersion() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> version = <span class="keyword">await</span> lookUpVersion();</span><br><span class="line">  <span class="comment">// Do something with version</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title="声明异步函数"></a>声明异步函数</h3><p>如果函数没有返回值，则返回类型为 <code>Future&lt;void&gt;</code>.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> lookUpVersion() =&gt; <span class="string">&#x27;1.0.0&#x27;</span>;</span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; lookUpVersion() <span class="keyword">async</span> =&gt; <span class="string">&#x27;1.0.0&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Handling-Streams"><a href="#Handling-Streams" class="headerlink" title="Handling Streams"></a>Handling Streams</h2><p>使用 <code>async</code> 和 <code>await for</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 等待流的每一次值</span></span><br><span class="line"><span class="comment">// 2. 执行for循环的主体</span></span><br><span class="line"><span class="comment">// 3. 重复1和2直到流结束</span></span><br><span class="line"><span class="comment">// 4. 如果要中断流监听，可以用 break 或 return</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">for</span> (varOrType identifier <span class="keyword">in</span> expression) &#123;</span><br><span class="line">  <span class="comment">// Executes each time the stream emits a value.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h1><p>emmm <code>js</code>最讨厌的语法来到<code>Dart</code>还是无法避免，之前处理异步都是<code>promise</code>要不就是<code>await</code>…</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步Generators</span></span><br><span class="line"><span class="built_in">Iterable</span>&lt;<span class="built_in">int</span>&gt; naturalsTo(<span class="built_in">int</span> n) <span class="keyword">sync</span>* &#123;</span><br><span class="line">  <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &lt; n) <span class="keyword">yield</span> k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步Generators</span></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; asynchronousNaturalsTo(<span class="built_in">int</span> n) <span class="keyword">async</span>* &#123;</span><br><span class="line">  <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &lt; n) <span class="keyword">yield</span> k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你的Generator是递归的，可以用 yield*来优化</span></span><br><span class="line"><span class="comment">// 怎么优化呢？尾调用优化？</span></span><br><span class="line"><span class="built_in">Iterable</span>&lt;<span class="built_in">int</span>&gt; naturalsDownFrom(<span class="built_in">int</span> n) <span class="keyword">sync</span>* &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> n;</span><br><span class="line">    <span class="keyword">yield</span>* naturalsDownFrom(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Callable-classes-可调用类"><a href="#Callable-classes-可调用类" class="headerlink" title="Callable classes 可调用类"></a>Callable classes 可调用类</h1><p>要实现类和方法一样的调用，则在类里面实现 <code>call</code>方法.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WannabeFunction</span> </span>&#123;</span><br><span class="line">  call(<span class="built_in">String</span> a, <span class="built_in">String</span> b, <span class="built_in">String</span> c) =&gt; <span class="string">&#x27;<span class="subst">$a</span> <span class="subst">$b</span> <span class="subst">$c</span>!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> wf = <span class="keyword">new</span> WannabeFunction();</span><br><span class="line">  <span class="keyword">var</span> out = wf(<span class="string">&quot;Hi&quot;</span>,<span class="string">&quot;there,&quot;</span>,<span class="string">&quot;gang&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$out</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Typedefs"><a href="#Typedefs" class="headerlink" title="Typedefs"></a>Typedefs</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Compare&lt;T&gt; = <span class="built_in">int</span> <span class="built_in">Function</span>(T a, T b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> sort(<span class="built_in">int</span> a, <span class="built_in">int</span> b) =&gt; a - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">assert</span>(sort <span class="keyword">is</span> Compare&lt;<span class="built_in">int</span>&gt;); <span class="comment">// True!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart基础语法（一）</title>
    <url>/dart-learn/</url>
    <content><![CDATA[<p>一个最基础的Dart程序</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line">printInterger(<span class="built_in">int</span> aNumber, <span class="built_in">int</span> bNumber) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;the number is <span class="subst">$aNumber</span> and <span class="subst">$&#123;bNumber&#125;</span>&#x27;</span>); <span class="comment">// $aNumber or $&#123;bNumber&#125; 都可以在字符串中使用变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序初始运行的函数</span></span><br><span class="line">main() </span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">42</span>; <span class="comment">// 声明与初始化变量</span></span><br><span class="line">  printInterger(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重要概念:</p>
<ul>
<li>所有变量都可以看成是一个<code>object</code>，所有的<code>object</code>都是通过<code>Object</code>class实例化出来的。这点和js一样</li>
<li>Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用<code>dynamic</code>类型。如<code>- Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用`dynamic`类型。如</code>- Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用<code>dynamic</code>类型。如``- Dart是强类型语言，累心注释是可选的，因为Dart可以推断类型，如果想要定义一个没有类型的可以使用<code>dynamic</code>类型。如<code>var list= &lt;dynamic&gt;[1]</code></li>
<li>Dart的私有方法，都是以<code>_</code>下划线开头的，不像java直接写关键字<code>private</code>.</li>
</ul>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明与初始化一个String类型的变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果想要任意类型，可以用 dynamic</span></span><br><span class="line"><span class="built_in">dynamic</span> name2 = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line"><span class="comment">// 显式声明字符串类型</span></span><br><span class="line"><span class="built_in">String</span> name3 = <span class="string">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><p>和<code>js</code>不一样的是，如果在<code>Dart</code>里面声明一个变量，但是不赋值的话，他的默认值是<code>null</code>而不是<code>undefined</code>.</p>
<p>这也从另一个角度说明在<code>Dart</code>中，万物皆对象.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> lineCount;</span><br><span class="line"><span class="keyword">var</span> line;</span><br><span class="line"><span class="keyword">assert</span>(lineCount == <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">assert</span>(line == <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="final-amp-amp-const"><a href="#final-amp-amp-const" class="headerlink" title="final &amp;&amp; const"></a>final &amp;&amp; const</h2><p><code>Dart</code>里面的常量用 <code>final</code>和<code>const</code>声明。</p>
<p><code>final</code>表示单个赋值，一旦赋值，就不能被改变。<br><code>const</code>表示编译时确定的值，并且对象会被冻结而完全不可变。</p>
<p><a href="https://stackoverflow.com/questions/50431055/what-is-the-difference-in-between-const-and-final-keyword-in-dart">stackoverflow</a></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> b = <span class="built_in">DateTime</span>.now();</span><br></pre></td></tr></table></figure>

<h1 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h1><ul>
<li>numbers</li>
<li>strings</li>
<li>booleans</li>
<li>lists(Array)</li>
<li>sets</li>
<li>maps</li>
<li>runes (Unicode characters in a string)</li>
<li>symbols</li>
</ul>
<p>可以通过<code>x.runtimeType</code>来获取对象的类型</p>
<h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><p>Dart的number有两种类型: <code>int</code> 和 <code>double</code></p>
<p>简单的区分，小的整数用<code>int</code>,浮点数用<code>double</code>。一般直接用<code>var</code>声明的话，会根据你声明时的类型做推断，所以如果声明和后面使用不一样的话，建议显式声明.例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; <span class="comment">// 这里Dart会推断是int类型</span></span><br><span class="line">x = <span class="number">2.0</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以换成这两种</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1.0</span>; </span><br><span class="line"><span class="built_in">double</span> x = <span class="number">1</span>;  <span class="comment">// 相当于 double x = 1.0;</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><p>在Dart里面，如果字符串和数字相加，会报错，这一点和js隐式转换不同。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// String 2 int</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">&#x27;1.1&#x27;</span>); <span class="comment">// string 2 double</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString(); <span class="comment">// int 2 String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.141592654</span>.toStringAsFixed(<span class="number">2</span>); <span class="comment">// double 2 string 3.14</span></span><br></pre></td></tr></table></figure>

<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>可以用<code>&#39;</code>或<code>&quot;</code>来表示字符串。</p>
<p>字符串内部的变量可以用<code>$value</code>或者<code>$&#123;value&#125;</code>，一般来说如果是变量，直接用<code>$value</code>表示，表达式用<code>$&#123;value&#125;</code>，例:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;String1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;String2&quot;</span>;</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;String1 STRING2&#x27;</span> == <span class="string">&#x27;<span class="subst">$a</span> <span class="subst">$&#123;b.toUpperCase()&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果要创建多行的字符串，则可以用<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>,</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hi</span></span><br><span class="line"><span class="string">I&#x27;m Jsonz</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h2><p><code>Dart</code>里面<code>if</code>与<code>assert</code>都只会对 <code>bool</code>做判断，这点同样与js的隐式转换不同。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fullName = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName); <span class="comment">// error</span></span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure>

<h2 id="Lists-既js里面的数组"><a href="#Lists-既js里面的数组" class="headerlink" title="Lists (既js里面的数组)"></a>Lists (既js里面的数组)</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>]; <span class="comment">// 普通list</span></span><br><span class="line"><span class="keyword">var</span> typeList = &lt;<span class="built_in">int</span>&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// 带类型的list</span></span><br><span class="line"><span class="keyword">assert</span>(list.length == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">typeList[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">assert</span>(typeList[<span class="number">0</span>] == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建const类型的list</span></span><br><span class="line"><span class="keyword">var</span> constantList = <span class="keyword">const</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">constantList[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样创建</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">const</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><p><code>Sets</code>会根据初始化推断类型，比如下面的例子<code>halogens</code>会判断为<code>String</code>类型，这时候添加其他类型的值就会报错。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> halogens = &#123;<span class="string">&#x27;fluorine&#x27;</span>, <span class="string">&#x27;chlorine&#x27;</span>, <span class="string">&#x27;bromine&#x27;</span>, <span class="string">&#x27;iodine&#x27;</span>, <span class="string">&#x27;astatine&#x27;</span>&#125;;</span><br><span class="line">halogens.add(<span class="number">1</span>); <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要创建一个空的set，比如要有类型前缀，不然会被判断为创建的是Maps而不是Sets</span></span><br><span class="line"><span class="keyword">var</span> name = &#123;&#125;; <span class="comment">// map， not a set</span></span><br><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;&#123;&#125;; <span class="comment">// String set</span></span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; name2 = &#123;&#125;; <span class="comment">// Srting set</span></span><br></pre></td></tr></table></figure>

<p><code>Set</code>通过<code>add</code>或者<code>addAll</code>添加<code>item</code>。<br>可以通过<code>const</code>关键字创建编译常量</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// add 与 addAll</span></span><br><span class="line"><span class="keyword">var</span> el = &lt;<span class="built_in">String</span>&gt;&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> el2 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line">el.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">el.addAll(el2);</span><br><span class="line"><span class="keyword">assert</span>(el.length == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const</span></span><br><span class="line"><span class="keyword">final</span> constantSet = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Maps-相当于js的对象"><a href="#Maps-相当于js的对象" class="headerlink" title="Maps(相当于js的对象)"></a>Maps(相当于js的对象)</h2><p><code>Dart</code>的<code>Map</code>不限制<code>key</code>的类型，意味着如果是<code>number</code>类型，不需要和<code>js</code>一样，用<code>[]</code>包着。</p>
<p><code>Map</code>也会推断<code>key</code>和<code>value</code>的类型,比如下面的 <code>map1</code> 就是<code>key</code>为<code>int</code>类型，<code>value</code>为<code>string</code>类型的<code>map</code>.</p>
<p>如果获取某个<code>map</code>没有的<code>value</code>,则<code>value</code>默认是<code>null</code>。这点和<code>js</code>的<code>undefined</code>不同，可以对比变量初始化的情况类推。</p>
<p><code>map</code>也有<code>length</code>属性，类比<code>js</code>的<code>Object.keys(obj).length</code>.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map的key可以是任意类型</span></span><br><span class="line"><span class="keyword">var</span> gif = &#123;</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;int&gt;: &lt;String&gt; 类型的map</span></span><br><span class="line"><span class="keyword">var</span> map1 = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译时常量map</span></span><br><span class="line"><span class="keyword">final</span> constantMap = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">constantMap[<span class="number">2</span>] = <span class="string">&#x27;3&#x27;</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h2 id="Runes"><a href="#Runes" class="headerlink" title="Runes"></a>Runes</h2><p>emmm 这个我的理解是UTF-32编码的字符串，简单理解就是可以支持更多类型的字符串，比如emoji，工作用到再去查。<br>比如<code>&#39;\u&#123;1f44f&#125;&#39;;</code>是<code>👏</code>,<code>\u2665</code>是<code>♥</code>。</p>
<h2 id="Symbols-类比js的Symbol"><a href="#Symbols-类比js的Symbol" class="headerlink" title="Symbols (类比js的Symbol)"></a>Symbols (类比js的Symbol)</h2><p>对<code>Symbol</code>的理解可以直接看<a href="https://es6.ruanyifeng.com/#docs/symbol">阮一峰的ES6-Symbol</a>，基本的作用是一样的。</p>
<p><code>Dart</code>的<code>Symbol</code>是<code>compoile-time constants</code>，就是编译时常量。<br>使用也很简单，直接在标识前面加个<code>#</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol = #symbol;</span><br></pre></td></tr></table></figure>

<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>Dart是面向对象的语言，所以函数也是一种<code>Function</code>类型的对象。</p>
<p>参数的默认值都为<code>null</code>。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="built_in">bool</span> isNaN(<span class="built_in">int</span> number) &#123;</span><br><span class="line">  <span class="keyword">return</span> number.isNaN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isNaN2(number) &#123;</span><br><span class="line">  <span class="keyword">return</span> number.isNaN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> isNaN3(<span class="built_in">int</span> number)=&gt; number.isNaN;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数使用</span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;</span><br><span class="line">  <span class="built_in">bool</span> bold,</span><br><span class="line">  <span class="built_in">bool</span> hidden</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(bold);</span><br><span class="line">  <span class="built_in">print</span>(hidden);</span><br><span class="line">&#125;</span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>, hidden: <span class="keyword">false</span>); <span class="comment">// true false</span></span><br><span class="line">enableFlags(hidden: <span class="keyword">false</span>, bold: <span class="keyword">true</span>); <span class="comment">// true false</span></span><br><span class="line">enableFlags(hidden: <span class="keyword">false</span>); <span class="comment">// null false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种对参数的顺序有严格要求, []表示可选参数</span></span><br><span class="line"><span class="keyword">void</span> enableFlags2(<span class="built_in">bool</span> bold, <span class="built_in">bool</span> hidden, [<span class="built_in">String</span> device]) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">enableFlags2(<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">&#x27;device&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">void</span> enableFlags(&#123;</span><br><span class="line">  <span class="built_in">bool</span> bold= <span class="keyword">false</span>,</span><br><span class="line">  <span class="built_in">bool</span> hidden= <span class="keyword">false</span>,</span><br><span class="line">&#125;) &#123;&#125;</span><br><span class="line">enableFlags(hidden: <span class="keyword">true</span>); <span class="comment">// false true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也可以用 list 和 map作为默认参数</span></span><br><span class="line"><span class="keyword">void</span> doStuff(&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">const</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; gifts = <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;paper&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;cotton&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;third&#x27;</span>: <span class="string">&#x27;leather&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;list: <span class="subst">$list</span>&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;gifts: <span class="subst">$gifts</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h2><p>每个app都需要在最顶层提供一个<code>main</code>函数用于入口函数，<code>main</code>函数提供一个void返回值与<code>List&lt;String&gt;</code>参数(参数指的是命令行传入的参数)。</p>
<h2 id="函数为第一公民"><a href="#函数为第一公民" class="headerlink" title="函数为第一公民"></a>函数为第一公民</h2><p>和js一样，Dart也支持将函数作为参数传给另一个函数（高阶函数）。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> printE(<span class="built_in">int</span> e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach(printE);</span><br></pre></td></tr></table></figure>

<h2 id="匿名函数、作用域与闭包"><a href="#匿名函数、作用域与闭包" class="headerlink" title="匿名函数、作用域与闭包"></a>匿名函数、作用域与闭包</h2><p>这几个和js是一样的，没啥好说</p>
<p>对词法作用域和动态作用域有疑问的可以看<a href="https://github.com/mqyqingfeng/Blog/issues/3">这篇</a></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list.forEach((item)=&gt; <span class="built_in">print</span>(item));</span><br><span class="line">list.forEach((item) &#123;<span class="built_in">print</span>(item);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 词法作用域</span></span><br><span class="line">a() &#123;</span><br><span class="line">  <span class="keyword">var</span> a1 = <span class="keyword">true</span>;</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="keyword">var</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">    c() &#123;</span><br><span class="line">      <span class="keyword">var</span> c1 = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">assert</span>(a1);</span><br><span class="line">      <span class="keyword">assert</span>(b1);</span><br><span class="line">      <span class="keyword">assert</span>(c1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// Create a function that adds 2.</span></span><br><span class="line">  <span class="keyword">var</span> add2 = makeAdder(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a function that adds 4.</span></span><br><span class="line">  <span class="keyword">var</span> add4 = makeAdder(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(add2(<span class="number">3</span>) == <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">assert</span>(add4(<span class="number">3</span>) == <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数类型-Testing-functions-for-equality"><a href="#函数类型-Testing-functions-for-equality" class="headerlink" title="函数类型(Testing functions for equality)"></a>函数类型(Testing functions for equality)</h2><p>看着自己理解一下就好</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> foo() &#123;&#125; <span class="comment">// A top-level function</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> bar() &#123;&#125; <span class="comment">// A static method</span></span><br><span class="line">  <span class="keyword">void</span> baz() &#123;&#125; <span class="comment">// An instance method</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing top-level functions.</span></span><br><span class="line">  x = foo;</span><br><span class="line">  <span class="keyword">assert</span>(foo == x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing static methods.</span></span><br><span class="line">  x = A.bar;</span><br><span class="line">  <span class="keyword">assert</span>(A.bar == x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing instance methods.</span></span><br><span class="line">  <span class="keyword">var</span> v = A(); <span class="comment">// Instance #1 of A</span></span><br><span class="line">  <span class="keyword">var</span> w = A(); <span class="comment">// Instance #2 of A</span></span><br><span class="line">  <span class="keyword">var</span> y = w;</span><br><span class="line">  x = w.baz;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// These closures refer to the same instance (#2),</span></span><br><span class="line">  <span class="comment">// so they&#x27;re equal.</span></span><br><span class="line">  <span class="keyword">assert</span>(y.baz == x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// These closures refer to different instances,</span></span><br><span class="line">  <span class="comment">// so they&#x27;re unequal.</span></span><br><span class="line">  <span class="keyword">assert</span>(v.baz != w.baz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>函数都会返回一个值，如果没有指定的话，则会返回null。_<code>Dart</code>里面没有<code>undefined</code>的概念，目前看来所有对于js的<code>undefined</code>都可以替换成<code>null</code>_</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">foo() &#123;&#125;</span><br><span class="line"><span class="keyword">assert</span>(foo() == <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="类型测试运算符"><a href="#类型测试运算符" class="headerlink" title="类型测试运算符"></a>类型测试运算符</h2><p><code>as</code>、<code>is</code>、<code>is!</code>类似 <code>instanceof</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> firstName= <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> Person) &#123; <span class="comment">// true</span></span><br><span class="line">  a.firstName = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b <span class="keyword">is</span>! Person) &#123; <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;b is not person&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 if (a is Person) xxx 的缩写</span></span><br><span class="line"><span class="comment">// 如果 a 是 Person的实例，就会执行 firstName = &#x27;Bob&#x27;</span></span><br><span class="line"><span class="comment">// 如果 a 不是 Person的实例，会抛错!</span></span><br><span class="line">(a <span class="keyword">as</span> Person).firstName = <span class="string">&#x27;Bob&#x27;</span>; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分配运算符"><a href="#分配运算符" class="headerlink" title="分配运算符"></a>分配运算符</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">a = value; <span class="comment">// 直接把value分配给a</span></span><br><span class="line">b ??= value; <span class="comment">// 如果b为null，则分配value给b，否则不改变。这里经常是函数里面的默认值处理，类似js的 var obj = obj || &#123;&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// condition? expr1: expr2</span></span><br><span class="line"><span class="keyword">var</span> vis = isPublic? <span class="string">&#x27;public&#x27;</span>: <span class="string">&#x27;private&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expr1?? pxpr2 如果expr1为Null，就返回expr2，否则是expr1。有点类似加强版的js里面的 a=&gt; a || &#x27;test&#x27;</span></span><br><span class="line"><span class="built_in">String</span> playName(<span class="built_in">String</span> name)=&gt; name?? <span class="string">&#x27;guest&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Cascade-notation"><a href="#Cascade-notation" class="headerlink" title="Cascade notation"></a>Cascade notation</h2><p><code>Cascade(..)</code> 有点像链式写法的语法糖,允许您对同一对象进行一系列操作,不得不说这些语法糖真骚…</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .. 写法</span></span><br><span class="line">querySelect(<span class="string">&#x27;#confirm&#x27;</span>)</span><br><span class="line">  ..text = <span class="string">&#x27;Confirm&#x27;</span></span><br><span class="line">  ..classes.add(<span class="string">&#x27;important&#x27;</span>)</span><br><span class="line">  ..onClick.listen((e)=&gt; <span class="built_in">window</span>.alter(<span class="string">&#x27;Confirmed!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">querySelector</span>(<span class="string">&#x27;#confirm&#x27;</span>);</span><br><span class="line">button.text = <span class="string">&#x27;Confirm&#x27;</span>;</span><br><span class="line">button.classes.add(<span class="string">&#x27;important&#x27;</span>);</span><br><span class="line">button.onClick.listen((e)=&gt; <span class="built_in">window</span>.alter(<span class="string">&#x27;Confirmed!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你还可以随意嵌套</span></span><br><span class="line"><span class="keyword">final</span> addressBook = (AddressBookBuilder()</span><br><span class="line">  ..name = <span class="string">&#x27;jenny&#x27;</span></span><br><span class="line">  ..email = <span class="string">&#x27;jsonz@qq.com&#x27;</span></span><br><span class="line">  ..phone = (</span><br><span class="line">    PhoneNumberBuilder()</span><br><span class="line">      ..number = <span class="string">&#x27;13560042631&#x27;</span></span><br><span class="line">      ..label = <span class="string">&#x27;phone&#x27;</span></span><br><span class="line">      .build()</span><br><span class="line">  )</span><br><span class="line">  .build();</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h2><p><code>()</code> 函数调用<br><code>[]</code> list<br><code>.</code> 属性<br><code>?.</code> 一般用于属性赋值，比如 <code>person?.name = &#39;jsonz&#39;</code>（如果person不为null, 则设置person.name为jsonz，避免左边person为null时报错）。</p>
<h1 id="控制流程语句"><a href="#控制流程语句" class="headerlink" title="控制流程语句"></a>控制流程语句</h1><p>这里只会挑与js不同的来讲</p>
<h2 id="if-else"><a href="#if-else" class="headerlink" title="if..else"></a>if..else</h2><p>不同点是<code>Dart</code>不会隐式转换，所以判断的内容只能是布尔值</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> collection) &#123;</span><br><span class="line">  <span class="built_in">print</span>(x); <span class="comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="while-amp-amp-do-while"><a href="#while-amp-amp-do-while" class="headerlink" title="while &amp;&amp; do-while"></a>while &amp;&amp; do-while</h3><h3 id="break-amp-amp-continue"><a href="#break-amp-amp-continue" class="headerlink" title="break &amp;&amp; continue"></a>break &amp;&amp; continue</h3><p>break 停止循环<br>continue跳过当前次，进行下一次循环</p>
<h2 id="Switch-amp-amp-case"><a href="#Switch-amp-amp-case" class="headerlink" title="Switch &amp;&amp; case"></a>Switch &amp;&amp; case</h2><p>switch 可以对比 <code>string</code>、<code>number</code>、<code>bool</code>但是不能混着用。</p>
<h2 id="Assert-断言"><a href="#Assert-断言" class="headerlink" title="Assert(断言)"></a>Assert(断言)</h2><p>写过单元测试的应该对<code>assert</code>不陌生，如果布尔条件为<code>false</code>则<code>assert</code>会中断执行。<br>不过只会在开发模式起作用，生产环境不会执行。</p>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="Throw-抛错"><a href="#Throw-抛错" class="headerlink" title="Throw 抛错"></a>Throw 抛错</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> FormatException(<span class="string">&#x27;expected at least 1 section&#x27;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;out of llamas!&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">on</span> OutOfLlamasException &#123;</span><br><span class="line">  <span class="comment">// A specific exception</span></span><br><span class="line">  buyMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">on</span> Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// Anything else that is an exception</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Unknown exception: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e, s) &#123;</span><br><span class="line">  <span class="comment">// No specified type, handles all</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Something really unknown: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Stack trace: \n <span class="subst">$s</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  someThing()</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Error: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  clean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>April</title>
    <url>/April/</url>
    <content><![CDATA[<p>在深圳回广州的高铁上写的</p>
<p>四月份好像过的特别混</p>
<h1 id="关于自考"><a href="#关于自考" class="headerlink" title="关于自考"></a>关于自考</h1><p>自考的情况 emmm 高数和概率论直接缺考，因为去了大概率是发呆两小时，还不如做其他事情。<br>数据结构比想象中的简单，虽然自己的算法不怎么样，但是考试好像对算法要求不高，剩下的就是考80分还是90分的区别了<br>马克思主义基本概论概述 emmmm 这个玩意，背的东西不考，考的东西没背，希望能低分飘过吧</p>
<p>接下来应该会选 <code>软件工程</code>还有一科关于计算机基础的，还有一科数学相关，一科待考虑。十月份加油💪，就算过四科今年的计划也完成不了 ╮(╯▽╰)╭</p>
<h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><p>已经接近两个月没有敲代码了，怕下周一入职时要被炒…一直想着万一人家发现我是菜鸡炒了我不是很尴尬。<br>从广州搬去深圳，之前交的社保、公积金啥的其实基本上就废了。其实有点像断了自己后路了，如果下一份工作不能进到理想的公司，那其实基本上就很难再上升，到时候再出去就要背外包的背景了。</p>
<p>面了CDC之后就没有投简历，不过清明过后还是去面了两家：fordeal和YY</p>
<h2 id="fordeal"><a href="#fordeal" class="headerlink" title="fordeal"></a>fordeal</h2><p>fordeal是因为给的待遇实在是诱人，技术面电话聊了一个多小时之后过了。hr面现场聊了一小时，hr说他纠结，让我再和他老大电话面多一轮，还是挂了。<br>hr面一直问的就是希望下一家公司能给你什么…emmm我也没啥高要求，技术好点，大家有点追求就好了。</p>
<p>挂了还是挺可惜的，毕竟一年最多18个月摆在那里，不心动是假的</p>
<h2 id="YY"><a href="#YY" class="headerlink" title="YY"></a>YY</h2><p>YY的话，不得不说max对我挺好的，在拉勾看到我投简历之后就在微信和我聊了一下，让我直接去面试。面试的时候也没有具体聊技术，也不用再做笔试题了，就问了我</p>
<blockquote>
<p>和去年对比你成长了什么？</p>
</blockquote>
<p>这简直是灵魂拷问啊…比强哥的年终绩效考核还尴尬…翻了18年的年中和年终的绩效考核表，发现说其实技术没有长进，平时也只是做一些业务性的需求，虽然这也是想离职的原因，但是归根到底还是自己太弱了。</p>
<p>如果真的自己有足够的决心想去改变这些东西，肯定也是可以解决的，强哥也没有限制我的发挥，所以最终还是自己选择安逸一直摸鱼。</p>
<p>emmm 不过max也没让我难堪哈哈哈，还是让另一个同事进行二面。聊了下接下来ued的方向是webgl。这一块一来不是我感兴趣的方向；二来我最近深知自己数学渣，确实没有信心做。</p>
<p>最后max走了通道帮我推了其他部门，hr打电话说</p>
<blockquote>
<p>ued的同事把你简历推给我，说技术挺不错，人也靠谱</p>
</blockquote>
<p>那心里简直是乐滋滋的 哈哈哈哈。不过今天已经在深圳租了房子，所以就算了，不打算再面试了。yy ued估计以后是没有机会再进了，后面再做就是四五年经验，可能以后都是走业务这一块路线了。</p>
<h2 id="CDC"><a href="#CDC" class="headerlink" title="CDC"></a>CDC</h2><p>emmmm 其实选择去深圳做外包仔不继续面的一个很大的原因是，leader给我的感觉很靠谱，我是一个比较挑leader的人（面租租车入职是因为是贤哥面我的，技术人都贼靠谱）。<br>然后cdc leader有几个细节点</p>
<p>第一个是直属leader在微信和我说了 <strong>后续你往移动端方向发展吧，到时应该是我做你导师</strong> 。这个细节是因为我在面试的时候，说了我后面个人比较期望的方向一个是native方向，一个是server方向。zawa记住了 &amp;&amp; 和我说了，所以当时就心动了一下，然后苏三同学也说这人给她的感觉是 __靠谱，不是浮夸的人__。虽然 max和jl给我的感觉也很不错，不过方向不同就以后有机会再见吧。</p>
<p>第二个是leader’s leader 在面试的时候和我聊了很多比较实在的问题，人一看就比较实在 和我一样。个人比较喜欢在这种氛围工作和成长。</p>
<p>希望接下来的工作可以用上永哥教我的那些东西，从自我管理做储备，扩展到以后项目管理上🐶</p>
<h1 id="关于租房"><a href="#关于租房" class="headerlink" title="关于租房"></a>关于租房</h1><p>租房这事情真的很看缘分，本来找了几个白石洲的，几个固戍的，最后看完白石洲的 就不想再跑关外去看固戍，想着既然都是租房，就不要让自己那么累整天坐那么久地铁，加上想着以后自己应该大概率995，所以在宿舍的时间可能也没有特别长就不追求住大面积了。</p>
<p>最后选了一个在白石洲地铁5分钟路程的小区，2300+200 在一楼面积估计加起来不到8平方，不过有厨房，有阳光，房间看起来相对干净一个人住够了。<br>以后如果说买个平衡车，上下班估计都不需要去挤地铁，也是值了。</p>
<h1 id="关于2019"><a href="#关于2019" class="headerlink" title="关于2019"></a>关于2019</h1><p>emmm 最近确实感觉到自己懒惰了不少，好像没有工作之后，生活反而变得不规律，每天划水摸鱼玩游戏。<br>github和blog也没有更新什么东西，白白浪费了这一个多月的时间。<br>2019已经过了1/3, 19年的五个计划目前只完成了两个。</p>
<p>告辞！</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title>march say</title>
    <url>/march-say/</url>
    <content><![CDATA[<p>怀疑今年是不是本命年，三月初裸辞之后先练了一个星期的车，顺手把车证考了。</p>
<p>考完车证之后投简历，和上次裸辞一样，一开始特别方，海投一堆公司，只要有面试都先答应着，每天开始焦虑提不起精神做其他事情。</p>
<p>面过几家之后心态开始慢慢好起来。</p>
<p>一方面现在互联网环境怎样？或者说前端广州这边的市场怎样？</p>
<p>偏饱和，看招聘要求越来越高就知道了，绝大部分是本科起，工作经验五年起。<br>但是这种情况只出现在大厂或者比较大的公司，小公司还是很有经验的人（小公司指不到500人）。</p>
<p>第二方面是去面试的公司大部分都能过技术面，所以或多或少多了一点点信心吧。</p>
<p>算了下大大小小面了十家公司，能到人事的有七家。但是我到现在工作经验不算实习不算空窗实打实也有三年多…所以对下一家要求挺高的，希望是进大厂的最后一块跳板，加上自己对公司比较挑，又不想外包，又想公司氛围好人性化，又想技术氛围好，又想团队有大牛，又想有个人时间学习成长，又想有符合期望的薪资，又想离家近….</p>
<p>之前上周微信收到一个大佬加好友的请求</p>
<p>我的天！！！！居然是腾讯的！！！喊我去面试！！！我都还没有本科 怎么可能！！！！<br>反正开心了几天，把接下来的面试全拒了直接说有心仪的offer，然后周一晚上开心到睡不着觉三点才睡，想着如果过了的话，我要怎么搬过去，背调填谁比较好，真的就像某些段子里面写的：“见到你的时候连孩子的名字都想好了”。<br>然后周二七点起了个大早搭高铁先去附近吃麦当劳发发呆等面试。</p>
<p>进到会议室等面试的时候为了让自己不那么紧张一直站着深呼吸，一面技术面虽然不是很满意但是好像也过了。<br>面试官：有什么想问的吗？<br>我说： 听说腾讯的面试流程挺久的，是这样的吗？<br>面试官看着我说：你这里的学历自考还没考完，我们这里有正编也有外包岗…<br>那时候心情真是过山车🎢，瞬间明白和之前面uc遇到一样的问题，原来面的是外包岗….</p>
<p>不过面试官挺好的，没有直接点明我太菜了只能进外包，而是说学历问题 哈哈哈<br>但是不知道是不是对腾讯有莫名的执着，所以没有像当时面uc一样直接走人，还是想继续面下去，可能是其毅大哥就在腾讯的缘故吧</p>
<p>二面面试官也特别实在，和我聊了对我的建议和外包注意的事情之类的。</p>
<p>想想我从第一份工作到现在遇到的老大都很不错，所以其实想不想入职很大程度是看leader对不对眼</p>
<p>在三月的尾巴，总结一下这个操蛋的三月。</p>
<ol>
<li>驾驶证到手，比预想的提前一个月，算是19年的目标完成一个</li>
<li>找工作高不成低不就的，最大的要求还是要能成长，公司人性化</li>
<li>不出意外的话下一份工作就可以完成19年的第二个目标</li>
<li>自从面了cdc那个之后就不怎么想继续面试找工作了，可能觉得后面那些面试都没有在腾讯里面学习成长快，虽然在之前外包之后已经决定不再找外包了，也觉得外包很容易被人鄙视….唉 加油咯</li>
<li>19年的第三个目标是完成不了了，高数和概论比想象中的要难， 太低估他们了</li>
<li>最近接触《数据结构》和typescript，有种相见恨晚的感觉，慢慢开始明白计算机基础好的人的优势在哪里</li>
</ol>
<p>最后，希望19年接下来是一段新的突破期，尽力完成19年的最后一个目标！ 告辞 加油</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript初体验</title>
    <url>/typescript_experience/</url>
    <content><![CDATA[<p>忍不住要记录一下，<code>typescript</code>简直是神器!!!</p>
<p>最近在看自考的《数据结构》，里面的代码是<code>C</code>写的，虽然看着挺好理解，但是就是记不住。所以想着还是要自己敲一遍才行，但是C断点调试太麻烦了（其实是我还没有看怎么断掉调试），虽然环境搭好了，但是感觉还是很多不习惯。</p>
<p>所以想着干脆用js来实现，然后又想着<code>C</code>有那么多类型，干脆我用<code>typescript</code>来实现一下也可以，给我的感觉<code>typescript</code>就很像<code>java</code>和<code>javascript</code>的组合，刚好之前学过一小点<code>java</code>的语法，对<code>java</code>的强类型挺喜欢的。</p>
<p>学<code>ts</code>这个网站<a href="https://ts.xcatliu.com/">https://ts.xcatliu.com</a>看完基本上都可以上手了，复杂一点的可能要慢慢补，<code>antD</code>仓库的代码就都是<code>ts</code>。</p>
<p>然后!!!!关键点来了!!! ts的提示比我想象中的爽超级多！</p>
<p>超级爽的代码注释 &amp;&amp; 参数提示<br><img data-src="/typescript_experience/ts1.png" alt="代码提示"></p>
<p>值类型上方法的提示<br><img data-src="/typescript_experience/ts2.png" alt="类型方法提示"></p>
<p>简直是大型开发或多人开发的神器，注释的规范可以参照这个<a href="https://github.com/fex-team/styleguide/blob/master/javascript.md#24-%E6%B3%A8%E9%87%8A">fex-team</a> 告辞！</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>quicklink学习以及结合React</title>
    <url>/quicklink/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>谷歌团队在几个月前开源了一个项目，叫<a href="https://github.com/GoogleChromeLabs/quicklink"><code>quicklink</code></a>。官方给出的介绍是</p>
<blockquote>
<p>Faster subsequent page-loads by prefetching in-viewport links during idle time</p>
</blockquote>
<p>这里简单的介绍一下这个项目，并且说明一下为什么我需要fork这个项目~</p>
<p>quicklink的源码很简洁，作用可以用一句话总结: <strong>利用空闲时间来缓存界面上看到的链接，加快这些链接的访问速度。</strong></p>
<p><strong>所以quicklink的作用是在下一个链接快速打开，而不是当前链接，这一点和很多其他优化都不一样。</strong></p>
<p>原理很简单:</p>
<ul>
<li>获取页面上所有的A标签（注意，这里的a标签指的是调用函数的时候document下的a标签）</li>
<li>等待浏览器空闲 (requestIdleCallback 或者用 setTimeout 做兼容)</li>
<li>利用 IntersectionObserver 做监控，当监控的dom进入视图，就开始预加载</li>
<li>与获取视图内的URL(<code>&lt;link rel=&quot;prefetch&quot;&gt;</code> or <code>XHR</code> or <code>fetch</code>)，以获得快速访问该链接的效果</li>
</ul>
<p>代码真的很简洁，很棒，这边没必要再贴出来，有兴趣的直接github fork一个去看或修改，除去注释代码量加起来不到200行</p>
<h1 id="forked"><a href="#forked" class="headerlink" title="forked"></a>forked</h1><p>我fork该项目之后修改了一些东西 </p>
<h2 id="默认添加了polyfill，直接打到包里"><a href="#默认添加了polyfill，直接打到包里" class="headerlink" title="默认添加了polyfill，直接打到包里"></a>默认添加了polyfill，直接打到包里</h2><p>为什么要加polyfill呢？ 因为<code>IntersectionObserver</code> 虽然好用，但是pc端<code>IE11</code>都不支持，移动端也要到了<code>IOS12 safari</code>才支持…支持面太窄了而且不用polyfill的话，直接报错….所以权衡之下，干脆直接全量引用<code>IntersectionObserver</code>的polyfill，gzip情况下整个包加起来才<code>3.5k</code> 值了。</p>
<h2 id="添加了quicklink全局配置"><a href="#添加了quicklink全局配置" class="headerlink" title="添加了quicklink全局配置"></a>添加了quicklink全局配置</h2><p>在包里写了 <code>quicklinkOptions</code> 对象，这样每次调用 <code>quicklink</code> 的时候就可以公用一些配置，而不需要每次调用都塞一样的配置进去,至于为什么提到每次调用…后面会解释到</p>
<h2 id="添加了manualPreFetch方法：-手动绑定某些dom监听"><a href="#添加了manualPreFetch方法：-手动绑定某些dom监听" class="headerlink" title="添加了manualPreFetch方法： 手动绑定某些dom监听"></a>添加了manualPreFetch方法： 手动绑定某些dom监听</h2><p><code>manualPreFetch</code> 方法，就是手动的意思，支持传入这些参数<code>&#123;dom, isForce, link, priority&#125;</code>。<br>为什么需要加多个方法呢？ 因为我发现 quicklink 只支持扫<code>&lt;a&gt;</code>标签去获取link，但是很多情况可能我们不是用a标签，而是类似写一个<code>button</code>，点击之后js控制跳转。 虽然说我们可以在代码层用button包a链接等方式去实现，但是这样就太局限了，所以才加了个方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;跳转到xxx&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">manualPreFetch(&#123;</span><br><span class="line">  <span class="attr">dom</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>),</span><br><span class="line">  <span class="attr">link</span>: <span class="string">&#x27;www.easyrentcars.com&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>该方法和 <code>quicklink</code> 一样，也是监听dom滚到当前位置才会发起预加载。这里会读取一部分的<code>quicklinkOptions</code>，这就是我加多个全局配置的原因了，不需要每次调用的时候都写一堆</p>
<h2 id="增加了manualRemovePreFetch方法：-手动删除监听预加载"><a href="#增加了manualRemovePreFetch方法：-手动删除监听预加载" class="headerlink" title="增加了manualRemovePreFetch方法： 手动删除监听预加载"></a>增加了manualRemovePreFetch方法： 手动删除监听预加载</h2><p>添加个移除的方法，只是简单的移除掉要监听的dom，虽然对性能不会造成影响…但是就是有点强迫症鸭🦆</p>
<h2 id="React-demo"><a href="#React-demo" class="headerlink" title="React demo"></a>React demo</h2><p><code>quicklink</code>是在执行的时候用 <code>(el || document).getQuesySelectorAll(&#39;a&#39;)</code> 去获取页面上的<code>&lt;a&gt;</code>，所以对于React就比较尴尬了，渲染是异步的，如果调用早的话，肯定是拿不到，那什么时候调用这个才是最佳时机?</p>
<p><strong>比较通用的是<code>componentDidMount</code> 或者是<code>UseEffect</code>。不过个人比较建议配合<code>manualPreFetch</code>、<code>manualRemovePreFetch</code>对一些比较重要的加就好了，因为很多都是异步之后再渲染，可能 <code>componentDidMount</code>的时候，你需要预加载的链接还没出现。</strong></p>
<p>这里简单给出两个关于React的通用demo。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> quicklink, &#123; manualPreFetch, manualRemovePreFetch&#125; <span class="keyword">from</span> <span class="string">&#x27;@jsonz/quicklink&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuicklinkComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.refRoot = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// didMount 监听组件内所有的a链接</span></span><br><span class="line">    quicklink(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="built_in">this</span>.refRoot.current,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// willunmount 移除所有的a链接监听</span></span><br><span class="line">    batchManualRemove(<span class="built_in">this</span>.refRoot.current);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.refRoot&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook 类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuicklinkDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> refRoot = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    quicklink(&#123;</span><br><span class="line">      <span class="attr">el</span>: refRoot.current,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> &#123;</span><br><span class="line">      batchManualRemove(refRoot.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;refRoot&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="3-1-致夭折的小ql"><a href="#3-1-致夭折的小ql" class="headerlink" title="3.1 致夭折的小ql"></a>3.1 致夭折的小ql</h1><p>本来已经加在项目上，打算拿一个项目/页面来试点，不过最后被说服暂时不用，原因有三</p>
<ol>
<li>quicklink 可能会对后端造成不小的压力，比如你的网站一打开，滑到最底部，那中间可能就会预加载20个链接….然而用户可能一个都不打开就关闭，那就白白给服务器添加20个请求，对于量比较大的网站，可能会很坑爹。总结来说就是命中率太低，不过可以改成做针对性的预加载，比如下单页预加载支付页的。</li>
<li>只能预加载document，对于页面上占大头的js引用等静态资源没有起作用。效果可能对于实用站点不明显，对文章类会好很多。</li>
<li>针对前面两种情况，好像pwa能做的会更多？ 所以如果是过渡方案或文字类(document)资源占比比较多的用quicklink比较好。</li>
</ol>
<p>但是项目上的pwa比较残疾，之前做的同事做了一版之后就离职了…一直没人去维护，所以pwa要被提上日程？</p>
<blockquote>
<p>补一个问题，我直接在quicklink内打polyfill不是很好，因为如果项目上也引用这个Polyfill就会重复了。</p>
</blockquote>
<p>告辞</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>利用AST解决项目webpack alias泛滥问题</title>
    <url>/AST-practice/</url>
    <content><![CDATA[<p><a href="https://github.com/jsonz1993/wheel/tree/master/ast-webpack-alias">文章代码的源码仓库</a></p>
<h1 id="AST-简单介绍"><a href="#AST-简单介绍" class="headerlink" title="AST 简单介绍"></a>AST 简单介绍</h1><p>AST(Abstract Syntax Tree)既抽象语法树，或称语法树，简单来说就是代码语法结构的一种抽象表示。比如 <code>var answer = 6 * 7;</code> 会被解析为这么一棵树<br><img data-src="./ast_wiki.png" style="width: 320px; border: none; display: inline-block;"><img data-src="./ast_esprima.png" style="width: 200px; border: none; display: inline-block;"></p>
<p>那么代码怎样才能解析成这一棵 AST， AST在前端领域一般又可以干嘛？</p>
<h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><p>__ast是由编译器解析生成的__，简单的编译器可以由以下几部分组成:</p>
<ul>
<li>tokenizer 分词器 把代码或文本按类型分开，返回: <code>tokens</code></li>
<li>parser 语法剖析器 对分词后的文本按照语法分析转换成 抽象语法树 返回：ast</li>
<li>transformer 语法转换器 把语法剖析后的抽象语法树转换成我们想要的: newAst</li>
<li>codeGenerator 代码生成器 把AST 转换为 目标代码</li>
</ul>
<p>我们前端构建中很常用的babel就是这种原理</p>
<blockquote>
<p>babel 初始阶段并没有做任何事，基本上等于 const babel = code=&gt; code; 先 tokenizer， parser 解析代码，再 transformer 的时候，完全不改动原来的 ast</p>
</blockquote>
<p><strong>对编译器原理有兴趣的，可以看我以前写的小demo，500行简单易懂 <a href="https://github.com/jsonz1993/wheel/blob/master/min-compiler/README.md">min-compiler</a>，看完会有个整体概念。</strong></p>
<p>而生成的AST我们可以用来做什么？<br>AST你都拿到了，剩下的事情就是对这棵树做你想要的操作，比如代码转换(babel)，代码压缩等。</p>
<p>这里我用他来处理webpack的alias泛滥问题。</p>
<h1 id="webpack-alias问题"><a href="#webpack-alias问题" class="headerlink" title="webpack alias问题"></a>webpack alias问题</h1><p>webpack alias 在很多情况下可以提供便利，但是如果项目参加的人太多，又没有什么约束，大家贪图方便什么都加到alias….就会变成这样子<br><img data-src="./old_alias.png" /></p>
<ul>
<li>很多你不知道他到底是node_modules里面的包还是自己封装过的</li>
<li>很多写二级路径就可以获取到的，没必要多加个alias</li>
<li>现在比较推崇不是很远的路径都写成相对路径，编辑器可以直接跳过去方便（虽然这个可以通过jsconfig来解决，但是太多看着也很烦)<br>所以我决定把项目里的alias从23个缩减为7个。</li>
</ul>
<h1 id="利用-estools-解决webpack-Alias"><a href="#利用-estools-解决webpack-Alias" class="headerlink" title="利用 estools 解决webpack Alias"></a>利用 <a href="https://github.com/estools">estools</a> 解决webpack Alias</h1><p>我们先来整理一下思路</p>
<ul>
<li>先用解析器把代码解析成 AST</li>
<li>再找出我们需要去除的alias，把他改为其他值，生成新的AST</li>
<li>把新的AST转为代码，重新写入文件</li>
</ul>
<p>我们这里的把alias改为其他值，指的是这种情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录结构:</span><br><span class="line">- src</span><br><span class="line">  - components</span><br><span class="line">    - btn</span><br><span class="line"></span><br><span class="line">alias: &#123;</span><br><span class="line">  btn: path.resolve(basepath, &#x27;src/components/btn&#x27;),</span><br><span class="line">  btn: path.resolve(basepath, &#x27;src/components&#x27;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">原来的引入 import Btn from &#x27;btn&#x27;;</span><br><span class="line">改为 import Btn from &#x27;components/btn&#x27;;</span><br></pre></td></tr></table></figure>

<p>这里我们用 <a href="https://github.com/jquery/esprima">esprima</a> 来做代码分析生成ast，用 <a href="https://github.com/estools/estraverse">estraverse</a> 来转换代码，用 <a href="https://github.com/estools/escodegen">escodegen</a> 生成代码。直接上代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aliasConfig = &#123; <span class="comment">/* webpack alias 配置*/</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateAlias</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析ast</span></span><br><span class="line">  <span class="keyword">const</span> codeStr = fs.readFileSync(filePath).toString();</span><br><span class="line">  <span class="keyword">const</span> ast = esprima.parseModule(codeStr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换ast</span></span><br><span class="line">  estraverse.traverse(ast, &#123;</span><br><span class="line">    <span class="comment">// 对于每个node节点都会进入这个函数</span></span><br><span class="line">    <span class="function"><span class="title">enter</span>(<span class="params">node, parent</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 判断是否是我们的目标文件</span></span><br><span class="line">      <span class="keyword">const</span> isAliasDec = isRequireDeclaration(node, parent);</span><br><span class="line">      <span class="keyword">if</span> (isAliasDec) &#123;</span><br><span class="line">        <span class="comment">// 替换掉alias =&gt; newAlias</span></span><br><span class="line">        <span class="keyword">const</span> newVal = getModulePath(node.value, filePath);</span><br><span class="line">        node.value = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重新生成代码</span></span><br><span class="line">  <span class="keyword">const</span> newCodeStr = escodegen.generate(ast);</span><br><span class="line">  fs.writeFileSync(filePath, newCodeStr, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具函数: 判断是否是 require</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRequireDeclaration</span>(<span class="params">node, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, value &#125; = node;</span><br><span class="line">  <span class="keyword">const</span> &#123; callee &#125; = parent || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 类型一致 &amp;&amp; 该key在aliasKey中 &amp;&amp; 是 require引入的</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    type === <span class="string">&#x27;Literal&#x27;</span> &amp;&amp;</span><br><span class="line">    aliasKey.includes(value) &amp;&amp;</span><br><span class="line">    !allowAliasKey.includes(value) &amp;&amp;</span><br><span class="line">    isRequest(callee)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具函数：获取路径</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getModulePath</span>(<span class="params">aliasKey, filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstDir = <span class="regexp">/\w*/</span>.exec(aliasKey)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> modulePath = aliasKey.replace(firstDir, aliasConfig[firstDir]);</span><br><span class="line">  <span class="keyword">const</span> aliasPath = aliasKey.replace(firstDir, aliasMap[firstDir]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!aliasConfig[firstDir] || !aliasMap[firstDir] || allowAliasKey.includes(firstDir)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取引入的模块与当前模块相对路径，判断是否太长，是就返回alias，否则就返回相对路径就完事了</span></span><br><span class="line">  <span class="keyword">const</span> relativePath = path.relative(filePath, modulePath);</span><br><span class="line">  <span class="keyword">const</span> relativeTime = relativePath.split(<span class="string">&#x27;../&#x27;</span>).length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (relativeTime &lt; MAX_RELATIVE)? relativePath: aliasPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">translateAlias(filePath);</span><br></pre></td></tr></table></figure>

<p><img data-src="/AST-practice/estool.png" alt="estool_ast"><br>试跑了一下，发现说虽然代码引用确实有被替换了，但是代码里面的所有空行和注释都丢了，而且一些规范格式也和原来不一样。<br>这显然是不行的，先不说格式的问题，一个文件连换行和注释都没有，那他就是没有灵魂的js~</p>
<p>看了下这是因为 <code>esprima</code> 在解析的时候，遇到空行和注释会直接跳过不解析生成AST，所以会导致后面生成的代码没有空行和注释。</p>
<h1 id="babel解决空行和注释等问题、prettier保持代码风格一致"><a href="#babel解决空行和注释等问题、prettier保持代码风格一致" class="headerlink" title="babel解决空行和注释等问题、prettier保持代码风格一致"></a>babel解决空行和注释等问题、prettier保持代码风格一致</h1><p>我们平时项目上用的最多的转换代码的工具就是babel，那么我们也可以把 <code>esTool</code> 那一套换成 <code>babel</code>生态，用babel来帮我们做这些转换。</p>
<p>原理和思路基本上是一样的，用 <code>babylon</code> 解析，<code>babel-traverse</code> 转换，再用<code>babel-generator</code>生成代码。<br>生成之后，先不写进去，而是用 <code>prettier</code> 格式化一遍再重写到本地，以保持和原来的风格一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translateAlias</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`开始处理第<span class="subst">$&#123;i++&#125;</span>个: <span class="subst">$&#123;filePath&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> code = fs.readFileSync(filePath).toString();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取ast</span></span><br><span class="line">  <span class="keyword">const</span> ast = babylon.parse(code, &#123;</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;objectRestSpread&#x27;</span>]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  traverse(ast, &#123;</span><br><span class="line">    <span class="function"><span class="title">enter</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 转换 CommonJs 的情况</span></span><br><span class="line">      translateRequireModulePath(path, filePath);</span><br><span class="line">      <span class="comment">// 转换 ESM 的情况</span></span><br><span class="line">      translateImportModulePath(path, filePath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newCode = generate(ast, &#123;&#125;);</span><br><span class="line">  <span class="comment">// 重新用项目的prettier配置格式化多一次再写入</span></span><br><span class="line">  <span class="keyword">const</span> prettierCode = prettier.format(newCode.code, prettierConfig);</span><br><span class="line">  fs.writeFileSync(filePath, prettierCode);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`处理结束<span class="subst">$&#123;filePath&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/AST-practice/babel.png" alt="./babel.png"></p>
<p>到此减少webpack-alias的功能处理完成，最后总结一下</p>
<ol>
<li>用<code>glob</code>读取所有要转的js文件</li>
<li>用 <code>babylon</code> 将js文件解析成AST</li>
<li>用 <code>babel-traverse</code> 处理AST，判断如果是 <code>require(&#39;xxx&#39;)</code>或者<code>import xxx from &#39;xxx&#39;</code> 替换掉这些路径</li>
<li>用 <code>babel-generator</code> 将新生成的AST转化为代码</li>
<li>用 <code>prettier</code> 格式化新生成的代码，保持与原项目风格一致</li>
<li>重新写入本地文件</li>
</ol>
<h1 id="告辞！"><a href="#告辞！" class="headerlink" title="告辞！"></a>告辞！</h1><p><img data-src="/AST-practice/kaiji.jpg" alt="./kaiji.jpg"><br>最后写的时候参考到的链接，大部分是类库的文档<br><a href="https://github.com/jsonz1993">迷你编译器</a><br><a href="https://github.com/estools/escodegen">estools代码生成escodegen</a><br><a href="https://github.com/estools/estraverse">estools代码转换estraverse</a><br><a href="https://github.com/jquery/esprima">代码解析esprima</a><br><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-introduction">babel plugin book</a><br><a href="https://www.npmjs.com/package/babel-generator">babel-generator</a><br><a href="https://www.npmjs.com/package/babel-traverse">babel-traverse</a><br><a href="https://www.npmjs.com/package/babylon">babylon</a><br><a href="http://esprima.org/demo/parse.html">在线ast生成</a><br><a href="http://forivall.com/astexplorer/">在线ast生成</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Ast</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式——刚才明明是好的</title>
    <url>/regexp-global/</url>
    <content><![CDATA[<p>今天测试提一个jira给我，说有一个很诡异的bug，表单验证有时候会成功，有时候会失败。<br><video src="./a.mp4" controls="true" ></video></p>
<p>而且很有规律性的，两下成功，接着失败，再两下成功，再失败…看代码也没什么问题，<code>\S</code>匹配任何非空字符，<code>g</code>全局查找，这么简单的一个正则怎么可能会出错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> r = <span class="regexp">/\S/g</span>;</span><br><span class="line">$input.addEventListener(<span class="string">&#x27;blur&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">	<span class="keyword">const</span> result = r.test(e.currentTarget.value);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后直接拿到控制台去测试，发现也有类似的问题，但是如果每次都直接调用正则表达式的test方法，又不会有问题。所以一开始怀疑是把正则对象存起来导致的。<img data-src="./a.png" width="150" /></p>
<p>后面在 <a href="https://stackoverflow.com/questions/13586786/regexp-test-returns-different-result-for-same-str-depending-on-how-where-i">stackoverflow</a>和 <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#%E5%BD%93%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E6%A0%87%E5%BF%97%E7%9A%84%E6%AD%A3%E5%88%99%E4%BD%BF%E7%94%A8test()'>MDN</a>上找到真正的原因。</p>
<blockquote>
<p>当设置全局标志的正则使用test()<br>如果正则表达式设置了全局标志，test() 的执行会改变正则表达式   lastIndex属性。连续的执行test()方法，后续的执行将会从 lastIndex 处开始匹配字符串，(exec() 同样改变正则本身的 lastIndex属性值).</p>
</blockquote>
<p>这意思就很明显了，我们每一次搜索匹配中之后，下次就从他的下一位开始执行搜索。<br><img data-src="./b.png"/></p>
<p>所以最后看业务场景，完全不需要加这个<code>g</code>，直接去掉就算fix了。当然如果你头很铁…一定要加g的话，那也可以每次执行完重置 lastIndex。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> r = <span class="regexp">/\S/g</span>;</span><br><span class="line">$input.addEventListener(<span class="string">&#x27;blur&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> result = r.test(e.currentTarget.value);</span><br><span class="line">  <span class="keyword">if</span> (result) r.lastIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><em>last 谢谢大钊子和坤少两位同事</em></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Regexp</tag>
      </tags>
  </entry>
  <entry>
    <title>React源码系列</title>
    <url>/react-source/</url>
    <content><![CDATA[<p><a href="https://github.com/jsonz1993/react-source-learn">react16 源码阅读学习记录</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/fp/</url>
    <content><![CDATA[<p><a href="https://ppt.baomitu.com/d/b063f5fc">本文ppt请笑纳</a></p>
<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>维基百科对函数式编程的定义：函数式编程（英语：functional programming）或称函数程序设计，是一种编程典范，它将计算机运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。这里的函数指的是数学上的函数，既自变量（数据）的映射。</p>
<p>与<code>命令式编程</code>对比，<code>函数式编程</code>更加强调__程序执行的结果__而非__执行的过程__，倡导利用若干简单的执行单元(小函数)让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p>
<p>我的理解是，以纯函数（ 避免使用程序状态以及异变对象）为单元，去抽象、拆分模块功能的编程思想。其实函数式编程我们平时不陌生，比如react, redux 都多多少少有一些相关。</p>
<p>所以我们得出几个函数式编程的要点：</p>
<ol>
<li>避免使用程序状态以及异变对象，数据映射=&gt; 纯函数</li>
<li>强调执行结果而非过程=&gt; 声明式</li>
</ol>
<h1 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h1><p>纯函数：输出结果只由输入决定，并且不产生副作用(effects)。 </p>
<ol>
<li>避免使用 this，window 等外部变量</li>
<li>没有产生副作用(Effects)，既把Effects抽离出来</li>
</ol>
<blockquote>
<p>Effects有哪些呢？<br>比如 改动外部数据，发起ajax请求，改动dom等等。<br>写过dva的就知道，dva的model有一个effects，就是用来放这些副作用的代码。</p>
</blockquote>
<p>我们把Effects分离出来之后，剩下的就是纯函数，纯函数可以很简单的进行单元测试，所以是不容易出bug的，因为往往有bug的都是不可预见的部分。</p>
<p>举个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="string">&#x27;bilibili&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;jsonz&#x27;</span>];</span><br><span class="line">arr.slice(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 没副作用</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 有副作用，修改到原来的arr数组 可能会造成意想不到的bug</span></span><br></pre></td></tr></table></figure>

<p>虽然执行之后，都能得到 <code>Hello Jsonz</code>。 但是 splice 会改动到原来的数组，所以不算纯函数。</p>
<p>工作中其实很多工具类的function都是纯函数，redux的Reducer也是标准的纯函数。</p>
<p>redux reducers</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">state, &#123; payload &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    ...payload,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>纯函数的好处是，你不需要担心某个值在某处发送意想不到的改变导致出bug；纯函数里不产生副作用，所以也不会担心改动到其他地方，代码更健硕；可以更优雅的组合复用，方便移植到其他环境(web workers)；方便的写单元测试。</p>
<h1 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h1><p>在说声明式之前，要先普及一下与之对应的命令式（指令式）。<br>我们平时写的代码基本都是命令式，既我们通过一条一条的命令去执行一些操作，其中会涉及到很多细节的东西。<br>既关注执行过程，用各种控制语句<code>if...else...</code>与<code>for</code>循环等。</p>
<p><strong>命令式编程：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。</strong><br><strong>声明式编程：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。</strong></p>
<blockquote>
<p>SQL语句是典型声明式，SQL存储过程和存储函数则是命令式编程。</p>
</blockquote>
<figure class="highlight javascript"><figcaption><span>react里面的两种编程方式</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数式编程</span></span><br><span class="line"><span class="keyword">const</span> data= [&#123;<span class="attr">name</span>: <span class="string">&#x27;jsonz&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span>&#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;balala&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>&#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;小魔仙&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dom = data.filter(<span class="function"><span class="params">item</span>=&gt;</span> age&lt;<span class="number">10</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">item</span>=&gt;</span> &lt;span&gt;&#123;item.name&#125; - &#123;item.age&#125;&lt;span&gt;); // 这里后面的span是闭合的&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 命令式编程</span><br><span class="line">const data= [&#123;name: &#x27;jsonz&#x27;, age: 2&#125;, &#123; name: &#x27;balala&#x27;, age: 3&#125;, &#123; name: &#x27;小魔仙&#x27;, age: 30&#125;];</span><br><span class="line"></span><br><span class="line">let newData = [];</span><br><span class="line">for (let i= 0; i&lt; data.length; i++) &#123;</span><br><span class="line">  if (data[i].age &lt; 10) &#123;</span><br><span class="line">    newData.push(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dom2 = [];</span><br><span class="line">for (let i= 0; i&lt; newData.length; i++) &#123;</span><br><span class="line">  dom2.push(`&lt;span&gt;$&#123;item.name&#125;-$&#123;item.age&#125;&lt;span&gt;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看出声明式的代码更加简洁清晰优雅。</p>
<figure class="highlight javascript"><figcaption><span>声明式代码复用</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双倍</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arr.length; i++) &#123;</span><br><span class="line">    results.push(arr[i] * <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arr.length; i++) &#123;</span><br><span class="line">    results.push(arr[i] +<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式: 去重复代码，简洁</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="params">item</span>=&gt;</span> item*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="params">item</span>=&gt;</span> item+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式究极版： 借助 Ramda</span></span><br><span class="line"><span class="keyword">const</span> m= _.curry(<span class="function">(<span class="params">fn, arr</span>) =&gt;</span> arr.map(<span class="function"><span class="params">item</span>=&gt;</span> fn(item)));</span><br><span class="line"><span class="keyword">const</span> double = m(<span class="function"><span class="params">item</span>=&gt;</span> item*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> addOne = m(<span class="function"><span class="params">item</span>=&gt;</span> item+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>


<p>这里我们可以看出一些函数式最简单的思路：<br>把循环和判断等控制语句尽可能换成<code>筛选 filter</code>、<code>映射 map</code>、<code>化约 reduce</code>。</p>
<figure class="highlight javascript"><figcaption><span>cookie获取</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 命令式</span></span><br><span class="line"><span class="comment">// 获取cookie</span></span><br><span class="line"><span class="keyword">var</span> _cookie = <span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="comment">// cookie 的形式是字符串 &quot;key1=value1; key2=value2; &quot;; 把他转变成数组形式 [&quot;key1=value1&quot;, &quot;key2=value2&quot;]。 用 &quot;; &quot;作为分隔符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _cookieArray = _cookie.split(<span class="string">&#x27;; &#x27;</span>);</span><br><span class="line"><span class="comment">// 循环把数组里面的 key1=value1变成对象obj的key和value 方便获取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i= <span class="number">0</span>; i&lt; _cookieArray.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出cookie数组里面的单个:  key1=value1</span></span><br><span class="line">    <span class="keyword">var</span> cookieItem = _cookieArray[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把这个字符串key1= value1 变换成数组 [key1, value1]，用 &quot;=&quot; 做为分割符</span></span><br><span class="line">    <span class="keyword">var</span> cookieItemArray = cookieItem.split(<span class="string">&#x27;=&#x27;</span>); <span class="comment">// [key1, value1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把分割好的数组，赋值给obj  </span></span><br><span class="line">    <span class="keyword">var</span> key = cookieItemArray[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> value = cookieItemArray[<span class="number">1</span>];</span><br><span class="line">    obj[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="built_in">document</span>.cookie.split(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> [key, value] = item.split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;key, value&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">acc, cur</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; key, value &#125; = cur;</span><br><span class="line">        acc[key] = value;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="综合-纯函数-声明式"><a href="#综合-纯函数-声明式" class="headerlink" title="综合 纯函数 + 声明式"></a>综合 纯函数 + 声明式</h1><p>该部分源代码可以看这个仓库 ( ☉_☉)≡☞o────★°<a href="https://github.com/jsonz1993/wheel/tree/master/fq-demo">仓库地址</a></p>
<figure class="highlight javascript"><figcaption><span>求完美数</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//  完全数（Perfect number），又称完美数或完备数，是一些特殊的自然数。 它所有的真因子（即除了自身以外的约数）的和（即因子函数），恰好等于它本身</span></span><br><span class="line"><span class="comment">// 比如 6 = 1 + 2 + 3 是完美数; 8 != 1 + 2 + 4 不是完美数</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">6</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPerfect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aliquotSum() === num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isFactor</span>(<span class="params">potential</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num % potential === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFactors</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line">    arr.push(<span class="number">1</span>); </span><br><span class="line">    arr.push(num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">2</span>; i&lt; num; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isFactor(i)) arr.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">aliquotSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> factors = getFactors(num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; factors.length; i++) &#123;</span><br><span class="line">      sum += factors[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum -= num;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = isPerfect();</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向函数式靠拢</span></span><br><span class="line"><span class="comment">// 1. 将 num 变为传参 而不是外部状态</span></span><br><span class="line"><span class="comment">// 2. 使得所有方法都变为纯函数</span></span><br><span class="line"><span class="comment">// 3. 真因子相加改为函数式写法</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">isPerfect</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aliquotSum(num) === num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isFactor</span>(<span class="params">num, potential</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num % potential === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFactors</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(num), <span class="function">(<span class="params">item, i</span>)=&gt;</span> i)</span><br><span class="line">      .filter(<span class="function"><span class="params">v</span>=&gt;</span> isFactor(num, v));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">aliquotSum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> factors = getFactors(num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; factors.length; i++) &#123;</span><br><span class="line">      sum += factors[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = isPerfect(<span class="number">6</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 究极版</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> aliquotSum = <span class="function"><span class="params">num</span>=&gt;</span> <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(num), <span class="function">(<span class="params">item, i</span>)=&gt;</span> i)</span><br><span class="line">    .filter(<span class="function"><span class="params">item</span>=&gt;</span> num % item === <span class="number">0</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">cur, next</span>)=&gt;</span> cur += next);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPerfect</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aliquotSum(num) === num;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">const</span> result = isPerfect(<span class="number">6</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面都是比较小的工具demo，基本上不包含Effects，但是实际上项目充斥一堆业务逻辑(Effects)，所以一般会借助一些工具/库来实现,比如 <code>ramda.js</code>和<code>rx.js</code>。</p>
<blockquote>
<p><code>rxJs</code> 官网的描述是 Reactive Extensions Library for JavaScript简单来说RxJS就是辅助我们写出函数式响应式代码的一种工具。</p>
</blockquote>
<p>我们现在来实现一个功能，页面上有一个按钮，点击之后输出计数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通版本</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#button&#x27;</span>);</span><br><span class="line">  button.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    count += <span class="number">1</span>; <span class="comment">// 用到外部变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`clicked!<span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// RxJs版本</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">const</span> &#123; fromEvent, <span class="attr">operators</span>: &#123; scan, &#125; &#125; = rxjs;</span><br><span class="line"> <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> fromEvent(button, <span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  .pipe(</span><br><span class="line">    <span class="comment">// scan 随着时间的推移进行归并。</span></span><br><span class="line">    scan(<span class="function">(<span class="params">count</span>)=&gt;</span> count+ <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">  .subscribe(<span class="function"><span class="params">count</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">`clicked! <span class="subst">$&#123;count&#125;</span> times`</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>节流和累加点击坐标</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#button&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> rate = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">let</span> lastClick = <span class="built_in">Date</span>.now() - rate;</span><br><span class="line">  button.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - lastClick &gt;= rate) &#123;</span><br><span class="line">      count += e.clientX;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`clicked!<span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">      lastClick = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">const</span> &#123; fromEvent, <span class="attr">operators</span>: &#123; scan, throttleTime, map &#125; &#125; = rxjs;</span><br><span class="line"> <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> fromEvent(button, <span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  .pipe(</span><br><span class="line">    throttleTime(<span class="number">1000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">e</span>=&gt;</span> e.clientX),</span><br><span class="line">    scan(<span class="function">(<span class="params">count, clientX</span>)=&gt;</span> count+ clientX, <span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">  .subscribe(<span class="function"><span class="params">count</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">`clicked! <span class="subst">$&#123;count&#125;</span> times`</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们用<code>Ramda.js</code>来实现一个页面，获取某个关键字图片，并展示出来。<code>Ramda</code>主要帮忙实现一些 <code>curry</code>, <code>compose</code> 等功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">requirejs.config(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">ramda</span>: <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/ramda/0.13.0/ramda.min&#x27;</span>,</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([</span><br><span class="line">    <span class="string">&#x27;ramda&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">_, $</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们把不纯的Effects抽出来</span></span><br><span class="line">    <span class="keyword">const</span> Impure = &#123;</span><br><span class="line">      <span class="attr">getJSON</span>: _.curry(<span class="function">(<span class="params">callback, url</span>)=&gt;</span> $.getJSON(url, callback)),</span><br><span class="line"></span><br><span class="line">      <span class="attr">setHtml</span>: _.curry(<span class="function">(<span class="params">sel, html</span>)=&gt;</span> $(sel).html(html)),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入url 生成 img dom</span></span><br><span class="line">    <span class="keyword">const</span> img = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="string">&#x27;&lt;img /&gt;&#x27;</span>, &#123; <span class="attr">src</span>: url &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取传入参数的 media 属性，以及获取 media属性上的 m。 等价于 arg.media.m</span></span><br><span class="line">    <span class="keyword">const</span> mediaUrl = _.compose(_.prop(<span class="string">&#x27;m&#x27;</span>), _.prop(<span class="string">&#x27;media&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取传入参数的 item 属性，以及对每个item执行 mediaUrl 函数</span></span><br><span class="line">    <span class="keyword">const</span> srcs = _.compose(_.map(mediaUrl), _.prop(<span class="string">&#x27;items&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把img和srcs函数整合起来</span></span><br><span class="line">    <span class="keyword">const</span> images = _.compose(_.map(img), srcs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> url = <span class="function"><span class="params">term</span>=&gt;</span> <span class="string">`https://api.flickr.com/services/feeds/photos_public.gne</span></span><br><span class="line"><span class="string">    ?tags=<span class="subst">$&#123;term&#125;</span>&amp;format=json&amp;jsoncallback=?`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把imges获取到的参数传给 Impure.setHtml(&#x27;body&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> renderImages = _.compose(Impure.setHtml(<span class="string">&#x27;body&#x27;</span>), images);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把所有小函数整合成一个大的函数，我们只需要给这个app喂数据即可</span></span><br><span class="line">    <span class="keyword">const</span> app = _.compose(Impure.getJSON(renderImages), url);</span><br><span class="line"></span><br><span class="line">    app(<span class="string">&#x27;cat&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>优化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// old</span></span><br><span class="line">    <span class="keyword">const</span> mediaUrl = _.compose(_.prop(<span class="string">&#x27;m&#x27;</span>), _.prop(<span class="string">&#x27;media&#x27;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> srcs = _.compose(_.map(mediaUrl), _.prop(<span class="string">&#x27;items&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> images = _.compose(_.map(img), srcs);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// new</span></span><br><span class="line">    <span class="keyword">const</span> mediaUrl = _.compose(_.prop(<span class="string">&#x27;m&#x27;</span>), _.prop(<span class="string">&#x27;media&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> images = _.compose(_.map(img), _.map(mediaUrl), _.prop(<span class="string">&#x27;items&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>再优化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> images = _.compose(_.map(_.compose(img, mediaUrl)), _.prop(<span class="string">&#x27;items&#x27;</span>));</span><br></pre></td></tr></table></figure>

<!-- 严格意义上的函数式编程意味着不使用可变的变量，赋值，循环和其他命令式控制结构进行编程。

由于命令式编程语言也可以通过类似函数指针的方式来实现高阶函数，函数式的最主要的好处主要是不可变性带来的。没有可变的状态，函数就是引用透明（Referential transparency）的和没有副作用。

函数式编程是给软件开发者提供的另一套工具箱，为我们提供了另外一种抽象和思考的方式。  -->


<h1 id="函数式和面向对象对比"><a href="#函数式和面向对象对比" class="headerlink" title="函数式和面向对象对比"></a>函数式和面向对象对比</h1><p>面向对象编程思想，<code>封装</code> <code>继承</code> <code>多态</code>。</p>
<p>把状态的改变封装起来，让代码更加清晰，通过类与继承去处理关联关系。但是会充满公用变量，<code>this</code>，<code>bind</code>等。</p>
<p>面向对象目前更加广泛，而且更容易被接受，写起来更容易，但可能会有更多冗余的代码，捆绑了很多状态，典型的问题是 <strong>你只需要一个香蕉，但是却得到一个拿着香蕉的大猩猩以及整个丛林。</strong></p>
<hr>
<p>函数式编程思想，尽量减少不确定因素，来让代码更加清晰健硕。</p>
<p>每个函数都不要去修改原有的数据，而是通过产生新的数据来做为运算结果，_这也意味着函数式比较耗资源，所以在计算机石器时代并不流行_。</p>
<p>简单来说就是很多小的纯函数，一个小函数只做一些事情，然后用这些小函数来组织成更大的函数，函数的参数与返回值也大部分都是函数。<br>最后能得到一个超级牛逼的函数，我们只要把数据给他，就可以了。</p>
<p>函数式简洁，清晰可复用性高，出错几率更小。但是一开始思维很难从面向对象或命令式转换过来，往往也需要借助一些工具库来编写。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这里只提了函数式编程的一些思想，但是真正函数式开发还包含很多其他要学的。比如我们用到的<code>柯里化curry</code>还有<code>代码组合compose</code>等，光<code>RxJs</code>提供的api就有179个之多…</p>
<p>再者不知道是不是对函数式的理解不够透彻，有试过某个需求用函数式的思想去写，但是有点好像硬掰的样子，写的有点不伦不类….所以现在只是吸收一些函数式的思想（比如纯函数减少不确定性），但是平时工作不会很刻意全部都用函数式去写。只是当成一个可以扩展的知识面，后面如果函数式真的在前端流行起来，再上手也不迟。</p>
<p>顺路感慨JS的灵活性，既有ES6面向对象的特性<code>class</code>也有ES5的 <code>filter</code>、<code>map</code>、<code>reduce</code>，以及ES.Next的装饰器(Decorator)等函数式编程的特性。</p>
<p>最后再给出参考的以及学习过程看到的一些不错的书籍和文章:</p>
<p><a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese">JS 函数式编程指南</a><br><a href="https://www.amazon.cn/dp/B07CXZ9D8N/ref=sr_1_1?ie=UTF8&qid=1535945880&sr=8-1&keywords=%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BARxjs">深入浅出Rxjs</a><br><a href="https://www.amazon.cn/dp/B014SCOQA0/ref=sr_1_1?ie=UTF8&qid=1535945728&sr=8-1&keywords=%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4">函数式编程思维</a><br><a href="https://juejin.im/post/5950b0c56fb9a06bca0b7c04">命令式、声明式、面向对象、函数式、控制反转之华山论剑（上）</a><br><a href="https://github.com/ReactiveX/rxjs">RxJs 响应式代码库</a><br><a href="https://github.com/ramda/ramda">Ramda 函数式工具库</a><br><a href="https://www.haskell.org/">Haskell 纯函数式编程语言</a><br><a href="https://www.zhihu.com/question/28292740">什么是函数式编程思维</a><br><a href="http://pinggod.com/2016/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%9C%AF%E8%AF%AD%E8%A7%A3%E6%9E%90/">函数式编程术语解析</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>FP</tag>
      </tags>
  </entry>
  <entry>
    <title>一道赋值面试题引发的思考</title>
    <url>/circular-reference/</url>
    <content><![CDATA[<p>本篇主要说一些基础知识点，关于多项赋值顺序，对象引用等，期间插入一点es6只是以及解决问题的思路。</p>
<p>开头先来做一道面试题</p>
<h2 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">a.x=a=&#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.x);</span><br><span class="line"><span class="built_in">console</span>.log(b.x);</span><br></pre></td></tr></table></figure>

<p>最后输出的是什么？ 先不说答案，我们来分析一下</p>
<p>L2(第二行) 我们把a赋值给b， 由于a是对象类型，这就意味着b和a指向同一个内存地址</p>
<p>L3 <code>a.x = a = &#123; n: 2&#125;</code></p>
<p>这里我们有个疑惑，这句语句执行顺序是 <code>a = &#123;n: 2&#125; &amp;&amp; a.x = &#123;n:2&#125;</code> 还是 <code> a.x = &#123;n:2&#125; &amp;&amp; a= &#123;n:2&#125;</code> 还是这种 <code>a = &#123;n: 2&#125; &amp;&amp; a.x = a </code></p>
<p>我们这里可以借助 <code>Object.defineProperty</code> 或 ES6的 <code>Proxy</code>来验证多项赋值的顺序是怎样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, value, r</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value)</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;a&#x27;</span>) <span class="built_in">Reflect</span>.set(target, key, <span class="string">&#x27;isA&#x27;</span>, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Reflect</span>.set(target, key, value, r);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.b = obj.a= &#123;<span class="attr">n</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// &quot;a&quot; &#123;n: 1&#125;</span></span><br><span class="line"><span class="comment">// &quot;b&quot; &#123;n: 1&#125;</span></span><br><span class="line"></span><br><span class="line">obj.a; <span class="comment">// isA</span></span><br><span class="line">obj.b; <span class="comment">// &#123;n: 1&#125;</span></span><br></pre></td></tr></table></figure>

<p>所以我们可以得出 赋值的顺序是从右边开始到左边的。而且是直接 <code>a = &#123;n: 1&#125;, a.x = &#123;n:1 &#125;</code>，而不是 <code>a.x = a</code> 这样去赋值</p>
<p>现在我们再借助 Proxy 来分析一开始part1这道题，用obj.a, obj.b 来代替原题目的 a和b。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;key&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;key&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.a = &#123;<span class="attr">n</span>: <span class="number">1</span> &#125;;<span class="comment">// getting a;</span></span><br><span class="line">obj.b = obj.a; <span class="comment">// getting a; setting b;</span></span><br><span class="line">obj.a.x = obj.a = &#123;<span class="attr">n</span>:<span class="number">2</span> &#125;; <span class="comment">// getting a; setting a;</span></span><br></pre></td></tr></table></figure>
<p>可以看到 <code>obj.a.x = obj.a = &#123;n: 2&#125;</code>这段语句执行时，会先输出一个 <strong>getting a</strong> 再输出 __setting a__。<br>这就意味着在对 <code>obj.a.x</code> 赋值时，程序是先获取 <code>obj.a</code>指向的对象的内存地址，此时触发了 __getting a__，然后再对右边 <code>obj.a</code> 进行赋值，触发了 __setting a__， 赋值完最后一步才是对 <code>obj.a.x</code>赋值 <code>&#123;n:2 &#125;</code>。</p>
<p><strong>重点: 在对obj.a.x赋值的时刻已经获取了obj.a该对象指向的内存地址，所以后面a就算指向其他地址，也和这里的obj.a.x无关。此时指向该地址的还有obj.b</strong></p>
<p>我们再用三张图来捋一捋整理的思路</p>
<p>执行 <code>obj.a = &#123;n: 1&#125;; obj.b = obj.a</code>后obj对应的引用是这样的<br><image src="./init.png" width="600"><br><br /><br /></p>
<p>执行 <code>obj.a.x = xxx</code> 时<br><image src="./obj.a.x.png" width="600"><br><br /><br /></p>
<p>执行<code>obj.a.x = obj.a = &#123;n:2&#125;</code> 后<br><image src="./result.png" width="600"><br><br /><br /></p>
<p>至此，这道面试题相信大家都有答案了，可以自己去控制台验证一下。 假如这时候再执行 <code>obj.a.n = 3</code>， 打印<code>obj.b</code>会输出什么呢？</p>
<h2 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h2><p>接下来我们来看另一道题，关于对象循环引用的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">n</span>: <span class="number">1</span>&#125;</span><br><span class="line">a.b = a;</span><br></pre></td></tr></table></figure>

<p>这里的a明显是循环引用，那么我们要怎样才能判断一个对象是否是循环引用呢？</p>
<p>其实这道题我一开始除了递归判断外没有很好的解决方案，后面是群里一个叫<code>话费</code>的大佬说(这道题也是他出的)直接用 <code>JSON.stringify</code>，微信小游戏的源码里面就是这么去判断。</p>
<p><code>JSON.stringify</code> 如果遇到参数里有循环引用的，就会抛出一个循环调用的错误 <strong>Uncaught TypeError: Converting circular structure to JSON</strong> </p>
<p>那如果不用JSON.stringify或者想要自己实现一个去检测循环调用，该怎么写呢？（面试官和部门前端leader最喜欢这么问）</p>
<p>一般遇到这种，最简单的方法就是去找这个方法的 polyfill， <a href="https://github.com/bestiejs/json3">json3</a>。我找的是 json3的 polyfill 里面大概是遍历对象存到stack数组，再在解析的时候去判断是否有循环引用的情况。 <a href="https://github.com/bestiejs/json3/blob/master/lib/json3.js#L482">json3.js#L482</a></p>
<p>照着他的思路大概写了一个，其实就是前面说到的简单递归判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len;</span><br><span class="line">    <span class="keyword">for</span> (len = stack.length; len--;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack[len] === obj) <span class="keyword">throw</span> <span class="built_in">TypeError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = obj[k]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) fn(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一次讲关于语言知识点的，如果发现有错误的地方 欢迎指出~<br>最后谢谢惠顾，请笑纳</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>视频转字符画</title>
    <url>/video-to-chat/</url>
    <content><![CDATA[<p>先看一下效果，原视频是这样的</p>
<p><video src="../2018-07-27/b_1.mp4" width="300" controls ></video></p>
<p>我们要实现的效果是这样子的，之所以找这个视频是因为…这个视频和背景的对比度比较高做出来比较有辨识度，没有其他的意思 ( *・ω・)✄╰ひ╯</p>
<p><video src="../2018-07-27/b.mp4" width="300" controls ></video></p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><img data-src="./wechat.png" width="300">
某天一个基友在群里问我，在抖音看到一种视频，问我是不是能实现。我说可以的~ 
于是当天晚上花了一个多小时折腾了一个粗糙版本... 

<p>先把视频丢到部门技术群问有没有关键字，给了一个keyword <strong>图片转字符串</strong> 于是照着这个思路去gayhub找资源拼乐高！</p>
<h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><ul>
<li>第一步我们通过 <code>input[type=&quot;file&quot;]</code> 获取文件</li>
<li>拿到文件之后，用 <code>URL.createObjectURL</code>来获取视频的路径</li>
<li>通过 <code>ctx.drawImage</code> 我们可以把某个 video 当前的图像渲染到 canvas里面</li>
<li><code>ctx.getImageData</code> 可以获取当前canvas 里面图片的色值，利用公式计算出灰度</li>
<li>根据灰度的深浅去匹配要显示的字符，深色匹配比较密集的字符，最浅的直接用空格代替，然后用 <code>ctx.fillText</code>重绘进去</li>
<li>设置 <code>video.currentTime</code> 来获得视频的某一时刻图像，重复上述重绘过程<!-- 灰度超过某个值用#，低于某个值用 · 代替 --></li>
</ul>
<p>既然大概的思路已经理清，接下来就是具体的编码，把想法写出来的过程</p>
<h2 id="具体编码实现"><a href="#具体编码实现" class="headerlink" title="具体编码实现"></a>具体编码实现</h2><h3 id="获取视频文件"><a href="#获取视频文件" class="headerlink" title="获取视频文件"></a>获取视频文件</h3><p>首先我们先确定下html需要哪些元素</p>
<ol>
<li>一个 input[type=”file”] 用来给用户上传的</li>
<li>一个 video 用来承载上传的video</li>
<li>一个 canvas 用来展示最终的结果</li>
</ol>
<p>大概是长这样：</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputFile&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.mp4&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvasShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来js文件，我们要先对 input 绑定个监听事件，拿到文件url之后设置给video<br>这里要注意两点，一个是 <code>url</code>用完不用的话，用 <code>URL.revokeObjectURL</code> 释放资源； 一个是我们这里用了 <code>await</code> 在domVide.onCanplay之前不做任何操作，防止视频没有加载完就操作，有黑屏风险。</p>
<p>如果对 es6、es7、es8不熟悉的小伙伴要去补一下了~ 现在基本不会这些基本语法都看不懂demo= =<br>附上<a href="http://es6.ruanyifeng.com/">阮一峰老师的ES6教程</a>，又想起面试被问ES7有什么新特性 简直是*了狗</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="code"><pre><span class="line">domInput.addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">async</span>(&#123;<span class="attr">target</span>: &#123;files &#125;&#125;)=&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = files[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> url = URL.createObjectURL(file);</span><br><span class="line">  domVideo.src = urlrl;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> domVideo.addEventListener(<span class="string">&#x27;canplay&#x27;</span>, res));</span><br><span class="line">  <span class="comment">// next ====&gt;  handleVideoInit()</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="将视频渲染到canvas"><a href="#将视频渲染到canvas" class="headerlink" title="将视频渲染到canvas"></a>将视频渲染到canvas</h3><p>拿到视频之后，我们要把当前这一个时刻的图像渲染到canvas里面<br>先用<code>ctx.drawImage(video, 0, 0, width, height)</code> 把video dom当前屏渲染进canvas<br>再用<code>ctx.getImageData(0, 0, width, height)</code> 获取图片的色值来做处理<br>可以通过调整 <code>img2Text</code> 来选择渲染出来的图片是想要怎样的(由哪些字符组成等等)<br>比如把 textList改为 [‘Aa’, ‘Bv’, ‘Cc’, ‘Dd’, ‘#’, ‘&amp;’, ‘@’, ‘$’, ‘*’, ‘?’, ‘;’, ‘^’, ‘·’, ‘·’, ‘·’, ‘·’]，辨识度会高一点</p>
<figure class="highlight javascript"><figcaption><span>index.js handleVideoInit</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">domVide =&gt; video元素</span></span><br><span class="line"><span class="comment">size =&gt; 存放video等元素的长宽</span></span><br><span class="line"><span class="comment">canvasVideo =&gt; 存放video当前的图像的canvas</span></span><br><span class="line"><span class="comment">canvasShow =&gt; 存放最后展示效果的canvas</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> size = &#123;<span class="attr">w</span>: <span class="number">0</span>, <span class="attr">h</span>: <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> canvasVideo = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleVideoInit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  domVideo.currentTime = <span class="number">0</span>;</span><br><span class="line">  size.w = domVideo.width = canvasVideo.width = canvasShow.width = domVideo.videoWidth * <span class="number">.5</span>;</span><br><span class="line">  size.h = domVideo.height = canvasVideo.height = canvasShow.height = domVideo.videoHeight * <span class="number">.5</span>;</span><br><span class="line">  video2Img();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">video2Img</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; w, h &#125; = size;</span><br><span class="line">  ctxVideo.drawImage(domVideo, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = ctxVideo.getImageData(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">  ctxShow.clearRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> _h= <span class="number">0</span>; _h&lt; h; _h+= <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> _w= <span class="number">0</span>; _w&lt; w; _w+= <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = (_w + w * _h) * <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">const</span> r = data[index + <span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> g = data[index + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> b = data[index + <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">const</span> gray = <span class="number">.299</span> * r + <span class="number">.587</span> * g + <span class="number">.114</span> * b;</span><br><span class="line">      ctxShow.fillText(img2Text(gray), _w, _h + <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">img2Text</span>(<span class="params">g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> i = g % <span class="number">16</span> === <span class="number">0</span> ? <span class="built_in">parseInt</span>(g / <span class="number">16</span>) - <span class="number">1</span> : <span class="built_in">parseInt</span>(g/ <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27; &#x27;</span>][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这一步，其实已经实现了把一张图片变为字符填充图了,剩下的工作无非就是把视频变成一张张的图片，然后重复执行这些逻辑</p>
<h3 id="持续调用渲染字符视频"><a href="#持续调用渲染字符视频" class="headerlink" title="持续调用渲染字符视频"></a>持续调用渲染字符视频</h3><p>我们改一下  video2Img 函数，将其实现为能持续调用的形式， 再添加一个函数 <code>clear</code> 用来清理垃圾</p>
<p>这里用到的是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">window.requestAnimationFrame</a> 去持续调用</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">video2Img</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  timePoint= <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  curT= <span class="built_in">Date</span>.now(),</span></span></span><br><span class="line"><span class="params"><span class="function">  prevT= <span class="built_in">Date</span>.now(),</span></span></span><br><span class="line"><span class="params"><span class="function">  prevInterval,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; w, h &#125; = size;</span><br><span class="line">  ctxVideo.drawImage(domVideo, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">  drawOnce();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _interval = <span class="built_in">Math</span>.max((curT - prevT), <span class="number">16</span>) / <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">if</span> (curT - prevT !== <span class="number">0</span>) _interval -= prevInterval;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span>=&gt;</span> <span class="built_in">setTimeout</span>(res, _interval*<span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">const</span> nextTimePoint = _interval + timePoint;</span><br><span class="line">  <span class="keyword">if</span> (nextTimePoint &gt; domVideo.duration) <span class="keyword">return</span> clear();</span><br><span class="line"></span><br><span class="line">  tId = <span class="built_in">window</span>.requestAnimationFrame(<span class="function">()=&gt;</span> video2Img(&#123;</span><br><span class="line">    <span class="attr">timePoint</span>: nextTimePoint,</span><br><span class="line">    <span class="attr">prevT</span>: curT,</span><br><span class="line">    <span class="attr">curT</span>: <span class="built_in">Date</span>.now(),</span><br><span class="line">    <span class="attr">prevInterval</span>: _interval,</span><br><span class="line">  &#125;));  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawOnce</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = ctxVideo.getImageData(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">  ctxShow.clearRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> _h= <span class="number">0</span>; _h&lt; h; _h+= <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> _w= <span class="number">0</span>; _w&lt; w; _w+= <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = (_w + w * _h) * <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">const</span> r = data[index + <span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> g = data[index + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> b = data[index + <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">const</span> gray = <span class="number">.299</span> * r + <span class="number">.587</span> * g + <span class="number">.114</span> * b;</span><br><span class="line">      ctxShow.fillText(img2Text(gray), _w, _h + <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;w, h&#125; = size;</span><br><span class="line">  lastUrl &amp;&amp; URL.revokeObjectURL(lastUrl);</span><br><span class="line">  tId &amp;&amp; <span class="built_in">window</span>.cancelAnimationFrame(tId);</span><br><span class="line">  ctxShow.clearRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">  ctxVideo.clearRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="源码与demo"><a href="#源码与demo" class="headerlink" title="源码与demo"></a>源码与demo</h2><p>至此，功能基本都实现了，下面提供在线的呆毛和github仓库地址~</p>
<h3 id="在线呆毛"><a href="#在线呆毛" class="headerlink" title="在线呆毛"></a><a href="/demo/video2char/index.html">在线呆毛</a></h3><h3 id="github-源码"><a href="#github-源码" class="headerlink" title="github 源码"></a><a href="https://github.com/jsonz1993/wheel/tree/master/video2char">github 源码</a></h3><p>video转图片忘了是在github看哪个项目的，<code>ctx.drawImage(video, 0, 0, width, height)</code>这个是看完才知道的。</p>
<p>图片转字符基本是看这个大哥的<a href="https://github.com/Leo-0/img2Char">github</a></p>
<p>在找方案的时候看到的一个像素图实现，挺有趣的，以前实现马赛克是拿周围像素值取平均去做，这个哥们是直接放大截图 更简单粗暴<a href="https://segmentfault.com/a/1190000007977592">传送门</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-07-27 小记</title>
    <url>/2018-07-27/</url>
    <content><![CDATA[<p>上一篇文已经是一个月前的，还是改不了懒的习惯</p>
<p>习惯性对最近做一些总结，关于面试，关于工作上，关于最近学习的东西。</p>
<h2 id="关于面试"><a href="#关于面试" class="headerlink" title="关于面试"></a>关于面试</h2><p>记得从四月尾就一段时间去面一次，现在已经确定继续留在租租车。顺路捣鼓一些东西，考考专升本。</p>
<p>自荔枝之后面了四家</p>
<ul>
<li>cvte</li>
<li>阿里外包</li>
<li>YY</li>
<li>车主无忧</li>
</ul>
<h3 id="cvte"><a href="#cvte" class="headerlink" title="cvte"></a>cvte</h3><p>cvte 我都忘了有投他公司简历，一天晚上看书，突然就来了个电话说是xxxx的xxx，来进行电话面试。<br>然后就稀里糊涂聊了半个多小时，之后就说等hr电话。</p>
<p>hr电话聊了下加班情况，企业文化，福利等东西。</p>
<p>其实之前就一直听说cvte很封闭，又很传统，加班贼疯狂，企业文化又很那啥，所以打心里不会去那里</p>
<p>所以hr面的时候，也没有怎么回答，但是有一点是cvte居然是没有薪资保密的，所以我就顺路问了hr的薪资看是不是真的像他说的一样 薪资允许讨论。结果估计因为这个得罪了hr= =没有过hr面</p>
<h3 id="阿里外包"><a href="#阿里外包" class="headerlink" title="阿里外包"></a>阿里外包</h3><p>阿里外包其实是最意外的一家<br>是武汉一家公司联系上的，联系之后想着去试一下阿里的面试到底是怎样的 所以就答应了<br>hr非常的好，面试前再三叮嘱，也把面试官看完简历的反馈告诉了我<br>还让同事提前面我一轮，面完说 没什么问题</p>
<p>面试当天聊了下项目经验还有基础知识和一些问题的排查思路</p>
<p>本以为答的挺不错的，和面试官也聊得很愉快。后面面试官说去找老大来面，让我骚等片刻</p>
<p>过段时间后说老大在开会，让我回去等通知…现在想起才知道原来老大在开会是一个拒绝人的套路 图样图森破</p>
<p>去阿里面想起了一年前去面uc，那时候也面得很开心，后面得知是应聘外包岗就没怎么想继续下去…</p>
<p>但是阿里的面试官给我的感觉没有像一些小公司的人一样，给人的感觉是很亲切的。和我说如果想进某个大公司，最简单的方法就是参与该公司的开源项目，这是收获最大的一个点。</p>
<p>虽然过了不会去，但是总体来说还是很意外。</p>
<h3 id="车主无忧"><a href="#车主无忧" class="headerlink" title="车主无忧"></a>车主无忧</h3><p>车主无忧这个就比较尴尬了，是在公司同一栋…面试大概的感觉就是挺容易的，面试官问的问题都是针对项目经验，所以基本没有造假划水就没什么问题。<br>面三四轮，技术面面前端Leader，技术二面面部门负责人，然后就是cto面，面完hr和我说不能给我期望薪资<br>三年最多只能给xxk…说一开始以为我是有三年半经验，所以可以给四年的薪资<br>后面接了offer考虑下完全不值得跳就放弃</p>
<p>但是车主无忧有个题外话，和hr聊天聊很久，hr说 之前租租车有高级前端来面试给出的评价是很水，所以对我原本的不抱什么希望。但是技术面给的评价是很不错，所以有点惊讶租租车内部的水平差异大。</p>
<h3 id="YY-UED"><a href="#YY-UED" class="headerlink" title="YY UED"></a>YY UED</h3><p>面YY是最近最开心，收获最大的一次面试。<br>UED当时面试的时候只有四个前端，我总共面了五轮？基本上就是部门轮着人来虐我= =</p>
<p>一面和leader聊聊天，说一些场景的解决方案</p>
<p>然后就是笔试题，做完之后就是面三面。</p>
<p>三面和部门一个技术大牛聊聊天，聊框架居多，一个vue的人 对react了解比我深很多，这是挺佩服的<br>他有个评分标准，大概就是想招vue 6分以上，以写写demo看看api为1分；能保证项目正常上线5分；熟悉整个框架结构原理，遇到问题能准确知道是在哪个环节出问题，对整个生命周期及运转很熟悉为6分；对整个vue生态都很了解，精准到每次迭代改动的源码部分，还有vuex等生态也很关注为10分。<br>大牛说我是面过的同等工作年限的中上水平，这句话让我开心了好久好久….哈哈哈哈<br>给出的评价是各方面都很均衡，没什么明确的缺点，但是这也意味着没有一个能拿出来讲的有深入研究的方向。<br>最后让我回去等通知</p>
<p>几天后hr打电话说过去面试，开心。<br>四面是部门另一个前端面试，聊了一些基础知识吧，还有一些场景和概念性的问题。<br>具体问什么忘了，只记得聊的也挺愉快的。面完之后是leader下来闲聊一下，问还有什么问题，没有就面hr了</p>
<p>hr面是在yy面试最累的一个，全程hr拿着小本本，边问边记。可能是前面和技术小伙伴聊得比较open，到hr这边突然变得谨慎了，所以面完hr之后 整个人都好累。也是很传统的问了以前的公司，为什么跳槽啊之类的。 有一些不一样的就是问我怎么保证有持续的产出和能保持高效长期学习，因为UED是需要不断的探索前瞻技术的，还有就是问我有没有blog，多少人订阅…emmmm 我说我的博客没人订阅没人看，自己写着玩 🤦‍</p>
<p>过了几天后hr打电话聊offer，总体来说比现在的高了不少，算是很满意的一个offer了。</p>
<p>本来铁了心要过去那边浪，毕竟部门的同事基本都见了一遍 哈哈哈哈，然后offer又比较心水。</p>
<p>后面因为个人原因选择继续留在租租车，但是如果在以后有机会，还是会优先考虑yy的。</p>
<h2 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h2><h3 id="项目拆包"><a href="#项目拆包" class="headerlink" title="项目拆包"></a>项目拆包</h3><p>既然选择留在租租车，肯定就不能像之前半年划划水就过去</p>
<p>最近工作上主要负责的是，想着把部门的项目做个拆包</p>
<p>原本小项目慢慢迭代成很大的项目，一次打包要花半个小时….加上现在目录的问题，每天过来都要打一个全量包。</p>
<p>所以现在的计划是，对项目模块进行拆包，一个模块独立成一个项目，有自己的node_models，但是共用一个git。</p>
<p>这个其实从半年前就有人提出来，但是太难搞了 所以一直没人去推</p>
<p>首先要考虑的是部门不可能停掉日常迭代，来等你拆包。而且你的需求也不会因为这个技术需求而减少，所以要在平时做需求的间隙做这件事情。</p>
<p>尽可能把路径替换，文件迁移等做成脚本去跑，不然做不下去。<br>而且拆包之后，要考虑后端的模板路径问题还有部署的问题，加上一些前端 pwa,amp的构建考虑<br>真是个大工程…</p>
<p>最近的成果是本地能跑起来，但是还缺一个 本地服务，加上还没有和后端，部署那块沟通。</p>
<p>任重道远</p>
<h3 id="下半年的指标"><a href="#下半年的指标" class="headerlink" title="下半年的指标"></a>下半年的指标</h3><p>下半年，老大给定的技术指标是React和Webpack两项</p>
<p>其实原本给的是Http和浏览器内核，但是我觉得说现在我去了解那两块没什么大的收获。</p>
<p>加上在yy面试之后，面试官一直给的评价是没有一个很深入的点，所以就选了React去做深入的方向。</p>
<p>React探索之余了解Webpack和 PWA部分</p>
<h3 id="关于webpack"><a href="#关于webpack" class="headerlink" title="关于webpack"></a>关于webpack</h3><p>前几天有个需求是项目上用到的cookie都要记录到某个文档里面，一开始想着写一个webpack插件去做这件事情。 项目的webpack是3.x，官方的文档全都升级到4.x，一开始有点蛋疼，也没有一个比较适合入门的demo，要不就是太简单，要不就是很复杂的。</p>
<p>后面终于大概跑了起来，但是跑起来之后，发现和预想的不一致。为什么呢？</p>
<p>文档需要记录的是 key value description, 举个例子<br>cookie.set(‘name’, ‘jsonz’, ‘用户名’);</p>
<p>我的方案是在webpack编译的时候拿到babel转义和代码压缩优化之前的内容，因为项目上涉及到cookie的操作都会用一个 <code>cookie-js</code> 的类库，所以可以利用这个做为切入点。</p>
<p>大概的思路是： webpack生命周期里面去拿到源文件，然后用一个语法分析树，解析成AST，再根据类型去筛选出 cookie-js 函数调用传入的参数</p>
<p>本来觉得天衣无缝，但是理想很天真，实际项目上五花八门，比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookie <span class="keyword">from</span> <span class="string">&#x27;Cookie-js&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;Cookie-js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = IS_DEV? <span class="string">&#x27;_name&#x27;</span>: <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> value = <span class="built_in">JSON</span>.parse(Cookie.get(<span class="string">&#x27;obj&#x27;</span>)).name;</span><br><span class="line">Cookie.set(key, value, <span class="string">&#x27;名字&#x27;</span>);</span><br><span class="line"></span><br><span class="line">cookie.set(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jsonz&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>所以其实如果真的要用脚本记录，只能在运行环境下记录，所以放弃这个方案….</p>
<h2 id="关于捣鼓"><a href="#关于捣鼓" class="headerlink" title="关于捣鼓"></a>关于捣鼓</h2><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>前段时间是自己捣鼓了一个小程序，用来给每天做计划的。大概长这样<br><img data-src="/2018-07-27/wechat.jpeg" alt="wechat 小程序"></p>
<p>技术栈:<br>前端: 用的是美团的 mpvue，暂时发现其实和写vue很多不一样，因为有很多可能是小程序的局限问题，也可能是转换问题，n多莫名其妙的bug而且还无法正面干。</p>
<p>后端:<br>Node: 做主要服务端语言，用的阿里Egg.js框架<br>MySQL: 为什么选择MySQL而不是前端(node)惯用的mongodb呢？ 主要原因有两个，一个是mongo体验过了；一个是现在业界其实mySql还是占绝大多数，而且比较成熟，想体验一波关系型数据库。</p>
<p>服务器：<br>Nginx: 没什么好说的，对于一个没有折腾过的人来说还是挺开心的<br>Centos</p>
<p>看起来是挺简单的，但是对于个人学习来说是个挺好的项目。特别是一个完全没有真正捣鼓过后端，服务端的人来说，真的很happy，比单纯写前端要考虑的事情多很多。</p>
<p>但是最近因为工作的事情，暂时搁置一边，目前还是 0.0.1 可以用最简单的计划的功能。后面拆包完成之后就回来加功能再发布</p>
<h3 id="图片转字符"><a href="#图片转字符" class="headerlink" title="图片转字符"></a>图片转字符</h3><p>前几天有高中好朋友在群里发一个视频，问我们说真的是可以这样的吗？<br><video src="./a.mp4" controls ></video><br>原视频是死肥宅都知道的极乐净土，然后我觉得很有趣，就问公司群这种怎么实现，大概是图片转字符串</p>
<p>于是就去搜了一下 canvas 转字符串，再找了下怎么把视频转图片 🤦‍没错，我就是大自然的搬运工</p>
<p>最后实现出来大概是这样子<br><video src="./b.mp4" width="300" controls ></video></p>
<p>大概的实现思路是 通过video和canvas把视频逐帧丢到canvas里面，再用canvas读出每个像素的灰度去匹配一个字符串，然后用这些字符串重写一个canvas出来。</p>
<p>后面有时间再把这个整理成一篇文章出来</p>
<h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p>最近是有点懒惰了，专升本一直看离散数学，原本预计7月份要看完顺路做一套题，现在怕是要延迟一个星期最少。<br>看完还有万恶的网络原理和数据库原理…</p>
<p>加油💪</p>
<p>最后附上周末团建的图<br><img data-src="./c.jpg" width="400" /></p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title>window.print——关于浏览器打印</title>
    <url>/window-print%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%8D%B0/</url>
    <content><![CDATA[<p>近日有个需求是做页面打印的，趁这个机会补一下比较冷门的浏览器打印知识。本文主要讨论 Chrome、Safari、Firefox浏览器的情况。</p>
<h2 id="打印接口"><a href="#打印接口" class="headerlink" title="打印接口"></a>打印接口</h2><p>首先浏览器打印是一个很成熟的应用~ 至少是很早就已经有应用的功能，所以不会有什么兼容问题</p>
<p>最简单的打印就是直接调用 <code>window.print()</code>，当然用 <code>document.execCommand(&#39;print&#39;)</code> 也可以达到同样的效果。</p>
<p>这时候在Safari和Chrome都会弹起打印预览的窗口,FireFox没有预览而是直接让你选择打印机，OSx下可以通过预览PDF来预览~</p>
<p>一般这种直接在网页上调用 print 的方法是没办法满足我们的业务需求，比如说：</p>
<ul>
<li>调整布局和字体大小来适应A4纸</li>
<li>打印的时候用不同的样式风格</li>
<li>使用更高清的图片来打印</li>
<li>某一些不相关的东西不出现在打印中等等等等</li>
</ul>
<p>那么有哪些方法可以帮助我们改善打印的用户体验呢？</p>
<h2 id="使用-print-style-sheet-打印样式表"><a href="#使用-print-style-sheet-打印样式表" class="headerlink" title="使用 print style sheet (打印样式表)"></a>使用 print style sheet (打印样式表)</h2><p>我们可以在 link 上加上一个 media=”print” 来标识这是打印机才会应用的样式表, 如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/example.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样打印的时候，就会默认将该样式表应用到文档中</p>
<h2 id="使用媒介查询"><a href="#使用媒介查询" class="headerlink" title="使用媒介查询"></a>使用媒介查询</h2><p>兼容性: IE9+ 其他主流浏览器都支持<br>当我们要修改的样式没有那么多的时候，其实完全不需要重新写个样式表，只要写上一个媒介查询也可以达到同样的效果，如:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><h3 id="beforeprint-amp-amp-afterprint"><a href="#beforeprint-amp-amp-afterprint" class="headerlink" title="beforeprint &amp;&amp; afterprint"></a>beforeprint &amp;&amp; afterprint</h3><p>有两个事件可以监听到到打印事件，一个是<code>beforeprint</code>,一个是<code>afterprint</code>，分别表示打印事件触发前后。<br>这个事件在 IE6 就已经支持了，不过一点都不惊讶~ 毕竟IE很早就支持很多接口调用，之前好像做过IE打开Excel的需求~<br>兼容大概是 Firefox、IE全支持, Chrome63+支持, Safari暂不支持，算是一半一半吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;beforeprint&#x27;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML = <span class="string">&#x27;正在打印...&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;afterprint&#x27;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML = <span class="string">&#x27;打印完成...&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="window-matchMedia-测试媒体查询接口"><a href="#window-matchMedia-测试媒体查询接口" class="headerlink" title="window.matchMedia 测试媒体查询接口"></a>window.matchMedia 测试媒体查询接口</h3><p>如果你想要兼容Safari或许可以试一下 <code>window.matchMedia</code><br>兼容是 IE10+，其他主流浏览器完全没问题。</p>
<p>这个的用法稍微有点不一样，首先创建一个MediaQueryList对象，再通过他监听变化，如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> printMedia = <span class="built_in">window</span>.matchMedia(<span class="string">&#x27;print&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printChange</span>(<span class="params">&#123; matches, &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML = matches? <span class="string">&#x27;正在打印...&#x27;</span>: <span class="string">&#x27;打印完成/取消&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">printMedia.addListener(printChange);</span><br></pre></td></tr></table></figure>

<h2 id="更加个性化定制打印区域-打印内容"><a href="#更加个性化定制打印区域-打印内容" class="headerlink" title="更加个性化定制打印区域/打印内容"></a>更加个性化定制打印区域/打印内容</h2><p>如果项目上用的是jq等，或者想简单粗暴的打印某个区域又不想重新写样式表啊，什么的。<br>最傻瓜版的方式就是直接用jq插件 <a href="https://github.com/DoersGuild/jQuery.print">jQuery.print</a></p>
<p>也可以自己写一个去处理，大概的思路是创建一个iframe，把要打印的dom和样式表都丢进去，再调用iframe的打印事件。 这里写一个简单的 <a href="https://github.com/jsonz1993/wheel/blob/master/print-partial/index.js">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPartial</span>(<span class="params">dom, &#123; title= <span class="built_in">document</span>.title,&#125;= &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!dom) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> copyDom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> styleDom = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;style, link, meta&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">  titleDom.innerText = title;</span><br><span class="line"></span><br><span class="line">  copyDom.appendChild(titleDom);</span><br><span class="line">  <span class="built_in">Array</span>.from(styleDom).forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">    copyDom.appendChild(item.cloneNode(<span class="literal">true</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  copyDom.appendChild(dom.cloneNode(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> htmlTemp = copyDom.innerHTML;</span><br><span class="line">  copyDom = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> iframeDom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> attrObj = &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">border</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">wmode</span>: <span class="string">&#x27;Opaque&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> styleObj = &#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&#x27;-999px&#x27;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;-999px&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">Object</span>.entries(attrObj).forEach(<span class="function">(<span class="params">[key, value]</span>)=&gt;</span> iframeDom.setAttribute(key, value));</span><br><span class="line">  <span class="built_in">Object</span>.entries(styleObj).forEach(<span class="function">(<span class="params">[key, value]</span>)=&gt;</span> iframeDom.style[key] = value);</span><br><span class="line">  <span class="built_in">document</span>.body.insertBefore(iframeDom, <span class="built_in">document</span>.body.children[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">const</span> iframeWin = iframeDom.contentWindow;</span><br><span class="line">  <span class="keyword">const</span> iframeDocs = iframeWin.document;</span><br><span class="line">  iframeDocs.write(<span class="string">`&lt;!doctype html&gt;`</span>);</span><br><span class="line">  iframeDocs.write(htmlTemp);</span><br><span class="line">  iframeWin.focus();</span><br><span class="line">  iframeWin.print();</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(iframeDom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printPartial(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#description&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>最后一些注意的事情</p>
<ul>
<li>打印会打印document下所有可见元素， 包括 <code>&lt;header&gt;</code> 里面的</li>
<li>背景都不会被打印出来，包括背景色啊背景图片啊等等</li>
<li>如果图片是懒加载的，需要特殊处理，不然打印的时候会直接空白</li>
</ul>
<p>参考:<br><a href="https://blog.csdn.net/fengshuiyue/article/details/57483057">https://blog.csdn.net/fengshuiyue/article/details/57483057</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/print">Mozilla print</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Printing#Using_a_print_style_sheet">Mozilla Using_a_print_style_sheet</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Browser</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP常用知识点总结</title>
    <url>/http-mini-book/</url>
    <content><![CDATA[<p>同样是因为面试的过程中，发现自己对http的一些概念和知识点和零碎，借此机会看了《HTTP小书》，顺手写了篇记录总结一些常见的http知识点。</p>
<h1 id="http-简介"><a href="#http-简介" class="headerlink" title="http 简介"></a>http 简介</h1><p>请求:<br>客户端软件打开到服务器的连接，发起请求如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hello.htm HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36</span><br><span class="line">Host: example.com</span><br><span class="line">Accept-Language: en-us</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure>

<p>响应:<br>服务端收到请求消息后根据资源定位符在服务器找到该资源，并响应给客户端:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 22</span><br><span class="line">ETag: W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</span><br><span class="line">Date: Tue, 22 May 2018 03:04:08 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Hello, Jsonz!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h2 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息"></a>请求消息</h2><p>请求信息一般由请求行、头部字段区、CRLF与消息主体（可选）组成</p>
<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求消息的第一行称为请求行，一般包括 <code>请求方法</code>， <code>请求资源标识符</code> 还有请求的<code>协议版本</code></p>
<blockquote>
<p>Request-List = Method SPACE Request-URI SPACE HTTP-Version CRLF</p>
</blockquote>
<p>请求方法比较常用的有 <code>GET</code>, <code>POST</code>。 这里用的是<code>GET</code> 发起一个请求获取资源</p>
<ul>
<li>GET 请求一个制定名称的资源</li>
<li>POST 创建一个新的子资源，或者更新一个存在的资源</li>
<li>PUT 指定的URL不存在则创建，存在则修改</li>
<li>DELETE 删除指定资源</li>
<li>OPTIONS 返回服务器支持的方法</li>
<li>CONNECT、TRACE</li>
</ul>
<blockquote>
<p>对于 POST 和 PUT的选择，作者给出的例子是创建订单<br>PUT /other/1 创建单号为1的订单，如果存在就更新他，订单号由客户端提供<br>POST /other 创建订单，订单号由服务端提供<br>POST /other/1 更新订单，如果不存在应该抛错<br>重复执行PUT请求不会影响服务器状态，而POST则会导致创建两个订单</p>
</blockquote>
<p>但是工作中，几乎只用过GET和POST，对于创建订单的例子中，PUT和POST的区别我的理解比较浅显，一个是客户端/服务端提供订单号，一个是语义化。</p>
<h3 id="头部字段"><a href="#头部字段" class="headerlink" title="头部字段"></a>头部字段</h3><p>从第二行到空行之间都属于头部字段区，用来传递更多详细的信息，这个案例里面是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36</span><br><span class="line">Host: example.com</span><br><span class="line">Accept-Language: en-us</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure>
<p>比如说这里:<br><code>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36</code> 我们可以知道客户端用的是 Mac OSx系统，Chrome v66.0.x版本的浏览器<br><code>Accept-Language: en-us</code> 语言是英语<br><code>Accept-Encoding: gzip, deflate</code> 支持的压缩编码为gzip和deflate</p>
<h3 id="空行-CRLF"><a href="#空行-CRLF" class="headerlink" title="空行(CRLF)"></a>空行(CRLF)</h3><p>空行也叫CRLF，是隔开请求头与请求主体的</p>
<h3 id="消息主体"><a href="#消息主体" class="headerlink" title="消息主体"></a>消息主体</h3><p>发送给服务端的消息，比如用POST方法提交表单时，表单的内容就是存在消息主体里面。如果是用GET方法就会丢到请求URL里</p>
<h2 id="响应信息"><a href="#响应信息" class="headerlink" title="响应信息"></a>响应信息</h2><p>响应信息和请求信息的组成结构相似，由状态行、头部字段行、空行（CRLF）和消息主体构成。</p>
<h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p><code>HTTP/1.1 200 OK</code></p>
<p>请求行一般由 <code>协议版本号</code>、<code>状态码</code>与<code>状态码描述</code>组成。</p>
<p>协议版本号有: 0.9、1.0、1.1、2.0等，目前比较流行的是2.0与1.1</p>
<p>状态码有以下几种类型，状态码和前端开发会比较相关一点，更具体的介绍后面会详细说</p>
<ul>
<li>1xx 信息提示</li>
<li>2xx 成功</li>
<li>3xx 重定向</li>
<li>4xx 客户端错误</li>
<li>5xx 服务端错误</li>
</ul>
<h3 id="头部字段-1"><a href="#头部字段-1" class="headerlink" title="头部字段"></a>头部字段</h3><p>状态行与空行之间就是响应头部字段了， 响应头比请求头功能相对来说多一点，比如后面会说到的<code>Set-Cookie</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Powered-By: Express</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 22</span><br><span class="line">ETag: W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</span><br><span class="line">Date: Tue, 22 May 2018 03:04:08 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>
<p>响应头包括一些服务本身的信息以及响应内容体的信息，比如这里的<br><code>Date: Tue, 22 May 2018 03:04:08 GMT</code> 是响应的时间<br><code>Content-Length: 22</code>是返回的消息体长度。</p>
<h3 id="空行-CRLF-1"><a href="#空行-CRLF-1" class="headerlink" title="空行(CRLF)"></a>空行(CRLF)</h3><p>和请求的CRLF是一样的，用来隔开响应头和响应内容主体</p>
<h3 id="响应消息主体"><a href="#响应消息主体" class="headerlink" title="响应消息主体"></a>响应消息主体</h3><p>在我们这个例子里面是一句很简单的 <code>&lt;h1&gt;Hello, Jsonz!&lt;/h1&gt;</code>，这里响应主体有很多种格式，如果是gif的话会返回gif的二进制字节集合</p>
<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><p>请求的结构组成Request:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request-Line CRLF</span><br><span class="line">*Request-HEAD CRLF</span><br><span class="line">CRLF</span><br><span class="line">[ message-body ]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Request-Line =&gt; Request-List = Method SPACE Request-URI SPACE HTTP-Version CRLF<br>这里我们主要Request-Methods部分</p>
</blockquote>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>GET 方法一般是用来获取URL指定的资源</p>
<h3 id="可以配合-Range-来获取局部资源。"><a href="#可以配合-Range-来获取局部资源。" class="headerlink" title="可以配合 Range 来获取局部资源。"></a>可以配合 <code>Range</code> 来获取局部资源。</h3><p>发起请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /index.txt HTTP/1.1</span><br><span class="line">Range: bytes=0-4</span><br></pre></td></tr></table></figure>

<p>服务端响应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Range: bytes 0-5/12</span><br><span class="line">Content-Length: 5</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>在一些视频的场景，比如用户点击到某个进度，我们可以直接从该进度去请求，而不是整一个视频都请求下来。<br>响应头的<code>Content-Range: bytes 0-5/12</code>指的是当前返回0-5，总长为12。</p>
<h3 id="配合-ETag-做缓存"><a href="#配合-ETag-做缓存" class="headerlink" title="配合 ETag 做缓存"></a>配合 ETag 做缓存</h3><p>服务端在响应头里面会给一个<code>ETag</code>标识，这个标识我们在开头的时候有说了是文件的唯一标识符。<br>那么我们是不是可以这么做，在GET请求时使用条件获取头部字段，如果服务端发现这个字段与文件的ETag标识匹配，则可以做缓存，否则发送新的文档过来。</p>
<p>发起请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hello.htm HTTP/1.1</span><br><span class="line">If-None-Match:  W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</span><br></pre></td></tr></table></figure>

<p>服务端响应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 304 Not Modified</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">ETag: W/&quot;16-dDTk/xb5lvRNBfrz6lE//HVBox8&quot;</span><br><span class="line">Date: Tue, 22 May 2018 12:08:23 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>

<p>这里我们的ETag与文件匹配上了，所以服务端直接响应 304 状态码(Not Modified);</p>
<h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>HEAD方法和GET方法的区别是 HEAD方法请求，响应的时候就只会发送响应消息的头部字段，不会把响应消息主体返回</p>
<p>那么HEAD的场景一般在什么地方呢？ 一般可用于发起一个请求来获取服务端的资源大小，再分段获取。</p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>我们平时大部分场景用的都是POST方法，因为POST方法不会把参数都丢在URL上，对请求的数据大小没有限制，请求也不会缓存。</p>
<h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><p>OPTIONS方法主要是用来查询URL指定的资源所支持的方法列表</p>
<p>发起请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPTIONS /hello.htm HTTP/1.1</span><br></pre></td></tr></table></figure>

<p>服务端响应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Allow: GET,HEAD</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 8</span><br><span class="line">ETag: W/&quot;8-ZRAf8oNBS3Bjb/SU2GYZCmbtmXg&quot;</span><br><span class="line">Date: Tue, 22 May 2018 12:20:42 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">GET,HEAD%</span><br></pre></td></tr></table></figure>

<p>这里列出了这个资源支持 GET与HEAD方法</p>
<h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><p>PUT方法上面讲了是 对URL指定的资源进行创建，如果存在就修改他。</p>
<p>理论上这种需求直接用POST方法就完全够用了，比如创建订单<code>POST /order/create</code><br>更新订单 <code>POST /order/orderId</code></p>
<p>但是这里如果改成PUT创建的话，可以直接这样 <code>PUT /order</code> 更符合Restful API规范，如果换成前端的层面来说，就像<code>div</code>与<code>header, nav, section, aside, footer</code>这些更有语义化的标签。</p>
<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>删除某个资源，没什么好说的</p>
<h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><blockquote>
<p>在当前已经建立HTTP连接的情况下，CONNECT 方法用来告知代理服务器，客户端想要和服务器之间建立SSL连接。</p>
</blockquote>
<blockquote>
<p>客户端使用如下消息，通知代理服务器，去做一个连接到指定的服务器地址和端口:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONNECT example.com 443 HTTP/1.1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代理服务器随后提取CONNECT 方法指定的地址和端口（这里是 example.com 443 ），建立和此服务器的SSL连接，成功后随后通知客户端，需要的连接建立完毕：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 OK </span><br></pre></td></tr></table></figure>

<p>使用CONNECT发起请求，服务端不会去解析字段等操作，而是完完全全单纯的做转发，我们称之为透明代理。</p>
<h2 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h2><p>查询到目标资源经过的中间节点。</p>
<h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><p>响应结构组成Response:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Response-Line</span><br><span class="line">*(header CRLF) </span><br><span class="line">CRLF</span><br><span class="line">[ message-body ] </span><br></pre></td></tr></table></figure>

<blockquote>
<p>Response-Line =&gt; HTTP-Version SPACE Status-Code SPACE Reason-Phrease CRLF<br>这里我们主要Status-Code部分</p>
</blockquote>
<h2 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h2><h3 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h3><p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。</p>
<p>比如客户端上传一些视频文件，可以先在请求头加一个<code>Expect: 100-continue</code> 如果服务端允许接收该文件（大小），就返回100，不允许则返回417状态码。</p>
<h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><p>2xx 系列都是表示请求已经成功处理了，这里列举几个比较常见的</p>
<h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h3><p>最常见的可能就是200了，平时写ajax很多都是直接判断 <code>xmlhttp.status==200</code>, 他代表的是请求已经成功完成</p>
<h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>201表示请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
<h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>202代表服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止</p>
<h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>服务器成功处理了请求，没有返回任何内容。</p>
<h3 id="206-Partical-Content"><a href="#206-Partical-Content" class="headerlink" title="206 Partical Content"></a>206 Partical Content</h3><p>206主要是为了支持大文件的分段下载，类似迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
<p>这里用书里的一个例子来展示,先用 HEAD 获取该资源的大小，再用Range分段获取，这些方法上面都有介绍过，这里综合起来运用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HEAD /large.jpg HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 4000</span><br><span class="line"></span><br><span class="line">Get /large.jpg HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Range: bytes=0-1999</span><br><span class="line"></span><br><span class="line">HTTP/1.1 206 Partical Content</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 2000</span><br><span class="line">Content-Range: bytes 0-1999/4000</span><br><span class="line"></span><br><span class="line">&#123;binary data&#125;</span><br><span class="line"></span><br><span class="line">GET /large.jpg HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Range: bytes=2000-</span><br><span class="line"></span><br><span class="line">HTTP/1.1 206 Partical Content</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 2000</span><br><span class="line">Content-Range: bytes 2000-3999/4000</span><br><span class="line"></span><br><span class="line">&#123;binary data&#125;</span><br></pre></td></tr></table></figure>

<p>2xx 很多只是规范与语义化的区别。</p>
<h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><p>3xx系列除了 304 以外，其他都是用于重定向的</p>
<h3 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h3><p>300是请求的资源有一系列可供选择的回馈信息，用户或浏览器能够自行选择一个首选的地址进行重定向。</p>
<h3 id="301-Moved-Permanently-amp-amp-302-Found"><a href="#301-Moved-Permanently-amp-amp-302-Found" class="headerlink" title="301 Moved Permanently &amp;&amp; 302 Found"></a>301 Moved Permanently &amp;&amp; 302 Found</h3><p>301 与 302 都代表当前访问的URL对应的资源被移动到一个新的位置，这个位置会在响应头Location内指定。<br>他们的区别是 301是永久被移动到新位置，而302是暂时性的临时重定向</p>
<h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h3><p>304我们在前面已经有见到过了，用ETag与If-None-Match配合做缓存时，就会返回304 代表该资源未被修改，可以继续用以前下载的副本。</p>
<h2 id="400"><a href="#400" class="headerlink" title="400"></a>400</h2><p>400指的是客户端错误，既服务端接收到该请求，但是收到的请求无法处理,这里列出常见的几种</p>
<h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求</p>
<h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>401既未认证，应该是最简单的用户认证登录系统了。与403不同，这里如果用户提供必要的凭据，就可以访问资源。</p>
<h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。项目中的经验就是，如果用户登录状态过期，后台返回403状态码，这时候我们再去执行自动登录或者提示登录的逻辑。</p>
<h3 id="404-Not-Fount"><a href="#404-Not-Fount" class="headerlink" title="404 Not Fount"></a>404 Not Fount</h3><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。这个可能是最常见的4xx状态码</p>
<h3 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h3><blockquote>
<p>客户端发起了条件请求，服务器发现这个请求中的其中一个条件并不成立，那么服务器就会用此错误码作为响应消息的状态码返回给客户端。<br>比如我们在请求头设置条件限定:<code>If-Unmodified-Since</code>，如果服务端校验这个条件，发现说没有满足的话，就会返回 412 状态码。</p>
</blockquote>
<h2 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h2><p>400是客户端错误，500就是服务端的错误状态码。</p>
<h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>500为通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息，一般开发者可以查日志等去解决该错误。</p>
<h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><blockquote>
<p>说明服务器现在无法提供服务，但是将来可以。如果服务器知道何时资源可用，应该在响应中包含Retry-After的首部，提示客户端可以重试服务的时间。<br>如果没有提供Retry-After头部，那么客户端应当以处理500响应的方式处理它。</p>
</blockquote>
<p>以上是觉得比较常见的状态码，更多请见<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">维基百科</a></p>
<h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p>一般我们在服务端响应可以加上这个响应头<code>Cache-Control: max-age=2592000</code> 来让浏览器把这个资源缓存下来，缓存的时间为<code>2592000</code>既30天，也可以在时间后面加上个<code>public</code>来指示该响应可以被任何中间人（cdn,代理)缓存。</p>
<h1 id="消息主体-1"><a href="#消息主体-1" class="headerlink" title="消息主体"></a>消息主体</h1><p>在请求消息或响应消息里面，都可以包含一个可选的消息主体，服务端或客户端都没办法从消息主体里面获取是什么内容啊，什么类型啊什么的，所以就会有一组头部字段来标示他。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type 实体中所承载对象的类型,如 txt/html; image/jpeg</span><br><span class="line">Content-Length 所传送实体主体的长度或大小。</span><br><span class="line">Content-Language 与所传送对象最相配的人类语言, en-us等</span><br><span class="line">Content-Encoding 对象数据所做的压缩格式,gzip等.</span><br><span class="line">Content-Location 一个备用位置，请求时可通过它获得对象。</span><br><span class="line">Content-Range 说明它是整体的哪个部分,可用于分段获取。</span><br><span class="line">Content-MD5 实体主体内容的校验和。</span><br><span class="line">Last-Modified 所传输内容在服务器上创建或最后修改的日期时间。</span><br><span class="line">Expires 实体数据将要失效的日期时间。</span><br><span class="line">Allow 该资源所允许的各种请求方法，例如，GET 和 HEAD。</span><br><span class="line">ETag 这份文档的唯一验证码，可用于缓存</span><br></pre></td></tr></table></figure>

<h1 id="HTTP-2-0-h2"><a href="#HTTP-2-0-h2" class="headerlink" title="HTTP/2.0(h2)"></a>HTTP/2.0(h2)</h1><p>这里简单说一下h2与HTTP/1.1对于前端开发人员来说比较大的改动。</p>
<h2 id="多路复用-Multiplexing"><a href="#多路复用-Multiplexing" class="headerlink" title="多路复用 (Multiplexing)"></a>多路复用 (Multiplexing)</h2><p>多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息。<br>在HTTP/1.1中，我们客户端在同一时间，针对同一于域名下的请求会有限制，如果超过某个值的请求会被堵塞到。所以一般的优化有前端用雪碧图来合并多个小图片减少请求，后端把资源分到不同的域下面，减少同域的限制。<br>但是如果网站用了h2的话，前端不需要考虑类似雪碧图之类的把多个请求合并为一个减少的优化。</p>
<h1 id="最后啰嗦两句"><a href="#最后啰嗦两句" class="headerlink" title="最后啰嗦两句"></a>最后啰嗦两句</h1><p>之所以会看《HTTP小书》是因为前段时间问我一个朋友说有没有关于HTTP比较好的书籍推荐，《HTTP权威指南》六七百页细节太多怕是看完留不住什么概念。他给我推了《HTTP小书》，这本书算是有点改变我一些关于知识获取的认知。<br>简单来说就是，大家别看9块钱的书就那么几页，翻一个上午或者一天就看完，然后就觉得不值，非得要看哪种几百页的才觉得钱回本了。<br>这篇文只是个人在看的时候做了一些归纳，书中有更详细更好的解释，关键是提供了源码与例子，在看概念的时候实操一遍会加深很多印象。<br>总的来说，这本书挺值的，和他的标语一样：<em>准能帮你省下不少<strong>时间</strong></em></p>
<p><a href="http://www.ituring.com.cn/book/1791">《HTTP小书》</a><br><a href="https://juejin.im/user/58774201570c35006207d274">《HTTP小书》作者刘传君</a><br><a href="http://www.cnblogs.com/machao/p/5788425.html">HTTP Method 更详细的介绍</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ">HTTP缓存 - MDN</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Book</tag>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-05-21 小记</title>
    <url>/2018-05-21/</url>
    <content><![CDATA[<p>最近工作不是很忙，也没有再投简历去面试，好像又开始恢复以前的学习热情与节奏。<br>&lt;– more –&gt;</p>
<p>发了几篇水文~ 看了一个小脚手架的部分源码《create-react-app》，看了一本技术书《css世界》，一本小说《白金数据》。</p>
<p>但是写这篇流水的主要目的是再次意识到自己看问题太过 __局限__。</p>
<p>先交代一下背景：</p>
<ol>
<li>目前公司的项目是基于 cookie 去判断一些环境，然后指向测试环境或者正式环境</li>
<li>对于 font 字体文件来说，他的请求是没有带上cookie的（chrome的bug，chrome觉得说这个文件不需要带上cookie，safari就会带)</li>
<li>出现的问题是： 如果测试环境有了新的 font 字体，那么因为他没有带上cookie，所以会被指向正式环境服务器去请求资源，但是这个时候正式环境还没有这个 font 字体，所以会报404。 怎么解决？</li>
</ol>
<p>我给出的方案是:</p>
<ol>
<li>后端给出一个页面，我们打包后把字体文件丢到正式环境上面</li>
<li>如果不想这么low手动的话， 那就在打包字体的命令行后面自动去提交到正式环境</li>
</ol>
<p>老大给出的方案是:<br>直接根据目前的环境分离机制，在nginx配置一下：测试环境下所有静态资源直接指到测试环境</p>
<p>= =简直被吊打，看问题还是很局限 没有跳出前端的圈子…╮(╯▽╰)╭</p>
<p>所以接下来优先补后端的一些基础知识 💪</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title>《css世界》常用技巧 —— 读书笔记</title>
    <url>/css-world/</url>
    <content><![CDATA[<p>前段时间面了荔枝，反馈说对一些css概念性的东西掌握不是很好~ 所以最近有空看了张鑫旭大佬的《CSS世界》<br>全本通熟易懂，继承了博客的画风，入口即化</p>
<p>很多东西三言两语讲不清楚，大家可以入手张鑫旭大佬的书来看看，里面很多常用的概念和属性都帮我们捋一遍。<a href="http://www.cssworld.cn/">《css世界》购买链接</a><br>附上张鑫旭大佬的博客，有事没事看一看经常会有意外收获<a href="http://www.zhangxinxu.com/">张鑫旭博客</a></p>
<h2 id="改变-width-height-作用细节的-box-sizing"><a href="#改变-width-height-作用细节的-box-sizing" class="headerlink" title="改变 width/height 作用细节的 box-sizing"></a>改变 width/height 作用细节的 box-sizing</h2><blockquote>
<p>box-sizing的作用是什么？ 一句话，改变了 width 作用的盒子。默认情况下，width 是作用在 content box 上的，box-sizing 的作用就是可以把 width 作用的盒子变成其他几个。</p>
</blockquote>
<p>但是目前 box-sizing 仅支持 <code>content-box</code> 和 <code>border-box</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这里 box1宽度默认作用在content-box,所以 width 表现为 100 + 10*2 + 20*2 = 160px */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这里 box2添加了 box-sizing: border-box; 所以宽度作用改成了content、padding与border，width 表现为100px, content为: 100- 10* 2- 20* 2 = 40px*/</span></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="./box-sizing.png" width="200" alt="box-sizing"  align=center />

<h2 id="min-width-max-width-min-height-max-height-权重超越-important-min-width超越max-width"><a href="#min-width-max-width-min-height-max-height-权重超越-important-min-width超越max-width" class="headerlink" title="min-width/max-width min-height/max-height 权重超越 !important, min-width超越max-width"></a>min-width/max-width min-height/max-height 权重超越 !important, min-width超越max-width</h2><p><strong>min-*初始值规范里为 0，实际尝试为auto</strong><br><strong>max-*初始值为 auto</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面代码表现为 100px</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">100px</span></span><br><span class="line">  max-width: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="padding的百分比值计算规则是相对于宽度计算的"><a href="#padding的百分比值计算规则是相对于宽度计算的" class="headerlink" title="padding的百分比值计算规则是相对于宽度计算的"></a>padding的百分比值计算规则是相对于宽度计算的</h2><p>这里引出一道面试题， <strong>不借助js的情况下用一个元素实现相对于浏览器窗口宽度1/2的正方形</strong><br>当时我的回答是用<code>vw</code>，如果早点看css世界就知道padding这个属性了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* vw方法 */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* padding方法 */</span></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="padding-的图形绘制-一个元素画出红领巾的“三道杠”"><a href="#padding-的图形绘制-一个元素画出红领巾的“三道杠”" class="headerlink" title="padding 的图形绘制 一个元素画出红领巾的“三道杠”"></a>padding 的图形绘制 一个元素画出红领巾的“三道杠”</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">background</span>: currentColor;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">10px</span> solid;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 这里其实关键起作用的还是 background-clip: content-box; 把背景色作用从border-box改为content-box*/</span></span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/padding1.png" title="三道杠"></p>
<h2 id="padding-的图形绘制-一个元素画出双层圆点图形效果"><a href="#padding-的图形绘制-一个元素画出双层圆点图形效果" class="headerlink" title="padding 的图形绘制 一个元素画出双层圆点图形效果"></a>padding 的图形绘制 一个元素画出双层圆点图形效果</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">background</span>: currentColor;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/padding2.png" title="双层圆点"></p>
<h2 id="margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题"><a href="#margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题" class="headerlink" title="margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题"></a>margin的百分比值计算规则和padding一样，但是margin在垂直方向没办法改变自身内部尺寸往往要借助父元素作为载体，还存在margin合并的问题</h2><p>还是那道浏览器窗口1/2的面试题，如果没有要求只用一个元素实现的话，可以用margin去实现</p>
<p>这里简单说一下，之所以设置父级box1的overflow:hidden，是因为要创建一个块级格式化上下文元素,一方面可以用子级margin撑起高度，另一方面处理margin合并问题，所以子级.box2直接用margin:100%，而不是200%。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* 宽度窗口1/2 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="comment">/* 高度窗口1/2 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="margin合并的解决方法"><a href="#margin合并的解决方法" class="headerlink" title="margin合并的解决方法"></a>margin合并的解决方法</h2><p>这里只列举出margin-top合并的情况, margin-bottom与其相对应</p>
<ul>
<li>父元素设为块级格式化上下文，7就是</li>
<li>父元素设置border-top</li>
<li>父元素设置padding-top (这里可以用margin-top负值来消除作用)</li>
<li>父元素与第一个子元素之间添加内联元素进行分隔</li>
</ul>
<h2 id="利用-margin-auto-做垂直上下居中"><a href="#利用-margin-auto-做垂直上下居中" class="headerlink" title="利用 margin: auto 做垂直上下居中"></a>利用 margin: auto 做垂直上下居中</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid ;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="border-默认颜色为元素color值"><a href="#border-默认颜色为元素color值" class="headerlink" title="border 默认颜色为元素color值"></a>border 默认颜色为元素color值</h2><h2 id="border绘制三角形"><a href="#border绘制三角形" class="headerlink" title="border绘制三角形"></a>border绘制三角形</h2><p>项目上画三角形绝大部分都是用border，好控制，实现简单，成本低只需一个元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: currentColor transparent transparent;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="css尺寸单位ex，指的是字母x的高度。"><a href="#css尺寸单位ex，指的是字母x的高度。" class="headerlink" title="css尺寸单位ex，指的是字母x的高度。"></a>css尺寸单位<code>ex</code>，指的是字母x的高度。</h2><p>这里简单说一下，css里面的基线(baseline)其实就是字母x的下边缘线<br>关于ex的应用这里不写呆毛了，我们可以利用他来实现文字与图片居中，直接给张鑫旭大佬的<a href="http://demo.cssworld.cn/5/1-1.php">demo</a><br><em>再感慨一下，虽然这些东西多多少少都在张鑫旭博客看到，但是这本书真的对一些东西的讲解很通俗易懂。大家可以入手有空翻一翻</em></p>
<h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC 块级格式化上下文"></a>BFC 块级格式化上下文</h2><p>在上面我们讲过了设置overflow:hidden;可以创建BFC来清除浮动，那么还有哪些方法可以创建BFC呢？</p>
<ul>
<li><html>根目录</li>
<li>float 值不为 node</li>
<li>overflow 的值为 auto、scroll或hidden(常用)</li>
<li>display 值为 table-cell、 table-caption和 inline-block(常用)</li>
<li>position 的值不为 relative和 static<br>BFC的结界特性最重要的用途不是去margin重叠或清除float影响，而是实现更健壮、更智能的自适应布局<br><em>面试的时候面试官问我BFC主要用来做什么，我的回答是 清除浮动和去margin重叠。真的是哪壶不开提哪壶…哭死😭</em></li>
</ul>
<h2 id="用BFC实现一边固定宽度，另一边自适应布局"><a href="#用BFC实现一边固定宽度，另一边自适应布局" class="headerlink" title="用BFC实现一边固定宽度，另一边自适应布局"></a>用BFC实现一边固定宽度，另一边自适应布局</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: currentColor;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="无依赖absolute绝对定位（没有left-top-right-bottom"><a href="#无依赖absolute绝对定位（没有left-top-right-bottom" class="headerlink" title="无依赖absolute绝对定位（没有left/top/right/bottom)"></a>无依赖absolute绝对定位（没有left/top/right/bottom)</h2><p>我们平时如果对元素进行 absolute 定位，多半会加多个 left,top然后给父级加个 relative。<br>实际上大多数情况我们可以直接用margin辅助定位，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123; <span class="attribute">position</span>: relative; &#125;</span><br><span class="line"><span class="comment">/* @before */</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">10px</span>; <span class="attribute">left</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/* @after */</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">margin-top</span>: <span class="number">10px</span>; <span class="attribute">margin-left</span>: <span class="number">10px</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>这么实现有两个好处，一个是我们不需要父级去加个<code>relative</code>后面要撤销，直接改 .son样式就好。<br>第二个好处就是某些场景适应性比依赖项定位好<br><img data-src="/css-world/absolute.png" title="Hot为无依赖 N为依赖"><br><img data-src="/css-world/absolute2.png" title="改变文字长度之后的情况"><br><strong>无依赖在有多语言场景下做角标简直是天使！！！不然一个英语场景，一个日语场景网站肯定会乱套….</strong></p>
<h2 id="单行显示…更多效果"><a href="#单行显示…更多效果" class="headerlink" title="单行显示…更多效果"></a>单行显示…更多效果</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.p1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span></span><br><span class="line">  目前，对-webkit-私有前缀支持良好的浏览器还可以实现多行文字打点效果，但是却无 须依赖 overflow:hidden。比方说，最多显示 2 行内容，再多就打点就</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/ellipsis1.png"></p>
<h2 id="多行显示…更多效果"><a href="#多行显示…更多效果" class="headerlink" title="多行显示…更多效果"></a>多行显示…更多效果</h2><p>这里用了Overflow是因为，不用的话，会把多余的内容展示出来，但是用不用都会有省略号效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.p1</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="css">		-webkit-box-orient: vertical;</span></span><br><span class="line"><span class="css">		-webkit-line-clamp: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span></span><br><span class="line">	目前，对-webkit-私有前缀支持良好的浏览器还可以实现多行文字打点效果，但是却无 须依赖 overflow:hidden。比方说，最多显示 2 行内容，再多就打点就</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/ellipsis2.png"></p>
<h2 id="outline自动填满屏幕剩余空间的应用技巧"><a href="#outline自动填满屏幕剩余空间的应用技巧" class="headerlink" title="outline自动填满屏幕剩余空间的应用技巧"></a>outline自动填满屏幕剩余空间的应用技巧</h2><p><em>tip:clip是裁剪功能，很多情况下我们都用他来实现一些隐藏的效果，比如这个栗子🌰..</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.footer</span> &gt;<span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">		<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">background-color</span>: <span class="number">#abcdef</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">outline</span>: <span class="number">9999px</span> solid <span class="number">#abcdef</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span> <span class="number">9999px</span> <span class="number">9999px</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am Jsonz.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/outline.png"></p>
<h2 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h2><p>什么是层叠上下文？</p>
<blockquote>
<p>层叠上下文，英文称作 stacking context，是 HTML 中的一个三维的概念。如果一个元素含 有层叠上下文，我们可以理解为这个元素在 z 轴上就“高人一等”。</p>
</blockquote>
<p>层叠上下文生成规则:</p>
<ul>
<li>position 值为 relative/absolute</li>
<li>flex 布局</li>
<li>opacity 值不是 1</li>
<li>transform 值不是 none</li>
<li>filter 值不是 none</li>
<li>-webkit-overflow-scrolling 设为 touch</li>
</ul>
<p>层叠上下文的顺序:</p>
<ol>
<li>如果不依赖z-index，则可以看成 z-index: 0</li>
<li>依赖z-index 则看 z-index 的值</li>
</ol>
<h2 id="textarea-宽度100-自适应效果"><a href="#textarea-宽度100-自适应效果" class="headerlink" title="textarea 宽度100%自适应效果"></a>textarea 宽度100%自适应效果</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/*父级*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#abcdef</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 模拟边框与padding */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">9px</span> <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d0d0d5</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>; </span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 真实 textarea */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box2</span>&gt; <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">0</span> none;</span></span><br><span class="line"><span class="css">      <span class="attribute">outline</span>: <span class="number">0</span> none;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="css">      <span class="attribute">resize</span>: none;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/textarea.png"></p>
<h2 id="空元素选择器-empty"><a href="#空元素选择器-empty" class="headerlink" title="空元素选择器 :empty"></a>空元素选择器 :empty</h2><p>看《css世界》之后才知道有这么一个空元素选择器…绝对不是其他目的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-tag">span</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">content</span>: <span class="string">&#x27;是帅哥&#x27;</span>;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Jsonz<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/empty.png"></p>
<h2 id="第一行要选择器-first-line"><a href="#第一行要选择器-first-line" class="headerlink" title="第一行要选择器:first-line"></a>第一行要选择器:first-line</h2><p>同上，比较少用的选择器，但是感觉部分场景挺实用的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-line &#123; <span class="attribute">color</span>: red; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">40px</span>; &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 可乐鸡翅 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/first-line.png"></p>
<h2 id="第一个字（母）选择器-first-letter"><a href="#第一个字（母）选择器-first-letter" class="headerlink" title="第一个字（母）选择器:first-letter"></a>第一个字（母）选择器:first-letter</h2><p>需要注意的是，如果这里我用的是字（母）来描述选择器，意味着，如果第一个是符号的话，会找下一个直到找到符合条件的才会渲染成我们要的样式，否则都是默认样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-letter &#123; <span class="attribute">color</span>: red; &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  !!!!反沙芋</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>!!!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/first-letter.png"></p>
<h2 id="动态loading打点效果"><a href="#动态loading打点效果" class="headerlink" title="动态loading打点效果"></a>动态loading打点效果</h2><p>这里主要利用了content 支持<code>\A</code>换行来实现，用<code>dot</code>是因为</p>
<blockquote>
<p><dot>是自定义的一个标签元素，除了简约、语义化明显</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	dot &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: inline-block; </span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">vertical-align</span>: -.<span class="number">25em</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css">dot<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&#x27;...\A..\A.&#x27;</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">white-space</span>: pre-wrap;</span></span><br><span class="line"><span class="css">    <span class="attribute">animation</span>: dot <span class="number">3s</span> infinite step-start both;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> dot &#123;</span></span><br><span class="line"><span class="css">    <span class="number">33%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2em</span>); &#125;</span></span><br><span class="line"><span class="css">    <span class="number">66%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1em</span>); &#125;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">正在加载中<span class="tag">&lt;<span class="name">dot</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img data-src="loading.gif" width="200">

<h2 id="单行文字居中对齐，多行文字左对齐"><a href="#单行文字居中对齐，多行文字左对齐" class="headerlink" title="单行文字居中对齐，多行文字左对齐"></a>单行文字居中对齐，多行文字左对齐</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid ;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>大家好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是Jsonz，现在是一名小切图仔<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/css-world/yo.png"></p>
<h2 id="字体使用系统字体"><a href="#字体使用系统字体" class="headerlink" title="字体使用系统字体"></a>字体使用系统字体</h2><p>这里个人有点疑惑~ 如果单纯是想使用系统默认字体，直接不设置 font 不就好了~ 多此一举设置个 <code>menu</code>…</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font</span>: menu; &#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>书里更多的不是给我们展示这些小技巧，而是帮我们讲清楚很多概念与他的特性，这篇文比较没经验，效果图都是用的截图…下次有机会的话注意直接展示个demo可能看起来会更直观</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Book</tag>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器恢复滚动行为 —— history.scrollRestoration</title>
    <url>/history-scroll-restoration/</url>
    <content><![CDATA[<p>直入主题。之前做移动端的需求时，经常遇到一种常见，就是:<br>a页面是一个长列表，我们滑动到某个地方假设为 <strong>100px</strong> ，点击之后进入到b页面<br>再从b页面回到a页面，这时候浏览器的滚动条会自动回到我们跳转前的位置，也就是 <strong>100px</strong> 的位置。<br><img data-src="/history-scroll-restoration/history-scroll-restoration.gif" title="浏览器记住滚动行为"></p>
<p>这种体贴的行为我是很喜欢的~ 但是有时候产品就非要抬杠，说 我就不想要这种行为，你给我回到顶部去(╯‵□′)╯︵┻━┻</p>
<p>以前没办法就经常用什么 setTimeout 大法去手动处理这些东西</p>
<p>氮素!!! 如果只是说setTimeout大法的话，就没我什么事了。<br>今天要说的是 <strong>history.scrollRestoration</strong> ，这个属性是实验性的属性，他的作用是: <strong>允许Web应用程序在历史导航上显式地设置默认滚动恢复行为。此属性可以是自动的（auto）或者手动的（manual）。</strong></p>
<p>说的很明白了，如果浏览器支持 <code>history.scrollRestoration</code>并且值为<code>auto</code>则会默认恢复滚动行为。如果设置为 <code>manual</code>则可以取消，这个行为不用去考虑兼容性的问题，如果有这个功能才会有恢复滚动，所以直接判断一下就可以了。无需多考虑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.scrollRestoration &amp;&amp; (<span class="built_in">window</span>.history.scrollRestoration = <span class="string">&#x27;auto&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>以后妈妈再也不用担心我被产品怼了 O(∩_∩)O~~</p>
<p><a href="https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration">google-developers 资料</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History">mozilla-developer 资料</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Browser</tag>
      </tags>
  </entry>
  <entry>
    <title>create-react-app 源码解析之react-scripts</title>
    <url>/create-react-app-t/</url>
    <content><![CDATA[<p>上一篇我们已经讲了 <code>create-react-app</code>里面创建<code>package.json</code>安装依赖并且拷贝可运行的demo等步骤。<a href="https://jsonz1993.github.io/2018/05/create-react-app-o/">传送门</a></p>
<p>这一篇我们来讲一下 <code>create-react-app</code>里面的启动服务等部分，就是平时我们安装完依赖之后，启动开发服务:<code>npm start</code>。这一块涉及到太多关于webpack与配置的东西，加上第一篇觉得描述的太过冗余~所以这篇不会讲得很细，只是大概把他运转的逻辑思路写出来，具体源码会提供传送门。</p>
<p>推荐大家看第一篇的 <strong>项目初始化</strong> 和 <strong>断点调试</strong> 部分，这里就不在赘述。<a href="https://jsonz1993.github.io/2018/05/create-react-app-o/#%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96">传送门 项目初始化断点调试部分</a></p>
<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a><a href="#%E5%87%86%E5%A4%87%E9%98%B6%E6%AE%B5">准备阶段</a></h1><p><strong>这里我们讨论的create-react-app版本依旧是<code>v1.1.4</code></strong></p>
<p>既然这篇我们主要讲的是 <code>create-react-app</code>里面的webpack服务，那我们肯定要先新建一个项目。</p>
<ul>
<li><code>npm install create-react-app -g</code> 全局安装create-react-app</li>
<li><code>create-react-app my-react-project</code> 用create-react-app新建一个项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd my-react-project</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>
<p>新建完之后，终端提示了我们直接进入项目，跑 yarn(npm) start 就可以开发了。我们打开 <code>package.json</code>就可以看到 yarn start 跑的命令是 <code>&quot;react-scripts start&quot;</code></p>
<p>那么这个 react-scripts 命令到底是哪一个呢？</p>
<p>一般写在 <code>package.json=&gt; scripts</code> 的命令，都会先去 <code>project_path(项目目录）/node_modules/.bin</code> 查找，找不到再找全局安装的包。</p>
<p>那么 node_modules/.bin 里面的文件又是怎么来的呢？<br>我们如果在包的 package.json 加上 <code>bin</code> 字段，npm就会自动帮我们映射到 node_modules/.bin 里面 <a href="https://docs.npmjs.com/files/package.json#bin">npm bin文档传送门</a></p>
<p>我们直接打开 <code>node_modules/react-scripts/package.json</code> 能看到这么一行<code>&quot;react-scripts&quot;: &quot;./bin/react-scripts.js&quot;</code>,直接把命令指向<code>node_modules/react-scripts/.bin/react-scripts.js</code>，也验证了我们的观点。</p>
<p>还记得上一篇，我们在 <code>create-react-app/packages</code> 里面发现了有一个 <code>react-scripts</code>。其实是同一个东西来的，那么接下来的步骤就很明确了，直接用老办法，改下配置，然后用vscode跑断点调试阅读<code>project_path/node_modules/react-scripts/.bin/react-scripts.js</code>的源码 一探究竟。</p>
<h3 id="vscode-launch-json"><a href="#vscode-launch-json" class="headerlink" title="vscode launch.json"></a><a href="#vscode_launch.json">vscode launch.json</a></h3><p>这里我们传入 start 作为参数,模拟在项目里跑 <code>yarn start</code> 的效果。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;启动程序&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/node_modules/react-scripts/bin/react-scripts.js&quot;</span>, <span class="comment">//调试的文件路径</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;start&quot;</span> <span class="comment">// 传入 start 做为参数</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>ps:下面的<code>react-scripts</code>没有特殊说明，都代表<code>project_path/node_modules/react-scripts</code>目录方便阅读</strong></em></p>
<h1 id="react-scripts-bin-react-scripts-js"><a href="#react-scripts-bin-react-scripts-js" class="headerlink" title="react-scripts/.bin/react-scripts.js"></a><a href="#react-scripts-bin-react-scripts-js">react-scripts/.bin/react-scripts.js</a></h1><p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/bin/react-scripts.js">文件传送门</a><br>这里我们还是老办法，先不看依赖 看主流程理解先，我们能看到这个文件也是一个入口文件，非常简短。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scriptIndex = args.findIndex(</span><br><span class="line">  <span class="function"><span class="params">x</span> =&gt;</span> x === <span class="string">&#x27;build&#x27;</span> || x === <span class="string">&#x27;eject&#x27;</span> || x === <span class="string">&#x27;start&#x27;</span> || x === <span class="string">&#x27;test&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> script = scriptIndex === -<span class="number">1</span> ? args[<span class="number">0</span>] : args[scriptIndex];</span><br><span class="line"><span class="keyword">const</span> nodeArgs = scriptIndex &gt; <span class="number">0</span> ? args.slice(<span class="number">0</span>, scriptIndex) : [];</span><br></pre></td></tr></table></figure>
<p>首先处理传进来的参数，用<code>script</code>变量来获取我们跑的命令是哪一个，有[‘build’, ‘eject’, ‘start’, ‘test’]这么几种，分别对应 构建、暴露配置、开发、测试命令。<br>然后再获取一起传入的其他的参数，比如<code>npm test</code>命令就会带一个额外的参数<code>--env=jsdom</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (script) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;build&#x27;</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;eject&#x27;</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;start&#x27;</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;test&#x27;</span>: &#123;</span><br><span class="line">    <span class="comment">// 用 cross-spawn 去跑一个同步的命令</span></span><br><span class="line">    <span class="comment">// 根据传入的命令来拼接对应的路径 用node去跑</span></span><br><span class="line">    <span class="keyword">const</span> result = spawn.sync(</span><br><span class="line">      <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">      nodeArgs</span><br><span class="line">        .concat(<span class="built_in">require</span>.resolve(<span class="string">&#x27;../scripts/&#x27;</span> + script))</span><br><span class="line">        .concat(args.slice(scriptIndex + <span class="number">1</span>)),</span><br><span class="line">      &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (result.signal) &#123;</span><br><span class="line">      <span class="keyword">if</span> (result.signal === <span class="string">&#x27;SIGKILL&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 输出错误提醒日志</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.signal === <span class="string">&#x27;SIGTERM&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 输出错误提醒日志</span></span><br><span class="line">      &#125;</span><br><span class="line">      process.exit(<span class="number">1</span>); <span class="comment">// 退出进程， 传1代表有错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    process.exit(result.status);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">// 这里输出匹配不到对应的命令</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后根据获取到的命令，对应到<code>react-scripts/scripts</code>下面的文件去跑，比如 <code>react-scripts start</code> 就会去跑 <code>react-scripts/scripts/start.js</code>。</p>
<p>这里插几句讲一下一个项目上比较常见的类库解耦方式，我们可以看到这里的 <code>spawn</code>引用的是<code>react-dev-utils/crossSpawn</code>。而在<code>react-dev-utils/corssSpawn</code>里面也只是简简单单的几句，引入<code>cross-spawn</code>再把<code>cross-spawn</code>暴露出去。<br>但是这么写就可以起到类库解耦的作用，比如以后这个库被爆出有重大的bug或者停止维护了，直接修改这个文件引入其他的类库，其他引用该文件的代码就不需要改动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react-dev-utils/corssSpawn</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> crossSpawn = <span class="built_in">require</span>(<span class="string">&#x27;cross-spawn&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = crossSpawn;</span><br></pre></td></tr></table></figure>

<h1 id="react-scripts-scripts-start-js"><a href="#react-scripts-scripts-start-js" class="headerlink" title="react-scripts/scripts/start.js"></a><a href="#react-scripts-scripts-start-js">react-scripts/scripts/start.js</a></h1><p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/scripts/start.js">文件传送门</a></p>
<p>看过第一篇的人对这个文件夹应该不陌生，<code>create-react-app</code> 在安装完 <code>react</code> 等依赖之后，就会跑这个文件夹下面的<code>init.js</code>来拷贝模版文件，修改<code>package.json</code>等操作。</p>
<p>既然我们已经知道他要执行 start.js, 接下来我们把vscode调试文件修改为 start.js 文件<code>&quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/node_modules/react-scripts/scripts/start.js&quot;,</code> 之所以要修改是因为他这里不是引用js文件来运行，而是用终端来跑，所以不属于我们的项目调试范围~</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.env.BABEL_ENV = <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line">process.env.NODE_ENV = <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Makes the script crash on unhandled rejections instead of silently</span></span><br><span class="line"><span class="comment">// ignoring them. In the future, promise rejections that are not handled will</span></span><br><span class="line"><span class="comment">// terminate the Node.js process with a non-zero exit code.</span></span><br><span class="line">process.on(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>文件的最开头设置了两个环境变量，因为 start 是用来跑开发的，所以这里的环境变量都是 <code>development</code>，然后再给 <code>process</code> 绑定一个错误监听函数，这个错误监听实质上是用来监听 _一些没有被.catch的Promise_。 <a href="https://nodejs.org/dist/latest-v8.x/docs/api/process.html#process_event_unhandledrejection">具体可以看node的文档</a>, 关于 Promise可以看一下之前写过的一篇<a href="https://jsonz1993.github.io/2017/12/%E6%B5%85%E6%9E%90Promise/">介绍Promise的文章从用法和实现原理都有所涉及</a></p>
<p>接着引进一个 <code>../config/env</code>， 看文件名猜应该是做一些关于环境配置的事情，找到文件断点进来</p>
<h1 id="react-scripts-config-env-js"><a href="#react-scripts-config-env-js" class="headerlink" title="react-scripts/config/env.js"></a><a href="#react-scripts-config-env-js">react-scripts/config/env.js</a></h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> paths = <span class="built_in">require</span>(<span class="string">&#x27;./paths&#x27;</span>);</span><br><span class="line"><span class="comment">// Make sure that including paths.js after env.js will read .env variables.</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[<span class="built_in">require</span>.resolve(<span class="string">&#x27;./paths&#x27;</span>)];</span><br></pre></td></tr></table></figure>
<p><code>env.js</code> 文件在引入 <code>./paths.js</code> 之后，立即把他从cache中删除掉，这样下次如果有其他的模块引入<code>paths.js</code>，就不会从缓存里面去获取，保证了<code>paths.js</code>里面执行逻辑都会用到最新的环境变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dotenvFiles = [</span><br><span class="line">  <span class="comment">// 举个例子：第一个元素在我的电脑路径是这样的 Users/jsonz/Documents/my-react-project/.env.development.local.js</span></span><br><span class="line">  <span class="string">`<span class="subst">$&#123;paths.dotenv&#125;</span>.<span class="subst">$&#123;NODE_ENV&#125;</span>.local`</span>,</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;paths.dotenv&#125;</span>.<span class="subst">$&#123;NODE_ENV&#125;</span>`</span>,</span><br><span class="line">  NODE_ENV !== <span class="string">&#x27;test&#x27;</span> &amp;&amp; <span class="string">`<span class="subst">$&#123;paths.dotenv&#125;</span>.local`</span>,</span><br><span class="line">  paths.dotenv,</span><br><span class="line">].filter(<span class="built_in">Boolean</span>);</span><br></pre></td></tr></table></figure>
<p>然后再根据paths给出的地址去拿其他的环境变量，这里<code>paths.js</code>会根据不同的情况给出不同的路径，我们讨论的是正常的创建项目情况。<br>其他的几种情况有：</p>
<ol>
<li>我们在已经创建的项目跑了 <code>npm(yarn) eject</code>，这时候 <code>react-scripts</code>会把配置都暴露到 <code>project_path/config</code> 方便我们去根据项目修改配置，这个操作是不可逆的。</li>
<li>我们正常创建项目，直接跑项目，这时候配置就存放在<code>project/node_modules/react-scripts</code>。</li>
<li>开发人员自己调试用的，这时候配置存放在<code>create-react/packages/react-scripts/config</code>。</li>
</ol>
<p>拼装完路径之后，用<a href="https://www.npmjs.com/package/dotenv-expand">dotenv-expand</a>和<a href="https://www.npmjs.com/package/dotenv">dotenv</a>来把文件里面的环境变量加载进来，这一块一般场景用不上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClientEnvironment</span>(<span class="params">publicUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> raw = <span class="built_in">Object</span>.keys(process.env)</span><br><span class="line">    .filter(<span class="function"><span class="params">key</span> =&gt;</span> REACT_APP.test(key))</span><br><span class="line">    .reduce(</span><br><span class="line">      <span class="function">(<span class="params">env, key</span>) =&gt;</span> &#123;</span><br><span class="line">        env[key] = process.env[key];</span><br><span class="line">        <span class="keyword">return</span> env;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">NODE_ENV</span>: process.env.NODE_ENV || <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">const</span> stringified = &#123;</span><br><span class="line">    <span class="string">&#x27;process.env&#x27;</span>: <span class="built_in">Object</span>.keys(raw).reduce(<span class="function">(<span class="params">env, key</span>) =&gt;</span> &#123;</span><br><span class="line">      env[key] = <span class="built_in">JSON</span>.stringify(raw[key]);</span><br><span class="line">      <span class="keyword">return</span> env;</span><br><span class="line">    &#125;, &#123;&#125;),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; raw, stringified &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后返回一个 <code>getClientEnvironment</code>函数，这个函数执行后会返回客户端的环境变量。</p>
<h1 id="react-scripts-scripts-start-js-2"><a href="#react-scripts-scripts-start-js-2" class="headerlink" title="react-scripts/scripts/start.js(2)"></a><a href="#react-scripts-scripts-start-js-2">react-scripts/scripts/start.js(2)</a></h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dev-server&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> clearConsole = <span class="built_in">require</span>(<span class="string">&#x27;react-dev-utils/clearConsole&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> checkRequiredFiles = <span class="built_in">require</span>(<span class="string">&#x27;react-dev-utils/checkRequiredFiles&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  choosePort,</span><br><span class="line">  createCompiler,</span><br><span class="line">  prepareProxy,</span><br><span class="line">  prepareUrls,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;react-dev-utils/WebpackDevServerUtils&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> openBrowser = <span class="built_in">require</span>(<span class="string">&#x27;react-dev-utils/openBrowser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> paths = <span class="built_in">require</span>(<span class="string">&#x27;../config/paths&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config/webpack.config.dev&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> createDevServerConfig = <span class="built_in">require</span>(<span class="string">&#x27;../config/webpackDevServer.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useYarn = fs.existsSync(paths.yarnLockFile);</span><br><span class="line"><span class="keyword">const</span> isInteractive = process.stdout.isTTY;</span><br></pre></td></tr></table></figure>
<p>加载完各种环境变量之后，我们回到<code>react-scripts/scripts/start.js</code>，老规矩，一系列的依赖先跳过不看，后面用到再来看。<br>还记得我们在<code>env.js</code>里面delet掉node.catch吗，这里<code>conts paths = require(&#39;../config/paths)</code>就不会从缓存里面去拿而是重新去加载。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) &#123;</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先判断一下我们两个入口文件有没有存在，分别是<code>project_path/public/index.html</code>和<code>project_path/src/index.js</code>，如果不存在给出提示结束程序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULT_PORT = <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> HOST = process.env.HOST || <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>然后设置默认的端口和host，如果有特殊的需求，可以从环境变量传进去改变，没有就会用默认的<code>3000</code>端口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">choosePort(HOST, DEFAULT_PORT).then(...) <span class="comment">// @return Promise</span></span><br></pre></td></tr></table></figure>
<p>设置完默认的端口与host之后，开始判断这个端口有没有被其他的进程占用，有的话会提供下一个可用的端口，我们顺着<code>choosePort</code>去文件头找依赖，找到该方法位于依赖<code>react-dev-utils/WebpackDevServerUtils</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">choosePort</span>(<span class="params">host, defaultPort</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> detect(defaultPort, host).then(</span><br><span class="line">    <span class="function"><span class="params">port</span> =&gt;</span></span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (port === defaultPort) &#123;</span><br><span class="line">          <span class="keyword">return</span> resolve(port);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> message =</span><br><span class="line">          process.platform !== <span class="string">&#x27;win32&#x27;</span> &amp;&amp; defaultPort &lt; <span class="number">1024</span> &amp;&amp; !isRoot()</span><br><span class="line">            ? <span class="string">`Admin permissions are required to run a server on a port below 1024.`</span></span><br><span class="line">            : <span class="string">`Something is already running on port <span class="subst">$&#123;defaultPort&#125;</span>.`</span>;</span><br><span class="line">        <span class="keyword">if</span> (isInteractive) &#123;</span><br><span class="line">          clearConsole();</span><br><span class="line">          <span class="keyword">const</span> existingProcess = getProcessForPort(defaultPort);</span><br><span class="line">          <span class="keyword">const</span> question = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;confirm&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;shouldChangePort&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>:</span><br><span class="line">              chalk.yellow(</span><br><span class="line">                message +</span><br><span class="line">                  <span class="string">`<span class="subst">$&#123;existingProcess ? <span class="string">` Probably:\n  <span class="subst">$&#123;existingProcess&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span></span><br><span class="line">              ) + <span class="string">&#x27;\n\nWould you like to run the app on another port instead?&#x27;</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">          inquirer.prompt(question).then(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (answer.shouldChangePort) &#123;</span><br><span class="line">              resolve(port);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolve(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(chalk.red(message));</span><br><span class="line">          resolve(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 输出错误日志</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>choosePort</code> 里面用到<a href="https://www.npmjs.com/package/detect-port-alt">detect-port-alt</a>去检测端口占用，如果被占用了返回一个最接近的递增方向可用的端口，比如3000端口被占用,3001没被占用就返回回来。<br>如果发现返回的可用端口不是默认的端口，给出一个交互式的命令询问用户是否要换一个端口去访问，交互式命令用的是<a href="https://www.npmjs.com/package/inquirer">inquirer</a>这个包。<br>这里如果用vsCode来调试，<code>process.stdout.isTTY</code> 返回的值是<code>undefined</code>。所以如果要测试这一块交互式命令，只能切回系统的终端去调试~</p>
<p><img data-src="/create-react-app-t/tty_choose_port.png" alt="交互式命令询问是否切换端口" title="交互式命令询问是否切换端口"></p>
<p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/scripts/start.js#L71">文件传送门</a><br>检测完可用端口之后，回到<code>start.js</code>。</p>
<p>前端处理一堆环境变量，还有加载一堆配置，全都用在这一块。这里主要做的就是把环境变量和配置组装起来，开个webpack本地调试服务。主要做的事情有:</p>
<ol>
<li>如果没有找到可用的端口直接返回不继续执行下去</li>
<li>根据环境变量判断是否启用<code>https</code>，默认是<code>http</code>。</li>
<li>根据 host, protocol, port 拼装一系列的url，包括<code>Browser</code>的url与<code>Terminal</code>的url。</li>
<li>调用<code>createCompiler</code> 传入webpack，webpack配置，appName，第三步获取的url，还有是否使用Yarn等参数，生成一个 webpackCompiler。createCompiler负责的东西有:</li>
<li>1 根据环境变量判断是否有冒烟测试的需求，如果有加一个 <code>handleCompile</code>，一有错误就中断程序。</li>
<li>2 用传进来的配置和handleCompile生成一个webpackCompiler</li>
<li>2 增加<code>invalid</code>钩子，一检测到更改文件，而且是交互式终端的话，先清空控制台，再输出日志</li>
<li>3 增加<code>done</code>钩子，对webpack的输出日志整理统一输出</li>
<li>创建开发服务配置 具体的配置代码放在<code>webpackDevServer.config.js</code></li>
<li>把4和5丢给 <code>WebpackDevServer</code>，生成一个 webpack 本地开发服务</li>
<li>大功告成，清除屏幕，打开调试连接</li>
</ol>
<p>相关的代码执行写到注释里面去了，没办法每个方法配置都拎出来讲…不然篇幅会很长，这里面很多点一讲都可以是一个知识点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">choosePort(HOST, DEFAULT_PORT)</span><br><span class="line">  .then(<span class="function"><span class="params">port</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 没有找到可用端口，直接return</span></span><br><span class="line">    <span class="keyword">if</span> (port == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据环境变量判断是否要用https</span></span><br><span class="line">    <span class="keyword">const</span> protocol = process.env.HTTPS === <span class="string">&#x27;true&#x27;</span> ? <span class="string">&#x27;https&#x27;</span> : <span class="string">&#x27;http&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> appName = <span class="built_in">require</span>(paths.appPackageJson).name;</span><br><span class="line">    <span class="comment">// 获取当前的 host, port, protocol 生成一系列url</span></span><br><span class="line">    <span class="keyword">const</span> urls = prepareUrls(protocol, HOST, port);</span><br><span class="line">    <span class="comment">// 创建一个webpack compiler</span></span><br><span class="line">    <span class="keyword">const</span> compiler = createCompiler(webpack, config, appName, urls, useYarn);</span><br><span class="line">    <span class="comment">// 加载代理的配置，在 project_path/package.json 里面加载配置</span></span><br><span class="line">    <span class="keyword">const</span> proxySetting = <span class="built_in">require</span>(paths.appPackageJson).proxy;</span><br><span class="line">    <span class="keyword">const</span> proxyConfig = prepareProxy(proxySetting, paths.appPublic);</span><br><span class="line">    <span class="comment">// 生成 webpack dev server 的配置</span></span><br><span class="line">    <span class="keyword">const</span> serverConfig = createDevServerConfig(</span><br><span class="line">      proxyConfig,</span><br><span class="line">      urls.lanUrlForConfig</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> devServer = <span class="keyword">new</span> WebpackDevServer(compiler, serverConfig);</span><br><span class="line">    <span class="comment">// 监听 devServer</span></span><br><span class="line">    devServer.listen(port, HOST, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 一些日志输出</span></span><br><span class="line">      <span class="comment">// 自动用默认浏览器打开调试链接</span></span><br><span class="line">      openBrowser(urls.localUrlForBrowser);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p><code>react-dev-utils/WebpackDevServerUtils.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCompiler</span>(<span class="params">webpack, config, appName, urls, useYarn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> compiler;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    compiler = webpack(config, handleCompile); <span class="comment">// handleCompile为冒烟测试的对应处理</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 错误提示</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">&#x27;invalid&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// invalid 钩子，如果当前处于TTY终端，那么先清除控制台再输出 Compiling...</span></span><br><span class="line">    <span class="keyword">if</span> (isInteractive) &#123;</span><br><span class="line">      clearConsole();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Compiling...&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isFirstCompile = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  compiler.plugin(<span class="string">&#x27;done&#x27;</span>, <span class="function"><span class="params">stats</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 监听了 done 事件，对输出的日志做了格式化输出</span></span><br><span class="line">    <span class="comment">// 正常情况下会直接输出 `Compiled successfully!`</span></span><br><span class="line">    <span class="comment">// 如果有错误则输出错误信息，这里对错误信息做一些处理，让其输出比较友好</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> compiler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/create-react-app-t/webpackDevServer_error.png" alt="输出日志格式化处理" title="输出日志统一格式化处理"></p>
<h1 id="最后讲两句"><a href="#最后讲两句" class="headerlink" title="最后讲两句"></a>最后讲两句</h1><p>之前就一直好奇，这些脚手架是怎么清空我们的终端屏幕的。在看<code>create-react-app</code>的时候，瞄到有这么一个文件<a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-dev-utils/clearConsole.js">react-dev-utils/clearConsole.js</a>。这个文件十分剪短，核心代码就那么一句:</p>
<h2 id="react-dev-utils-clearConsole-js"><a href="#react-dev-utils-clearConsole-js" class="headerlink" title="react-dev-utils/clearConsole.js"></a><a href="#react-dev-utils-clearConsole-js">react-dev-utils/clearConsole.js</a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.stdout.write(process.platform === <span class="string">&#x27;win32&#x27;</span> ? <span class="string">&#x27;\x1B[2J\x1B[0f&#x27;</span> : <span class="string">&#x27;\x1B[2J\x1B[3J\x1B[H&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>然后好奇心特别重，不知道后面两串是什么意思，一直搜没有找到想要的答案。问了身边的同事，说是十六进制，而在我狭隘的认知里面一直以为十六进制只能转成数字….但是定睛一看，这有个<code>J</code> 明显不是十六进制。一个女装大佬和我说这是ASCII码，百度了一下ASCII码，看了 <code>\x1B</code> ASCII对应到 <code>ESC</code>。 但是后面的 <code>[2J</code> <code>[3J</code> <code>[H</code> 是什么意思还是不清楚…<br>后面大佬又和我说找到可能是 <strong>Linux ANSI 控制码</strong> 找来找去折腾了挺久的后面才揭开神秘面纱~<br>这几个命令大概的意思是:<br><code>[2J</code> 清除控制台<br><code>[H</code> 将光标移至最顶部<br><code>[3J</code>还是没有找到，应该是更高级的系统层级的清除控制台<br>给出几个 Linux ANSI 控制码资料网站<br><a href="http://manpages.ubuntu.com/manpages/bionic/zh_CN/man4/console_codes.4.html">Ubuntu Manpage: 控制终端代码 - Linux 控制终端转义和控制序列</a><br><a href="www.cnblogs.com/mugua/archive/2009/11/25/1610118.html">控制终端代码 - Linux 控制终端转义和控制序列(转) - 木瓜脑袋 - 博客园</a></p>
<p>最后前端的小伙伴很多和我一样不是科班出身的，真的得加把劲补补一些计算机比较原理性或比较接近系统层级的知识~</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-05-08面试记B</title>
    <url>/2018-05-08/</url>
    <content><![CDATA[<p>欧啦啦啦啦啦啦啦啦啦 </p>
<p>记录下最近的面试等情况~~~ </p>
<h2 id="简历投递情况2"><a href="#简历投递情况2" class="headerlink" title="简历投递情况2"></a>简历投递情况2</h2><p><a href="https://jsonz1993.github.io/2018/04/2018-04-29/">简历投递情况传送门</a><br>据不完全统计:<br>投 <code>荔枝</code> 技术面<br>投 <code>100教育</code> 待沟通<br>投 <code>尚德教育</code> 没面试机会</p>
<p>最最最最最开心的事情可能就是面了荔枝~ 虽然最后没有过 不过还是挺不错的一次体验 记录一下</p>
<p>首先流程是： 笔试 =&gt; 机试 =&gt; 两个人的技术面</p>
<p>笔试比较基础的问题，但是面试官会根据写的题问思路，而且会各种变形问，可以比较深了解基础的知识。</p>
<p>以下只是个人的面试记录，如果发现有不妥的联系即删。</p>
<h2 id="荔枝笔试"><a href="#荔枝笔试" class="headerlink" title="荔枝笔试"></a>荔枝笔试</h2><ol>
<li><p>作用域的问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  t = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typeof</span> a();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有各种变形</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">  t = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">  t = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">  t = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  t = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>兼容低版本浏览器模拟 Function.prototype.bind</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">直接用 call || allpy 模拟，返回一个闭包，参数用 <span class="built_in">Array</span>.prototype.slice.apple 去取即可~</span><br></pre></td></tr></table></figure></li>
<li><p>关于正则的比较简单~ 不写出来了</p>
</li>
<li><p>关于zIndex的，推荐直接看张鑫旭大佬的文章，超不过那个范围<a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">张鑫旭大佬传送门</a></p>
</li>
<li><p>实现一个宽高都是浏览器 40%的正方形</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 用vw方案</span><br><span class="line">2. 用padding ( emmm 这个面试大佬提示了才想起 padding 是根据父级宽度的)</span><br></pre></td></tr></table></figure></li>
<li><p>a,b,c,d 四个接口，求最快 || 最慢的响应时间</p>
</li>
</ol>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">直接用 <span class="built_in">Promise</span>.all || <span class="built_in">Promise</span>.race 即可</span><br></pre></td></tr></table></figure>

<p>笔试题还好，作用域那一题有点混 其他没什么问题，算是有惊无险</p>
<h2 id="机试"><a href="#机试" class="headerlink" title="机试"></a>机试</h2><p>机试题二选一 一个是实现一个<code>dialog</code> 一个是实现一个验证表单<br>选了 dialog 做的时候没有看题…有个功能点没有实现完全就跑去做验证题，验证题没有做完<br>dialog 应该算是实现的不够及格线</p>
<p>引出了挺多优化方案的，比如 dom 处理，比如动画处理，里面有一个面试官暗示了好多次，但是没有想起来的一个api <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/animationend">animationend</a><br><a href="http://www.runoob.com/jsref/event-animationend.html">animationend demo</a></p>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>面试就根据前面做的两份题扩展去问思路等等</p>
<p>问题的套路是比较喜欢的，举个例子：</p>
<p>Q: 左边自适应，右边固定有什么布局?<br>A: flex布局, flex: 1 &amp;&amp; width: …<br>Q: 浏览器这时候缩小会有什么情况？<br>A: flex: 1 慢慢缩小，另一个不变（这个回答我模棱两可犹豫了，虽然知道是不变，但是好像项目中有遇过变的…扣分了)<br>Q: 还有其他的吗?<br>A: 浮动 float:left; overflow: auto<br>Q: 清除浮动有哪些<br>A: 委元素清除 &amp;&amp; BFC<br>Q: BFC是什么，有什么作用，怎么设置BFC<br>A: 块级格式化上下文，清除浮动或者消除master合并，可以用overflow(hidden,auto,scroll) || float(left,right) || display(inline-block) || position(absolute, fixed)</p>
<p>后面聊了下 工作的优化， webpack构建， react优化, 缓存机制(涉及http), pwa等等</p>
<p>还问了小程序和vue的东西，但是其实上一次做小程序已经是一年前了，说了vue和小程序的上手不应该成为一个问题所在。</p>
<p>然后问了下职业规划，说了最近是在看 <code>create-react-app</code>源码，接下来的规划是 <strong>专前端 通其他</strong></p>
<h2 id="荔枝结果"><a href="#荔枝结果" class="headerlink" title="荔枝结果"></a>荔枝结果</h2><p>工作优化可能不是很满意<br>webpack构建优化应该还行，毕竟项目上用的比较多<br>react也还好，虽然面试的是用vue和小程序<br>pwa也有所了解<br>主要是 http这块暴露了后台知识薄弱，没有形成一个比较全面知识体系</p>
<p>后面还被嫌弃了三年呆了三个公司太过频繁</p>
<p>最后让面试官给了一下面试的评价：<br><strong>1. css 概念不熟</strong><br><strong>2. 浏览器api认识不全</strong><br><strong>3. http、后端知识没有系统学习</strong><br><strong>4. 跳槽过多~ 三年呆了三个公司</strong></p>
<p>╮(╯▽╰)╭哎 还闹了个乌龙，想说 《CSS世界》 说成 《css揭秘》</p>
<p>最近应该折腾完手上东西后，会比较系统的去看 切图写页面的这一块，比较 html+css 其实也是很重要的</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>create-react-app 源码解析</title>
    <url>/create-react-app-o/</url>
    <content><![CDATA[<p>最近工作开始稳定下来，没有那么多加班，加上说投简历找面试一直没拿到面试机会…所以开始有空闲的时间</p>
<p>之前公司有个大佬写了个类似 create-react-app 的脚手架，用来创建公司的项目。一直不知道里面实现的原理，借此机会一探 <code>create-react-app</code> 源码，了解下里面运行的机制。</p>
<p>授人以鱼不如授人以渔，希望通过这篇文章之后，对大家以后看源码可以有所帮助。<br>大家也不要一看到源码就害怕不敢去看，现在这么优秀项目都开源了，加上各种IDE支持很好，直接打个断点进去调试，很容易看出个大概。<br>也可以用这种思路去了解其他的开源项目</p>
<h1 id="快速了解"><a href="#快速了解" class="headerlink" title="快速了解"></a><a href="#%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3">快速了解</a></h1><p>对于想快速了解的直接浏览这一块即可<br>create-react-app 其实就是用node去跑一些包安装流程，并且把文件模板demo考到对于的目录下。<br>可以简单分为以下几个步骤:</p>
<ul>
<li>判断Node版本</li>
<li>做一些命令行处理的初始化，比如输入 <code>-help</code> 则输出帮助内容</li>
<li>判断是否有输入项目名，有则根据参数去跑包安装，默认是yarn安装方式，eg: <code>yarn add react react-dom react-scripts</code></li>
<li>修改package.json里面已安装的依赖版本，从精确版本<code>16.0.0</code>改为^向上兼容版本<code>^16.0.0</code> 并加入 <code>start</code>,<code>build</code>等启动脚本</li>
<li>拷贝 <code>react-scripts</code>下的 <code>template</code> 到目标文件，里面有<code>public</code>,<code>src</code>等文件夹，其实就是一个简单的可运行demo</li>
<li>END~</li>
</ul>
<p>继续往下看的小伙伴可以跟着一步一步了解里面的实现逻辑，先例行交代下环境版本:<br><strong>create-react-app v1.1.4</strong><br>macOS 10.13.4<br>node v8.9.4<br>npm 6.0.0<br>yarn 1.6.0<br>vsCode 1.22.2</p>
<h1 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a><a href="#%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96">项目初始化</a></h1><p>先上github 拉项目代码，拉下来之后切换到指定的 <code>tag</code></p>
<ul>
<li><code>git clone https://github.com/facebook/create-react-app.git</code></li>
<li><code>git checkout v1.1.4</code></li>
<li><code>yarn</code> //如果不需要断点调试，这一步可以跳过</li>
</ul>
<blockquote>
<p>这里可能yarn 版本太低的话，会报一系列错误，之前用的是 0.x版本的，升级到1.x就没问题了</p>
</blockquote>
<p>下面我们用 <code>root</code> 代替项目的根目录，方便理解</p>
<p>首先我们打开项目能看到一堆的配置文件和两个文件夹：eslint配置文件、travis部署配置、yarn配置、更新日志、开源声明等等…这些我们全都可以不用去看，那我们要看的核心源码放在哪里呢<br><img data-src="/create-react-app-o/create-react-app-file.png"></p>
<p>划重点: <strong>如果项目不知道从哪里入手的话，首先从package.json文件开始</strong></p>
<figure class="highlight json"><figcaption><span>root/package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;workspaces&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;packages/*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;cd packages/react-scripts &amp;&amp; node scripts/start.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>打开根目录 package.json 我们可以看到里面很简洁~ npm脚本命令，开发依赖，还有提交钩子，剩下的就是我们要关注的 <strong>workspaces</strong> 这里指向的是 <code>&quot;packages/*&quot;</code>，所以我们现在的重点就放在 <strong>packages</strong> 文件夹</p>
<p>packages 文件夹下面也有几个文件夹，这里文件夹命名很规范，一看就知道功能划分，所以还是老套路直接看 <code>root/packages/create-react-app/package.json</code></p>
<figure class="highlight json"><figcaption><span>packages/create-react-app/package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;create-react-app&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.5.2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;engines&quot;</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;createReactApp.js&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;bin&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;create-react-app&quot;</span>: <span class="string">&quot;./index.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这时候没有 <code>workspaces</code>项， 我们可以看 <code>bin</code> bin的功能是把命令对应到可执行的文件，具体的介绍可以看<a href="https://docs.npmjs.com/files/package.json#bin">package Document</a></p>
<p>这里可以简单理解成，当我们全局安装了 <code>create-react-app</code> 之后，跑 <code>create-react-app my-react-app</code> 系统会帮我们去跑 <code>packages/create-react-app/index.js my-react-app</code></p>
<p>终于找到源码的入口了，对于简单的源码我们可以直接看，对于比较复杂的 或者想要看到执行到每一行代码时那些变量是什么值的情况，我们就要用IDE或其他工具来断点调试代码了。</p>
<h1 id="配置断点调试"><a href="#配置断点调试" class="headerlink" title="配置断点调试"></a><a href="#%E9%85%8D%E7%BD%AE%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95">配置断点调试</a></h1><p>对于vscode或node调试 比较熟悉的可以跳过直接看 <a href="#%E5%BC%80%E5%A7%8B%E6%96%AD%E7%82%B9%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81">开始断点阅读源码</a></p>
<h2 id="vscode-debug"><a href="#vscode-debug" class="headerlink" title="vscode debug"></a><a href="#vscode_debug">vscode debug</a></h2><p>对于vscode用户来说，调试非常简单，点击侧边栏的小甲虫图标，点击设置<br>然后直接修改 “program”的值，修改完点击左上角的绿色箭头就可以跑起来了，如果要在某一处断点，比如 <code>create-react-app/index.js</code> line39 断点，直接在行号的左边点一下鼠标就可以了<br><img data-src="/create-react-app-o/debug1.png"><br><img data-src="/create-react-app-o/debug2.png"></p>
<figure class="highlight json"><figcaption><span>launch.json 配置</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;启动程序&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/packages/create-react-app/index.js&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="node-调试"><a href="#node-调试" class="headerlink" title="node 调试"></a>node 调试</h2><p>如果平时没有用vscode开发或者习惯chrome-devtool的，可以直接用node命令跑，然后在chrome里面调试<br>首先保证node的版本的 6 以上<br>然后在项目根目录下运行 <code>node --inspect-brk packages/create-react-app/index.js</code><br>在chrome地址栏输入 chrome://inspect/#devices 然后就可以看到我们要调试的脚本了<br>关于node chrome-devtool 调试详细可以看这里 <a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27">传送门</a></p>
<p><img data-src="/create-react-app-o/debug3.png" title="终端启动node调试"><br><img data-src="/create-react-app-o/debug4.png"><br><img data-src="/create-react-app-o/debug5.png"><br>(ps：这里可以看出来node在模块化的实现是通过用一个函数包裹起来，然后把 exports, requestd等参数传进来以供使用)</p>
<h1 id="开始断点阅读源码"><a href="#开始断点阅读源码" class="headerlink" title="开始断点阅读源码"></a><a href="#%E5%BC%80%E5%A7%8B%E6%96%AD%E7%82%B9%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81">开始断点阅读源码</a></h1><h2 id="packages-create-react-app-index-js-github文件传送门"><a href="#packages-create-react-app-index-js-github文件传送门" class="headerlink" title="packages/create-react-app/index.js github文件传送门"></a><a href="#packages/create-react-app/index.js">packages/create-react-app/index.js</a> <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/index.js">github文件传送门</a></h2><p><img data-src="/create-react-app-o/create-react-app_index.png" title="packages/creat-react-app/index.js"><br>这个文件十分简单，只是做为一个入口文件判断一下 node版本，小于 4.x的提示并终止程序， 如果正常则加载 <code>./createReactApp</code> 这个文件，主要的逻辑在该文件实现。</p>
<h2 id="packages-create-react-app-createReactApp-js-github文件传送门"><a href="#packages-create-react-app-createReactApp-js-github文件传送门" class="headerlink" title="packages/create-react-app/createReactApp.js github文件传送门"></a><a href="#packages/create-react-app/createReactApp.js">packages/create-react-app/createReactApp.js</a> <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js">github文件传送门</a></h2><p>顺着我们的断点进入到 <code>createReactApp.js</code> 这个文件有750行乍一看很多，文件头又有十几个依赖引入，但是不要被吓到，一般这种高质量的开源项目，里面有一大半是注释和错误友好信息。</p>
<blockquote>
<p>这里建议没有打断点调试的小伙伴试一下把代码复制到另一个js文件，然后先不看前面的依赖，下面用到再去 npm查一下是什么作用的。不要被绕进去看了一个又一个的依赖，核心代码反而没有看到。 然后看一部分之后就把那部分的代码删掉，比如我看了200行，就把前面200行删了，这样剩下500行看着就没有那么心虚了。当然还是建议用断点调试阅读，逻辑会比较清晰。</p>
</blockquote>
<p>首先文件头部这一大串的依赖，我们暂时不去关注他们，等后面用到再去查</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> validateProjectName = <span class="built_in">require</span>(<span class="string">&#x27;validate-npm-package-name&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> commander = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> execSync = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).execSync;</span><br><span class="line"><span class="keyword">const</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;cross-spawn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> semver = <span class="built_in">require</span>(<span class="string">&#x27;semver&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dns = <span class="built_in">require</span>(<span class="string">&#x27;dns&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> tmp = <span class="built_in">require</span>(<span class="string">&#x27;tmp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> unpack = <span class="built_in">require</span>(<span class="string">&#x27;tar-pack&#x27;</span>).unpack;</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> hyperquest = <span class="built_in">require</span>(<span class="string">&#x27;hyperquest&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> envinfo = <span class="built_in">require</span>(<span class="string">&#x27;envinfo&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="commander-命令行处理程序"><a href="#commander-命令行处理程序" class="headerlink" title="commander 命令行处理程序"></a><a href="#commander">commander 命令行处理程序</a></h3><p>接下来顺着我们的断点，第一行被执行的代码是 <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js#L56">L56</a></p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> commander.Command(packageJson.name)</span><br><span class="line">  .version(packageJson.version) <span class="comment">// create-react-app -v 时输出 $&#123;packageJson.version&#125;</span></span><br><span class="line">  .arguments(<span class="string">&#x27;&lt;project-directory&gt;&#x27;</span>) <span class="comment">// 这里用&lt;&gt; 包着project-directory 表示 project-directory为必填项</span></span><br><span class="line">  .usage(<span class="string">`<span class="subst">$&#123;chalk.green(<span class="string">&#x27;&lt;project-directory&gt;&#x27;</span>)&#125;</span> [options]`</span>) <span class="comment">// 用绿色字体输出 &lt;project-directory&gt;</span></span><br><span class="line">  .action(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    projectName = name;</span><br><span class="line">  &#125;) <span class="comment">// 获取用户传入的第一个参数作为 projectName **下面就会用到**</span></span><br><span class="line">  .option(<span class="string">&#x27;--verbose&#x27;</span>, <span class="string">&#x27;print additional logs&#x27;</span>) <span class="comment">// option用于配置`create-react-app -[option]`的选项，比如这里如果用户参数带了 --verbose， 会自动设置program.verbose = true;</span></span><br><span class="line">  .option(<span class="string">&#x27;--info&#x27;</span>, <span class="string">&#x27;print environment debug info&#x27;</span>) <span class="comment">// 后面会用到这个参数，用于打印出环境调试的版本信息</span></span><br><span class="line">  .option(</span><br><span class="line">    <span class="string">&#x27;--scripts-version &lt;alternative-package&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;use a non-standard version of react-scripts&#x27;</span></span><br><span class="line">  )</span><br><span class="line">  .option(<span class="string">&#x27;--use-npm&#x27;</span>)</span><br><span class="line">  .allowUnknownOption()</span><br><span class="line">   <span class="comment">// on(&#x27;option&#x27;, cb) 输入 create-react-app --help 自动执行后面的操作输出帮助</span></span><br><span class="line">  .on(<span class="string">&#x27;--help&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`    Only <span class="subst">$&#123;chalk.green(<span class="string">&#x27;&lt;project-directory&gt;&#x27;</span>)&#125;</span> is required.`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`    A custom <span class="subst">$&#123;chalk.cyan(<span class="string">&#x27;--scripts-version&#x27;</span>)&#125;</span> can be one of:`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`      - a specific npm version: <span class="subst">$&#123;chalk.green(<span class="string">&#x27;0.8.2&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`      - a custom fork published on npm: <span class="subst">$&#123;chalk.green(</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="string">&#x27;my-react-scripts&#x27;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`      - a .tgz archive: <span class="subst">$&#123;chalk.green(</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="string">&#x27;https://mysite.com/my-react-scripts-0.8.2.tgz&#x27;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`      - a .tar.gz archive: <span class="subst">$&#123;chalk.green(</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="string">&#x27;https://mysite.com/my-react-scripts-0.8.2.tar.gz&#x27;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`    It is not needed unless you specifically want to use a fork.`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`    If you have any problems, do not hesitate to file an issue:`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`      <span class="subst">$&#123;chalk.cyan(</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="string">&#x27;https://github.com/facebookincubator/create-react-app/issues/new&#x27;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;)</span><br><span class="line">  .parse(process.argv); <span class="comment">// 解析传入的参数 可以不用理会</span></span><br></pre></td></tr></table></figure>

<p>这里用到了一个 commander 的依赖，这时候我们就可以去npm 搜一下他的作用了。官网的描述是 <code>The complete solution for node.js command-line interfaces, inspired by Ruby&#39;s commander.API documentation</code> 翻译过来是 node.js 命令行接口的完整解决方案，基本的功能看注释即可，大概了解一下有这么一个东西，后面自己要做的时候有门路即可。<a href="https://github.com/tj/commander.js">github传送门</a>。</p>
<h3 id="判断是否有传projectName"><a href="#判断是否有传projectName" class="headerlink" title="判断是否有传projectName"></a><a href="#projectName">判断是否有传projectName</a></h3><figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> projectName === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (program.info) &#123; <span class="comment">// 如果命令行有带 --info 参数，输出 react,react-dom,react-scripts版本 然后退出</span></span><br><span class="line">    envinfo.print(&#123;</span><br><span class="line">      <span class="attr">packages</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>, <span class="string">&#x27;react-scripts&#x27;</span>],</span><br><span class="line">      <span class="attr">noNativeIDE</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">duplicates</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  这里输出了一些错误提示信息</span><br><span class="line">  ...</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>往下看是一个判断必须传入的参数 <code>projectName</code>，这里的 <code>projectName</code> 就是上面通过 <code>.action(name =&gt; &#123; projectName = name;&#125;)</code> 获取的。<br>判断如果没有输入的话，直接做一些信息提示，然后终止程序。<br>这里参数如果传入了 <code>--info</code> 的话， 会执行到<code>envinfo.print</code>。 日常npm 搜一下 envinfo 这是一个用来输出当前环境系统的一些系统信息，比如系统版本，npm等等还有react,react-dom,react-scripts这些包的版本，非常好用。这个包现在的版本和create-react-app的版本差异比较大，但是不影响我们使用~ <a href="https://www.npmjs.com/package/envinfo">envinfo npm传送门</a></p>
<p>如果是用我上面提供的 vscode debug配置的话，到这里程序应该就运行结束了，因为我们在启动调试服务的时候，没有给脚本传入参数作为 <code>projectName</code>，所以我们修改一下 vscode <code>launch.json</code> 加多个字段 <code>&quot;args&quot;: [&quot;test-create-react-app&quot;]</code> <a href="#vscode_debug">忘记怎么设置的点这里</a>~ 传入了 <code>projectName</code> 参数 然后重新启动调试服务</p>
<figure class="highlight json"><figcaption><span>加入projectName 后的 launch.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;启动程序&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/packages/create-react-app/index.js&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;test-create-react-app&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隐藏的-commander-参数"><a href="#隐藏的-commander-参数" class="headerlink" title="隐藏的 commander 参数"></a><a href="#dev_commander">隐藏的 commander 参数</a></h3><p>接着走判断完 projectName 之后，来到 <a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js#L140">Line140</a></p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hiddenProgram = <span class="keyword">new</span> commander.Command()</span><br><span class="line">  .option(</span><br><span class="line">    <span class="string">&#x27;--internal-testing-template &lt;path-to-template&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(internal usage only, DO NOT RELY ON THIS) &#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;use a non-standard application template&#x27;</span></span><br><span class="line">  )</span><br><span class="line">  .parse(process.argv);</span><br></pre></td></tr></table></figure>

<p>可以看到这个是一个隐藏的调试选项，给出一个参数用于传入模版路径，给开发人员调试用的…没事不折腾他</p>
<h3 id="createApp"><a href="#createApp" class="headerlink" title="createApp"></a><a href="#createApp">createApp</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createApp(</span><br><span class="line">  projectName,</span><br><span class="line">  program.verbose,</span><br><span class="line">  program.scriptsVersion,</span><br><span class="line">  program.useNpm,</span><br><span class="line">  hiddenProgram.internalTestingTemplate</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>接着往下就是调用了 <code>createApp</code>, 传入的参数对于的含义是：<code>项目名</code>，<code>是否输出额外信息</code>，<code>传入的脚本版本</code>，<code>是否使用npm</code>，<code>调试的模板路径</code>。接下来单步进入函数体看一下 <code>createApp</code> 到底做了什么事情。</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js createApp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">name, verbose, version, useNpm, template</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> root = path.resolve(name);</span><br><span class="line">  <span class="keyword">const</span> appName = path.basename(root);</span><br><span class="line"></span><br><span class="line">  checkAppName(appName); <span class="comment">// 检查传入的项目名合法性</span></span><br><span class="line">  fs.ensureDirSync(name); <span class="comment">// 这里的fs用的是 fs-extra， 对node的fs提供一些扩展方法</span></span><br><span class="line">  <span class="comment">// 判断新建这个文件夹是否是安全的 不安全直接退出</span></span><br><span class="line">  <span class="keyword">if</span> (!isSafeToCreateProjectIn(root, name)) &#123;</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在新建的文件夹下写入 package.json 文件</span></span><br><span class="line">  <span class="keyword">const</span> packageJson = &#123;</span><br><span class="line">    <span class="attr">name</span>: appName,</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;0.1.0&#x27;</span>,</span><br><span class="line">    <span class="attr">private</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  fs.writeFileSync(</span><br><span class="line">    path.join(root, <span class="string">&#x27;package.json&#x27;</span>),</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(packageJson, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> useYarn = useNpm ? <span class="literal">false</span> : shouldUseYarn();</span><br><span class="line">  <span class="keyword">const</span> originalDirectory = process.cwd();</span><br><span class="line">  process.chdir(root);</span><br><span class="line">  <span class="comment">// 如果是使用npm，检测npm是否在正确目录下执行</span></span><br><span class="line">  <span class="keyword">if</span> (!useYarn &amp;&amp; !checkThatNpmCanReadCwd()) &#123;</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断node环境，输出一些提示信息, 并采用旧版本的 react-scripts</span></span><br><span class="line">  <span class="keyword">if</span> (!semver.satisfies(process.version, <span class="string">&#x27;&gt;=6.0.0&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 输出一些提示更新信息</span></span><br><span class="line">    version = <span class="string">&#x27;react-scripts@0.9.x&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!useYarn) &#123;</span><br><span class="line">    <span class="comment">// 检测npm版本 判断npm版本，如果低于3.x，使用旧版的 react-scripts旧版本</span></span><br><span class="line">    <span class="keyword">const</span> npmInfo = checkNpmVersion();</span><br><span class="line">    <span class="keyword">if</span> (!npmInfo.hasMinNpm) &#123;</span><br><span class="line">      version = <span class="string">&#x27;react-scripts@0.9.x&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断结束之后，跑run 方法</span></span><br><span class="line">  <span class="comment">// 传入 项目路径，项目名， reactScripts版本， 是否输入额外信息， 运行的路径， 模板（开发调试用的）, 是否使用yarn</span></span><br><span class="line">  run(root, appName, version, verbose, originalDirectory, template, useYarn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/create-react-app/createReactApp.js#L156">createReactApp.js createApp 传送门</a><br>这里我精简了一些东西，删除一些输出信息，加了一些注释<br><code>createApp</code> 主要做的事情就是做一些安全判断比如：检查项目名是否合法，检查新建的话是否安全，检查npm版本，处理<code>react-script</code>的版本兼容<br>具体的执行逻辑写在注释里了，一系列的检查处理之后，调用 run 方法，传入参数为 <code>项目路径</code>，<code>项目名</code>， <code>reactScripts版本</code>， <code>是否输入额外信息</code>， <code>运行的路径</code>， <code>模板（开发调试用的）</code>, <code>是否使用yarn</code>。<br>了解大概的流程之后，再一个函数一个函数进去看。</p>
<blockquote>
<p>checkAppName()  // 检查传入的项目名合法性<br>isSafeToCreateProjectIn(root, name) // 判断新建这个文件夹是否是安全的<br>shouldUseYarn() // 检查yarn<br>checkThatNpmCanReadCwd() // 检查npm<br>run() // 检查完之后调用run执行安装等操作</p>
</blockquote>
<h3 id="checkAppName-检查projectName是否合法"><a href="#checkAppName-检查projectName是否合法" class="headerlink" title="checkAppName  检查projectName是否合法"></a><a href="#checkAppName">checkAppName</a>  检查projectName是否合法</h3><figure class="highlight javascript"><figcaption><span>createReactApp.js checkAppName</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAppName</span>(<span class="params">appName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> validationResult = validateProjectName(appName);</span><br><span class="line">  <span class="keyword">if</span> (!validationResult.validForNewPackages) &#123;</span><br><span class="line">    <span class="comment">// 判断是否符合npm规范如果不符合，输出提示并结束任务</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dependencies = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>, <span class="string">&#x27;react-scripts&#x27;</span>].sort();</span><br><span class="line">  <span class="keyword">if</span> (dependencies.indexOf(appName) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否重名，如果重名则输出提示并结束任务</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>checkAppName</code> 用于判断当前的项目名是否符合npm规范，比如不能大写等，用的是一个<a href="validate-npm-package-name">validate-npm-package-name</a>的npm包。这里简化了大部分的错误提示代码，但是不影响口感。</p>
<h3 id="shouldUseYarn-判断是否有装yarn-同理的有-checkThatNpmCanReadCwd-用来判断npm"><a href="#shouldUseYarn-判断是否有装yarn-同理的有-checkThatNpmCanReadCwd-用来判断npm" class="headerlink" title="shouldUseYarn 判断是否有装yarn 同理的有 checkThatNpmCanReadCwd 用来判断npm"></a><a href="#shouldUseYarn">shouldUseYarn</a> 判断是否有装yarn 同理的有 <code>checkThatNpmCanReadCwd</code> 用来判断npm</h3><figure class="highlight javascript"><figcaption><span>createReactApp.js shouldUseYarn</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldUseYarn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    execSync(<span class="string">&#x27;yarnpkg --version&#x27;</span>, &#123; <span class="attr">stdio</span>: <span class="string">&#x27;ignore&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="run"><a href="#run" class="headerlink" title="run"></a><a href="#run">run</a></h3><p>前面的那些操作可以说都是处理一些判断与兼容逻辑，到<code>run</code>这里才是 真正的核心安装逻辑，__开始安装依赖，拷贝模版__等。</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">...</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里获取要安装的package，默认情况下是 `react-scripts`。 也可能是根据传参去拿对应的包</span></span><br><span class="line">  <span class="keyword">const</span> packageToInstall = getInstallPackage(version, originalDirectory);</span><br><span class="line">  <span class="comment">// 需要安装所有的依赖， react, react-dom, react-script</span></span><br><span class="line">  <span class="keyword">const</span> allDependencies = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>, packageToInstall];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>run</code> 做的事情主要有这么几个，先根据传入的版本<code>version</code> 和原始目录<code>originalDirectory</code> 去获取要安装的某个 package。<br>默认的 version 为空,获取到的 packageToInstall 值是 <code>react-scripts</code>, 然后将<code>packageToInstall</code>拼接到 <code>allDependencies</code>意为所有需要安装的依赖。<br>这里说一下<code>react-scripts</code>其实就是一系列的webpack配置与模版，属于 <code>create-react-app</code> 另一个核心的一个大模块。<a href="https://www.npmjs.com/package/react-scripts">传送门</a></p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">...</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 获取包名，支持 taz|tar格式、git仓库、版本号、文件路径等等</span></span><br><span class="line">  getPackageName(packageToInstall)</span><br><span class="line">    .then(<span class="function"><span class="params">packageName</span> =&gt;</span></span><br><span class="line">      <span class="comment">// 如果是yarn,判断是否在线模式（对应的就是离线模式），处理完判断就返回给下一个then处理</span></span><br><span class="line">      checkIfOnline(useYarn).then(<span class="function"><span class="params">isOnline</span> =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">isOnline</span>: isOnline,</span><br><span class="line">        <span class="attr">packageName</span>: packageName,</span><br><span class="line">      &#125;))</span><br><span class="line">    )</span><br><span class="line">    .then(<span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isOnline = info.isOnline;</span><br><span class="line">      <span class="keyword">const</span> packageName = info.packageName;</span><br><span class="line">      <span class="comment">/** 开始核心的安装部分 传入`安装路径`，`是否使用yarn`,`所有依赖`，`是否输出额外信息`，`在线状态` **/</span></span><br><span class="line">      <span class="comment">/** 这里主要的操作是 根据传入的参数，开始跑 npm || yarn 安装react react-dom等依赖 **/</span></span><br><span class="line">      <span class="comment">/** 这里如果网络不好，可能会挂 **/</span></span><br><span class="line">      <span class="keyword">return</span> install(root, useYarn, allDependencies, verbose, isOnline).then(</span><br><span class="line">        <span class="function">() =&gt;</span> packageName</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后如果当前是采用yarn安装方式的话，就判断是否处于离线状态。判断完连着前面的 <code>packageToInstall</code> 和 <code>allDependencies</code> 一起丢给 <code>install</code> 方法，再由<code>install</code>方法去跑安装。</p>
<blockquote>
<p>run方法<br>getInstallPackage(); // 获取要安装的模版包 默认是 react-scripts<br>install(); // 传参数给install 负责安装 allDependencies<br>init(); // 调用安装了的 react-scripts/script/init 去拷贝模版<br>.catch(); // 错误处理</p>
</blockquote>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a><a href="#install">install</a></h3><figure class="highlight javascript"><figcaption><span>createReactApp.js install</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">root, useYarn, dependencies, verbose, isOnline</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 主要根据参数拼装命令行，然后用node去跑安装脚本 如 `npm install react react-dom --save` 或者 `yarn add react react-dom`</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> command;</span><br><span class="line">    <span class="keyword">let</span> args;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始拼装 yarn 命令行</span></span><br><span class="line">    <span class="keyword">if</span> (useYarn) &#123;</span><br><span class="line">      command = <span class="string">&#x27;yarnpkg&#x27;</span>;</span><br><span class="line">      args = [<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;--exact&#x27;</span>]; <span class="comment">// 使用确切版本模式</span></span><br><span class="line">      <span class="comment">// 判断是否是离线状态 加个状态</span></span><br><span class="line">      <span class="keyword">if</span> (!isOnline) &#123;</span><br><span class="line">        args.push(<span class="string">&#x27;--offline&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      [].push.apply(args, dependencies);</span><br><span class="line">      <span class="comment">// 将cwd设置为我们要安装的目录路径</span></span><br><span class="line">      args.push(<span class="string">&#x27;--cwd&#x27;</span>);</span><br><span class="line">      args.push(root);</span><br><span class="line">      <span class="comment">// 如果是离线的话输出一些提示信息</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// npm 安装模式，与yarn同理</span></span><br><span class="line">      command = <span class="string">&#x27;npm&#x27;</span>;</span><br><span class="line">      args = [</span><br><span class="line">        <span class="string">&#x27;install&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--save&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--save-exact&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;--loglevel&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      ].concat(dependencies);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有传verbose， 则加该参数 输出额外的信息</span></span><br><span class="line">    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">      args.push(<span class="string">&#x27;--verbose&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用 cross-spawn 跨平台执行命令行</span></span><br><span class="line">    <span class="keyword">const</span> child = spawn(command, args, &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  关闭的处理</span></span><br><span class="line">    child.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (code !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(&#123; <span class="attr">command</span>: <span class="string">`<span class="subst">$&#123;command&#125;</span> <span class="subst">$&#123;args.join(<span class="string">&#x27; &#x27;</span>)&#125;</span>`</span>, &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们顺着断点从<code>run</code>跑到<code>install</code>方法，能看到代码里根据是否使用yarn分成两种处理方法。<br><code>if (useYarn) &#123; yarn 安装逻辑 &#125; else &#123; npm 安装逻辑 &#125;</code><br>处理方法都是同个逻辑，根据传入的 <code>dependencies</code> 去拼接需要安装的依赖，主要有 <code>react</code>,<code>react-dom</code>,<code>react-script</code> 。再判断<code>verbose</code>和<code>isOnline</code> 加一些命令行的参数。<br>最后再用node跑命令，平台差异的话是借助<a href="https://www.npmjs.com/package/cross-spawn">cross-spawn</a>去处理的，这里不再赘述。<br>具体逻辑见上面代码，去掉不重要的信息输出，代码还是比较易懂。</p>
<blockquote>
<p>install<br>根据传进来的参数判断用yarn还是npm<br>拼装需要的依赖<br>用cross-spawn跑命令安装</p>
</blockquote>
<p>在<code>install</code>会返回一个<code>Promise</code>在安装完之后，断点又回到我们的<code>run</code>函数继续走接下来的逻辑。</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  getPackageName()</span><br><span class="line">    .then(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> install(root, useYarn, allDependencies, verbose, isOnline).then(</span><br><span class="line">            <span class="function">() =&gt;</span> packageName</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然我们的<code>install</code>已经把开发需要的依赖安装完了，接下来我们可以开判断当前运行的<code>node</code>是否符合我们已经安装的<code>react-scripts</code>里面的<code>packages.json</code>要求的node版本。<br>这句话有点绕，简单来说就是判断当前运行的node版本是否<code>react-scripts</code>这个依赖所需。</p>
<p>然后就把开始修改<code>package.json</code>我们已经安装的依赖(react, react-dom, react-scripts)版本从原本的精确版本eg(16.0.0)修改为高于等于版本eg(^16.0.0)。<br>这些处理做完之后，我们的目录是长这样子的，里面除了安装的依赖和<code>package.json</code>外没有任何东西。所以接下来的操作是生成一些webpack的配置和一个简单的可启动demo。<br><img data-src="/create-react-app-o/create-react-app1.png"></p>
<p>那么他是怎么快速生成这些东西的呢？<br>还记得一开始说了有一个 隐藏的命令行参数 <code>--internal-testing-template</code> 用来给开发者调试用的吗，所以其实create-react-app生成这些的方法就是直接把某一个路径的模板拷贝到对应的地方。是不是很简单粗暴hhhhh</p>
<figure class="highlight javascript"><figcaption><span>createReactApp.js run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">run</span>(<span class="params">...</span>)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">    getPackageName(packageToInstall)</span><br><span class="line">    .then(...)</span><br><span class="line">    .then(<span class="function"><span class="params">info</span> =&gt;</span> install(...).then(<span class="function">()=&gt;</span> packageName))</span><br><span class="line">    <span class="comment">/** install 安装完之后的逻辑 **/</span></span><br><span class="line">    <span class="comment">/** 从这里开始拷贝模板逻辑 **/</span></span><br><span class="line">    .then(<span class="function"><span class="params">packageName</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 安装完 react, react-dom, react-scripts 之后检查当前环境运行的node版本是否符合要求</span></span><br><span class="line">      checkNodeVersion(packageName);</span><br><span class="line">      <span class="comment">// 该项package.json里react, react-dom的版本范围，eg: 16.0.0 =&gt; ^16.0.0</span></span><br><span class="line">      setCaretRangeForRuntimeDeps(packageName);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 加载script脚本，并执行init方法</span></span><br><span class="line">      <span class="keyword">const</span> scriptsPath = path.resolve(</span><br><span class="line">        process.cwd(),</span><br><span class="line">        <span class="string">&#x27;node_modules&#x27;</span>,</span><br><span class="line">        packageName,</span><br><span class="line">        <span class="string">&#x27;scripts&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;init.js&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">const</span> init = <span class="built_in">require</span>(scriptsPath);</span><br><span class="line">      <span class="comment">// init 方法主要执行的操作是</span></span><br><span class="line">      <span class="comment">// 写入package.json 一些脚本。eg: script: &#123;start: &#x27;react-scripts start&#x27;&#125;</span></span><br><span class="line">      <span class="comment">// 改写README.MD</span></span><br><span class="line">      <span class="comment">// 把预设的模版拷贝到项目下</span></span><br><span class="line">      <span class="comment">// 输出成功与后续操作的信息</span></span><br><span class="line">      init(root, appName, verbose, originalDirectory, template);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (version === <span class="string">&#x27;react-scripts@0.9.x&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是旧版本的 react-scripts 输出提示</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 出错的话，把安装了的文件全删了 并输出一些日志信息等</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里安装完依赖之后，执行<code>checkNodeVersion</code>判断node版本是否与依赖相符。<br>之后拼接路径去跑<code>目录/node_modules/react-scripts/scripts/init.js</code>，传参让他去做一些初始化的事情。<br>然后对出错情况做一些相应的处理</p>
<h2 id="node-modules-react-scripts-script-init-js"><a href="#node-modules-react-scripts-script-init-js" class="headerlink" title="/node_modules/react-scripts/script/init.js"></a><a href="#/node_modules/react-scripts/script/init.js">/node_modules/react-scripts/script/init.js</a></h2><figure class="highlight javascript"><figcaption><span>目标文件夹/node_modules/react-scripts/script/init.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  appPath,</span></span></span><br><span class="line"><span class="params"><span class="function">  appName,</span></span></span><br><span class="line"><span class="params"><span class="function">  verbose,</span></span></span><br><span class="line"><span class="params"><span class="function">  originalDirectory,</span></span></span><br><span class="line"><span class="params"><span class="function">  template</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ownPackageName = <span class="built_in">require</span>(path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;package.json&#x27;</span>))</span><br><span class="line">    .name;</span><br><span class="line">  <span class="keyword">const</span> ownPath = path.join(appPath, <span class="string">&#x27;node_modules&#x27;</span>, ownPackageName);</span><br><span class="line">  <span class="keyword">const</span> appPackage = <span class="built_in">require</span>(path.join(appPath, <span class="string">&#x27;package.json&#x27;</span>));</span><br><span class="line">  <span class="keyword">const</span> useYarn = fs.existsSync(path.join(appPath, <span class="string">&#x27;yarn.lock&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 把启动脚本写入目标 package.json </span></span><br><span class="line">  appPackage.scripts = &#123;</span><br><span class="line">    <span class="attr">start</span>: <span class="string">&#x27;react-scripts start&#x27;</span>,</span><br><span class="line">    <span class="attr">build</span>: <span class="string">&#x27;react-scripts build&#x27;</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&#x27;react-scripts test --env=jsdom&#x27;</span>,</span><br><span class="line">    <span class="attr">eject</span>: <span class="string">&#x27;react-scripts eject&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fs.writeFileSync(</span><br><span class="line">    path.join(appPath, <span class="string">&#x27;package.json&#x27;</span>),</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(appPackage, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 改写README.MD，把一些帮助信息写进去</span></span><br><span class="line">  <span class="keyword">const</span> readmeExists = fs.existsSync(path.join(appPath, <span class="string">&#x27;README.md&#x27;</span>));</span><br><span class="line">  <span class="keyword">if</span> (readmeExists) &#123;</span><br><span class="line">    fs.renameSync(</span><br><span class="line">      path.join(appPath, <span class="string">&#x27;README.md&#x27;</span>),</span><br><span class="line">      path.join(appPath, <span class="string">&#x27;README.old.md&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 把预设的模版拷贝到项目下，主要有 public, src/[APP.css, APP.js, index.js,....], .gitignore</span></span><br><span class="line">  <span class="keyword">const</span> templatePath = template</span><br><span class="line">    ? path.resolve(originalDirectory, template)</span><br><span class="line">    : path.join(ownPath, <span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(templatePath)) &#123;</span><br><span class="line">    fs.copySync(templatePath, appPath);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fs.move(</span><br><span class="line">    path.join(appPath, <span class="string">&#x27;gitignore&#x27;</span>),</span><br><span class="line">    path.join(appPath, <span class="string">&#x27;.gitignore&#x27;</span>),</span><br><span class="line">    [],</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="comment">/* 错误处理 */</span>  &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里再次进行命令行的拼接，如果后面发现没有安装react和react-dom,重新安装一次</span></span><br><span class="line">  <span class="keyword">let</span> command;</span><br><span class="line">  <span class="keyword">let</span> args;</span><br><span class="line">  <span class="keyword">if</span> (useYarn) &#123;</span><br><span class="line">    command = <span class="string">&#x27;yarnpkg&#x27;</span>;</span><br><span class="line">    args = [<span class="string">&#x27;add&#x27;</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    command = <span class="string">&#x27;npm&#x27;</span>;</span><br><span class="line">    args = [<span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;--save&#x27;</span>, verbose &amp;&amp; <span class="string">&#x27;--verbose&#x27;</span>].filter(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line">  &#125;</span><br><span class="line">  args.push(<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> templateDependenciesPath = path.join(</span><br><span class="line">    appPath,</span><br><span class="line">    <span class="string">&#x27;.template.dependencies.json&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(templateDependenciesPath)) &#123;</span><br><span class="line">    <span class="keyword">const</span> templateDependencies = <span class="built_in">require</span>(templateDependenciesPath).dependencies;</span><br><span class="line">    args = args.concat(</span><br><span class="line">      <span class="built_in">Object</span>.keys(templateDependencies).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>@<span class="subst">$&#123;templateDependencies[key]&#125;</span>`</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    fs.unlinkSync(templateDependenciesPath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isReactInstalled(appPackage) || template) &#123;</span><br><span class="line">    <span class="keyword">const</span> proc = spawn.sync(command, args, &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">if</span> (proc.status !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`\`<span class="subst">$&#123;command&#125;</span> <span class="subst">$&#123;args.join(<span class="string">&#x27; &#x27;</span>)&#125;</span>\` failed`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 输出成功的日志</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>init</code>文件又是一个大头，处理的逻辑主要有</p>
</blockquote>
<ol>
<li>修改package.json，写入一些启动脚本，比如<code>script: &#123;start: &#39;react-scripts start&#39;&#125;</code>，用来启动开发项目</li>
<li>改写README.MD，把一些帮助信息写进去</li>
<li>把预设的模版拷贝到项目下，主要有 <code>public</code>, <code>src/[APP.css, APP.js, index.js,....]</code>, <code>.gitignore</code></li>
<li>对旧版的node做一些兼容的处理，这里补一句，在选择 react-scripts 时就有根据node版本去判断选择比较老的 @0.9.x 版。</li>
<li>如果完成输出对应的信息，如果失败，做一些输出日志等操作。</li>
</ol>
<p>这里代码有点多，所以删了一小部分，如果对初始的代码感兴趣可以跳转到这儿看<a href="https://github.com/facebook/create-react-app/blob/v1.1.4/packages/react-scripts/scripts/init.js">react-scripts/scripts/init.js 传送门</a></p>
<h1 id="END"><a href="#END" class="headerlink" title="END~"></a>END~</h1><p>到这里 <code>create-react-app</code> 项目构建的部分大流程已经走完了，我们来回顾一下：</p>
<ol>
<li>判断node版本如果小于4就退出，否则执行 <code>createReactApp.js</code> 文件</li>
<li><code>createReactApp.js</code>先做一些命令行的处理响应处理，然后判断是否有传入 <code>projectName</code> 没有就提示并退出</li>
<li>根据传入的 <code>projectName</code> 创建目录，并创建<code>package.json</code>。</li>
<li>判断是否有特殊要求指定安装某个版本的<code>react-scripts</code>，然后用<code>cross-spawn</code>去处理跨平台的命令行问题，用<code>yarn</code>或<code>npm</code>安装<code>react</code>, <code>react-dom</code>, <code>react-scripts</code>。</li>
<li>安装完之后跑 <code>react-scripts/script/init.js</code> 修改 <code>package.json</code> 的依赖版本，运行脚本，并拷贝对应的模板到目录里。</li>
<li>处理完这些之后，输出提示给用户。</li>
</ol>
<p>本来想把整个 create-react-app 说完，但是发现说一个创建就写了这么多，所以后面如果有想继续看 <code>react-scripts</code>的话，会另外开一篇来讲。<br>大家也可以根据这个思路自己断点去看，不过 <code>react-scripts</code> 主要可能是webpack配置居多，断点帮助应该不大。</p>
<h1 id="create-react-app系列第二篇传送门"><a href="#create-react-app系列第二篇传送门" class="headerlink" title="create-react-app系列第二篇传送门"></a><a href="https://jsonz1993.github.io/2018/05/create-react-app-t/">create-react-app系列第二篇传送门</a></h1>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-04-29面试记A</title>
    <url>/2018-04-29/</url>
    <content><![CDATA[<p>4.10号 已经在租租车呆了一周年，一直有个规律是 大概一年就要去外面找找虐。<br>一方面是为了下外面的市场，看下有没有更好的机会<br>另一方面是在一个地方待久了 可能会变得比较安逸，比较老油条，这时候去外面和其他公司前端面试沟通，可以了解外面的技术<br>让自己更有目的性、更有动力去学习。</p>
<p>但是今年的情况有点出乎我意料，不知道是因为金三银四加上今年过年早的原因，所以基本企业单位坑都填满了，<br>还是现在选择公司比较挑剔，高不成低不就。</p>
<p>规模太小不想去，二三线互联网公司，基本又要求本科…哎 学历的短板变得越来越大</p>
<h1 id="简历投递情况"><a href="#简历投递情况" class="headerlink" title="简历投递情况"></a>简历投递情况</h1><p>据不完全统计:<br>内推 <code>YY</code> 不合适<br>内推 <code>汇桔</code> 目前只招5年的<br>内推 <code>路客</code> 面试 也是目前唯一一个有面试机会的！！！ 但是薪资涨幅一般~<br>投 <code>广州银行信用卡</code> 不合适 要求本科<br>投 <code>中兴</code> 不合适 要求本科 = =吐槽一句 估计中兴现在也不敢招人了<br>投 <code>荔枝</code> 被查看，没有联系 也是没戏了<br>Boss直聘<br>沟通 <code>100教育</code> 目前只招5年的<br>沟通 <code>拼多多</code> 惨遭无视 也是要求本科</p>
<p>现在boss直聘，拉钩疯狂沟通 <code>尚德机构</code> 好像也没什么回应~ 要求也是本科，虽然说明了目前正在自考本科，但是自考时间最理想也要两年…哎哎</p>
<h1 id="面试情况"><a href="#面试情况" class="headerlink" title="面试情况"></a>面试情况</h1><p>前同事推的 <code>路客</code> 是唯一的面试机会… 之所以想去是因为，当时看了他们的app 使用RN写的，个人比较有兴趣，而且体验的时候还觉得很不错。很少有公司会从零开始用RN写，一般都是比较边角的 表单提交啊 FAQ About 等等的页面采用原生内嵌RN实现。</p>
<p>面试没有问的很细，基本就是现在比较喜欢的面试方式</p>
<p>问项目经验，React生命周期，diff算法，微信开放平台，对vue掌握程度，有没有做过RN项目，离职原因等<br>其中问到一个是 <strong>有没有系统学习23种设计模式</strong><br>我当时的回答是 没有系统学习过，不过平时工作有用到 <code>工厂模式</code> <code>单例模式</code> 等比较常用的设计模式。<br>想起之前看张容铭的《JavaScript设计模式》</p>
<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><p>现在工作三年，感觉反而没有刚开始工作那会基础知识牢固。以前刚入行，还不知道<code>jq</code>这种东西，写轮播图，写效果都是用原生js，还兼容ie~~~ 不能说特别叼，但是至少基础很牢固<br>现在好像各类 mv* 库帮我们做了很多事情，所以我们除了一开始的 项目搭建，结构划分，路由配置等，剩下的主要精力都用来处理业务逻辑，更多的是想着如何去解决一个问题，而不是死记着那些东西，但是这边拿一块 那边拿一块会导致很难形成属于自己的东西。<br>也没有很系统的学习一些东西，太过浮躁</p>
<p>目前学习计划是</p>
<ul>
<li><p>看 <code>create-react-app</code> 源码，了解怎么实现，断点调试，输出文章</p>
</li>
<li><p>看 <code>vue</code> 源码，系统学习一下<code>vue</code> 用到项目上，而不是停留到 看过api的层次<br>emmmm 想起vue刚出的时候，用了一个饿了么出的 移动端ui库 <a href="https://github.com/ElemeFE/mint-ui">mint-ui</a> 还贡献过一点点bug-request</p>
</li>
<li><p>有关于 node 后台的项目机会积极一点，硬着头皮上</p>
</li>
</ul>
<p>以上~ emmmm 最后多投看看还有什么面试机会… 尚德没有得面试真是有点失落</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>事件重复绑定与stopImmediatePropagation</title>
    <url>/%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%A4%8D%E7%BB%91%E5%AE%9A%E4%B8%8EstopImmediatePropagation/</url>
    <content><![CDATA[<p>在旧项目中，我们一般绑定事件都是用 <code>$(&#39;selector&#39;).on(&#39;event&#39;, fn)</code> || <code>document.querySelector(&#39;selector&#39;).addEventListener(&#39;event&#39;, fn)</code>;</p>
<p>如果平时代码规范，这样写完全ojbk 点击<code>.p</code> 之后输出 <code>test1</code></p>
<figure class="highlight html"><figcaption><span>demo1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">&#x27;click&#x27;</span>,fn);</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript">	add(<span class="string">&#x27;.p&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span> <span class="built_in">console</span>.log(e.currentTarget.innerHTML));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是平时如果项目不规范，代码又写的比较乱….emmmm，很有可能出现一些逻辑上的低级错误，比如这种，在某个函数调了两次，所以这里就绑定了两次…点击之后会输出两次的 <code>test</code></p>
<figure class="highlight html"><figcaption><span>demo2</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123; <span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">&#x27;click&#x27;</span>,fn); &#125;</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123; add(<span class="string">&#x27;.p&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span> <span class="built_in">console</span>.log(e.currentTarget.innerHTML)); &#125;;</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种情况平时工作不注意真的有可能发生，而且排查也只能说平时在看接口或改代码的时候 发现随手改<br><img data-src="/%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%A4%8D%E7%BB%91%E5%AE%9A%E4%B8%8EstopImmediatePropagation/repetition.png" alt="重复调接口情况"></p>
<p>一般为了避免这种失误重复调用的操作，有几种方法：</p>
<ol>
<li><p>把事件处理函数抽出来,这样就算重复绑定，浏览器检测到是同个函数引用，会做相应的优化，所以不会重复绑定到事件上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123; <span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">&#x27;click&#x27;</span>,fn); &#125;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">const</span> evFn= <span class="function"><span class="params">e</span>=&gt;</span> <span class="built_in">console</span>.log(e.currentTarget.innerHTML);</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123; add(<span class="string">&#x27;.p&#x27;</span>,  evFn)&#125;;</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation">event.stopImmediatePropagation</a><br>官方给出的说明是：<br>如果某个元素有多个相同类型事件的事件监听函数,则当该类型的事件触发时,多个事件监听函数将按照顺序依次执行.如果某个监听函数执行了 event.stopImmediatePropagation()方法,则除了该事件的冒泡行为被阻止之外(event.stopPropagation方法的作用),该元素绑定的后序相同类型事件的监听函数的执行也将被阻止.</p>
</li>
</ol>
<p>简单来说就是，执行了<code>event.stopImmediatePropagation()</code> 之后，后续的绑定在该dom上的相同类型事件都不再被响应，也不冒泡。</p>
<p><code>demo3</code> 代码，点击 test1 之后，只会在控制台输出一行 <code>test1</code>，其他 该元素的点击事件，#id点击事件都不会被响应</p>
<figure class="highlight html"><figcaption><span>demo3</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">selector, fn</span>) </span>&#123; <span class="built_in">document</span>.querySelector(selector).addEventListener(<span class="string">&#x27;click&#x27;</span>,fn); &#125;</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123; add(<span class="string">&#x27;.p&#x27;</span>,  <span class="function"><span class="params">e</span>=&gt;</span> <span class="built_in">console</span>.log(e.currentTarget.innerHTML)|| e.stopImmediatePropagation())&#125;;</span></span><br><span class="line"><span class="javascript">	add(<span class="string">&#x27;#id&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span><span class="built_in">console</span>.log(<span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript">	fn1();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在实际项目中，还是比较建议把事件处理逻辑抽出来当一个函数，毕竟在多人项目里面 <code>stopImmediatePropagation</code> 比较容易误伤队友…</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化功能测试流程方案</title>
    <url>/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>得益于谷歌开源了 <a href="https://github.com/GoogleChrome/puppeteer">puppeteer</a> 无界面版的 Chrome nodeJs api。<br>现在前端可很方便快捷的开发一些脚本去跑浏览器端的操作，包括自动化测试，爬虫或其他比较机械化的操作。<br>可以参见我上一篇文<br><strong><a href="https://jsonz1993.github.io/2018/03/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95puppeteer-%E4%B8%8Eqq%E7%A9%BA%E9%97%B4/">自动化测试 puppeteer 与qq空间</a></strong></p>
<p>ps: 🤦‍ 早知道当时删微博就直接写一个脚本，人工去删还漏了一些被批斗了一顿</p>
<p>既然 puppeteer 可以拿来做这么多事情，那前端是不是可以整合出一套流程测试的方案？</p>
<h2 id="大概的流程是："><a href="#大概的流程是：" class="headerlink" title="大概的流程是："></a>大概的流程是：</h2><ul>
<li>定时跑业务流程</li>
<li>成功则发送一条消息通知服务器</li>
<li>失败则 截图发送截图与其他信息<ul>
<li>到达一定的阈值就通知相关人员排查问题</li>
</ul>
</li>
<li>提供一个前端页面可以查询 任务情况</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                        +-------------------+</span><br><span class="line">        +-----------------------------&gt; |    记录消息         |</span><br><span class="line">        |          success              |                   |</span><br><span class="line">        |                               +------+------------+</span><br><span class="line">        |                                      |</span><br><span class="line">+-------+------+                               |</span><br><span class="line">|              |                               v</span><br><span class="line">| 定时跑测试任务  |                         +-----+-----------+</span><br><span class="line">|              |                         |                 |</span><br><span class="line">|              |                         |                 |</span><br><span class="line">+------+-------+                         |    查看任务记录   |</span><br><span class="line">       |                                 |                 |</span><br><span class="line">       |                                 |                 |</span><br><span class="line">       |                                 +-----+-----------+</span><br><span class="line">       |                                       ^</span><br><span class="line">       |                                       |</span><br><span class="line">       |          error                  +-----+----------+</span><br><span class="line">       |                                 |                |</span><br><span class="line">       +-------------------------------&gt; |    记录消息      |</span><br><span class="line">                                         |                |</span><br><span class="line">                                         |                |</span><br><span class="line">                                         +-------+--------+</span><br><span class="line">                                                 |</span><br><span class="line">                                                 |</span><br><span class="line">                                                 |  阈值</span><br><span class="line">                                                 |</span><br><span class="line">                                        +--------v---------+</span><br><span class="line">                                        |                  |</span><br><span class="line">                                        |                  |</span><br><span class="line">                                        |      通知人员      |</span><br><span class="line">                                        |                  |</span><br><span class="line">                                        |                  |</span><br><span class="line">                                        +------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用到的技术栈"><a href="#用到的技术栈" class="headerlink" title="用到的技术栈"></a>用到的技术栈</h2><p>自动化测试: puppeteer + axios + node-schedule<br>后台: egg + mongoose<br>前端界面: antd + dva</p>
<p>其实主要就 puppeteer + egg + mongoose 即可，前端界面只是刚好公司一个后台是用 antd-pro 写的 所以顺手带上去而已 = =#</p>
<p>本地一些环境：<code>node 8.9.4</code>, <code>npm 5.6.0</code>, <code>oxs 10.13.3</code>， 编辑器 <code>vscodeeeeee</code></p>
<p>以下涉及到公司项目业务的 都会略过讲一下过程 不会出现具体代码或截图等…</p>
<h1 id="自动化测试-auto-test-部分"><a href="#自动化测试-auto-test-部分" class="headerlink" title="自动化测试(auto_test)部分"></a>自动化测试(auto_test)部分</h1><p>目录结构:<br><img data-src="/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/auto_test_project.png" alt="auto_test_project"></p>
<h2 id="入口-app-js-主要处理一些获取自动化测试浏览器的对象，-项目启动，-定时任务启动"><a href="#入口-app-js-主要处理一些获取自动化测试浏览器的对象，-项目启动，-定时任务启动" class="headerlink" title="入口: app.js 主要处理一些获取自动化测试浏览器的对象， 项目启动， 定时任务启动"></a>入口: app.js 主要处理一些获取自动化测试浏览器的对象， 项目启动， 定时任务启动</h2><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mMonitor = <span class="built_in">require</span>(<span class="string">&#x27;./scripts/m&#x27;</span>);  <span class="comment">// m端测试脚本入口</span></span><br><span class="line"><span class="keyword">const</span> xDate = <span class="built_in">require</span>(<span class="string">&#x27;xdate&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> login = <span class="built_in">require</span>(<span class="string">&#x27;./scripts/login&#x27;</span>); <span class="comment">// 登录操作处理</span></span><br><span class="line"><span class="keyword">const</span> &#123; scheduleDelPic &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./scripts/schedule&#x27;</span>); <span class="comment">// 定时任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目入口</span></span><br><span class="line">;(<span class="keyword">async</span>()=&gt; &#123;</span><br><span class="line">  <span class="comment">// 因为公司项目需要一些前置的 操作才能访问，比如登录管理后台等操作，</span></span><br><span class="line">  <span class="comment">// 所以这里直接用一个文件把这一块抽出来，方便后面专心处理业务 不用关心用户登录 权限 测试账号等问题</span></span><br><span class="line">  <span class="comment">// 处理完直接返回一个 browser 对象，后面的其他测试只需要在当前的 browser 新开一个tab去跑即可</span></span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> login();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// m端项目</span></span><br><span class="line">  mMonitor(browser); <span class="comment">// 传入browser 对象 开始处理自动化测试</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 10分钟跑一次，这里也可以把间隔抽出来放到config里</span></span><br><span class="line">  <span class="comment">// 多嘴说一句，用setInterval 有一个弊端就是，前面执行脚本堵塞，会造成 一个任务跑完 直接跑下一个，中间不是间隔10min。 看具体的业务需求，也可以用 setTimeout 或者递归等去执行</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> mMonitor(browser), <span class="number">1000</span> * <span class="number">3600</span> * <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他的任务 定时任务等</span></span><br><span class="line">  <span class="comment">// 这里是写了个定时清理图片</span></span><br><span class="line">  scheduleDelPic();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="前置处理-login-js-这里可以取其他名字"><a href="#前置处理-login-js-这里可以取其他名字" class="headerlink" title="前置处理: login.js (这里可以取其他名字)"></a>前置处理: login.js (这里可以取其他名字)</h2><p>对于我这个项目来说 在开始跑之前要处理测试账号登录等问题，因为考虑到后面会有多个任务在跑的话，直接在 <code>browser</code> 对象 create new tab 可以同步跑，而不用每次都去处理登录问题。</p>
<figure class="highlight javascript"><figcaption><span>login.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">devtools</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">ignoreHTTPSErrors</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理一些其他的逻辑</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 把处理完的 browser 返回回去</span></span><br><span class="line">  <span class="keyword">return</span> browser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mMonitor-移动端测试任务"><a href="#mMonitor-移动端测试任务" class="headerlink" title="mMonitor 移动端测试任务"></a>mMonitor 移动端测试任务</h2><p>主要处理的事情有：</p>
<ul>
<li>调用其他的流程测试任务，比如我是： 公司项目的主流程下单任务</li>
<li>处理一些需要记录的信息，比如从什么时候跑，什么时候结束</li>
<li>处理与服务器的交互，成功调接口</li>
<li>失败截图保存用户信息等 传递给服务端</li>
</ul>
<figure class="highlight javascript"><figcaption><span>m.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mMonitor</span>(<span class="params">browser</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 建立一个 page 的引用，方便后面可以调用方法</span></span><br><span class="line">  <span class="keyword">let</span> page;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把页面传入主流程的测试任务</span></span><br><span class="line">    <span class="comment">// 这里面就有超级无敌大量的 业务代码... emmm 根据项目不同来写 完全没有参考意义就不写了</span></span><br><span class="line">    <span class="keyword">await</span> mainProcess(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试任务执行成功的处理</span></span><br><span class="line">    <span class="keyword">const</span> params = &#123; </span><br><span class="line">      <span class="comment">// 测试结果数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调接口存数据</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> mRequest(params);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;上报success接口成功&#x27;</span>, params);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="comment">// 跑测试流程中错误的对应处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      <span class="comment">// 错误结果的数据， 比如 </span></span><br><span class="line">      <span class="comment">// 截图地址url</span></span><br><span class="line">      <span class="comment">// title</span></span><br><span class="line">      <span class="comment">// url</span></span><br><span class="line">      <span class="comment">// serviceCode 等等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> mRequest(params);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;上报error 接口成功&#x27;</span>, params);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭当前页面</span></span><br><span class="line">    page.close();</span><br><span class="line">    <span class="comment">// 其他操作...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="schedule-定时任务"><a href="#schedule-定时任务" class="headerlink" title="schedule 定时任务"></a>schedule 定时任务</h2><p>这里的定时任务用的是 <a href="https://www.npmjs.com/package/node-schedule">node-schedule</a> 非常好用 支持 <code>Cron-style</code>。</p>
<p><code>schedule.scheduleJob(cronStyle)</code></p>
<p>cronStyle 参数 传入对应的时间，既可按照传入的参数 定时去执行，具体可以看👆链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cronStyle: </span><br><span class="line"></span><br><span class="line">*    *    *    *    *    *</span><br><span class="line">┬    ┬    ┬    ┬    ┬    ┬</span><br><span class="line">│    │    │    │    │    │</span><br><span class="line">│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)</span><br><span class="line">│    │    │    │    └───── month (1 - 12)</span><br><span class="line">│    │    │    └────────── day of month (1 - 31)</span><br><span class="line">│    │    └─────────────── hour (0 - 23)</span><br><span class="line">│    └──────────────────── minute (0 - 59)</span><br><span class="line">└───────────────────────── second (0 - 59, OPTIONAL)</span><br></pre></td></tr></table></figure>

<p>目前 <code>auto_test</code> 用到的定时任务只有一个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> schedule= <span class="built_in">require</span>(<span class="string">&#x27;node-schedule&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除某个目录的一层文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delPathFile</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> files = fs.readdirSync(path);</span><br><span class="line">  files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> fs.unlinkSync(<span class="string">`<span class="subst">$&#123;path&#125;</span>/<span class="subst">$&#123;file&#125;</span>`</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时删除图片，每周一一次</span></span><br><span class="line"><span class="built_in">exports</span>.scheduleDelPic = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> initPath = path.join(process.cwd(), <span class="string">&#x27;/static/init&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> errorPath = path.join(process.cwd(), <span class="string">&#x27;/static/error&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> successPath = path.join(process.cwd(), <span class="string">&#x27;/static/success&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  schedule.scheduleJob(<span class="string">&#x27;* * * * * 1&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    delPathFile(initPath);</span><br><span class="line">    delPathFile(errorPath);</span><br><span class="line">    delPathFile(successPath);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总的来说 <code>auto_test</code> 做的事情大概就是</p>
<ul>
<li>启动 <code>app.js</code>， 项目就会 10分钟自动跑一次测试程序。</li>
<li>成功、失败后做出对应的操作。</li>
<li>每周清除一次本地的截图数据。</li>
</ul>
<p>但是几个弊端</p>
<ol>
<li>puppeteer 是模拟浏览器，所以你的所有行为都是模拟用户操作：选择dom，点击、填写、选择操作。这些都是很容易因为页面的dom变化而失效，比如本来是选了一个 <code>#userId</code>的文本框，后面迭代把 <code>#userId</code>改为<code>#uuid</code> 那你就选不到了。 所以业务测试代码(<code>__mainProcess__</code>模块) 做好模块拆分，后面跟项目迭代也方便调整。</li>
<li>因为网络或dom操作经常触发异步行为，所以业务测试代码里面充满各种 <code>waitFor</code> <code>waitForSelector</code> <code>waitForNative</code> 等…不注意可能就会操作到没有出现的元素，这块要做好控制，比如waitFor 时间久一点，或者在<code>page</code>上封装一个方法，比如 <code>page._click</code>:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">_click</span>(<span class="params">selector</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(selector, &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="keyword">return</span> page.click(selector);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
在每次点击之前，先等待该元素出现再点击。这样可以避免很多运行时 没有找到元素的错误</li>
<li>模仿用户行为测试的话，意味着你要做一些前置的处理 如<code>login.js</code>， 要把账号密码等写到代码里面…虽然可以加密 不过还是会存在部分泄露风险…</li>
</ol>
<h1 id="自动化测试服务端-auto-test-backend-部分"><a href="#自动化测试服务端-auto-test-backend-部分" class="headerlink" title="自动化测试服务端(auto_test_backend)部分"></a>自动化测试服务端(auto_test_backend)部分</h1><p>对比 <code>auto_test</code> 部分， <code>auto_test_backend</code>才是我最头疼的地方。<br>毕竟不是科班出身的前端，对后端思想 以及数据库操作也没碰过= =emmm 做起来真的是超级无敌的费劲<br>特别是 设计数据格式的时候，都是拍脑袋决定了。 咦 我加个字段， 咦 我改个字段 又不是很清楚怎么快捷操作…. 估计是不熟 <code>mongoose</code> 的原因….</p>
<p>这个项目用的是 <a href="eggjs.org/zh-cn/intro/quickstart.html">egg</a> 框架，所以基本项目结构都是按着egg的规范来。</p>
<p>目录结构:<br><img data-src="/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/auto_test_backend_project.png" alt="auto_test_backend_project"></p>
<p>egg 帮我们做了很多事情，开发的时候只要跑一下 <code>npm run dev</code>，就会启动一个默认端口为<code>7001</code>的服务</p>
<p>对我们现在来说，基本只是提供 RESTAPI。<br>剩下的就简单啦，在<code>app/router.js</code>写对应的路由 如:<br><code>router.post(&#39;/api/v1/monitor&#39;, app.controller.monitor.create);</code> 这样如果有<code>post</code>请求<code>:7001/api/v1/monitor</code> 就会交由 <code>monitor.create</code> 这个 <code>controller</code> 处理。</p>
<h2 id="路由配置-app-router-js"><a href="#路由配置-app-router-js" class="headerlink" title="路由配置 app/router.js"></a>路由配置 app/router.js</h2><p>目前路由配置比较简单，就配置了两个，一个用来处理接收 <code>auto_test</code>项目中测试结果；一个用来输出测试列表。</p>
<figure class="highlight javascript"><figcaption><span>app/router.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// post 请求交由app.controller.monitor.create处理</span></span><br><span class="line">  router.post(<span class="string">&#x27;/api/v1/monitor&#x27;</span>, app.controller.monitor.create);</span><br><span class="line">  <span class="comment">// get 请求交由app.controller.monitor.get处理</span></span><br><span class="line">  router.get(<span class="string">&#x27;/api/v1/monitor&#x27;</span>, app.controller.monitor.get);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="controller-解析用户的输入，处理后返回相应的结果"><a href="#controller-解析用户的输入，处理后返回相应的结果" class="headerlink" title="controller 解析用户的输入，处理后返回相应的结果"></a>controller 解析用户的输入，处理后返回相应的结果</h2><p>egg帮我们做了封装，直接在controller文件夹下起文件，写对应的数据，后面可以从全局对象<code>app.controller.fileName.mothedName</code>去获取对应的方法，比如现在有这个文件 <code>app/controller/test</code>，那么我可以在其他地方通过 <code>app.controller.test</code>去获取。</p>
<p>这里拿 <code>app.controller.monitor.get</code> 举例</p>
<p>monitor.get 方法要做的事情有</p>
<ul>
<li>验证结构的请求参数规则</li>
<li>处理查询参数</li>
<li>处理分页的问题</li>
<li>调service 获取数据</li>
<li>处理数据</li>
<li>调用rest中间件发送数据</li>
</ul>
<p>验证参数，这里用到的是 <a href="https://github.com/eggjs/egg-validate">egg-validate</a>插件，直接配置就可以用了</p>
<figure class="highlight javascript"><figcaption><span>config/plugin.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.validate = &#123;</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">package</span>: <span class="string">&#x27;egg-validate&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>app/controller/monitor.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">MonitorController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里验证失败会抛出一个 422 的异常</span></span><br><span class="line">  ctx.validate(&#123;</span><br><span class="line">    <span class="attr">start</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>, <span class="attr">require</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    <span class="comment">// end, state, pagination等等其他参数验证</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取传过来的参数</span></span><br><span class="line">  <span class="keyword">const</span> &#123; start, end, state, <span class="attr">pagination</span>: _pagination&#125; = ctx.query;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据自身业务 处理查询参数</span></span><br><span class="line">  (<span class="keyword">typeof</span> state !== <span class="string">&#x27;undefined&#x27;</span>) &amp;&amp; (params.state = state);</span><br><span class="line">  <span class="keyword">if</span> (start &amp;&amp; end) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(params, &#123;</span><br><span class="line">      <span class="attr">time</span>: &#123;</span><br><span class="line">        <span class="attr">$gte</span>: start,</span><br><span class="line">        <span class="attr">$lte</span>: end,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理分页参数</span></span><br><span class="line">  <span class="keyword">const</span> paramsPagination = <span class="built_in">Object</span>.assign(&#123; <span class="attr">size</span>: <span class="number">20</span>, <span class="attr">page</span>: <span class="number">1</span> &#125;, <span class="built_in">JSON</span>.parse(_pagination || <span class="string">&#x27;&#123;&#125;&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调 service 获取数据</span></span><br><span class="line">  <span class="comment">// service也和 controller 一样，egg做了文件的映射，直接 ctx.service能很方便的去获取</span></span><br><span class="line">  <span class="keyword">const</span> &#123; list, pagination &#125; = <span class="keyword">await</span> ctx.service.monitor.find(&#123; params, ...paramsPagination &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">  list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    item.img_url = <span class="string">`http://localhost:7001<span class="subst">$&#123;item.img_url&#125;</span>`</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调 rest中间件 处理返回数据</span></span><br><span class="line">  ctx.rest(&#123;</span><br><span class="line">    list,</span><br><span class="line">    pagination,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="service-处理一些和数据库交互的逻辑"><a href="#service-处理一些和数据库交互的逻辑" class="headerlink" title="service 处理一些和数据库交互的逻辑"></a>service 处理一些和数据库交互的逻辑</h2><p>service和controller 一样，egg帮我们做了一些文件的映射，所以也是直接在<code>app/service/monitor.js</code>写对应的逻辑即可</p>
<p>这一块应该是最麻烦的， mongoose api 不熟，也不确定这么写会不会最优,合不合理等…有时间或者以后有机会 会去看《SQL必知必会》 学学数据库这一块软肋。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).Service;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">MoitorService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">find</span>(<span class="params">&#123;params, size, page&#125;</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查复合条件的页数</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="keyword">await</span> <span class="built_in">this</span>.app.model.Monitor</span><br><span class="line">      .find(params).count();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理分页</span></span><br><span class="line">    <span class="keyword">const</span> monitors = <span class="keyword">await</span> <span class="built_in">this</span>.app.model.Monitor</span><br><span class="line">      .find(params).sort(<span class="string">&#x27;time&#x27;</span>).select(<span class="string">&#x27;-__v&#x27;</span>)</span><br><span class="line">      .skip(size * (page-<span class="number">1</span>))</span><br><span class="line">      .limit(size).lean();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理要返回的格式</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: monitors,</span><br><span class="line">      <span class="attr">pagination</span>: &#123;</span><br><span class="line">        count, size, page,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="middleware-中间件"><a href="#middleware-中间件" class="headerlink" title="middleware 中间件"></a>middleware 中间件</h2><p>egg 其实基于koa实现的，所以对中间件形式和koa一样是洋葱圈模型。</p>
<p>集成中间件也很简单，在<code>app/middleware/</code>下写对应的中间件，再在 <code>config/config.default.js</code>下配置即可启用。</p>
<p>写中间件</p>
<figure class="highlight javascript"><figcaption><span>app/middleware/error_handler.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">()=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">errorHandler</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> next();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 所有异常都在 app 上触发一个 error 事件</span></span><br><span class="line">      ctx.app.emit(<span class="string">&#x27;error&#x27;</span>, err, ctx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> status = err.status || <span class="number">500</span>;</span><br><span class="line">      <span class="comment">// 生产环境时 500 错误的详细错误内容不返回给客户端，可能包含敏感信息</span></span><br><span class="line">      <span class="keyword">const</span> error = status === <span class="number">500</span> &amp;&amp; ctx.app.config.env === <span class="string">&#x27;prod&#x27;</span></span><br><span class="line">        ? <span class="string">&#x27;Internal Server Error&#x27;</span></span><br><span class="line">        : err.message;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 从 error 对象上读出各个属性 设置到响应中</span></span><br><span class="line">      ctx.body = &#123; error &#125;;</span><br><span class="line">      <span class="keyword">if</span> (status === <span class="number">422</span>) &#123;</span><br><span class="line">        ctx.body.detail = err.errors;</span><br><span class="line">      &#125;</span><br><span class="line">      ctx.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加配置</p>
<figure class="highlight javascript"><figcaption><span>app/config/config.default.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="comment">// 中间件配置</span></span><br><span class="line">    <span class="attr">middleware</span>: [<span class="string">&#x27;errorHandler&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// errorHandler配置，只对 /api 开头的路由做处理</span></span><br><span class="line">    <span class="attr">errorHandler</span>: &#123;</span><br><span class="line">      <span class="attr">match</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="阈值发送邮件功能"><a href="#阈值发送邮件功能" class="headerlink" title="阈值发送邮件功能"></a>阈值发送邮件功能</h2><p>这一块要维护两个临时变量数组，三个配置参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = &#123;&#125;;</span><br><span class="line">temp.errorObj = &#123;</span><br><span class="line">  <span class="attr">errorArray</span>: [], <span class="comment">// 用来存每次错误上报的时间戳</span></span><br><span class="line">  <span class="attr">sendArray</span>: [], <span class="comment">// 用来存每次发送的时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> errorConfig = &#123;</span><br><span class="line">  <span class="attr">maxCount</span>: <span class="number">5</span>, <span class="comment">// 单位时间超过n次就报警</span></span><br><span class="line">  <span class="attr">unitTime</span>: <span class="number">30</span>, <span class="comment">// 单位时间为：n分钟</span></span><br><span class="line">  <span class="attr">maxSend</span>: <span class="number">2</span>, <span class="comment">// 单位时间最多发n封邮件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">大概的逻辑是， 每次报错的时候， errorArray 塞入一个时间戳，然后判断：</span><br><span class="line"><span class="number">1.</span> 判断是否到达发送阈值</span><br><span class="line"><span class="number">2.</span> 根据当前的时间戳和配置来清理过期的数据</span><br><span class="line"><span class="number">3.</span> 判断单位时间内是否达到发送阈值</span><br><span class="line"><span class="number">4.</span> 判断单位时间内是否超过发送次数</span><br><span class="line"><span class="number">5.</span> 构建发送内容， 🚀  处理后续的记录操作</span><br></pre></td></tr></table></figure>
<p>用到的发邮件插件是 <a href="https://www.jianshu.com/p/ee200a67853c">nodemailer</a> 简单粗暴 用过都说好</p>
<h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>其实 <code>auto_test_project</code> 最麻烦的是在定义数据库格式的时候，经常定义少一些关键的字段（目前肯定也还存在这种情况的）。<br>还有就是本来以为和 <code>angular</code> 一样，<code>controller</code> 会塞大量的业务逻辑， 等到后面有一个场景是要在某个 <code>controller</code>调用另一个<code>controller</code> 时才发现，原来 controller 主要的职责是负责处理路由和一些参数验证输出等比较对外的工作，对内的基本都写成了<code>service</code>。</p>
<p>前端的小伙伴很多人懂node 可能也只是懂node的语法层 要想真的写后台或者微全栈，还是有很多东西要学的。</p>
<h1 id="列表展示-admin-项目"><a href="#列表展示-admin-项目" class="headerlink" title="列表展示(admin)项目"></a>列表展示(admin)项目</h1><p>列表展示相对简单，没什么好讲的。想用什么技术栈都比较随意，react,vue甚至hbs或者直接在js里面写html字符串循环都ok。</p>
<p>这里推一下一篇文章，介绍工作中的一个项目 <a href="https://jsonz1993.github.io/2018/02/react%E5%85%A8%E5%AE%B6%E6%A1%B6-dva-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/">react全家桶 &amp;&amp; dva最佳实践</a></p>
<h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>跑自动化测试脚本(auto_test)的log<br><img data-src="/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/log.png" alt="log.png"></p>
<p>自动化测试成功后提交数据(admin)<br><img data-src="/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/success.png" alt="success"></p>
<p>自动化测试失败后将数据上报(admin) 包含了标题，报错信息，链接，截图，标记等<br><img data-src="/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%96%B9%E6%A1%88/admin.png" alt="admin"></p>
<p>文章作为学习的记录到此结束，这个项目主要学习了 egg,mongodb,puppeteer 等 还是挺有收获的.</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>项目代码规范工作流——editor、prettier、eslint、git-check</title>
    <url>/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E2%80%94%E2%80%94editor%E3%80%81prettier%E3%80%81eslint%E3%80%81git-check/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近部门进了挺多新前端，有实习生 有应届生，人一多<br>代码规范就不能完全依赖 “口口相传” 去约束了， 特别是看到一堆的 有分号，无分号，四缩进，二缩进等问题</p>
<p>对于有小小代码洁癖的我实在是受不了 于是终于在项目中 集成各种用来 规范（约束）的工具。</p>
<p>主要有：</p>
<ul>
<li>editorConfig 编辑器配置文件</li>
<li>Prettier 批量格式化代码</li>
<li>Eslint js、jsx 文件代码检查规范</li>
<li>Flow (暂未集成)</li>
<li>lint-staged 提交到git之前跑一次代码检查</li>
</ul>
<p>本地一些环境：<code>node 8.9.4</code>, <code>npm 5.6.0</code>, <code>oxs 10.13.3</code>， 编辑器 <code>vscodeeeeee</code></p>
<h1 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h1><p>What is EditorConfig?<br>官网给出的答案是：editorconfig帮助开发人员在不同的编辑器和ide之间定义和维护一致的编码风格。<br><strong>简单来说就是跨编辑器使用同一份代码缩进等配置</strong></p>
<p>EditorConfig 集成起来十分简单， 大概就是创建配置文件，安装相应的编辑器插件即可。</p>
<ol>
<li>创建 <a href="http://editorconfig.org/#example-file"><code>.editorconfig</code></a> 文件</li>
<li><a href="http://editorconfig.org/#download">安装对应编辑器的插件</a></li>
</ol>
<p>我用的是 vscode 直接安装这个 <code>EditorConfig for vs code</code>，安装完重启，编辑器就会根据配置文件里面的配置来控制代码缩进等行为</p>
<p>附上项目的配置文件</p>
<figure class="highlight json"><figcaption><span>.editorconfig</span></figcaption><table><tr><td class="code"><pre><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line">end_of_line = lf # mac linux/unix 都用lf。 window 设置 cr 在 *nix 有问题</span><br><span class="line">indent_size = <span class="number">4</span></span><br><span class="line">indent_style = space</span><br><span class="line">max_line_length = <span class="number">120</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*.jsx]</span><br><span class="line">indent_size= <span class="number">2</span></span><br></pre></td></tr></table></figure>


<h1 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h1><p>现在有了一些基本的配置，以后写的代码就可以比较规范一点点点，但是原来的旧代码怎么办呢？<br>不可能一个文件一个文件去打开吧，不完全统计 项目有上千个编辑的文件….一个一个去手动打开不符合程序员的风格</p>
<p>so… <a href="https://prettier.io/">Prettier</a>就是为我们做这些事情的</p>
<ol>
<li>安装: <code>npm i --save-dev prettier</code></li>
<li>创建 <a href="https://prettier.io/docs/en/configuration.html"><code>.prettierrc</code>配置文件</a><br>该配置文件会继承<code>editorConfig</code>的配置</li>
<li>向<code>package.json</code>添加脚本: <code>&quot;prettier&quot;: &quot;prettier --write ./*&quot;</code><blockquote>
<p>我项目里面用的是 <code>&quot;prettier&quot;: &quot;prettier --write &#39;./src/**/*.js&#39; &#39;./src/**/*.jsx&#39; &#39;./src/**/*.css&#39; &#39;./src/**/*.scss&#39;&quot;,</code></p>
</blockquote>
</li>
<li>创建 <code>.prettierignore</code> 文件，用来忽略一些文件 &amp;&amp; 目录</li>
<li>一切准备就绪之后 !!!! <code>npm run prettier</code> 呼呼 看到提示一千个文件更改记录 哈哈哈</li>
</ol>
<p>附上配置文件:</p>
<figure class="highlight javascript"><figcaption><span>.prettierrc.js</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// https://prettier.io/docs/en/options.html</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">trailingComma</span>: <span class="string">&quot;es5&quot;</span>, <span class="comment">// 数组 对象尾随逗号 [arr, ] &#123; obj, &#125;</span></span><br><span class="line">    <span class="comment">// bracketSpacing: true, // 对象空格 &#123; foo: bar &#125;, false=&gt; &#123;foo:bar&#125;</span></span><br><span class="line"><span class="comment">// jsxBracketSameLine: false, // jsx闭标签是否另起一行 &lt;Test&gt;&lt;/Test&gt;</span></span><br><span class="line"><span class="comment">// arrowParens: &#x27;avoid&#x27;, // 箭头函数是否省略括号 a=&gt; a, (a)=&gt; a</span></span><br><span class="line">    <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>.prettierignore</span></figcaption><table><tr><td class="code"><pre><span class="line">/node_modules</span><br><span class="line">/dist</span><br><span class="line">/src/lib/</span><br><span class="line"><span class="regexp">/src/g</span>lobal/fonts</span><br></pre></td></tr></table></figure>

<h1 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h1><p>有了上面介绍的 <code>editor</code>、<code>prettier</code>还是远远不够的，因为 js语法 不是很严格，比如有没有分号啊 之类的问题还是要用 eslint 来约束的。</p>
<p>在很多年前，我是特别反感 Eslint 的，因为经常写得一点不规范，直接就报 error 整个项目跑不起来。<br>但是 存在即合理，现在觉得这东西贼好用。</p>
<ol>
<li>安装 eslint: <code>npm i --save-dev eslint</code></li>
<li>启动引导脚本: <code>./node_modules/.bin/eslint --init</code> 配置 <code>.eslintrc</code>。<blockquote>
<p>这里可以直接选 <code>Use a popular style guide</code> 然后选行业比较看好的规范 <code>airbnb</code>的，原先是打算选这个，但是后面发现和项目现有的规范很不相同，所以后面就走回答问题选项。</p>
</blockquote>
</li>
<li>向 <code>package.json</code> 添加脚本: <code>&quot;eslint&quot;: &quot;eslint --fix ./&quot;</code><blockquote>
<p>我写的是 <code>&quot;eslint&quot;: &quot;eslint --fix &#39;./src/**/*.&#123;jsx, js&#125;&#39;&quot;,</code></p>
</blockquote>
</li>
<li>创建 <code>.eslintignore</code> 文件，并向其添加需要忽略的文件或目录。</li>
<li>安装 <a href="https://eslint.org/docs/user-guide/integrations">编辑器 eslint 插件</a></li>
<li>配置编辑器，我这里用的是 vscode</li>
</ol>
<ul>
<li>“eslint.autoFixOnSave”: true  <code>开启eslint 检查</code></li>
<li>“javascript.validate.enable”: false <code>关闭vscode自带的js检查</code></li>
</ul>
<p>eslint插件会智能检查编辑状态的 JS 文件，并自动修复；<code>npm run eslint</code> 脚本可以检查和智能修复“对应的文件”。 不过亲测修复的效果比较一般，更多的报错需要手动去处理</p>
<p>在配置eslint的时候 遇到了几个比较郁闷的地方</p>
<h2 id="可以先把一些报错项改为-警告项，慢慢迭代-免得一上eslint-要停几天来修改原来的文件"><a href="#可以先把一些报错项改为-警告项，慢慢迭代-免得一上eslint-要停几天来修改原来的文件" class="headerlink" title="可以先把一些报错项改为 警告项，慢慢迭代 免得一上eslint 要停几天来修改原来的文件"></a>可以先把一些报错项改为 警告项，慢慢迭代 免得一上eslint 要停几天来修改原来的文件</h2><h2 id="一些简单的处理可以写脚本去做"><a href="#一些简单的处理可以写脚本去做" class="headerlink" title="一些简单的处理可以写脚本去做"></a>一些简单的处理可以写脚本去做</h2><p>比如说之前项目写的比较不规范，出现了很多类似：<code>export default from &#39;file-path&#39;</code>的语句，但是eslint不认，觉得这是不符合规范的，需要改为 <code>export &#123; default &#125; from &#39;file-path&#39;</code></p>
<p>这点我也比较认同，但是 这么多个文件，一个一个改是不存在的，所以写了个短脚本去处理</p>
<figure class="highlight javascript"><figcaption><span>fix-export-default</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scan</span>(<span class="params">&#123;dirPath&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isDirectory = fs.statSync(dirPath).isDirectory();</span><br><span class="line">    <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">        <span class="keyword">const</span> childs = fs.readdirSync(dirPath);</span><br><span class="line">        childs.forEach(<span class="function"><span class="params">child</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> nextPath = path.join(dirPath, child);</span><br><span class="line">            <span class="keyword">const</span> stat = fs.statSync(nextPath);</span><br><span class="line">            <span class="keyword">const</span> isDirectory = stat.isDirectory();</span><br><span class="line">            <span class="keyword">const</span> isFile = stat.isFile();</span><br><span class="line">            <span class="keyword">const</span> extname = isFile &amp;&amp; path.extname(child);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文件夹类型 递归</span></span><br><span class="line">            <span class="keyword">if</span> (isDirectory) scan(&#123;<span class="attr">dirPath</span>: nextPath&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 排除不是 js jsx 的文件</span></span><br><span class="line">            <span class="keyword">if</span> (![<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>].includes(extname)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开始读文件</span></span><br><span class="line">            <span class="keyword">let</span> fileStr = fs.readFileSync(nextPath) +<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span> exg = <span class="regexp">/export default from/gi</span>;</span><br><span class="line">            <span class="keyword">if</span> (exg.exec(fileStr))</span><br><span class="line">                fileStr = fileStr.replace(<span class="string">&#x27;export default from&#x27;</span>, <span class="string">&#x27;export &#123;default&#125; from&#x27;</span>);</span><br><span class="line">            fs.writeFileSync(nextPath, fileStr, &#123;<span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scan(&#123;</span><br><span class="line">    <span class="attr">dirPath</span>: path.join(process.cwd(), <span class="string">&#x27;/src&#x27;</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="webpack别名引用-路径报错问题"><a href="#webpack别名引用-路径报错问题" class="headerlink" title="webpack别名引用 路径报错问题"></a>webpack别名引用 路径报错问题</h2><p>安装对应的 eslint 处理插件: <code>npm i --save-dev eslint-import-resolver-webpack eslint-plugin-import</code></p>
<p>在 <code>.eslint.js</code> 里面加这段配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;import/resolver&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">webpack</span>: &#123;</span><br><span class="line">          <span class="attr">config</span>: getWebpackConfig, <span class="comment">// 这里是webpack配置路径</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="其他注意问题"><a href="#其他注意问题" class="headerlink" title="其他注意问题"></a>其他注意问题</h2><p>项目是在 浏览器运行， 又是 es6语法， 又有一些node脚本，会有一些全局的变量引用提示报错，怎么办？<br>改配置!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>项目是后端模版渲染的，会有一些全局变量，eslint报错怎么办？<br>改配置!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;globals&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">__DEV__</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__HTTPS__</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">FB</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">ga</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">$</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">ercjs</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">google</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">IS_APP</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">i18n</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">Zepto</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">AdjustEvent</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">Adjust</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fbq</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>项目用了很多新语法 eslint 不识别, 用了 react 怎么办？<br>改配置…具体的 谷歌一下 一堆答案 不再赘述</p>
<h1 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h1><p>Flow可以理解为 很轻量型 无侵入的 静态类型检查<br>项目暂时没有考虑集成，所以这里不做过多介绍</p>
<h1 id="git-check"><a href="#git-check" class="headerlink" title="git-check"></a>git-check</h1><p>既然我们 有了编辑器的配置， js编辑实时检查， 但是如果有些小伙伴不遵守规则 搞事情怎么办呢？<br>这时候我们可以在最后一个流程加上验证的部分，  在git 提交的时候跑一些脚本去验证，如果通过就给提交，不通过就提示错误</p>
<p><a href="https://github.com/okonet/lint-staged">lint-staged</a> 可以帮我们做这些事情</p>
<ol>
<li>安装 lint-staged husky: <code> npm i --save-dev lint-staged husky</code></li>
<li>向 <code>package.json</code> 添加运行脚本 <code>&quot;precommit&quot;: &quot;lint-staged&quot;</code><blockquote>
<p>这时候在git commit 之前会跑 lint-staged的东西</p>
</blockquote>
</li>
<li>再向 <code>package.json</code> 添加内容:  注意，这时候不是加在 <code>scripts</code>里面，而是加在同级<br><code>&quot;lint-staged&quot;: &#123;  // 上面提供的“自动化脚本”  &quot;*.js&quot;: [&quot;eslint --fix&quot;, &quot;git add&quot;],  &quot;*.json&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;],  &quot;*.css&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;],  &quot;*.scss&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;],  &quot;*.md&quot;: [&quot;prettier --write&quot;, &quot;git add&quot;] &#125;</code><blockquote>
<p>因为项目是本地打包再推远程，所以我的配置是指定了 src下的<br><code>&quot;src/**/*.js&quot;: [ &quot;eslint --fix&quot;, &quot;git add&quot; ], &quot;src/**/*.jsx&quot;: [ &quot;eslint --fix&quot;, &quot;git add&quot; ], &quot;src/**/*.css&quot;: [ &quot;prettier --write&quot;, &quot;git add&quot; ], &quot;src/**/*.scss&quot;: [ &quot;prettier --write&quot;, &quot;git add&quot; ]</code></p>
</blockquote>
</li>
</ol>
<p>这样在提交之前就会对 新增的(git add) .js 文件执行 <code>&quot;eslint --fix&quot;</code> 脚本， 以此类推…</p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>emmmmmmmmmmmmmmmmmmmmmmmmm 虽然看起来挺简单的，但是整套结合项目去折腾下来 挺多坑的。<br>特别是eslint这块的配置</p>
<p>第一次跑 <code>airbnb</code> 的项目： <img data-src="/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E2%80%94%E2%80%94editor%E3%80%81prettier%E3%80%81eslint%E3%80%81git-check/error1.png" alt="eror1"><br>目前项目配置官方推荐的 esling 之后: <img data-src="/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E2%80%94%E2%80%94editor%E3%80%81prettier%E3%80%81eslint%E3%80%81git-check/error2.png" alt="eror2"><br>把error改为 warn保证项目能跑起来: <img data-src="/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E2%80%94%E2%80%94editor%E3%80%81prettier%E3%80%81eslint%E3%80%81git-check/error3.png" alt="eror3"><br>git提交检查失败: <img data-src="/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E2%80%94%E2%80%94editor%E3%80%81prettier%E3%80%81eslint%E3%80%81git-check/git-check.png" alt="git-check"></p>
<p>最后附上eslint配置</p>
<figure class="highlight javascript"><figcaption><span>.eslint.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getWebpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./config/webpack.dev.config&#x27;</span>)(process.cwd());</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;babel-eslint&quot;</span>,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>, <span class="string">&quot;plugin:react/recommended&quot;</span>, <span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;jsx&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;modules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;experimentalObjectRestSpread&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;react&quot;</span>],</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;import/resolver&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">webpack</span>: &#123;</span><br><span class="line">                <span class="attr">config</span>: getWebpackConfig,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;react&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;React&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;16.1.1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">es6</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;globals&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">__DEV__</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">__HTTPS__</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">FB</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ga</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">$</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ercjs</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">google</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">IS_APP</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">i18n</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">Zepto</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">AdjustEvent</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">Adjust</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">fbq</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sort-imports&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;import/first&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;import/no-named-as-default&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;import/no-named-as-default-member&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;import/extensions&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;prefer-destructuring&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;no-new&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;react/jsx-filename-extension&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;no-console&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;no-useless-escape&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;semi&quot;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这些规则后面会改为错误，暂时先警告</span></span><br><span class="line">        <span class="string">&quot;no-unused-vars&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;react/prop-types&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;react/no-string-refs&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;react/jsx-key&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;react/no-unescaped-entities&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Work</tag>
        <tag>Build</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化测试 puppeteer 与qq空间</title>
    <url>/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95puppeteer-%E4%B8%8Eqq%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>emmmm 前几天女朋友想加我qq。才想到 万年没用的qq里面qqZone 遗留着千年前的一堆中二留言 &amp;&amp; 中二说说。 刚好最近有接触到 自动化测试 <a href="https://github.com/GoogleChrome/puppeteer">puppeteer</a> 框架， 就想着写个脚本去自动删掉留言板和说说。 整个项目基于 node8 运行 用的 async await语法。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先 puppeteer 可以理解为 是谷歌出的一个无UI版本的Chrome。</p>
<p><img data-src="/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95puppeteer-%E4%B8%8Eqq%E7%A9%BA%E9%97%B4/1.png" alt="1.png"></p>
<p>先从 puppeteer 实例化出一个 <code>Browser</code>， 根据 <code>Browser</code>去new 一个 <code>Page</code>。<br>这个Page可以理解成 我们平时浏览器的一个 tab。 一般操作都是基于 Page去实现的</p>
<p>Page 提供了很多简单易用的api用于操作网页元素， 基本都是异步操作，所以直接用 async/await 非常方便快捷简单易懂。</p>
<ul>
<li>比如获取元素: <code>page.$(&#39;#switcher_plogin&#39;)</code> </li>
<li>在输入框填入特定信息，每次输入间隔100毫秒模拟输入: <code>page.type(&#39;#mytextarea&#39;, &#39;World&#39;, &#123;delay: 100&#125;);</code></li>
<li>选择下拉框: <code>Page.select(&#39;select#colors&#39;, &#39;blue&#39;);</code></li>
</ul>
<h1 id="项目细节"><a href="#项目细节" class="headerlink" title="项目细节"></a>项目细节</h1><h2 id="项目初始化与登录步骤"><a href="#项目初始化与登录步骤" class="headerlink" title="项目初始化与登录步骤"></a>项目初始化与登录步骤</h2><p>首先我们要打开 qq空间 的页面 并登录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用操作的工具函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pageTool</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _page = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">_click</span>(<span class="params">selector</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> page.waitForSelector(selector, &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span> page.click(selector);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">_waitForNavigation</span>(<span class="params">opts = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> page.waitForNavigation(&#123; <span class="attr">waitUntil</span>: <span class="string">&#x27;domcontentloaded&#x27;</span>, ...opts &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.assign(page, _page);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">true</span>, <span class="comment">// 是否显示界面</span></span><br><span class="line">    <span class="attr">devtools</span>: <span class="literal">true</span>, <span class="comment">// 是否显示开发者工具</span></span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">100</span>, <span class="comment">// 延迟每一次操作的毫秒数</span></span><br><span class="line">    <span class="attr">ignoreHTTPSErrors</span>: <span class="literal">true</span>, <span class="comment">// 是否忽略HTTPS错误</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> loginPage = <span class="keyword">await</span> browser.newPage(); <span class="comment">// 打开新tab 获取当前tab的实例</span></span><br><span class="line">  <span class="keyword">const</span> page = loginPage;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 仿真 设置窗口大小与 UA 信息。 这里可以设置为 移动端的。</span></span><br><span class="line">  <span class="comment">// puppeteer 内置了一些设备可供选择 可以通过以下获取：</span></span><br><span class="line">  <span class="comment">// const devices = require(&#x27;puppeteer/DeviceDescriptors&#x27;);</span></span><br><span class="line">  <span class="comment">// const iPhone = devices[&#x27;iPhone 6&#x27;];</span></span><br><span class="line">  loginPage.emulate(&#123; <span class="attr">viewport</span>: &#123; <span class="attr">width</span>: <span class="number">1280</span>, <span class="attr">height</span>: <span class="number">800</span> &#125;, <span class="attr">userAgent</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3347.0 Safari/537.36&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开特定链接，并等待3秒钟</span></span><br><span class="line">  <span class="comment">// PS: 一般是用 page.waitForNavigation 去等待页面加载，这里网络问题经常会出现卡住 所以简单设置为等3s</span></span><br><span class="line">  <span class="keyword">await</span> loginPage.goto(<span class="string">&#x27;https://i.qq.com/?s_url=http%3A%2F%2Fuser.qzone.qq.com%2F847691625%2Finfocenter&amp;rd=1&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> loginPage.waitFor(<span class="number">3000</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这里封装了一点点常用的操作</span></span><br><span class="line">  pageTool(loginPage);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开成功之后 我们开始走登录的步骤了</span></span><br><span class="line">  (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// QQ空间里面是用一个 iframe 去装登录的部分，所以这里要先获取 登录iframe对象再进行操作</span></span><br><span class="line">    <span class="keyword">const</span> iframeDom = <span class="keyword">await</span> loginPage.frames().filter(<span class="function"><span class="params">iframe</span> =&gt;</span> iframe._name === <span class="string">&#x27;login_frame&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有登录qq的话，可以使用快捷登录模式</span></span><br><span class="line">    <span class="keyword">const</span> iframeLoginBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;#img_out_847691625&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (iframeLoginBtn) &#123;</span><br><span class="line">      <span class="keyword">await</span> iframeLoginBtn.click();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果没有登录qq 直接读配置里面的信息去用账户密码登录</span></span><br><span class="line">      <span class="keyword">if</span> (data.qq === <span class="string">&#x27;你的qq账号&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;先在a.js 输入qq账号和密码&#x27;</span>);</span><br><span class="line">      <span class="comment">// 密码模式</span></span><br><span class="line">      <span class="keyword">const</span> plogin = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;#switcher_plogin&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> plogin.click(); <span class="comment">//点击账户密码登录的按钮</span></span><br><span class="line">      <span class="keyword">const</span> userName = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;#u&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> userName.type(data.qq); <span class="comment">// 填入账户</span></span><br><span class="line">      <span class="keyword">const</span> pw = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;#p&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> pw.type(data.pw); <span class="comment">// 填入密码</span></span><br><span class="line">      <span class="keyword">const</span> loginBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;#login_button&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> loginBtn.click(); <span class="comment">// 点击登录</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;登录完成&#x27;</span>);</span><br><span class="line">    <span class="comment">// 到这里 登录步骤已经完成 大概涵盖了整个项目的80%操作 其他都是类似的dom操作</span></span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 删除留言板模块代码，见下一个栏目 **/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 删除说说模块代码，见下下个栏目 **/</span></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="删除留言板的功能模块"><a href="#删除留言板的功能模块" class="headerlink" title="删除留言板的功能模块"></a>删除留言板的功能模块</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delCommit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 等待一个 .head-nav-menu a[title=&quot;留言板&quot;] 的元素 css选择器</span></span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.head-nav-menu a[title=&quot;留言板&quot;]&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">await</span> page._click(<span class="string">&#x27;.head-nav-menu a[title=&quot;留言板&quot;]&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.app_canvas_frame&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;留言板iframe加载完成&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里重新获取一个 ifrmae 留言板也是用一个iframe 嵌套进来的....没想到整个qq空间是由一堆的ifrmae堆起来</span></span><br><span class="line">  <span class="keyword">const</span> iframeDom = <span class="keyword">await</span> page.frames().filter(<span class="function"><span class="params">iframe</span> =&gt;</span> iframe.url().includes(<span class="string">&#x27;qzs.qq.com/qzone/msgboard/msgbcanvas.html&#x27;</span>))[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;留言板iframe 获取完成 &#x27;</span>, iframeDom);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> btnBatchBottom = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;#btnBatchBottom&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> btnBatchBottom.click();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;批量点击成功 &#x27;</span>, btnBatchBottom);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> delTime = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一次完整的删除逻辑</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delOnes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 开始执行`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> $chkSelectAllBottom = <span class="string">&#x27;#chkSelectAllBottom&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> chkSelectAllBottom = <span class="keyword">await</span> iframeDom.$($chkSelectAllBottom);</span><br><span class="line">    <span class="keyword">await</span> chkSelectAllBottom.click();</span><br><span class="line">    <span class="keyword">if</span> (delTime !== <span class="number">1</span>) <span class="keyword">await</span> chkSelectAllBottom.click();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 点击全选`</span>, chkSelectAllBottom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> $delAll = <span class="string">&#x27;#btnDeleteBatchBottom&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> delAll = <span class="keyword">await</span> iframeDom.$($delAll);</span><br><span class="line">    <span class="keyword">await</span> delAll.click();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 点击删除`</span>, delAll)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> $sureBtn = <span class="string">&#x27;.qz_dialog_layer_btn.qz_dialog_layer_sub span&#x27;</span>;</span><br><span class="line">    <span class="keyword">await</span> page._click($sureBtn);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 点击确定`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 删除 执行结束`</span>);</span><br><span class="line">    delTime++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="keyword">const</span> hasCommit = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;#ulCommentList .bor3&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hasCommit) &#123;</span><br><span class="line">      <span class="keyword">await</span> delOnes();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> delOnes();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// delCommit();</span></span><br></pre></td></tr></table></figure>

<h2 id="删除说说模块"><a href="#删除说说模块" class="headerlink" title="删除说说模块"></a>删除说说模块</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delEmotion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.head-nav-menu a[title=&quot;说说&quot;]&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">await</span> page._click(<span class="string">&#x27;.head-nav-menu a[title=&quot;说说&quot;]&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.app_canvas_frame&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;说说iframe加载完成&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> iframeDom = <span class="keyword">await</span> page.frames().filter(<span class="function"><span class="params">iframe</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(iframe.url());</span><br><span class="line">    <span class="keyword">return</span> iframe.url().includes(<span class="string">&#x27;qzs.qq.com/qzone/app/mood_v6/html/index.html&#x27;</span>);</span><br><span class="line">  &#125;)[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;说说iframe 获取完成 &#x27;</span>, iframeDom);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> delTime = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">delOnes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 开始执行`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> moreBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;.dropdown-trigger.c_tx&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> moreBtn.hover();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 展示删除按钮`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> delBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;.del.del_btn.author_display&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> delBtn.click();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 点击删除按钮`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;.qz_dialog_layer_btn.qz_dialog_layer_sub span&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> delBtnSure = <span class="keyword">await</span> page.$(<span class="string">&#x27;.qz_dialog_layer_btn.qz_dialog_layer_sub span&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> delBtnSure.click();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span>次删除 点击确定按钮`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;delTime&#125;</span> 次删除 执行结束`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (delTime % <span class="number">10</span> === <span class="number">0</span>) <span class="keyword">await</span> nextPage();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">      delTime++;</span><br><span class="line">      <span class="keyword">await</span> delOnes();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e, <span class="string">&#x27;报错了 尝试方案&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> delOnes();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> delOnes();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次 出错 重新try 一遍`</span>)</span><br><span class="line">    <span class="keyword">await</span> delOnes();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">nextPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次执行 遇到跳转`</span>);</span><br><span class="line">    <span class="keyword">const</span> nextBtn = <span class="keyword">await</span> iframeDom.$(<span class="string">&#x27;a[title=&quot;下一页&quot;]&#x27;</span>);</span><br><span class="line">    nextBtn.click();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次执行 点击跳转`</span>);</span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">5000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;delTime&#125;</span>次执行 跳转结束`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><p>大概代码都丢👆了 ，附上 <strong><a href="https://github.com/jsonz1993/wheel/tree/master/qqZone">源码地址</a></strong> 在 <code>a.js</code> 填上账号密码。<br>再打开源码里面的 <code>// await delCommit();</code> 或者 <code>// await delEmotion();</code> 来删除 留言板或说说。没有做并发操作 所以只能执行一种功能。<br>修改完之后<code>npm install &amp;&amp; node app.js</code> 就可以跑了。</p>
<p>项目中遇到几个问题：</p>
<ol>
<li><p>page.waitForNavigation(options) 一直等不到完成状态, 30s 超时报错<br>可能是一直有一些脚本挂掉或者在loading。所以后面换成 等待3秒 虽然比较 low。。。但是可行</p>
</li>
<li><p>iframe 里面的dom元素不能直接通过 page.$ 获取，需要先获取 iframe 再通过这个 iframe去获取想要的dom元素</p>
</li>
<li><p>就算是浏览器执行 模拟人为删除，但是连续删除太多行数据的时候， 还是会触发 腾讯的验证码机制。<br>原本用 puppeteer 截图api 去获取验证码，然后用 <a href="https://github.com/tesseract-ocr/tesseract">Tesseract</a> 去识别验证码。但是发现说 识别的有效率极低… 也没有去折腾数据训练。 后面就放弃验证码这一块的技术识别，出了验证码就先不跑 隔断时间再跑。</p>
</li>
</ol>
<p>最后给出完整的项目演示</p>
<p>删除留言板功能演示<br><video src="./1.mov" width="320" height="240" controls="controls"><br>删除留言板功能演示<br></video></p>
<p>删除说说功能演示<br><video src="./2.mov" width="320" height="240" controls="controls"><br>删除说说功能演示<br></video></p>
<p>日志输出<br><img data-src="/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95puppeteer-%E4%B8%8Eqq%E7%A9%BA%E9%97%B4/log.png" alt="log"></p>
<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/jsonz1993/wheel/tree/master/qqZone">源码地址</a></h1>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>react全家桶 + dva 实践整理总结</title>
    <url>/react%E5%85%A8%E5%AE%B6%E6%A1%B6-dva-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>最近接手组内一个前端大牛的项目，大概理清了里面的总理逻辑与数据流向等， 写个总结 方便以后可以查阅参考。</p>
<p>在之前做的后台管理平台里面，就有用到 <code>dva+antd</code>， 到后面直接用 <code>antd-pro</code> 重新整合了一遍，不得不说 <code>antd-pro</code> 真的是开箱即用 优雅粗暴。</p>
<p>但是里面可能很多和我们平时使用习惯有所不同， 所以这次接触的项目是基于 dva 自己再重组了一下 <code>model</code> <code>router</code> 目录结构等。 </p>
<p>使得页面更加的模块化，既 models, routes 不是在一个文件目录里，而是直接按照页面级别来组合。有一个好处就是 本来 models,routes 这些几乎就是不能公用的，那直接按着页面去分 方便问题定位与维护。</p>
<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── config              # 一些关于 webpack babel dll 等项目构件的配置</span><br><span class="line">│   ├── babel-plugin-wrap-source.js</span><br><span class="line">│   ├── babel-plugin-wrap.js</span><br><span class="line">│   ├── build.log</span><br><span class="line">│   ├── dist.js</span><br><span class="line">│   ├── dll</span><br><span class="line">│   ├── server.js</span><br><span class="line">│   ├── ssr-middleware.js</span><br><span class="line">│   ├── theme.config.js</span><br><span class="line">│   ├── webpack.config.common.js</span><br><span class="line">│   ├── webpack.config.dll.js</span><br><span class="line">│   └── webpack.config.prod.js</span><br><span class="line">├── dist               # 打包好的文件</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets        # 放一些静态资源，如 全局一些 less 文件等</span><br><span class="line">│   ├── common        # 公共文件， 如 config request utils 等</span><br><span class="line">│   ├── components    # 通用组件, 如 editor loading 等，用了 antd 之后，这个文件夹的文件较少</span><br><span class="line">│   ├── index-ssr.js</span><br><span class="line">│   ├── index.js      # 项目入口文件</span><br><span class="line">│   ├── mock          # mock文件</span><br><span class="line">│   ├── modules       # 业务页面文件夹  代码的绝大部分放在此处</span><br><span class="line">│       └── activity  #  业务页面 每个业务页面起一个文件夹</span><br><span class="line">│           ├── index.js   # 当前页面的路由及动态加载文件的配置文件</span><br><span class="line">│           ├── model.js   # 当前页面的 dva model</span><br><span class="line">│           ├── businessUtil.js # </span><br><span class="line">│           └── view       # 当前页面的 view 文件</span><br><span class="line">│               └── index.js</span><br><span class="line">│   ├── router.js     # 总路由入口</span><br><span class="line">│   └── services      # 后台接口服务</span><br><span class="line">└── webpack.config.js # webpack 配置</span><br></pre></td></tr></table></figure>

<h1 id="项目剖析"><a href="#项目剖析" class="headerlink" title="项目剖析"></a>项目剖析</h1><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>和其他项目一样 <code>index.js</code> 处理的东西很简单</p>
<ul>
<li>进行一些关于 dva 的配置初始化</li>
<li>加载配置app model <code>require(modules/app/model)</code></li>
<li>加载配置app router <code>require(&#39;./router&#39;).default</code></li>
<li>&amp;&amp;&amp;&amp;&amp;&amp;&amp; 启动应用</li>
</ul>
<p>这里就引出两个分支， model &amp;&amp; router 前端架构中比较关心的两个。</p>
<h2 id="router-管理"><a href="#router-管理" class="headerlink" title="router 管理"></a>router 管理</h2><p>在 <code>router.js</code> 里面 定义了主 <code>Component</code> 与默认 url</p>
<p>router.childRoutes 也是使用模块的方式，只引用了几个大模块，如 <code>require(&#39;modules/activity&#39;)(app),</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Routers = <span class="function"><span class="keyword">function</span> (<span class="params">&#123; history, app &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> routes = getRoutes(app);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span> <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> <span class="attr">render</span>=<span class="string">&#123;applyRouterMiddleware(useScroll())&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRoutes</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: App,</span><br><span class="line">      <span class="attr">childRoutes</span>: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;modules/activity&#x27;</span>)(app),</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>modules/activity/index.js</code> 再去加载构建他的子级路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app=&gt;(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    getComponent (nextState, cb) &#123;</span><br><span class="line">        <span class="built_in">require</span>.ensure([], <span class="function">(<span class="params"><span class="built_in">require</span></span>) =&gt;</span> &#123;</span><br><span class="line">            app.model(<span class="built_in">require</span>(<span class="string">&#x27;./model&#x27;</span>)); <span class="comment">// 加载当前模块的model</span></span><br><span class="line">            cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">&#x27;./view&#x27;</span>)); <span class="comment">// 记载当前模块的view</span></span><br><span class="line">        &#125;, <span class="string">&#x27;模块名&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">childRoutes</span>:[</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;modules/child1&#x27;</span>)(app), </span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;modules/child2&#x27;</span>)(app)</span><br><span class="line">    ],</span><br><span class="line">    ...其他配置</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>就这样一层一层的构建自己的路由， 根据页面去配置也可以更加的细腻可控。不会写成长长的一坨。</p>
<h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p>model层用的是 <code>dva</code> 那套， 帮我们整合了 <code>redux</code>, <code>redux-sage</code> and <code>react-router</code> 十分超级好用。</p>
<p>这里只是把目录结构也调整为 页面级别里面，与页面的 路由配置同级。 也是出于更好的定位问题与维护。</p>
<p>一般与<code>model</code> 相关的文件还有各个页面级别文件夹（即<code>modules/activity</code>)里面的 <code>businessUtil.js</code> 文件。</p>
<p>这个文件主要用来辅助处理一些和 model 有关的事情，一般会有三个方法 <code> export &#123; getInitState, convertProps2Params, convertParams2Props &#125;</code>。 分别处理 <code>初始化state</code>, <code>server</code> 端数据与组件 <code>props</code> 之间的差异转换。</p>
<h2 id="mock-数据"><a href="#mock-数据" class="headerlink" title="mock 数据"></a>mock 数据</h2><p>mock 数据，用了 dva 自带的那套。</p>
<p>我们平时写接口的时候，会在 <code>services/</code> 下面起一个文件 里面带有某个接口地址 用来请求数据接口的<br>然后在 <code>mock/</code> 下面也会起一个文件 相同的也会带有一个接口地址<br>这样我们如果这个接口地址改变，岂不是要改两个地方？</p>
<p>为此，我们在 <code>services/</code> 下面的文件，只是简单的写了一些原始数据，如 url, method 等</p>
<figure class="highlight javascript"><figcaption><span>services/feature1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//@wrapFunction: common/request</span></span><br><span class="line"><span class="comment">// @1 上面那行注释是干什么用的呢？</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;api/feature1&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样在 <code>mock/</code> 下面就可以直接引入 <code>services/feature1</code> 就可以拿到相同的url， 接口地址改动的话也只需要改动 <code>services</code> 下的文件。</p>
<p>但是如果只是简单的返回一些原始数据，那和一个 <code>config</code> 文件有何区别，这样完全没有放在 <code>services</code> 下面的必要啊。。。  所以我们用了一行注释来做一些操作</p>
<p>大概的原理是 写了一个 babel 插件，用来处理一些操作。<br>如果匹配到 <code>//@wrapFunction: </code> 则用后面的链接 require 一个方法来包着页面上的代码。</p>
<p>这样就能起到，前端跑代码的时候 <code>feature1</code> 是一个接口功能的文件， <code>mock</code> 的时候是一个单纯的数据输出文件.</p>
<h2 id="babel-插件自动处理-services-js"><a href="#babel-插件自动处理-services-js" class="headerlink" title="babel 插件自动处理 services/*.js"></a>babel 插件自动处理 <code>services/*.js</code></h2><p>在上面一小节讲到我们用 babel插件来处理差异化，这里我们具体讲一下是怎么处理的</p>
<p>因为项目用的是 <code>roadhog</code> 搭建的， 所以我们在 <code>.roadhogrc.js</code> 里面配置一下 babel 插件，引进自己插件的文件。 这里我们的插件放置在 <code>/config/babel-plugin-wrap.js</code>;</p>
<ol>
<li>在 <code>services/*.js</code> 里面添加一行注释代码用作 babel 识别的标识</li>
<li>判断页面上有无对应注释</li>
<li>获取注释与目标路径， 把export default 的输出用函数调用表达式替换掉</li>
</ol>
<p>具体的 babel插件编写方式可以看官网 <a href="https://babeljs.cn/docs/plugins/">https://babeljs.cn/docs/plugins/</a></p>
<p>了解编译器原理可以参考 上一篇文<a href="https://jsonz1993.github.io/2018/01/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0%E6%9E%81%E7%AE%80%E7%BC%96%E8%AF%91%E5%99%A8-%E2%80%94%E2%80%94-%E4%BA%86%E8%A7%A3%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/">一步步实现极简编译器 —— 了解编译器原理</a></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>剩下的 dll 打包， ssr 以后有用到再去了解。<br>emmm 最近阿里刚出了一个 <a href="https://umijs.org/">umiJs</a> 想起知乎上一个评价 用这一时爽 改起来火葬场。<br>在用 <code>antd-pro</code> 的时候就深有体会了。 所以建议如果不是比较小的项目或者灵活性要求高的项目， 还是不要上 <code>antd-pro</code>的好。。。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>一步步实现极简编译器 —— 了解编译器原理</title>
    <url>/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0%E6%9E%81%E7%AE%80%E7%BC%96%E8%AF%91%E5%99%A8-%E2%80%94%E2%80%94-%E4%BA%86%E8%A7%A3%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="welcome"><a href="#welcome" class="headerlink" title="welcome"></a>welcome</h2><p>今天在看 babel 的时候，无意中被引到一个外链</p>
<blockquote>
<p>关于编译器的优秀/简单的教程，请查看 <a href="https://babeljs.cn/docs/plugins/">the-super-tiny-compiler</a> ，同时它也从宏观角度上解释了 Babel 本身是如何工作的。</p>
</blockquote>
<p>觉得挺感兴趣的，加上代码也不多，就跟着思路自己理解敲了一遍。</p>
<p>本文主要是帮助理解编译器的原理 不做过多的其他扩展</p>
<h2 id="编译器的基本组成"><a href="#编译器的基本组成" class="headerlink" title="编译器的基本组成"></a>编译器的基本组成</h2><p>一般简单的编译器可以由以下几部分组成:</p>
<ul>
<li>tokenizer 词法分析器 把代码或文本按类型分开，返回: <code>tokens</code></li>
<li>parser 语法剖析器 对分析后的文本按照语法分析转换成 抽象语法树 返回：ast</li>
<li>transformer 语法转换器 把语法剖析后的抽象语法树转换成我们想要的: newAst</li>
<li>codeGenerator 代码生成器 把AST 转换为 目标代码</li>
</ul>
<blockquote>
<p>babel 初始阶段并没有做任何事，基本上等于 <code>const babel = code=&gt; code</code>;<br>先 tokenizer， parser 解析代码，再 transformer 的时候，完全不改动原来的 ast</p>
</blockquote>
<p>接下来以最简单的编译器组成 一个环节一个环节走下去</p>
<h2 id="tokenizer-词法分析器"><a href="#tokenizer-词法分析器" class="headerlink" title="tokenizer 词法分析器"></a>tokenizer 词法分析器</h2><p>词法分析器其实可以理解为简单的将文本切割，然后将有价值的按照相邻同等类型的 文本组合一起输出。<br><em><small>ps:无价值指对代码生成没有影响的部分，比如js里面非文本 一个空格和一百个空格对编译器来说是没有区别的</small></em></p>
<p>实现思路：</p>
<ol>
<li>有一个值存着当前的光标 <code>current</code></li>
<li>有一个数组用来存放按类型分出来的值 <code>tokens</code></li>
<li>对文本进行循环， 取 <code>current</code> 的值做 分类型处理</li>
<li><code>(</code></li>
<li><code>)</code></li>
<li>空格</li>
<li>数字</li>
<li>字符串</li>
<li>方法名</li>
<li>将处理后的值存进数组 <code>token</code> 并返回</li>
</ol>
<figure class="highlight javascript"><figcaption><span>tokenizer</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenizer</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line">  <span class="keyword">while</span> (current &lt; input.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> char = input[current];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">&quot;(&quot;</span> || char === <span class="string">&quot;)&quot;</span>) &#123;</span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;paren&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: char</span><br><span class="line">      &#125;);</span><br><span class="line">      current++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> WHITESPACE = <span class="regexp">/\s/</span>;</span><br><span class="line">    <span class="keyword">if</span> (WHITESPACE.test(char)) &#123;</span><br><span class="line">      current++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> LETTERS = <span class="regexp">/[a-z]/i</span>;</span><br><span class="line">    <span class="keyword">if</span> (LETTERS.test(char)) &#123;</span><br><span class="line">      <span class="keyword">let</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">while</span> (LETTERS.test(char)) &#123;</span><br><span class="line">        name += char;</span><br><span class="line">        current++;</span><br><span class="line">        char = input[current];</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: name</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> NUMBERS = <span class="regexp">/[0-9]/</span>;</span><br><span class="line">    <span class="keyword">if</span> (NUMBERS.test(char)) &#123;</span><br><span class="line">      <span class="keyword">let</span> numbers = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(NUMBERS.test(char)) &#123;</span><br><span class="line">        numbers += char;</span><br><span class="line">        current++;</span><br><span class="line">        char = input[current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: numbers</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      current++;</span><br><span class="line">      char = input[current];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(char !== <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">        string += char;</span><br><span class="line">        current++;</span><br><span class="line">        char = input[current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: string</span><br><span class="line">      &#125;);</span><br><span class="line">      current++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;不知道你输入的是什么鬼东西 &#x27;</span> + char);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="string">&#x27;(add 2 (subtract 4 2 &quot;djwaqp&quot;))&#x27;</span>;</span><br><span class="line">tokenizer(input);</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[&#123; type: &#x27;paren&#x27;, value: &#x27;(&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;name&#x27;, value: &#x27;add&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;number&#x27;, value: &#x27;2&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;paren&#x27;, value: &#x27;(&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;name&#x27;, value: &#x27;subtract&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;number&#x27;, value: &#x27;4&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;number&#x27;, value: &#x27;2&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;string&#x27;, value: &#x27;djwaqp&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;paren&#x27;, value: &#x27;)&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; type: &#x27;paren&#x27;, value: &#x27;)&#x27; &#125;];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h2><p>语法剖析器就是把 <code>tokens</code> 解析，转化为抽象语法树(AST)🌲🌲🌲，方便后续的处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[&#123; <span class="attr">type</span>: <span class="string">&#x27;paren&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;(&#x27;</span> &#125;, ...]   =&gt;   &#123; <span class="attr">type</span>: <span class="string">&#x27;Program&#x27;</span>, <span class="attr">body</span>: [...] &#125;</span><br></pre></td></tr></table></figure>

<p>实现思路：</p>
<ol>
<li>首先也要有一个 <code>current</code> 对 <code>tokens</code> 进行遍历，每一项 <code>token</code> 进行分析处理</li>
<li>有一棵树，顶级结构为 <code>&#123;type: &#39;Program&#39; , body: [...]&#125;</code></li>
<li>根据 <code>token.type</code> 进行相应的归类处理:</li>
<li><code>number</code>： 直接返回  <code>&#123;type: &#39;NumberLiteral&#39;, value, &#125;</code></li>
<li><code>string</code>： 直接返回 <code>&#123;type: &#39;StringLiteral&#39;, value, &#125;</code></li>
<li><code>paren (</code> ： 对下一个进行递归，直到出现 <code>paren )</code></li>
<li>将处理后的 ast 返回</li>
</ol>
<figure class="highlight javascript"><figcaption><span>parser</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parser</span>(<span class="params">tokens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> ast = &#123; </span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;Program&#x27;</span>, </span><br><span class="line">    <span class="attr">body</span>: []</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> token = tokens[current];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      current ++;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;NumberLiteral&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: token.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      current ++;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: token.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">&#x27;paren&#x27;</span> &amp;&amp; token.value === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">      token = tokens[++current];</span><br><span class="line">      <span class="keyword">let</span> node = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: token.value,</span><br><span class="line">        <span class="attr">params</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      token = tokens[++current];</span><br><span class="line">      <span class="keyword">while</span> ((token.type !== <span class="string">&#x27;paren&#x27;</span>) || (token.type === <span class="string">&#x27;paren&#x27;</span> &amp;&amp; token.value !== <span class="string">&#x27;)&#x27;</span>)) &#123;</span><br><span class="line">        node.params.push(walk());</span><br><span class="line">        token = tokens[current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      current++;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(token.type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(current &lt; tokens.length) &#123;</span><br><span class="line">    ast.body.push(walk());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">input:</span><br><span class="line">[&#123; <span class="attr">type</span>: <span class="string">&#x27;paren&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;(&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;name&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;add&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;2&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;paren&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;(&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;name&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;subtract&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;4&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;2&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;djwaqp&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;paren&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;)&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;paren&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;)&#x27;</span> &#125;]</span><br><span class="line">=&gt;</span><br><span class="line">output:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">	<span class="string">&quot;body&quot;</span>: [&#123;</span><br><span class="line">		<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;ADD&quot;</span>,</span><br><span class="line">		<span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">			<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">			<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">			<span class="string">&quot;name&quot;</span>: <span class="string">&quot;subtract&quot;</span>,</span><br><span class="line">			<span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;djwaqp&quot;</span></span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h2><p>transformer 顾名思义，为转换部分，最复杂 也最常用。<br><code>.babelrc</code> 添加的插件，也只是在这个环节进行操作，将原本的 ast( es6 ) 转换为目标的 newAst (es5)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ast &#123; <span class="attr">type</span>: <span class="string">&#x27;Program&#x27;</span>, <span class="attr">body</span>: [...] &#125;   =&gt;   newAst &#123; <span class="attr">type</span>: <span class="string">&#x27;Program&#x27;</span>, <span class="attr">body</span>: [...] &#125;</span><br></pre></td></tr></table></figure>

<p>实现思路：</p>
<ol>
<li>首先，要有一颗树，和 ast 一样。 顶级结构为 <code>&#123; type: &#39;Program&#39;, body: [...] &#125;</code></li>
<li>在 <code>ast</code> 上建一个引用<code>_context</code>到 <code>newAst.body</code>;</li>
<li>对 ast 树进行处理, 直接处理 <code>_context</code></li>
<li>对 ast 上 每个类型都做 enter 处理与 exit处理的钩子</li>
<li>Number 或 String 直接处理并添加到树节点上即可</li>
<li>CallExpression 则要创建一个数组去存参数</li>
<li>对类型为：<code>Program</code> 或 <code>CallExpression</code> 对子级进行 递归 <code>4</code> 处理</li>
<li>将处理后的 newAst 返回</li>
</ol>
<figure class="highlight javascript"><figcaption><span>transformer 部分</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverser</span>(<span class="params">node, visitor</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseArray</span>(<span class="params">nodeArr, parent</span>) </span>&#123;</span><br><span class="line">    nodeArr.forEach(<span class="function"><span class="params">child</span> =&gt;</span> traverseNode(child, parent));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, parent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> methods = visitor[node.type];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.enter) &#123;</span><br><span class="line">      methods.enter(node, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;Program&#x27;</span>:</span><br><span class="line">        traverseArray(node.body, node);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;CallExpression&#x27;</span>:</span><br><span class="line">        traverseArray(node.params, node);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;NumberLiteral&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;StringLiteral&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.exit) &#123;</span><br><span class="line">      methods.exit(node, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  traverseNode(node, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformer</span>(<span class="params">ast</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newAst = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;Program&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: []</span><br><span class="line">  &#125;;</span><br><span class="line">  ast._context = newAst.body;</span><br><span class="line"></span><br><span class="line">  traverser(ast, &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">NumberLiteral</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">enter</span>(<span class="params">node, parent</span>)</span> &#123;</span><br><span class="line">        parent._context.push(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;NumberLiteral&#x27;</span>,</span><br><span class="line">          <span class="attr">value</span>: node.value</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">StringLiteral</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">enter</span>(<span class="params">node, parent</span>)</span> &#123;</span><br><span class="line">        parent._context.push(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>,</span><br><span class="line">          <span class="attr">value</span>: node.value,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">CallExpression</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">enter</span>(<span class="params">node, parent</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> expression = &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;CallExpression&#x27;</span>,</span><br><span class="line">          <span class="attr">callee</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: node.name</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">arguments</span>: []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node._context = expression.arguments;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent.type !== <span class="string">&#x27;CallExpression&#x27;</span>) &#123;</span><br><span class="line">          expression = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;ExpressionStatement&#x27;</span>,</span><br><span class="line">            <span class="attr">expression</span>: expression</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parent._context.push(expression);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newAst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">input:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">	<span class="string">&quot;body&quot;</span>: [&#123;</span><br><span class="line">		<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;ADD&quot;</span>,</span><br><span class="line">		<span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">			<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">			<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">			<span class="string">&quot;name&quot;</span>: <span class="string">&quot;subtract&quot;</span>,</span><br><span class="line">			<span class="string">&quot;params&quot;</span>: [&#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;djwaqp&quot;</span></span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br><span class="line">=&gt;</span><br><span class="line">output:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">	<span class="string">&quot;body&quot;</span>: [&#123;</span><br><span class="line">		<span class="string">&quot;type&quot;</span>: <span class="string">&quot;ExpressionStatement&quot;</span>,</span><br><span class="line">		<span class="string">&quot;expression&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">			<span class="string">&quot;callee&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">				<span class="string">&quot;name&quot;</span>: <span class="string">&quot;ADD&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&quot;arguments&quot;</span>: [&#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">				<span class="string">&quot;callee&quot;</span>: &#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">					<span class="string">&quot;name&quot;</span>: <span class="string">&quot;subtract&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="string">&quot;arguments&quot;</span>: [&#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">					<span class="string">&quot;value&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">				&#125;, &#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">					<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">				&#125;, &#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">					<span class="string">&quot;value&quot;</span>: <span class="string">&quot;djwaqp&quot;</span></span><br><span class="line">				&#125;]</span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="codeGenerator"><a href="#codeGenerator" class="headerlink" title="codeGenerator"></a>codeGenerator</h2><p>最后一步就是 <code>codeGenerator</code>， 用 <code>newAst</code> 递归调用，根据 <code>node</code> 与一系列规则去生成一个 string。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">newAst &#123; <span class="attr">type</span>: <span class="string">&#x27;Program&#x27;</span>, <span class="attr">body</span>: [...] &#125; =&gt; call(argumentsA, ...argumentsN);</span><br></pre></td></tr></table></figure>

<p>实现思路：</p>
<ol>
<li>根据 node.type 做对应逻辑：</li>
<li><code>Program</code> =&gt; 对 node.body 进行递归</li>
<li><code>ExpressionStatement</code>=&gt; 对 node.expression 进行处理</li>
<li><code>CallExpression</code> =&gt; 对 node.callee 与 node.arguments 进行处理</li>
<li><code>Identifier</code> &amp;&amp; <code>NumberLiteral</code> &amp;&amp; <code>StringLiteral</code> 直接返回对应的字段</li>
</ol>
<figure class="highlight javascript"><figcaption><span>codeGenerator</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeGenerator</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Program&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> node.body.map(codeGenerator).join(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ExpressionStatement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> codeGenerator(node.expression) + <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;CallExpression&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> (codeGenerator(node.callee) +<span class="string">&#x27;(&#x27;</span> + node.arguments.map(codeGenerator).join(<span class="string">&#x27;, &#x27;</span>) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Identifier&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> node.name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;NumberLiteral&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> node.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;StringLiteral&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span> + node.value + <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">input:</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">	<span class="string">&quot;body&quot;</span>: [&#123;</span><br><span class="line">		<span class="string">&quot;type&quot;</span>: <span class="string">&quot;ExpressionStatement&quot;</span>,</span><br><span class="line">		<span class="string">&quot;expression&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">			<span class="string">&quot;callee&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">				<span class="string">&quot;name&quot;</span>: <span class="string">&quot;ADD&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&quot;arguments&quot;</span>: [&#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">				<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="string">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">				<span class="string">&quot;callee&quot;</span>: &#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">					<span class="string">&quot;name&quot;</span>: <span class="string">&quot;subtract&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="string">&quot;arguments&quot;</span>: [&#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">					<span class="string">&quot;value&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">				&#125;, &#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">					<span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">				&#125;, &#123;</span><br><span class="line">					<span class="string">&quot;type&quot;</span>: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">					<span class="string">&quot;value&quot;</span>: <span class="string">&quot;djwaqp&quot;</span></span><br><span class="line">				&#125;]</span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br><span class="line">=&gt; </span><br><span class="line">output:</span><br><span class="line">add(<span class="number">2</span>, subtract(<span class="number">4</span>, <span class="number">2</span>, <span class="string">&quot;djwaqp&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h2><p>至此，编译器所需的几个步骤： 词法分析，解析，转换，生成都已经完成。</p>
<figure class="highlight javascript"><figcaption><span>compiler</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tokens = tokenizer(input);</span><br><span class="line">  <span class="keyword">const</span> ast = parser(tokens);</span><br><span class="line">  <span class="keyword">const</span> newAst = transformer(ast);</span><br><span class="line">  <span class="keyword">const</span> output = codeGenerator(newAst);</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> input = <span class="string">&#x27;(add 2 (subtract 4 2 &quot;djwaqp&quot;))&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> output = compilter(input); <span class="comment">// &#x27;add(2, subtract(4, 2, &quot;djwaqp&quot;));&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><p>babel 的工作原理可以理解成就是一个简单的编译器：<code>分析</code> =&gt; <code>转换</code> =&gt; <code>生成代码</code></p>
<p>bable 的篇幅太多，下面直接给出 <a href="https://github.com/jsonz1993/learn/tree/master/finish/babel-plugin-jsonz_test">demo源码</a>。<br>具体可以看 <a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-writing-your-first-babel-plugin">官方插件手册 babel-handbook</a></p>
<p>我们写的babel 插件，都是在转换的部分运行</p>
<figure class="highlight javascript"><figcaption><span>自定义插件 babel-plugin-jsonz</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">&#x27;babel-types&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// plugin contents</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">visitor</span>: &#123;</span><br><span class="line">      <span class="comment">// visitor contents</span></span><br><span class="line">      <span class="function"><span class="title">BinaryExpression</span>(<span class="params">path, state</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果操作符不是 === 则返回</span></span><br><span class="line">        <span class="keyword">if</span> (path.node.operator !== <span class="string">&#x27;===&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 操作符的左边替换为 sebmck, 右边替换为 dork</span></span><br><span class="line">        path.node.left = t.identifier(<span class="string">&#x27;&quot;sebmck&quot;&#x27;</span>);</span><br><span class="line">        path.node.right = t.identifier(<span class="string">&#x27;&quot;dork&quot;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>目标代码./src/test1.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>===<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装相关依赖:<code>npm i babel-cli babel-types --save-dev</code></p>
<p>运行脚本: <code>babel src/ -d build/</code></p>
<figure class="highlight javascript"><figcaption><span>生成后的代码 ./build/test2.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;sebmck&quot;</span> === <span class="string">&quot;dork&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后再推一波关于学习中看到的好网站</p>
<p><a href="https://github.com/jsonz1993/wheel/blob/master/min-compiler/min-compiler.js">源码</a><br><a href="http://esprima.org/demo/parse.html#">esprima 解析语法树🌲</a><br><a href="http://astexplorer.net/">AST Explorer</a><br><a href="https://zh.wikipedia.org/zh-cn/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9">ast名词解释</a><br><a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md">babel-plugin-handbook</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
