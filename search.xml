<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[react-native 学习总结]]></title>
      <url>https://jsonz1993.github.io/2017/06/react-native-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>进公司的时候 原部门老大让我去看rn demo 后面项目会用到，于是有了这个项目的开始。</p>
<p>但是一个星期后，我被调去另一个部门，现部门进来之后就一直忙着业务代码 产品迭代。 从github 提交应该也能看出来， 特别从 6.8到6.24 一次commit都没有。</p>
<p>慕课网狗狗说app的开发教程学习，这次的学习可以算是半成品，大概了解了rn 也写了一个较为完整的demo，<br>后面如果有一些简单的rn项目或者app内嵌 上手成本应该低了很多。<br>包括:<br>RN 项目环境配置 折腾了很久 真的很多坑<br>穿插着学了一点点O-C 语法<br>xCode 资源库引用以及常见问题或常见功能使用<br>RN 项目启动 link watchman 等等<br>RN 具体代码 api 组件 学习<br>Koa 与 mongoDB 的简单使用<br>七牛云使用<br>螺丝帽发送验证码使用<br>各种类库 图片插件 倒计时插件 录音 录像 等<br>接下来如果不是项目有使用到的话 应该不会再深入接触rn。</p>
<p>毕竟现在的目标是进军P3 &amp;&amp; 优秀员工。</p>
<p>app部分截图:</p>
<p><img src="./list.png" alt="列表页"><br><img src="./detail.png" alt="视频详情"><br><img src="./comment.png" alt="评论部分"><br><img src="./account.png" alt="账户页"><br><img src="./edit.png" alt="编辑页"></p>
<p><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-dogs" target="_blank" rel="external">最后附上源码 RN 很看 环境和版本，所以跑得起来才是不正常的</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> learn </tag>
            
            <tag> github </tag>
            
            <tag> react-native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[置顶]捣鼓目录]]></title>
      <url>https://jsonz1993.github.io/2017/06/%E6%8D%A3%E9%BC%93%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>记录平时工作学习的目录条目， 类似 <a href="https://github.com/jsonz1993/learn" target="_blank" rel="external">Jsonz-learn</a>、 <a href="https://github.com/jsonz1993/wheel" target="_blank" rel="external">Jsonz-wheel</a> 的目录。</p>
<p>链接主要指向Github源码目录， 按时间排序，一般在博客都会有相应的文章。</p>
<h1 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h1><h2 id="JS报错采集"><a href="#JS报错采集" class="headerlink" title="JS报错采集"></a>JS报错采集</h2><h2 id="chrome-插件"><a href="#chrome-插件" class="headerlink" title="chrome 插件"></a>chrome 插件</h2><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h2><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><h2 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h2><h2 id="shadow-dom"><a href="#shadow-dom" class="headerlink" title="shadow-dom"></a>shadow-dom</h2><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="react-native-dogs"><a href="#react-native-dogs" class="headerlink" title="react-native-dogs"></a><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-dogs" target="_blank" rel="external">react-native-dogs</a></h2><ul>
<li>学习react-native 比较全面的一个路径</li>
<li>虽然不完整，但包含了rn 常用的api 库 等</li>
<li>也涉及到 node koa 七牛云等</li>
</ul>
<h2 id="react-native-countdown-ReactNative的倒计时组件"><a href="#react-native-countdown-ReactNative的倒计时组件" class="headerlink" title="react-native-countdown ReactNative的倒计时组件"></a><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-countdown" target="_blank" rel="external">react-native-countdown ReactNative的倒计时组件</a></h2><ul>
<li>造这个轮子的原因是学习rn的时候，视频推荐额一个组件，但是这个组件已经停止维护 所以只能自己造一个</li>
<li>支持日期与秒数的倒计时</li>
<li>简单粗暴</li>
</ul>
<h2 id="fixedTop-吸顶效果"><a href="#fixedTop-吸顶效果" class="headerlink" title="fixedTop 吸顶效果"></a><a href="https://github.com/jsonz1993/wheel/tree/master/fixedTop" target="_blank" rel="external">fixedTop 吸顶效果</a></h2><ul>
<li>一个很小的常用效果</li>
<li>主要细节 在于改变dom为 fixed布局后在该dom后面生成一个占位的，防止兄弟节点的抖动</li>
</ul>
<h2 id="copyText-复制黏贴板插件"><a href="#copyText-复制黏贴板插件" class="headerlink" title="copyText 复制黏贴板插件"></a><a href="https://github.com/jsonz1993/wheel/tree/master/copyText" target="_blank" rel="external">copyText 复制黏贴板插件</a></h2><ul>
<li>支持h5，PC</li>
<li><code>success</code>, <code>error</code>回调</li>
<li>判断浏览器是否支持该事件接口</li>
</ul>
<h2 id="heatmap-热力图"><a href="#heatmap-热力图" class="headerlink" title="heatmap 热力图"></a><a href="https://github.com/jsonz1993/wheel/tree/master/heatmap" target="_blank" rel="external">heatmap 热力图</a></h2><ul>
<li>老大提的小需求 一两个小时完成</li>
<li>点击页面会间隔(10s)存到<code>sessionLocation</code>。 刷新后会把存在<code>sessionLocation</code> 绘制成热力图展示在页面上</li>
</ul>
<h2 id="validator-小型表单验证插件"><a href="#validator-小型表单验证插件" class="headerlink" title="validator 小型表单验证插件"></a><a href="https://github.com/jsonz1993/wheel/tree/master/validator" target="_blank" rel="external">validator 小型表单验证插件</a></h2><ul>
<li>移动端简单的验证插件</li>
<li>支持自己配置验证项 支持多重验证</li>
</ul>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/cookie" target="_blank" rel="external">cookie</a></h2><ul>
<li>封装了一些cookie常用的api</li>
<li><code>get</code> <code>set</code> <code>remove</code> <code>clear</code> <code>getAll</code></li>
</ul>
<h2 id="ObjectiveC"><a href="#ObjectiveC" class="headerlink" title="ObjectiveC"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/Objective-c" target="_blank" rel="external">ObjectiveC</a></h2><ul>
<li>ObjectiveC 基础</li>
<li>为了学 ReactNative 做一点ios基础铺垫</li>
</ul>
<h2 id="setTimeout-amp-amp-setInterval"><a href="#setTimeout-amp-amp-setInterval" class="headerlink" title="setTimeout &amp;&amp; setInterval"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/setTimeout-setInterval" target="_blank" rel="external">setTimeout &amp;&amp; setInterval</a></h2><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/Event" target="_blank" rel="external">Event</a></h2><ul>
<li>最简单的事件系统</li>
</ul>
<h2 id="handlebars"><a href="#handlebars" class="headerlink" title="handlebars"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/handlebars" target="_blank" rel="external">handlebars</a></h2><ul>
<li>简单的模板引擎<a href="http://handlebarsjs.com" target="_blank" rel="external">http://handlebarsjs.com</a></li>
</ul>
<h2 id="quickskin"><a href="#quickskin" class="headerlink" title="quickskin"></a>quickskin</h2><ul>
<li>简单的PHP模板， 文档很不全 {value}</li>
<li><!-- IF login_id --><!-- ENDIF login_id -->  <code>if</code></li>
<li><!-- BEGIN question_tags_list --><!-- END question_tags_list --> <code>for</code></li>
</ul>
<h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/sass" target="_blank" rel="external">sass</a></h2><ul>
<li>简单的入门语法，因为用过less 所以基本无障碍</li>
</ul>
<h2 id="chrome-extension"><a href="#chrome-extension" class="headerlink" title="chrome-extension"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/chrome-extension" target="_blank" rel="external">chrome-extension</a></h2><ul>
<li>学习chrome插件开发入门</li>
<li>暂存finish，后面会重新学习 比较感兴趣</li>
<li>目前想法是做一个可以在页面比较方便加载js的插件</li>
<li>TODO</li>
</ul>
<h2 id="animate-text"><a href="#animate-text" class="headerlink" title="animate-text"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/animate-text" target="_blank" rel="external">animate-text</a></h2><ul>
<li>一个简单的文字 &amp;&amp; 数字 动画小插件。</li>
<li><a href="https://jsonz1993.github.io/demo/animate-text/index.html">demo</a></li>
<li><a href="https://jsonz1993.github.io/2017/04/animate-text/">文档</a></li>
</ul>
<h2 id="backbone"><a href="#backbone" class="headerlink" title="backbone"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/backbone" target="_blank" rel="external">backbone</a></h2><ul>
<li>历史悠久的MVC框架</li>
<li><a href="https://github.com/jashkenas/backbone" target="_blank" rel="external">https://github.com/jashkenas/backbone</a></li>
</ul>
<h2 id="DesignPattern"><a href="#DesignPattern" class="headerlink" title="DesignPattern"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/DesignPattern" target="_blank" rel="external">DesignPattern</a></h2><ul>
<li>后面会继续学习</li>
<li>《JavaScript设计模式》张容铭</li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B013HO6DNS/ref=sr_1_1?ie=UTF8&amp;qid=1490937378&amp;sr=8-1&amp;keywords=javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">亚马逊购买</a></li>
</ul>
<h2 id="ECMAScript-6-Primer"><a href="#ECMAScript-6-Primer" class="headerlink" title="ECMAScript_6_Primer"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/ECMAScript_6_Primer" target="_blank" rel="external">ECMAScript_6_Primer</a></h2><ul>
<li>ES6入门</li>
<li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">阮一峰</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01A18WWAG/ref=sr_1_1?ie=UTF8&amp;qid=1490937483&amp;sr=8-1&amp;keywords=Es6" target="_blank" rel="external">亚马逊购买</a></li>
</ul>
<h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/gulp" target="_blank" rel="external">gulp</a></h2><ul>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文</a></li>
<li><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">https://github.com/gulpjs/gulp</a></li>
</ul>
<h2 id="imooc"><a href="#imooc" class="headerlink" title="imooc"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/imooc" target="_blank" rel="external">imooc</a></h2><ul>
<li>慕课网上的相关学习</li>
<li><a href="imooc.com">imooc.com</a></li>
<li>学习占幅越来越低，看视频的效率没有看书和博客来的快</li>
</ul>
<h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/markdown" target="_blank" rel="external">markdown</a></h2><ul>
<li>markdown语法学习</li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">github markdown</a></li>
</ul>
<h2 id="require"><a href="#require" class="headerlink" title="require"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/require" target="_blank" rel="external">require</a></h2><ul>
<li>JS模块化加载规范 AMD产物</li>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD</a></li>
</ul>
<h2 id="require-backbone"><a href="#require-backbone" class="headerlink" title="require+backbone"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/require%2Bbackbone" target="_blank" rel="external">require+backbone</a></h2><ul>
<li>backbone+require 练习</li>
</ul>
<h2 id="RiotJs"><a href="#RiotJs" class="headerlink" title="RiotJs"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/RiotJs" target="_blank" rel="external">RiotJs</a></h2><ul>
<li>微型类React框架</li>
<li><a href="http://riotjs.com/" target="_blank" rel="external">http://riotjs.com/</a></li>
<li>公司在用，有实战经验</li>
<li><p>v2兼容ie8</p>
</li>
<li><p>edit_config</p>
</li>
<li><p>常用的编辑器配置</p>
</li>
<li><p><strong>Uncle Tom</strong></p>
</li>
<li>汤姆大叔的博客Js教程</li>
<li>强烈推荐!!!!</li>
<li>深入浅出 讲了很多原理性的东西</li>
<li>入门与进阶必备</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html</a></li>
</ul>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/vue" target="_blank" rel="external">vue</a></h2><ul>
<li>vueJs入门部分demo</li>
</ul>
<h2 id="vue-webpack"><a href="#vue-webpack" class="headerlink" title="vue+webpack"></a><a href="https://github.com/jsonz1993/learn/tree/master/finish/vue%2Bwebpack" target="_blank" rel="external">vue+webpack</a></h2><ul>
<li><p>vue+webpack demo</p>
</li>
<li><p>jsonz_old</p>
</li>
<li><p>刚入门的时候写的一个在线简历 停止更新</p>
</li>
<li><p>zhangxinxu</p>
</li>
<li>腾讯一个大佬，主要重构方面。</li>
<li>css与html很多疑难杂症 基础知识等都可以在里面找到</li>
<li><a href="http://www.zhangxinxu.com/" target="_blank" rel="external">http://www.zhangxinxu.com/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
            <tag> web </tag>
            
            <tag> work </tag>
            
            <tag> React-Native </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-native-countdown RN的倒计时组件]]></title>
      <url>https://jsonz1993.github.io/2017/06/react-native-countdown-RN%E7%9A%84%E5%80%92%E8%AE%A1%E6%97%B6%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>之所以会写这个小组件是因为学习RN的时候，跟着视频敲代码。 视频推荐了一款<a href="https://github.com/shigebeyond/react-native-sk-countdown" target="_blank" rel="external">倒计时组件</a> 因为长期没有维护（最后一次更新是一年前）， 在我的RN环境下报错。</p>
<p>报错的原因大概是 React 把一个功能独立出去，要重新引进就可以了。 不过想着既然我已经看了源码找到问题，那么我何不自己造一个小轮子呢~</p>
<p><a href="https://github.com/jsonz1993/wheel/tree/master/react-native-countdown" target="_blank" rel="external">项目github</a></p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>需要手动引入，没有传到npm 懒得再维护</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;CountDownText&#125; <span class="keyword">from</span> <span class="string">'react-native-sk-countdown'</span>;</div><div class="line"></div><div class="line">&lt;CountDownText</div><div class="line">    style=&#123;styles.cd&#125;</div><div class="line">    countType='seconds' // 计时类型：seconds / date</div><div class="line">    auto=&#123;true&#125; // 自动开始</div><div class="line">    afterEnd=&#123;() =&gt; &#123;&#125;&#125; // 结束回调</div><div class="line">    timeLeft=&#123;10&#125; // 正向计时 时间起点为0秒</div><div class="line">    step=&#123;-1&#125; // 计时步长，以秒为单位，正数则为正计时，负数为倒计时</div><div class="line">    startText='获取验证码' // 开始的文本</div><div class="line">    endText='获取验证码' // 结束的文本</div><div class="line">    intervalText=&#123;(sec) =&gt; sec + '秒重新获取'&#125; // 定时的文本回调</div><div class="line">  /&gt;</div><div class="line"></div><div class="line">&lt;CountDownText // 倒计时</div><div class="line">    style=&#123;styles.cd&#125;</div><div class="line">    countType='date' // 计时类型：seconds / date</div><div class="line">    auto=&#123;true&#125; // 自动开始</div><div class="line">    afterEnd=&#123;() =&gt; &#123;&#125;&#125; // 结束回调</div><div class="line">    timeLeft=&#123;10&#125; // 正向计时 时间起点为0秒</div><div class="line">    step=&#123;-1&#125; // 计时步长，以秒为单位，正数则为正计时，负数为倒计时</div><div class="line">    startText='' // 开始的文本</div><div class="line">    endText='' // 结束的文本</div><div class="line">    intervalText=&#123;(date, hour, min, sec) =&gt; date + '天' + hour + '时' + min + '分' + sec&#125; // 定时的文本回调</div><div class="line">  /&gt;</div></pre></td></tr></table></figure>
<p><img src="./demo.gif" alt="demo.gif"></p>
<h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><table>
<thead>
<tr>
<th>Prop</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>countType</code></strong></td>
<td>Countdown type, one of ‘seconds’ and ‘date’.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>auto</code></strong></td>
<td>Whether to start countdown right now.</td>
<td><em>false</em></td>
</tr>
<tr>
<td><strong><code>timeLeft</code></strong></td>
<td>Seconds lefted to countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>step</code></strong></td>
<td>Number to increment in each step.</td>
<td><em>-1</em></td>
</tr>
<tr>
<td><strong><code>startText</code></strong></td>
<td>Text before countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>endText</code></strong></td>
<td>Text after countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>intervalText</code></strong></td>
<td>A function to reture a text during countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>afterEnd</code></strong></td>
<td>A callback function after countdown.</td>
<td><em>None</em></td>
</tr>
</tbody>
</table>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
<th>Params</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>start</code></strong></td>
<td>start countdown.</td>
<td><em>None</em></td>
</tr>
<tr>
<td><strong><code>end</code></strong></td>
<td>finish countdown.</td>
<td><em>None</em></td>
</tr>
</tbody>
</table>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>主要有两个文件，一个是倒计时的逻辑，另一个是夹杂了RN的逻辑。<br><figure class="highlight javascript"><figcaption><span>CountDown.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDown</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">this</span>.setData(props);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取有多少秒</span></div><div class="line">  <span class="keyword">static</span> getSeconds(time) &#123;</div><div class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> time;</div><div class="line">    <span class="keyword">return</span> (type === <span class="string">'number'</span> || type === <span class="string">'string'</span> &amp;&amp; <span class="regexp">/^\d+$/</span>.test(time))</div><div class="line">      ? time</div><div class="line">      : <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() / <span class="number">1000</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 位数补全</span></div><div class="line">  <span class="keyword">static</span> ten(t) &#123;</div><div class="line">    <span class="keyword">return</span> t &lt; <span class="number">10</span>? <span class="string">'0'</span> + t: t;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 设置数据</span></div><div class="line">  setData(props) &#123;</div><div class="line">    <span class="keyword">this</span>.countType = props.countType; <span class="comment">// 支持两种计时方式，两个日期之间 &amp;&amp; 秒数的倒计时</span></div><div class="line">    <span class="keyword">this</span>.timerId = <span class="literal">null</span>; <span class="comment">// 计时器</span></div><div class="line">    <span class="keyword">this</span>.endTime = props.endTime; <span class="comment">// 计时器结束时间</span></div><div class="line">    <span class="keyword">this</span>.startTime = props.startTime; <span class="comment">// 计时器开始时间</span></div><div class="line">    <span class="keyword">this</span>.timeLeft = props.timeLeft; <span class="comment">// 计时器剩余秒数， 区别于上面时间段的计时方式</span></div><div class="line">    <span class="keyword">this</span>.timePassed = <span class="number">0</span>; <span class="comment">// 正向为累计时间，反向为剩余时间</span></div><div class="line">    <span class="keyword">this</span>.onInterval = props.onInterval; <span class="comment">// 定时的回调</span></div><div class="line">    <span class="keyword">this</span>.onEnd = props.onEnd; <span class="comment">// 结束的回调</span></div><div class="line">    <span class="keyword">this</span>.step = props.step; <span class="comment">// 计时步长，以秒为单位，正数为正计时，负数为倒计时</span></div><div class="line">    <span class="keyword">this</span>.counter = <span class="number">0</span>; <span class="comment">// 累加器 TODO 疑问</span></div><div class="line"></div><div class="line">    <span class="comment">// 数据校验</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.countType) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须传入一个 countType: seconds || date'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (</div><div class="line">      (<span class="keyword">this</span>.timeLeft &amp;&amp; (<span class="keyword">this</span>.endTime || <span class="keyword">this</span>.startTime)) ||</div><div class="line">      (!<span class="keyword">this</span>.timeLeft &amp;&amp; !(<span class="keyword">this</span>.endTime || <span class="keyword">this</span>.startTime))</div><div class="line">    ) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须传入一个时间段 [timeLeft] [startTime] [endTime]'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.timeLeft &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>.startTime === <span class="string">'undefined'</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.startTime = <span class="built_in">Date</span>.now()/ <span class="number">1000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.timeLeft) &#123;</div><div class="line">      <span class="keyword">this</span>.timeLeft = <span class="built_in">Math</span>.floor(CountDown.getSeconds(<span class="keyword">this</span>.endTime) - CountDown.getSeconds(<span class="keyword">this</span>.startTime));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.refreshTime(<span class="literal">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 周期启动更新时间</span></div><div class="line">  auto() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.timerId = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">      <span class="comment">// 倒计时到0停止计时</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.timePassed &lt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.step &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">this</span>.end();</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.refreshTime(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    &#125;, <span class="number">1000</span> * <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.step)); <span class="comment">// 时间间隔为整数， 对step求绝对值</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  refreshTime(isStart) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.timePassed  = (<span class="keyword">this</span>.timeLeft * <span class="number">1000</span> + <span class="keyword">this</span>.step * <span class="number">1000</span> * <span class="keyword">this</span>.counter++) / <span class="number">1000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.countType === <span class="string">'date'</span>) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> _timePassed = <span class="keyword">this</span>.timePassed,</div><div class="line">        second = CountDown.ten(_timePassed % <span class="number">60</span>);</div><div class="line">      _timePassed = <span class="built_in">parseInt</span>(_timePassed / <span class="number">60</span>);</div><div class="line">      <span class="keyword">let</span> minute = CountDown.ten(_timePassed % <span class="number">60</span>);</div><div class="line">      _timePassed = <span class="built_in">parseInt</span>(_timePassed / <span class="number">60</span>);</div><div class="line">      <span class="keyword">let</span> hour = CountDown.ten(_timePassed % <span class="number">24</span>);</div><div class="line">      _timePassed = CountDown.ten(<span class="built_in">parseInt</span>(_timePassed / <span class="number">24</span>));</div><div class="line">      <span class="keyword">this</span>.onInterval(_timePassed,hour,minute, second);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.countType === <span class="string">'seconds'</span>) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.onInterval(<span class="keyword">this</span>.timePassed);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isStart &amp;&amp; <span class="keyword">this</span>.auto(); <span class="comment">// 是否开始计时</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 开始计时</span></div><div class="line">  start() &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timerId);</div><div class="line">    <span class="keyword">this</span>.refreshTime(<span class="literal">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 结束： 没有清空计数 + 停止计时</span></div><div class="line">  end() &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timerId);</div><div class="line">    <span class="keyword">this</span>.onEnd(<span class="keyword">this</span>.timeLeft);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reset() &#123;</div><div class="line">    <span class="keyword">this</span>.counter = <span class="number">0</span>;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timerId);</div><div class="line">    <span class="keyword">this</span>.refreshTime(<span class="literal">false</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>CountDownText.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> CountDown <span class="keyword">from</span> <span class="string">'./CountDown'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDownText</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">text</span>: <span class="keyword">this</span>.props.startText,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  counter= <span class="literal">null</span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> isTimeEquals(t1, t2) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(t1 - t2) &lt; <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillReceiveProps(nextProps) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> updating = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 倒计时的情况</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.step === nextProps.step &amp;&amp; <span class="keyword">this</span>.props.step &lt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.endTime) &#123;</div><div class="line">        <span class="comment">// 1. 按起始日期来计时</span></div><div class="line">        updating = !CountDownText.isTimeEquals(<span class="keyword">this</span>.props.endTime, nextProps.endTime);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 2. 按间隔秒数来计时</span></div><div class="line">        updating = !CountDownText.isTimeEquals(nextProps.timeLeft, <span class="keyword">this</span>.counter.timePassed);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (updating) &#123;</div><div class="line">      <span class="comment">// 重置： 清空计数 + 停止计时</span></div><div class="line">      <span class="keyword">this</span>.counter.reset();</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.counter.setData(<span class="built_in">Object</span>.assign(&#123;&#125;, nextProps, &#123;</div><div class="line">        <span class="attr">onInterval</span>: <span class="keyword">this</span>.onInterval.bind(<span class="keyword">this</span>),</div><div class="line">        <span class="attr">onEnd</span>: <span class="keyword">this</span>.onEnd.bind(<span class="keyword">this</span>),</div><div class="line">      &#125;));</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (nextProps.auto) &#123;</div><div class="line">        <span class="keyword">this</span>.start();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.counter =  <span class="keyword">new</span> CountDown(<span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.props, &#123;</div><div class="line">      <span class="attr">onInterval</span>: <span class="keyword">this</span>.onInterval.bind(<span class="keyword">this</span>),</div><div class="line">      <span class="attr">onEnd</span>: <span class="keyword">this</span>.onEnd.bind(<span class="keyword">this</span>),</div><div class="line">    &#125;));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.counter.timeLeft &lt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.counter.step &lt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.end();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.auto) <span class="keyword">this</span>.start();</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="keyword">this</span>.reset();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  start() &#123;</div><div class="line">    <span class="keyword">this</span>.counter.start();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  end() &#123;</div><div class="line">    <span class="keyword">this</span>.counter.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reset() &#123;</div><div class="line">    <span class="keyword">this</span>.counter.reset();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;this.props.style&#125;</span>&gt;</span> &#123;this.state.text&#125; <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getTimePassed() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.counter.timePassed;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onInterval(...args) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">text</span>: <span class="keyword">this</span>.props.intervalText.apply(<span class="literal">null</span>, args)&#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onEnd(timePassed) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">text</span>: <span class="keyword">this</span>.props.endText,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.props.afterEnd(timePassed);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">CountDownText.defaultProps = &#123;</div><div class="line">  <span class="attr">countType</span>: <span class="string">'seconds'</span>,</div><div class="line">  <span class="attr">onEnd</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">timeLeft</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">step</span>: <span class="number">-1</span>,</div><div class="line">  <span class="attr">startText</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">intervalText</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">endText</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">auto</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">afterEnd</span>: <span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> CountDownText;</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>大量借鉴 <a href="https://github.com/shigebeyond/react-native-sk-countdown" target="_blank" rel="external">https://github.com/shigebeyond/react-native-sk-countdown</a> 项目</p>
<p>其实说白了只是在原来代码上优化改进，主要兼容新版的<code>React-Native</code>、<code>React</code> 和用 <code>ES6</code>语法改写。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
            <tag> work </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端浏览器默认请求 apple-touch-icon.png 问题]]></title>
      <url>https://jsonz1993.github.io/2017/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E8%AF%B7%E6%B1%82-apple-touch-icon-png-%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>项目有做埋点与请求的记录， 早上发现有用户老是会请求一个<code>location.origin + &quot;/apple-touch-icon.png&quot;</code> 或 <code>location.origin + &quot;/apple-touch-icon-76x76.png&quot;</code>的问题。</p>
<p>这就很纳闷了， 首先，按照我们的代码风格是不会出现 根目录指向的图片 而且后台也不会输出这么系统化的图片名。</p>
<p>一看就知道是 <code>apple</code> 搞的鬼。</p>
<p>于是乎 <code>google</code> 了一下 大概就是ios8及以上<code>safari</code>浏览器的保存桌面操作请求的一张图，用于做icon。</p>
<h2 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h2><p><img src="./1.jpeg" alt="1.jpeg"><br><img src="./2.jpeg" alt="2.jpeg"><br><img src="./3.jpeg" alt="3.jpeg"></p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>可以在head加上这段<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/custom_icon.png"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果要更加精准一点，根据设备来用不同的icon，则可以这样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"touch-icon-iphone.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"152x152"</span> <span class="attr">href</span>=<span class="string">"touch-icon-ipad.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"180x180"</span> <span class="attr">href</span>=<span class="string">"touch-icon-iphone-retina.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"167x167"</span> <span class="attr">href</span>=<span class="string">"touch-icon-ipad-retina.png"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果没有找到符合设备的尺寸，那么会优先选用比预期尺寸大的最小图标。<br>比如设备的适当图标大小为58 x 58，系统会按照下面寻找</p>
<ul>
<li>apple-touch-icon-80x80.png</li>
<li>apple-touch-icon.png</li>
</ul>
<p>默认是去更目录寻找，不过你可以指定一个路径。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><a href="https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="external">更多资料</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工作日常 吸顶效果]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8-%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>吸顶 最常见的就是我们平时网站浏览的时候，下滑到某个程度之后 导航栏就固定到顶部而不随页面滚动而滚动（简单而言就是 fixed 布局 ).<br>最常见的实现方式思路就是 判断页面滚动高度，到某个高度的时候就让这个div改变定位方式</p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>引入 jq ，并加一判断，如果jq(zepto) 没有 outerHeight/outerWidth 手动实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'./jquery-2.1.1'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 如果没有 outerWidth 或 outerHeight 手动实现outerWidth &amp;&amp; outerHeight</span></div><div class="line">(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> $.outerHeight === <span class="string">'function'</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  [<span class="string">'height'</span>, <span class="string">'width'</span>].forEach(<span class="function"><span class="params">dimension</span>=&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> Dimension = dimension.replace(<span class="regexp">/./</span>, m=&gt; m[<span class="number">0</span>].toUpperCase());</div><div class="line"></div><div class="line">    $.fn[<span class="string">'outer'</span> + Dimension] = <span class="function"><span class="keyword">function</span>(<span class="params">margin</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">let</span> size = <span class="keyword">this</span>[dimension](),</div><div class="line">          sides = &#123;</div><div class="line">            <span class="string">'width'</span>: [<span class="string">'left'</span>, <span class="string">'right'</span>],</div><div class="line">            <span class="string">'height'</span>: [<span class="string">'top'</span>, <span class="string">'bottom'</span>],</div><div class="line">          &#125;;</div><div class="line"></div><div class="line">        sides[dimension].forEach(<span class="function"><span class="params">side</span>=&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span> (margin) size += <span class="built_in">parseInt</span>(<span class="keyword">this</span>.css(<span class="string">'margin-'</span> + side), <span class="number">10</span>);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>实现代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fixedTop = &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * @param el 具体要 fixed 的 dom 的字符串或jqueryDom 或dom</div><div class="line">   * @param opts 其他配置，目前只有 hold 是否要生成一个占位div防止div 脱离文档流后兄弟节点抖动</div><div class="line">   */</div><div class="line">  init(el, opts=&#123; <span class="attr">hold</span>: <span class="literal">true</span>&#125;) &#123;</div><div class="line">  	<span class="comment">// 初始化需要的el</span></div><div class="line">    <span class="keyword">this</span>.$el = el <span class="keyword">instanceof</span> $? el: $(el);</div><div class="line"></div><div class="line">	<span class="comment">// 获取后面要改变样式的具体参数</span></div><div class="line">    <span class="keyword">let</span> offset = <span class="keyword">this</span>.$el.offset();</div><div class="line">    <span class="keyword">this</span>.offsetTop = offset.top;</div><div class="line">    <span class="keyword">this</span>.defaultHeight = <span class="keyword">this</span>.$el.outerHeight(<span class="literal">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.defaultState = &#123;</div><div class="line">      <span class="attr">position</span>: <span class="keyword">this</span>.$el.css(<span class="string">'position'</span>),</div><div class="line">      <span class="attr">width</span>: <span class="keyword">this</span>.$el.css(<span class="string">'width'</span>) || <span class="string">'auto'</span>,</div><div class="line">      <span class="attr">top</span>: <span class="keyword">this</span>.$el.css(<span class="string">'top'</span>) || <span class="string">'auto'</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.changeState = &#123;</div><div class="line">      <span class="attr">position</span>: <span class="string">'fixed'</span>,</div><div class="line">      <span class="attr">width</span>: <span class="keyword">this</span>.$el.outerWidth(),</div><div class="line">      <span class="attr">top</span>: <span class="string">'0'</span>,</div><div class="line">      <span class="attr">left</span>: offset.left,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 如果有 hodl 参数， 配置好要生成的 占位dom</span></div><div class="line">    <span class="keyword">this</span>.holdEl = opts.hold? <span class="string">`&lt;div class="J-fixedTop-pad" style="height:<span class="subst">$&#123;<span class="keyword">this</span>.defaultHeight&#125;</span>px; visibility: hidden;"&gt;&lt;/div&gt;`</span>: <span class="string">''</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 绑定事件</span></div><div class="line">    <span class="keyword">this</span>.bindEvent();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  bindEvent() &#123;</div><div class="line">    <span class="keyword">let</span> $win = $(<span class="built_in">window</span>);</div><div class="line">    $win.scroll(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> isTop = ($win.scrollTop() - <span class="keyword">this</span>.offsetTop) &gt;= <span class="number">0</span>,</div><div class="line">        isFixed = <span class="keyword">this</span>.$el.data(<span class="string">'fixed'</span>);</div><div class="line"></div><div class="line">	  <span class="comment">// 判断 如果大于top 并且当前的dom元素没有被改变样式，则执行逻辑</span></div><div class="line">      <span class="keyword">if</span> (isTop &amp;&amp; !isFixed) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.$el.data(<span class="string">'fixed'</span>, <span class="literal">true</span>);</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.$el.next().hasClass(<span class="string">'J-fixedTop-pad'</span>)) &#123;</div><div class="line">          <span class="keyword">this</span>.$el.after(<span class="keyword">this</span>.holdEl);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.addCss();</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isTop &amp;&amp; isFixed)&#123;</div><div class="line"></div><div class="line">      	<span class="comment">// 反之 还原dom样式</span></div><div class="line"></div><div class="line">        <span class="keyword">this</span>.$el.data(<span class="string">'fixed'</span>, <span class="literal">false</span>);</div><div class="line">        <span class="keyword">this</span>.removeCss();</div><div class="line">        <span class="keyword">this</span>.holdEl &amp;&amp; <span class="keyword">this</span>.$el.next().remove();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  addCss() &#123;</div><div class="line">    <span class="keyword">this</span>.$el.css(<span class="keyword">this</span>.changeState);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  removeCss() &#123;</div><div class="line">    <span class="keyword">this</span>.$el.css(<span class="keyword">this</span>.defaultState);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fixedTop.init(<span class="string">'#div'</span>);</div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>很简单的小需求， 是在工作中看到小伙伴的脚本后改进的。 主要是之前没有想到要生成一个占位dom来防止后面的抖动<br><a href="https://github.com/jsonz1993/wheel/tree/master/fixedTop" target="_blank" rel="external">项目源码链接</a></p>
<p>目前只支持吸顶， 后面可以对代码改造，改成可以支持左右上下的</p>
<p>然后有一个css样式可以直接达到这个效果，但是兼容性不乐观， 对布局也有所要求，有兴趣的可以去了解一下.<br><a href="https://mdn.mozillademos.org/en-US/docs/Web/CSS/position$samples/Sticky_positioning?revision=1248065" target="_blank" rel="external">sticky demo</a>。<br><a href="http://caniuse.com/#search=sticky" target="_blank" rel="external">sticky caniuse</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
            <tag> work </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios body事件委托的坑]]></title>
      <url>https://jsonz1993.github.io/2017/05/ios-body%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>部门老大: 这个套餐怎么超出一屏之后点击没反应的…</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>有一个<code>套餐列表</code>是靠接口异步渲染的，所以事件我直接绑定在<code>body</code>上，通过事件委托去触发。<br>这原本没什么问题， 要命的是 <strong>reset.css</strong> 中把 <code>body, html</code> 高度设置为 100%。 这就可能出现下面的情况</p>
<p><img src="./body_100.png" alt="body_100"><br><img src="./body_bug.PNG" alt="body_bug.PNG"></p>
<p>页面过长，拉上去的时候 <code>body</code> 只有 <code>100%</code> 高度，没有覆盖到下面， 所以这时候点击下面的套餐，不算是点击到body上 委托也就无从下手。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法很简单…. 只需要在页面重置掉那个样式即可 如 <code>body=&gt; height: auto</code>。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios9 下 domArray forEach 报错]]></title>
      <url>https://jsonz1993.github.io/2017/05/ios9-%E4%B8%8B-domArray-forEach-%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<p>起因是这样的，产品需求需要输入框输入后，要根据内容高度自适应，最高不能超过3行， 于是写了一个小函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> textareaAutoHeight = <span class="function">(<span class="params">className, &#123;multiple=<span class="number">3</span>&#125;=&#123;&#125;</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">let</span> domList = <span class="built_in">document</span>.querySelectorAll(className);</div><div class="line">    </div><div class="line">    domList.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> _height = item.offsetHeight;</div><div class="line">        <span class="comment">// item.offsetHeight 用zepto 的 height保险一点</span></div><div class="line">        item.addEventListener(<span class="string">'keyup'</span>, (e)=&gt; updateHeight(e, _height*multiple));</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateHeight</span>(<span class="params">e, _height</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> o = e.target;</div><div class="line">        o.style.height = <span class="string">'1px'</span>;</div><div class="line">        o.style.height = <span class="built_in">Math</span>.min(o.scrollHeight, _height) + <span class="string">'px'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传入dom标识加上行数，用的很开心。没毛病 没问题。</p>
<p>项目上线后，发现说在某些机型下会报错，后面排查到是这个函数的错。<br>原因是 ios9 一下。 domList 不是一个数组。</p>
<p>所以改动了一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> textareaAutoHeight = <span class="function">(<span class="params">className, &#123;multiple=<span class="number">3</span>&#125;=&#123;&#125;</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">let</span> domList = [...document.querySelectorAll(className)];</div><div class="line">    </div><div class="line">        domList.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> _height = item.offsetHeight;</div><div class="line">            <span class="comment">// item.offsetHeight 用zepto 的 height保险一点</span></div><div class="line">            item.addEventListener(<span class="string">'keyup'</span>, (e)=&gt; updateHeight(e, _height*multiple));</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateHeight</span>(<span class="params">e, _height</span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> o = e.target;</div><div class="line">            o.style.height = <span class="string">'1px'</span>;</div><div class="line">            o.style.height = <span class="built_in">Math</span>.min(o.scrollHeight, _height) + <span class="string">'px'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123; <span class="built_in">console</span>.warn(<span class="string">'JSONZ textareaAutoHeight'</span>, e)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加了一个 <code>try...catch...</code> 并且把 domList 用es6转为数组类型.</p>
<p>以后写工具类方法，尽量加多一个 <code>try..catch...</code> 至少保证不影响主流程</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack 代码分割(异步加载加快首屏速度)]]></title>
      <url>https://jsonz1993.github.io/2017/05/webpack-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2-%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E5%8A%A0%E5%BF%AB%E9%A6%96%E5%B1%8F%E9%80%9F%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>对于单页应用，将所有代码打包成一个文件，可以减少网络请求，并且后面页面不需要再去加载js 可以减少白页时间。 但是对于首页需要快速加载的情况，我们可能需要重新考虑一下， 是否可以把一些不需要第一时间执行的代码异步加载进来。</p>
<p>Webpack有一个功能可以将您的代码库分解成按需加载的“块”，这个功能叫 <code>代码分割</code>。</p>
<p>Webpack的对于<code>块</code>的执行是， 异步创建<code>&lt;script&gt;</code>标签，把需要加载的脚本加载进来再执行。</p>
<p>具体有两种使用方法:</p>
<ul>
<li><code>CommonJs: require.ensure</code></li>
<li><code>AMD: require</code><br><code>ES6 Modules</code> 暂不支持</li>
</ul>
<h1 id="AMD-require"><a href="#AMD-require" class="headerlink" title="AMD: require"></a>AMD: require</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(dependencies, callback)</div><div class="line"></div><div class="line"><span class="built_in">require</span>([<span class="string">"module-a"</span>, <span class="string">"module-b"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>dependencies: 模块依赖数组</li>
<li>callback: 回调函数</li>
</ul>
<h1 id="CommonJs-require-ensure"><a href="#CommonJs-require-ensure" class="headerlink" title="CommonJs: require.ensure"></a>CommonJs: require.ensure</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure(dependencies, callback, chunkName);</div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"module-a"</span>, <span class="string">"module-b"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"module-a"</span>);</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>dependencies: 依赖的模块数组</li>
<li>callback: 回调函数，该函数调用时会传一个require参数</li>
<li>chunkName: 模块名，用于构建时生成文件时命名使用</li>
</ul>
<p>对于 <code>CommonJs</code> 方法， 个人在项目中都是这么用的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure([],<span class="built_in">require</span>=&gt;&#123;</div><div class="line">	<span class="keyword">const</span> menuBar = <span class="built_in">require</span>(<span class="string">'./menuBar'</span>);</div><div class="line">	<span class="keyword">const</span> upcomingTrips = <span class="built_in">require</span>(<span class="string">'./upcomingTrips'</span>);</div><div class="line">	<span class="built_in">require</span>(<span class="string">'./c'</span>);</div><div class="line"></div><div class="line">	menuBar.init();</div><div class="line">	upcomingTrips.init();</div><div class="line">&#125;,<span class="string">'index_later'</span>);</div></pre></td></tr></table></figure>
<p>依赖不写<code>dependencies</code> 而是直接写在 回调里面。 因为<code>webpack</code>会去递归拿依赖模块，所以就算我 <code>menuBar</code>里面依赖到其他模块，也会被下载下来 所以问题不大。 但是如果对于多模块互相依赖的情况，建议按照官方demo写法 防止重复嵌套打包。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cookie.js 简单的cookie操作插件]]></title>
      <url>https://jsonz1993.github.io/2017/05/cookie-js-%E7%AE%80%E5%8D%95%E7%9A%84cookie%E6%93%8D%E4%BD%9C%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>对操作cookie做一些接口, 包括 <code>set</code>, <code>get</code>, <code>remove</code>, <code>clear</code>, <code>getAll</code> 等， 都支持批量处理。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取</span></div><div class="line">Cookie.get(<span class="string">'name'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置</span></div><div class="line">Cookie.set(&#123;<span class="attr">key</span>: val, <span class="attr">key1</span>: val1&#125;, opts);</div><div class="line">Cookie.set(<span class="string">'key'</span>, <span class="string">'val'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 移除某个值</span></div><div class="line">Cookie.remove(name);</div><div class="line">Cookie.remove([name1, name2]);</div><div class="line"></div><div class="line"><span class="comment">// 清除Cookie</span></div><div class="line">Cookie.clear();</div><div class="line"></div><div class="line"><span class="comment">// 获取所有cookie</span></div><div class="line">Cookie.getAll(); <span class="comment">// &#123;key: val&#125;</span></div></pre></td></tr></table></figure>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>设置cookie, 如果之前没有接触过cookie.set 可以参考文档 <a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/cookies/set" target="_blank" rel="external">https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/cookies/set</a></p>
<p>添加cookie比较特殊，直接用 <code>document.cookie = 你要设置的cookie</code> 就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">set(name, value, opts) &#123;</div><div class="line">	<span class="keyword">if</span> (isObject(name)) &#123;</div><div class="line">	  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> name) &#123;</div><div class="line">	    <span class="keyword">if</span> (name.hasOwnProperty(key)) <span class="keyword">this</span>.set(key, name[key], value);</div><div class="line">	  &#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	  <span class="keyword">let</span> opt = isObject(opts)? opts: &#123; <span class="attr">expires</span>: opts&#125;,</div><div class="line">	    expires = <span class="keyword">typeof</span> opt.expires === <span class="string">'undefined'</span>? <span class="string">''</span>: opt.expires,</div><div class="line">	    expiresType = <span class="keyword">typeof</span> expires,</div><div class="line">	    path = <span class="keyword">typeof</span> opt.path === <span class="string">'undefined'</span>? <span class="string">';path=/'</span>: <span class="string">`;path=<span class="subst">$&#123;opt.path&#125;</span>`</span>,</div><div class="line">	    domain = opt.domain? <span class="string">`;domain=<span class="subst">$&#123;opt.domain&#125;</span>`</span>: <span class="string">''</span>,</div><div class="line">	    secure = opt.secure? <span class="string">';secure'</span>: <span class="string">''</span>;</div><div class="line"></div><div class="line">	  <span class="keyword">if</span> (expiresType === <span class="string">'string'</span> &amp;&amp; expires) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(expires);</div><div class="line">	  <span class="keyword">else</span> <span class="keyword">if</span> (expiresType === <span class="string">'number'</span>) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">new</span> <span class="built_in">Date</span> + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * expires);</div><div class="line">	  <span class="keyword">if</span> (expires !== <span class="string">''</span> &amp;&amp; <span class="string">'toGMTString'</span> <span class="keyword">in</span> expires) expires = <span class="string">';expires='</span> + expires.toGMTString();</div><div class="line"></div><div class="line">	  <span class="built_in">document</span>.cookie = [name, <span class="string">'='</span>, <span class="built_in">encodeURI</span>(value), expires, path, domain, secure].join(<span class="string">''</span>);</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>获取cookie 其实就是遍历 <code>document.cookie</code> 然后根据 <code>name</code> 去匹配</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">get(name) &#123;</div><div class="line">	<span class="keyword">let</span> cookieName = name + <span class="string">'='</span>,</div><div class="line">	  ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ca.length; i++) &#123;</div><div class="line">	  <span class="keyword">let</span> cItem = (ca[i][<span class="number">0</span>] === <span class="string">' '</span>)? ca[i].slice(<span class="number">1</span>): ca[i];</div><div class="line">	  <span class="keyword">if</span> (cItem.indexOf(cookieName) === <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">decodeURI</span>(cItem.substr(cookieName.length+<span class="number">1</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>移除cookie其实就是把这个cookie 设置为过期。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">remove(name) &#123;</div><div class="line">   <span class="keyword">let</span> names = <span class="built_in">Array</span>.isArray(name)? name: [name];</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; names.length; i++) &#123;</div><div class="line">     <span class="keyword">this</span>.set(names[i], <span class="string">''</span>, <span class="number">-1</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> names;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>遍历<code>document.cookie</code> 把所有的cookie 调用一次<code>remove</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">clear(name) &#123;</div><div class="line">   <span class="keyword">return</span> name? <span class="keyword">this</span>.remove(name): <span class="keyword">this</span>.remove(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.getAll()));</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="getAll"><a href="#getAll" class="headerlink" title="getAll"></a>getAll</h3><p>获取本地所有的cookie， 返回 <code>{key: value}</code> 形式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getAll() &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="built_in">document</span>.cookie === <span class="string">''</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">   <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>), result = &#123;&#125;;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; cookies.length; i++) &#123;</div><div class="line">     <span class="keyword">let</span> item = cookies[i].split(<span class="string">'='</span>);</div><div class="line">     result[<span class="built_in">decodeURI</span>(item[<span class="number">0</span>])] = <span class="built_in">decodeURI</span>(item[<span class="number">1</span>]);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/jsonz1993/wheel/tree/master/cookie" target="_blank" rel="external">Jsonz-github</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> isObject = <span class="function"><span class="params">obj</span>=&gt;</span> !!value &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Object]'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Cookie = &#123;</div><div class="line">  get(name) &#123;</div><div class="line">    <span class="keyword">let</span> cookieName = name + <span class="string">'='</span>,</div><div class="line">      ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ca.length; i++) &#123;</div><div class="line">      <span class="keyword">let</span> cItem = (ca[i][<span class="number">0</span>] === <span class="string">' '</span>)? ca[i].slice(<span class="number">1</span>): ca[i];</div><div class="line">      <span class="keyword">if</span> (cItem.indexOf(cookieName) === <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">decodeURI</span>(cItem.substr(cookieName.length+<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  set(name, value, opts) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isObject(name)) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> name) &#123;</div><div class="line">        <span class="keyword">if</span> (name.hasOwnProperty(key)) <span class="keyword">this</span>.set(key, name[key], value);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">let</span> opt = isObject(opts)? opts: &#123; <span class="attr">expires</span>: opts&#125;,</div><div class="line">        expires = <span class="keyword">typeof</span> opt.expires === <span class="string">'undefined'</span>? <span class="string">''</span>: opt.expires,</div><div class="line">        expiresType = <span class="keyword">typeof</span> expires,</div><div class="line">        path = <span class="keyword">typeof</span> opt.path === <span class="string">'undefined'</span>? <span class="string">';path=/'</span>: <span class="string">`;path=<span class="subst">$&#123;opt.path&#125;</span>`</span>,</div><div class="line">        domain = opt.domain? <span class="string">`;domain=<span class="subst">$&#123;opt.domain&#125;</span>`</span>: <span class="string">''</span>,</div><div class="line">        secure = opt.secure? <span class="string">';secure'</span>: <span class="string">''</span>;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (expiresType === <span class="string">'string'</span> &amp;&amp; expires) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(expires);</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (expiresType === <span class="string">'number'</span>) expires = <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">new</span> <span class="built_in">Date</span> + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * expires);</div><div class="line">      <span class="keyword">if</span> (expires !== <span class="string">''</span> &amp;&amp; <span class="string">'toGMTString'</span> <span class="keyword">in</span> expires) expires = <span class="string">';expires='</span> + expires.toGMTString();</div><div class="line"></div><div class="line">      <span class="built_in">document</span>.cookie = [name, <span class="string">'='</span>, <span class="built_in">encodeURI</span>(value), expires, path, domain, secure].join(<span class="string">''</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  remove(name) &#123;</div><div class="line">    <span class="keyword">let</span> names = <span class="built_in">Array</span>.isArray(name)? name: [name];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; names.length; i++) &#123;</div><div class="line">      <span class="keyword">this</span>.set(names[i], <span class="string">''</span>, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> names;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  clear(name) &#123;</div><div class="line">    <span class="keyword">return</span> name? <span class="keyword">this</span>.remove(name): <span class="keyword">this</span>.remove(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.getAll()));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  getAll() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie === <span class="string">''</span>) <span class="keyword">return</span> &#123;&#125;;</div><div class="line">    <span class="keyword">let</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>), result = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="number">0</span>; i&lt; cookies.length; i++) &#123;</div><div class="line">      <span class="keyword">let</span> item = cookies[i].split(<span class="string">'='</span>);</div><div class="line">      result[<span class="built_in">decodeURI</span>(item[<span class="number">0</span>])] = <span class="built_in">decodeURI</span>(item[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/jaywcjlove/cookie.js" target="_blank" rel="external">https://github.com/jaywcjlove/cookie.js</a><br><a href="https://developer.mozilla.org/en-US/search?q=cookie" target="_blank" rel="external">https://developer.mozilla.org/en-US/search?q=cookie</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[置顶]收藏夹]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
      <content type="html"><![CDATA[<p>一般是看到比较好的网站或文章，learn 学习完就放这边备份以后可能用到。</p>
<h2 id="技术文章"><a href="#技术文章" class="headerlink" title="技术文章"></a>技术文章</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><p><a href="https://developers.google.cn/web/tools/chrome-devtools/memory-problems/#dom" target="_blank" rel="external">安卓webview内存</a></p>
<p><a href="https://aotu.io/notes/2017/04/28/2017-4-28-CSS-viewport-units/" target="_blank" rel="external">viewport</a></p>
<p><a href="https://www.google.com.hk/search?q=shadow+DOM&amp;oq=shadow+DOM&amp;aqs=chrome..69i57j0l5.420j0j7&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="external">shadow DOM</a></p>
<p><a href="https://www.zhihu.com/question/29448457/answer/45411615" target="_blank" rel="external">前端学习路线</a></p>
<p><a href="https://developers.google.com/webmasters/mobile-sites/mobile-seo/other-devices?hl=zh-cn" target="_blank" rel="external">正对其他设备的移动版网站搜索引擎优化SEO</a></p>
<p><a href="https://developers.google.cn/web/tools/chrome-devtools/" target="_blank" rel="external">chrome 开发工具</a></p>
<h3 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h3><p><a href="https://segmentfault.com/a/1190000003848737" target="_blank" rel="external">ios touch事件与点击穿透问题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/24837233" target="_blank" rel="external">ios滚动条问题</a></p>
<p><a href="https://fe.ele.me/momentum-scrolling-on-ios/" target="_blank" rel="external">ios滚动条问题</a></p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><a href="http://zcfy.cc/article/5-react-native-open-source-projects-to-learn-from-the-react-native-log-medium-2671.html" target="_blank" rel="external">React-Native 开源项目学习</a></p>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p><a href="https://github.com/cssmagic/CSS-Secrets/issues/12" target="_blank" rel="external">毛玻璃效果</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://media.weibo.cn/article?id=2309404110649276932425&amp;from=groupmessage&amp;isappinstalled=1&amp;jumpfrom=weibocom" target="_blank" rel="external">扫雷学习</a><br><a href="http://www.bilibili.com/video/av8840844/" target="_blank" rel="external">扫雷学习</a></p>
<h2 id="开发文档"><a href="#开发文档" class="headerlink" title="开发文档"></a>开发文档</h2><h3 id="开发者社区"><a href="#开发者社区" class="headerlink" title="开发者社区"></a>开发者社区</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="external">mozilla-devloper</a></p>
<p><a href="https://developers.google.cn/web/tools/chrome-devtools/" target="_blank" rel="external">chrome-devtools</a></p>
<p><a href="https://juejin.im/" target="_blank" rel="external">掘金</a></p>
<p><a href="http://zcfy.cc/" target="_blank" rel="external">众成翻译</a></p>
<p><a href="https://www.w3.org/TR/" target="_blank" rel="external">w3c基础东西</a></p>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><p><a href="https://www.processon.com/login;jsessionid=FB2C8C3C1412362A78062F150CD320BF.jvm1?backUrl=/diagraming/591e6da3e4b01fec948f40a1" target="_blank" rel="external">脑图/流程图</a></p>
<p><a href="https://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/#%E5%8D%81%E3%80%81%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6" target="_blank" rel="external">next 置顶文章</a></p>
]]></content>
      
        <categories>
            
            <category> favorites </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CORS 跨域资源共享]]></title>
      <url>https://jsonz1993.github.io/2017/05/CORS-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）</p>
<blockquote>
<p>出于安全考虑，浏览器会限制某些跨域请求。</p>
</blockquote>
<p>而 cors 允许浏览器想跨源服务器发起 <code>XMLHttpRequest</code> 和 <code>Fetch</code> 接口请求。</p>
<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。</p>
<p>那么浏览器是根据什么规则来判定是否为同源呢</p>
<p><code>http://www.zuzuche.com:80</code></p>
<ul>
<li>协议: http</li>
<li>端口: 80 (默认为80 如果没写 浏览器会帮我们做这些工作)</li>
<li>域名 www.zuzuche.com</li>
</ul>
<p>如果协议， 端口， 域名一致，那么浏览器就会认定我们是在同个源下面。否则就会出现跨域问题。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">具体文档等可见</a></p>
<h3 id="简单请求与非简单请求"><a href="#简单请求与非简单请求" class="headerlink" title="简单请求与非简单请求"></a>简单请求与非简单请求</h3><p>简单请求指的是</p>
<ul>
<li>请求方法是以下方法之一<ul>
<li>GET</li>
<li>POST</li>
<li>HEAD</li>
</ul>
</li>
<li>不自定义某些头部字段<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type （需要注意额外的限制）</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
<li>Content-Type 为以下值之一<ul>
<li>application/x-www-form-urlencoded</li>
<li>multipart/form-data</li>
<li>text/plain</li>
</ul>
</li>
</ul>
<p>非简单请求(预检请求)指的是</p>
<ul>
<li>使用了下面任一HTTP方法：<ul>
<li>PUT</li>
<li>DELETE</li>
<li>CONNECT</li>
<li>OPTIONS</li>
<li>TRACE</li>
<li>PATCH</li>
</ul>
</li>
<li>人为设置某些头部字段<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type (but note the additional requirements below)</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
<li>Content-Type的值不属于下列之一<ul>
<li>application/x-www-form-urlencoded</li>
<li>multipart/form-data</li>
<li>text/plain</li>
</ul>
</li>
</ul>
<h4 id="发起一个简单的请求"><a href="#发起一个简单的请求" class="headerlink" title="发起一个简单的请求"></a>发起一个简单的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">''</span>);</div></pre></td></tr></table></figure>
<p>此时会发起一个简单请求，和我们平时写的<code>ajax</code>没多大区别</p>
<h4 id="发起一个非简单请求"><a href="#发起一个非简单请求" class="headerlink" title="发起一个非简单请求"></a>发起一个非简单请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var invocation = new XMLHttpRequest();</div><div class="line">var url = &apos;http://bar.other/resources/post-here/&apos;;</div><div class="line">var body = &apos;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;&apos;;</div><div class="line">    </div><div class="line">function callOtherDomain()&#123;</div><div class="line">  if(invocation)</div><div class="line">    &#123;</div><div class="line">      invocation.open(&apos;POST&apos;, url, true);</div><div class="line">      invocation.setRequestHeader(&apos;X-PINGOTHER&apos;, &apos;pingpong&apos;);</div><div class="line">      invocation.setRequestHeader(&apos;Content-Type&apos;, &apos;application/xml&apos;);</div><div class="line">      invocation.onreadystatechange = function()&#123;&#125;;</div><div class="line">      invocation.send(body); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">callOtherDomain();</div></pre></td></tr></table></figure>
<p>此时发起的是一个非简单请求，所以浏览器会先发一个<code>options</code>请求服务器，以获知浏览器是否允许实际请求，如果允许再会发多一个真实请求。<br><img src="./options请求.png" alt="options"></p>
<h4 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h4><p>我们要跨域获取资源，主要要后台人员配合。</p>
<p>一般情况我们只需要把报错信息给后台人员看就知道怎么做了，比如我直接调用 报了一个跨域问题</p>
<blockquote>
<p>Fetch API cannot load <a href="https://www.baidu.com/" target="_blank" rel="external">https://www.baidu.com/</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="https://developer.mozilla.org" target="_blank" rel="external">https://developer.mozilla.org</a>‘ is therefore not allowed access. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.</p>
</blockquote>
<p>直接把错误丢给后台人员，他们就知道设置一个属性 <code>Access-Control-Allow-Origi</code> 一般设置为 <code>*</code> 谁都可以访问 也可以根据情景设定特定的域名。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> web </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取滚动条宽度]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E8%8E%B7%E5%8F%96%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%AE%BD%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p>平时工作的时候，我们经常会遇到需要全局 <code>loading 加 遮罩层</code> 的功能。这时候一般会设置 <code>body { overflow: hidden }</code> 防止页面滚动。</p>
<p>但是在 pc 端 如果一个页面有滚动条，突然给设置为没有的话， 可能会出现抖动的现象。 所以我们的解决思路是 在设置样式之后，给body(也可以是其他) 加多一个 <code>padding-right</code>来填充原本滚动条的宽度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollBarWidth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">    styles = &#123;</div><div class="line">      <span class="attr">width</span>: <span class="string">'100px'</span>,</div><div class="line">      <span class="attr">height</span>: <span class="string">'10px'</span>,</div><div class="line">      <span class="attr">overflow</span>: <span class="string">'scroll'</span></div><div class="line">    &#125;, scrollWidth = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> styles) &#123;</div><div class="line">    div.style[key] = styles[key];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(div);</div><div class="line">  scrollWidth = div.offsetWidth - div.clientWidth;</div><div class="line">  div.remove();</div><div class="line">  <span class="keyword">return</span> scrollWidth;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 伪代码思路</span></div><div class="line">&#123;</div><div class="line">  body.overflow = hidden;</div><div class="line">  body.paddingRight += getScrollBarWidth();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> work </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端长按弹出复制等选项设置]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%95%BF%E6%8C%89%E5%BC%B9%E5%87%BA%E5%A4%8D%E5%88%B6%E7%AD%89%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>今儿产品大佬吐槽一句:</p>
<blockquote>
<p>在手机端<code>chrome</code> 浏览器下 点一个文字老是要弹出一个让我划词 好烦。能不能让他不要弹出那些东西来</p>
</blockquote>
<p>其实现在很多的 app 内嵌 h5 页面都是喜欢把手机默认的长按弹出菜单[选择， 复制， 剪切] 等禁掉。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 给所有样式都加上进制弹出长按菜单属性。</div><div class="line">* &#123;</div><div class="line">	-webkit-user-select: none;</div><div class="line">	user-select: none;	</div><div class="line">&#125;</div><div class="line">// 记得要给表单排除，一般表单都有复制黏贴的需求</div><div class="line">input,textarea &#123;-webkit-user-select: text;user-select: text;&#125;</div></pre></td></tr></table></figure>
<p>兼容问题 移动端基本兼容</p>
<iframe height="498" width="100%" src="http://caniuse.com/#search=user-select" frameborder="0" allowfullscreen></iframe>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> work </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Native 错误总结]]></title>
      <url>https://jsonz1993.github.io/2017/05/React-Native-%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="No-bundle-URL-present"><a href="#No-bundle-URL-present" class="headerlink" title="No bundle URL present."></a>No bundle URL present.</h2><p><img src="./no_bundle_url_present.png" alt="no_bundle_url_present"><br><a href="https://github.com/facebook/react-native/issues/12754" target="_blank" rel="external">github issues</a></p>
<p>项目创建大概一个月了，最近突然想再捡起<code>react-native</code>学习， 直接跑<code>react-native run-ios</code>就报红屏 <strong>No bundle URL present.</strong><br>github 上的 issues 给出了几种解决方法。</p>
<h3 id="重新安装依赖"><a href="#重新安装依赖" class="headerlink" title="重新安装依赖"></a>重新安装依赖</h3><ul>
<li>Run “react-native run-ios”</li>
<li>When the error appears, run “npm install”</li>
<li>Then run “react-native run-ios” again.</li>
</ul>
<h3 id="adding-NSAllowsLocalNetworking-to-Info-plist"><a href="#adding-NSAllowsLocalNetworking-to-Info-plist" class="headerlink" title="adding NSAllowsLocalNetworking to Info.plist"></a>adding NSAllowsLocalNetworking to Info.plist</h3><p>这个解决方法慎重，如果修改了没有解决 请还原该代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</div><div class="line">	&lt;dict&gt;</div><div class="line">		&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</div><div class="line">		&lt;true/&gt;</div><div class="line">		&lt;key&gt;NSAllowsArbitraryLoadsInWebContent&lt;/key&gt;</div><div class="line">		&lt;true/&gt;</div><div class="line">		&lt;key&gt;NSAllowsLocalNetworking&lt;/key&gt;</div><div class="line">		&lt;true/&gt;</div><div class="line">	&lt;/dict&gt;</div><div class="line">&lt;/key&gt;</div></pre></td></tr></table></figure></p>
<h3 id="8081端口被占用"><a href="#8081端口被占用" class="headerlink" title="8081端口被占用"></a>8081端口被占用</h3><p>mac下kill 该接口，再重新跑 <code>run-ios</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo lsof -i :8071</div><div class="line">kill -9 &lt;PID&gt;</div></pre></td></tr></table></figure>
<h3 id="在-xCode-中启动项目"><a href="#在-xCode-中启动项目" class="headerlink" title="在 xCode 中启动项目"></a>在 xCode 中启动项目</h3><h3 id="删除本地项目中的-ios-build-重新跑-run-ios-build项目"><a href="#删除本地项目中的-ios-build-重新跑-run-ios-build项目" class="headerlink" title="删除本地项目中的 ios/build 重新跑 run-ios build项目"></a>删除本地项目中的 <code>ios/build</code> 重新跑 <code>run-ios</code> build项目</h3><h3 id="关闭本地代理，或者设置不去代理-127-0-0-1"><a href="#关闭本地代理，或者设置不去代理-127-0-0-1" class="headerlink" title="关闭本地代理，或者设置不去代理 127.0.0.1"></a>关闭本地代理，或者设置不去代理 <code>127.0.0.1</code></h3><h3 id="手动查找解决问题"><a href="#手动查找解决问题" class="headerlink" title="手动查找解决问题"></a>手动查找解决问题</h3><p>在终端跑 <code>react-native bundle --platform ios --dev false --entry-file index.ios.js --bundle-output ./ios/release/main.jsbundle --assets-dest ./ios/release/main.jsbundle</code> 可以找到报错原因， 比如我是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bundle: start</div><div class="line">bundle: finish</div><div class="line">bundle: Writing bundle output to: ./ios/release/main.jsbundle</div><div class="line"></div><div class="line">ENOENT: no such file or directory, open &apos;./ios/release/main.jsbundle&apos;</div><div class="line"></div><div class="line">少了 PureRenderMixin 组件</div><div class="line">npm i --save react@16.0.0-alpha.6</div></pre></td></tr></table></figure>
<h3 id="重新设置-本地loaclhost"><a href="#重新设置-本地loaclhost" class="headerlink" title="重新设置 本地loaclhost"></a>重新设置 本地loaclhost</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /private/etc/hosts</div><div class="line"></div><div class="line"># Add this line</div><div class="line">127.0.0.1       localhost</div></pre></td></tr></table></figure>
<h3 id="让-xcode-获取权限再重试"><a href="#让-xcode-获取权限再重试" class="headerlink" title="让 xcode 获取权限再重试"></a>让 xcode 获取权限再重试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo xcodebuild -license</div><div class="line"></div><div class="line">react-native run-ios</div></pre></td></tr></table></figure>
<h3 id="开两个终端"><a href="#开两个终端" class="headerlink" title="开两个终端"></a>开两个终端</h3><p>第一个终端跑 <code>npm start</code><br>第二个终端再跑 <code>react-native</code></p>
<h3 id="清除项目-重装"><a href="#清除项目-重装" class="headerlink" title="清除项目 重装"></a>清除项目 重装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew unlink watchman</div><div class="line">brew install watchman</div><div class="line"></div><div class="line">rm -rf ios/build; rm -rf ios/build; rm -rf android/build; rm -rf android/app/build; rm -rf $TMPDIR/react* ; rm -f ios/main.jsbundle; rm -rf node_modules; rm yarn.lock || true; npm cache clean; yarn cache clean</div><div class="line"></div><div class="line">yarn install or npm install</div></pre></td></tr></table></figure>
<h3 id="我自己的解决方法"><a href="#我自己的解决方法" class="headerlink" title="我自己的解决方法"></a>我自己的解决方法</h3><p>把自己的项目代码拷贝出来后，整个项目删了重新安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">class Parent extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      hit: false</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 次数清零</div><div class="line">  timeReset() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  willHit() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  shouldComponentUpdate() &#123;</div><div class="line">    return true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUpdate() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidUpdate() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;srtles.container&#125;&gt;</div><div class="line">        &#123;</div><div class="line">          this.state.hit</div><div class="line">          ? &lt;Child /&gt;</div><div class="line">          : null</div><div class="line">        &#125;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.timeReset.bind(this)&#125;&gt;</div><div class="line">          老子心情好，不揍你了</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125; onPress=&#123;this.willHit.bind(this)&#125;&gt;</div><div class="line">          老子揍你一次</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125; onPress=&#123;this.willHitT.bind(this)&#125;&gt;</div><div class="line">          老子要揍你三次</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      times: 0</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  timesPlus() &#123;</div><div class="line">    let time = this.state.times;</div><div class="line">    times++;</div><div class="line">    this.setState(&#123;</div><div class="line">      times</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125; onPress=&#123;this.timesPlus.bind(this)&#125;&gt;</div><div class="line">          儿子不服</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          你打了我 &#123;this.state.times&#125; 次</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;#333333&apos;,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;imooc&apos;, () =&gt; Parent);</div></pre></td></tr></table></figure>
<h2 id="Cannot-Find-entry-file-index-ios-js-in-any-of-the-project-roots"><a href="#Cannot-Find-entry-file-index-ios-js-in-any-of-the-project-roots" class="headerlink" title="Cannot Find entry file index.ios.js in any of the project roots"></a>Cannot Find entry file index.ios.js in any of the project roots</h2><p>红屏 报错，找不到入口文件。</p>
<h3 id="检查自己的-index-ios-js-里面有没有调用初始化的函数如-AppRegistry-registerComponent-39-Your-project-name-39-gt-indexComponents"><a href="#检查自己的-index-ios-js-里面有没有调用初始化的函数如-AppRegistry-registerComponent-39-Your-project-name-39-gt-indexComponents" class="headerlink" title="检查自己的 index.ios.js 里面有没有调用初始化的函数如 AppRegistry.registerComponent(&#39;Your project name&#39;, () =&gt; indexComponents);"></a>检查自己的 index.ios.js 里面有没有调用初始化的函数如 <code>AppRegistry.registerComponent(&#39;Your project name&#39;, () =&gt; indexComponents);</code></h3><h3 id="https-github-com-facebook-react-native-issues-4968"><a href="#https-github-com-facebook-react-native-issues-4968" class="headerlink" title="https://github.com/facebook/react-native/issues/4968"></a><a href="https://github.com/facebook/react-native/issues/4968" target="_blank" rel="external">https://github.com/facebook/react-native/issues/4968</a></h3><p>github 里面列举了截止编写 300+ 条评论。<br>可以搜， 不过原因应该是某个<code>node_module</code> 升级依赖造成的， 所以没事不要乱升级啊。</p>
<h2 id="TypeError-Network-request-failed"><a href="#TypeError-Network-request-failed" class="headerlink" title="TypeError: Network request failed"></a>TypeError: Network request failed</h2><p>ios 下请求老是失败，莫名其妙的失败。</p>
<p>后面发现说是因为之前 clean project。 没有重新设置 ios 的请求 http 权限。</p>
<ol>
<li>打开<code>xCode</code></li>
<li>找到 <code>Info.plist</code></li>
<li>在 <code>Information Property List</code> 下新增 <code>NSAppTransportSecurity</code> 这时候会提示你已经有了 <code>NSAppTransportSecurity</code> 是否要修改， 点击是</li>
<li>此时你会发现 <code>NSAppTransportSecurity</code> 已经改名为 <code>App Transport Security Settings</code>。 本机xCode 版本为 <code>8.3.2</code>;</li>
<li>点击 <code>App Transport Security Settings</code> 右边的加号 添加<code>NSAllowsArbitraryLoads</code>(8.3.2版本为 <code>Allow Arbitrary Loads</code>) 后面的值改为 <code>YES</code>。</li>
<li>重启项目即可</li>
</ol>
<p>具体可见<a href="https://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http" target="_blank" rel="external">https://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http</a></p>
<h2 id="react-native-image-picker-问题"><a href="#react-native-image-picker-问题" class="headerlink" title="react-native-image-picker 问题"></a><code>react-native-image-picker</code> 问题</h2><h3 id="选择图片时奔溃错误"><a href="#选择图片时奔溃错误" class="headerlink" title="选择图片时奔溃错误"></a>选择图片时奔溃错误</h3><p>其实是因为安装 <code>react-native-image-picker</code> 不够细心，只看到自动安装的时候写着</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native link</div></pre></td></tr></table></figure>
<p>没看到还要手动在 <code>Info.plist</code> 上添加一些信息，用于备注需要 访问照片权限，麦克风权限（录像需要）， 相机权限等。</p>
<p>所以程序会报一个 <strong>SIGABRT</strong> 的错误.</p>
<p><img src="./SIGABRT_ERROR.png" alt="./SIGABRT_ERROR.png"></p>
<h3 id="Cannot-read-property-‘showImagePicker’-of-undefinde"><a href="#Cannot-read-property-‘showImagePicker’-of-undefinde" class="headerlink" title="Cannot read property ‘showImagePicker’ of undefinde"></a>Cannot read property ‘showImagePicker’ of undefinde</h3><p>如果遇到这个问题，是因为你安装该组件后没有重现编译ios代码，重新编译一次即可。</p>
<p>如果还不起作用可以检查一下是否安装正确，再跑命令 <code>rm -rf ios/build &amp;&amp; react-native run-ios</code></p>
<h1 id="React-Native-坑真的是遇过最多的一个"><a href="#React-Native-坑真的是遇过最多的一个" class="headerlink" title="React-Native 坑真的是遇过最多的一个"></a>React-Native 坑真的是遇过最多的一个</h1>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imooc React-Native 文字小游戏]]></title>
      <url>https://jsonz1993.github.io/2017/05/imooc-React-Native-%E6%96%87%E5%AD%97%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>文字小游戏需求：</p>
<p>老子 &amp;&amp; 儿子</p>
<p>-老子打儿子：</p>
<pre><code>- 可以打一次 记仇次数+1
- 可以打三次 记仇次数+3
- 可以给个糖 记仇次数清零
</code></pre><ul>
<li>儿子反驳老子：<ul>
<li>儿子不服 老子打一次</li>
<li>儿子骂老子 老子打三次</li>
<li>儿子买啤酒给老子 记仇次数清零</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> learn </tag>
            
            <tag> github </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setTimeout && setInterval 学习]]></title>
      <url>https://jsonz1993.github.io/2017/05/setTimeout-setInterval-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>定时器大家平时做js开发都不陌生了 最常见的应用应该就是验证码的倒计时 或 某段函数的异步执行了。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>js的定时器主要有 <code>setTimeout</code> 和 <code>setInterval</code>.</p>
<p>这两个函数执行后，都会返回一个整数，表示定时器的编号，后面可以通过<code>clearTimeout</code> 或 <code>clearInterval</code>来清除该定时器。</p>
<p><code>setTimeout</code>和<code>setInterval</code>的运行机制都是 将代码移除本次执行，等待下一轮的 Event Loop再检查是否到执行的时间。<br>所以可以用 <code>setTimeout(()=&gt; {}, 0)</code> 来模拟执行异步操作。</p>
<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><h3 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h3><p>setTimeout 是用来制定某段函数或代码，在多少毫秒延迟后执行。<br>如果传入的是一段代码，必须是字符串类型的。这时候js会调用<code>eval</code>来执行该代码， 出于安全与性能考虑 建议直接传入一个函数的形式来执行。<br>delay 为延迟的时间，单位是<code>ms</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timerId = setTimeout(func|code, delay);</div></pre></td></tr></table></figure></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>setTimeout可以有多个参数，第三个参数开始为传入运行方法的参数。<br>很经典的闭包面试题就可以用setTimeout传参来解决<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123; setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i)&#125; ,<span class="number">0</span>) &#125; <span class="comment">// 运行结果是输出10个10</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123; setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123; <span class="built_in">console</span>.log(i)&#125; ,<span class="number">0</span>, i) &#125; <span class="comment">// 运行结果是输出0-9</span></div></pre></td></tr></table></figure></p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>setTimeout的运行环境是全局(eval)。<br><figure class="highlight javascript"><figcaption><span>demo1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">y</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setTimeout(o.y, <span class="number">0</span>); <span class="comment">// 此时输出的是1，因为全局(window)上的x属性是1</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>demo2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">login</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.login = login;</div><div class="line">	<span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.login);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'John'</span>);</div><div class="line">setTimeout(user.sayHi, <span class="number">0</span>); <span class="comment">// undefined 因为执行的时候 全局对象没有 login这个属性</span></div></pre></td></tr></table></figure>
<p>解决方法一： 放到一个匿名函数里面执行<br><figure class="highlight javascript"><figcaption><span>方法1</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	user.sayHi();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>解决方法二： 缓存当前的this变量<br><figure class="highlight javascript"><figcaption><span>方法2</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		_this.value = <span class="string">'ok'</span>;</div><div class="line">	&#125;)</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>解决方法三： 目前项目中最常用， 用<code>es6</code>的<code>箭头函数</code><br><figure class="highlight javascript"><figcaption><span>方法3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> user.sayHi(), <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p><code>setInterval</code>的使用方法与参数和<code>setTimeout</code>一致。 不过<code>setInterval</code>是间隔 Xms 执行一次该函数。<br>但实际上 函数执行需要时间，所以两次执行函数之间的间隔会小于 <code>setInterval</code>指定的时间.</p>
<h3 id="setInterval-执行时间"><a href="#setInterval-执行时间" class="headerlink" title="setInterval 执行时间"></a>setInterval 执行时间</h3><p>假定<code>setInterval</code>指定每100ms执行一次，每次执行的函数耗时为 5ms, 那么第一次执行结束后的 95ms 后会执行第二段函数。<br>如果某次执行特别耗时 如 105ms, 那么 当它结束后，会立即执行下一次的函数。 <strong>此段为某博客看到的，个人实践得出执行时间有快与慢的偏差没有绝对提前执行</strong></p>
<p>下面看代码例子<br><figure class="highlight javascript"><figcaption><span>demo3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 耗时 5ms 的某个操作</span></div><div class="line">	handleMouseClick();</div><div class="line">	<span class="comment">// 耗时 5ms 的某个操作</span></div><div class="line">	setInterval(timerTask, <span class="number">10</span>);</div><div class="line">	<span class="comment">// 耗时 5ms 的某个操作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMouseClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 耗时 8ms 的某个操作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timerTask</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 耗时 2ms 的某个操作</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">init();</div></pre></td></tr></table></figure></p>
<p>网上博客说法（此处保留意见）：<br>0-15ms: 运行init<br>15-23ms: 运行handleMouseClick函数。请注意，这个函数是在5ms时触发的，应该在那个时候就立即运行，但是由于单线程的关系，必须等到init函数完成之后再运行。<br>23-25ms: 运行timerTask函数。 规定每10ms运行一次，既在20ms， 30ms， 40ms会运行。但是由于当前还有任务在运行，因此必须延迟到前面任务完成后再运行<br>30-32ms: 运行timerTask<br>40-42ms: 运行timerTask</p>
<p>由于平时debug调试时，在<code>handleMouseClick</code>应该不会等到<code>init</code>运行后再执行。于是抱着学习的态度自己写了一段代码<br><figure class="highlight javascript"><figcaption><span>demo4</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_init</span>(<span class="params"></span>) </span>&#123; demo(<span class="number">10</span>);<span class="built_in">console</span>.log(<span class="number">1</span>); demo(<span class="number">10</span>); handle(); demo(<span class="number">10</span>);<span class="built_in">console</span>.log(<span class="number">2</span>); setInterval(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setInterval'</span>), <span class="number">1000</span>); <span class="built_in">console</span>.log(<span class="number">3</span>) &#125;; <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;demo(<span class="number">15</span>); <span class="built_in">console</span>.log(<span class="string">'handle'</span>)&#125;;<span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">i</span>) </span>&#123;<span class="keyword">var</span> sum = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i * <span class="number">1000000</span>; j++) &#123;sum += j;&#125;&#125;;</div><div class="line">_init();</div></pre></td></tr></table></figure></p>
<p>利用for循环来造成运行实践的延长<br>运行 <code>_init()</code> 结果是：<br>① 输出<code>1</code> 隔26ms后 输出<code>handle</code> 隔10ms后 输出<code>2</code> 同一时间输出<code>3</code>(此处可以理解成执行的时间小于1ms)。此时 _init()执行结束 由于没有返回值，所以会默认返回 <code>undefined</code><br>② <code>_init()</code>执行结束之后 再去跑 <code>setInterval定时器</code> 所以 隔 1000ms(实际是1005ms) 后输出第一个<code>setInterval</code>。间隔 999ms后输出第二个<code>setInterval</code> 间隔 997ms后输出第三个 <code>setInterval</code><br>所以觉得说<code>setInterval</code>是当前所有函数运行后才开启定时的，而不是执行到<code>setInterval</code>的时候开始计时。<br>而且运行的间隔不是固定偏多或偏少</p>
<p>最后再给出一个例子理解<code>setTimeout</code>的异步执行机制<br><figure class="highlight javascript"><figcaption><span>demo5</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Timeout"</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"a() 开始运行"</span>);</div><div class="line">    b(x);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"a() 结束运行"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">y</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"b() 开始运行"</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"传入的值为"</span> + y);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"b() 结束运行"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"当前任务开始"</span>);</div><div class="line">a(<span class="number">42</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"当前任务结束"</span>);</div></pre></td></tr></table></figure></p>
<p>运行结果为<br>当前任务开始<br>a() 开始运行<br>b() 开始运行<br>传入的值是 42<br>b() 运行结束<br>a() 运行结束<br>当前任务结束<br>timeout</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>无。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webstorm 快捷键整理]]></title>
      <url>https://jsonz1993.github.io/2017/05/webstorm/</url>
      <content type="html"><![CDATA[<p><code>alt</code> =&gt; <code>option</code><br><code>command</code> =&gt; <code>开始</code><br><code>control</code> =&gt; <code>ctrl</code><br><code>button 1 click</code> 鼠标左键<br><code>button 2 click</code> 鼠标右键<br><em>斜体</em> 为不常用<br><strong>粗体</strong> 为常用</p>
<h3 id="Editor-Actions"><a href="#Editor-Actions" class="headerlink" title="Editor Actions"></a>Editor Actions</h3><ul>
<li><strong>Add or Remove Caret  =&gt;  类似sublime的多行编辑功能 =&gt; <code>alt + button1 Click</code></strong></li>
<li><em>Add Rectangular selection on mouse drag =&gt;  鼠标矩形选择 =&gt; <code>remove keyMap</code> 没啥卵用</em></li>
<li>Backspace =&gt; 退格（既删除）=&gt; <code>Backspace</code> 键盘上的退格键，没什么可说的</li>
<li><em>Move Caret Backward  a Paragraph  =&gt; 移动光标到上一个段落（既上一个空行处） =&gt; 默认<code>无</code></em></li>
<li>Choose lookup item =&gt; <code>Enter</code> =&gt; 既选择当前智能提示的项</li>
<li><em>Choose Lookup Item and Invoke Complete Statement =&gt; 不知道有什么用</em></li>
<li><em>Choose Lookup Item and Insert Dot =&gt; 选择当前项并再最后加入<code>.</code> 既自动完成<code>Enter + .</code></em></li>
<li><em>Choose Lookup Item Replace =&gt;  不知道有什么用</em></li>
<li><em>Clone Caret Above =&gt; 在当前行上创建多一个光标，不常用</em></li>
<li><em>Clone Caret Below =&gt; 在当前行下创建多一个光标，不常用</em></li>
<li><em>Move Caret to Code Block End =&gt; 将光标移至块代码结束 =&gt; <code>command + ]</code> || <code>alt + ]</code></em></li>
<li><em>Move Caret to Code Block Start =&gt; 将光标移至块代码开始 =&gt; <code>command + [</code> || <code>atl + [</code></em></li>
<li><em>Move Caret to Code Block End with Selection =&gt; 将光标移至块代码结束并选择, 不常用</em></li>
<li><em>Move Caret to Code Block Start with Selection =&gt; 将光标移至块代码开始并选择, 不常用</em></li>
<li><em>Complete Current Statement =&gt; 完成当前声明（语句），既如果该行结束则加<code>;</code> 如果是 <code>if (a = 10)</code> 则开一个<code>{}</code> 并将光标移至花括号内 =&gt; 默认 <code>ctrl + shift + enter</code> 不常用</em></li>
<li><em>Create Rectangular Selection =&gt; 创建矩形选择 =&gt; <code>alt+shift+button2 click</code></em></li>
<li><em>Cut Line Backward =&gt; 从当前光标向前选择并剪切</em></li>
<li><em>Cut up to Line End =&gt; 从当前光标向后选择并剪切</em></li>
<li><em>Decrease Font Size =&gt; 缩小字体</em></li>
<li>Delete =&gt; 删除 (和Backspace用起来效果一致) =&gt; 退格键</li>
<li><em>Delete Line =&gt; 删除整行 一般我都会用 <code>command + x</code> || <code>ctrl + x</code> 代替，既直接剪切整行</em></li>
<li><em>Delete to Line End =&gt; 当前光标删除到行尾，一般我用<code>command + 箭头 + shift</code>选中后再删除</em></li>
<li><em>Delete to Line Start 同上</em></li>
<li><em>Delete to word end &amp;&amp; Delete to word start 等同理不赘述</em></li>
<li>Down with Selection 向下并选择 <code>Shift + 向下箭头</code></li>
<li><em>Duplicate Line or Selection 复制该行 =&gt; 默认为<code>ctrl + d</code>， 但我移除了</em></li>
<li><em>Move caret forward a Paragraph 同上</em></li>
<li><em>Hungry Backspace 不知道有什么用</em></li>
<li><em>Increase Font Size 放大字体</em></li>
<li><strong>Join Lines =&gt; 把下一行添加到本行，既删除换行符与空格 =&gt; <code>ctrl + shift + j</code></strong></li>
<li><em>Kill selected region，Save to Kill Ring ，kill the word end, kill the word start 不知道有什么用</em></li>
<li><strong>Move Caret to Line End =&gt; 将光标移至行尾，类似win上的end =&gt; <code>command + →</code></strong> TODO: window 上修改成一致</li>
<li><strong>Move Caret to Line End with Selection 移动光标至行尾并选中 =&gt; <code>command + shift + →</code></strong> TODO: window上修改一致</li>
<li><strong>Move Caret to Matching Brace 将光标移至当前匹配的括号 =&gt; <code>control + m</code></strong> TODO: window 上的确定</li>
<li><strong>Move Caret to Page Bottom 将光标移至页面底部 =&gt; <code>command + 下箭头</code></strong></li>
<li><em>Move Caret to Page Top with Selection 将光标移至页首并选中</em></li>
<li><strong>Move Caret to Next Word 移动光标到下一个单词 =&gt; <code>alt + →</code> </strong> TODO: window确定</li>
<li><strong>Move Caret to Prev Word 等同理</strong></li>
<li><strong>Move Cartet to Next Word with Selection 移动光标到下个单词并选中 =&gt; <code>alt + shift + →</code></strong>  </li>
<li><strong>Page Down 页面向下滚动一屏 <code>fn + 下箭头</code></strong> TODO: window</li>
<li><strong>Page Down with Selection 页面向下滚动一屏并选中该屏 =&gt; <code>fn + shift + 下箭头</code> </strong> TODO: window</li>
<li><strong>Page Up &amp;&amp; Page Up with Selection 同理</strong></li>
<li><em>Paste from X clipboard 不知道有什么用</em></li>
<li><em>Paste Simple 不知道有什么用</em></li>
<li><em>Reset Font Size</em> 重置字体大小</li>
<li>Right Left Down Up 等….</li>
<li>Scroll To Bottom, Scroll Down …等等 都是滚动方向</li>
<li><em>Duplicate Line or Selection 复制整行或选中的区域 一般都会手动选择整行去复制</em></li>
<li><em>Duplicate Entire Lines </em></li>
<li><em>Extend Selection 扩展选择 <code>alt + 上箭头</code></em>  解除</li>
<li>Split Line 光标下添加多一行 =&gt; <code>command + enter</code> TODO: window</li>
<li>Start New Line 开启新的一行 相当于光标移至行尾，回车 =&gt; <code>shift + enter</code> TODO: window</li>
<li>Start New Line Before Current 在当前行的上一行新建一行并将光标移至此处 相当于光标移到上行尾再回车</li>
<li><em>Swap selection boundaries 交换选择边界</em></li>
<li><strong>Tab <code>tab</code></strong></li>
<li><em>Move Caret to Text End, Move Caret To Text Start 等</em></li>
<li><em>Toggle Case 光标在大小写切换</em></li>
<li><em>Toggle Insert/Overwrite =&gt; 切换插入/替换 window 上的 <code>insert</code> 功能</em></li>
<li><em>shrink Selection 缩小选择 =&gt; <code>shift + 下箭头</code>  不知道有什么用</em> </li>
<li>​<em>Emacs tab, Fill Paragraph, Expand Live Template / Emmet Abbreviation, Next Paramete, Prev Paramete 不知道什么用</em></li>
</ul>
<h3 id="Main-menu"><a href="#Main-menu" class="headerlink" title="Main menu"></a>Main menu</h3><p>列举平日用得到的</p>
<p>##### </p>
<ul>
<li><strong>new =&gt; 新建文件 =&gt; <code>command + N</code></strong></li>
<li><strong>new Scratch File 新建临时文件，比如可以新建一个es6语法的临时文件，里面写完再复制到某些地方 提供语法支持 =&gt; <code>shift + command + n</code></strong></li>
<li><strong>Preferences 打开设置 =&gt; <code>command + ,</code> window: <code>alt + ctrl + s</code></strong></li>
<li><strong>Synchronize 重新加载磁盘文件并同步 =&gt; <code>alt + command + y</code></strong></li>
<li><strong>Navigate File… =&gt; 按文件名查找文件 =&gt; <code>command + shift + O</code> 改 <code>command + p</code> 和sublime Text保持一致</strong></li>
</ul>
<h3 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h3><ul>
<li><strong>Undo =&gt; 撤销 =&gt; <code>command + z</code></strong></li>
<li><strong>Redo =&gt; 撤销的反方向 =&gt; <code>shift + command + z</code></strong></li>
<li><strong>Cut =&gt; 剪切 =&gt; <code>command + x</code></strong></li>
<li><strong>Copy =&gt; 复制 =&gt; <code>command + c</code></strong></li>
<li><strong>Copy Paths =&gt; 复制路径 =&gt; <code>command + c + shift</code></strong></li>
<li><strong>Paste =&gt; 黏贴 =&gt; <code>command + v</code></strong><br>— <strong>Paste from History =&gt; 打开黏贴板历史 =&gt; <code>command + shift + v</code></strong></li>
<li><strong>Find… =&gt; 查找 =&gt; <code>command + f</code></strong></li>
<li><strong>Replace… =&gt; 替换 =&gt; <code>Command + r</code></strong></li>
<li><strong>Add Selection for Next Occurrence =&gt; 选中相同的词 =&gt; 默认 <code>ctrl + g</code> 改 <code>ctrl + d</code></strong></li>
<li><strong>Select All =&gt; 选择所有 =&gt; <code>command + A</code></strong></li>
</ul>
<h3 id="自己修改的比较常见的"><a href="#自己修改的比较常见的" class="headerlink" title="自己修改的比较常见的"></a>自己修改的比较常见的</h3><ul>
<li><strong>Select In… =&gt; <code>alt 1 then 1</code> 定位到当前正在编辑的文件，这个功能vscode 自动完成的 还是比较常用</strong></li>
</ul>
<p>以前很喜欢用<code>webstorm</code>, 后面在mac上面不习惯快捷键就放弃转战其他 <code>atom</code>等。 这次特地下来回来，设置了快捷键但最后 还是用回了<code>vs code</code>。<br>最后附上配置<a href="./webstorm_settings.jar" download="./settings">Mac</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> editor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的网页点击热力图]]></title>
      <url>https://jsonz1993.github.io/2017/05/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E7%82%B9%E5%87%BB%E7%83%AD%E5%8A%9B%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>前两天老大突然喊我和一小伙子出去开会，说有个好玩的东西给你们玩。 想给网站做个简单的热力图， 记录用户点击了什么位置。<br>要求是，怎么简单怎么实现 先做一版出来 后面再慢慢迭代优化， 定的工作量大概是两人一天。。。。</p>
<p>之前没接触过图表，虽然有接触过埋点统计/talkingData 不过对于这种都是一知半解。<br>具体有两个步骤，一个是数据的记录（入库），一个是展示模式（读取）。</p>
<p>于是下班回到家后没事就先查了资料，想大概写个能定位置的出来看着先。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol>
<li>需要传递给后台保存的数据<ol>
<li>url 当前页面url(包不包括search, hash 等)</li>
<li>screenHeight 屏幕高度</li>
<li>screenWidth 屏幕高度</li>
<li>list 具体坐标的数组 {x: 鼠标相对于屏幕x轴坐标, y: 鼠标相对于屏幕y轴坐标, pageX: 鼠标相对于dom文档的x轴坐标, pageY: 鼠标相对于dom文档的y轴坐标}</li>
<li>代表用户的一个code</li>
</ol>
</li>
<li>不能每次点击都发送，间隔10秒发送一次</li>
<li>后台还没做先在本地sessionLocation做模拟测试</li>
</ol>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h4 id="鼠标点击对象属性"><a href="#鼠标点击对象属性" class="headerlink" title="鼠标点击对象属性"></a>鼠标点击对象属性</h4><p>特别推荐 Mozilla 开发者平台，现在基本上js html等东西想了解具体或详细的属性都会上这个网站查询<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/</a>大部分有多语言标签。</p>
<p>可以先到这里查看鼠标的具体属性解析<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent" target="_blank" rel="external">developer.mozilla</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">以下两个指的都是已可视区域左上角为原点(<span class="number">0</span>, <span class="number">0</span>) 向右 向下正坐标</div><div class="line">MouseEvent.clientX   clientX属性代表点击在元素上的鼠标指针的X坐标；</div><div class="line">MouseEvent.clientY   clientY属性代表点击在元素上的鼠标指针的Y坐标；</div><div class="line"></div><div class="line">以下两个指的都是物理屏幕以左上角为原点（<span class="number">0</span>， <span class="number">0</span>） 向右 向下正坐标</div><div class="line">MouseEvent.screenX</div><div class="line">MouseEvent.screenY</div></pre></td></tr></table></figure>
<p>这里传递给后台的 <code>x</code> 采用的是 <code>MouseEvent.clientX</code>; <code>y</code> 取的是 <code>MouseEvent.clientY</code>; <code>pageX</code> 取的是 <code>页面滚动宽度 + x</code>; <code>PageY</code> 取的是 <code>页面滚动高度 + y</code> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">页面滚动高度: <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></div><div class="line">页面滚动宽度: <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span></div></pre></td></tr></table></figure>
<p>具体页面滚动高度与宽度的兼容问题可以查看 <a href="http://www.cnblogs.com/xwgli/p/3490466.html" target="_blank" rel="external">http://www.cnblogs.com/xwgli/p/3490466.html</a></p>
<h4 id="屏幕高度宽度"><a href="#屏幕高度宽度" class="headerlink" title="屏幕高度宽度"></a>屏幕高度宽度</h4><p><a href="http://www.jb51.net/article/36840.htm" target="_blank" rel="external">屏幕高度宽度</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.screen.height, 屏幕高度</div><div class="line"><span class="built_in">window</span>.screen.width, 屏幕宽度</div><div class="line"><span class="built_in">window</span>.screen.availHeight, 屏幕可用工作区高度，如mac的除去顶部工具条外的高度</div><div class="line"><span class="built_in">window</span>.screen.availWidth  同上</div></pre></td></tr></table></figure>
<h4 id="监听url变化"><a href="#监听url变化" class="headerlink" title="监听url变化"></a>监听url变化</h4><p>后期优化需求，因为还不确定是要每条基本<code>location.namepath</code>当成一个页面还是要把每个不同的 <code>search、hash</code>都当成一个独立的页面。</p>
<h4 id="绘制热力图"><a href="#绘制热力图" class="headerlink" title="绘制热力图"></a>绘制热力图</h4><p>绘制热力图暂时的展示效果在原页面添加一个文档大小的<code>canvas</code>，然后采用一个js 热力图插件<a href="https://github.com/pa7/heatmap.js" target="_blank" rel="external">https://github.com/pa7/heatmap.js</a>传递坐标来生成热力图。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>因为只是晚上回家临时写了一个可以看效果的，所以没有代码分离 脏数据检查 等功能<br><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// style Util Fn</span></div><div class="line"><span class="keyword">const</span> styleFn = <span class="function">(<span class="params">el, styleObj = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (!el) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(el);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(styleObj)) &#123;</div><div class="line">    el.style[key] = value;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> el;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 需要发送到后台的数据</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeatCollect</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(opts = &#123;&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.initProps(opts); <span class="comment">// 初始化属性</span></div><div class="line">    <span class="keyword">this</span>.setDataForServer(); <span class="comment">// 启动定时器 定时发送数据给服务器</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  initProps(opts) &#123;</div><div class="line">    <span class="keyword">this</span>.list = [];</div><div class="line">    <span class="keyword">this</span>.url = location.href;</div><div class="line">    <span class="keyword">this</span>.screenHeight = <span class="built_in">window</span>.screen.height;</div><div class="line">    <span class="keyword">this</span>.screenWidth = <span class="built_in">window</span>.screen.width;</div><div class="line">    <span class="keyword">this</span>.serverCode = <span class="string">'1001'</span>;</div><div class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.timer = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.time = opts.time || <span class="number">10</span>; <span class="comment">// 默认10秒</span></div><div class="line">    <span class="keyword">this</span>.maxLength = opts.maxLength || <span class="number">100</span>; <span class="comment">// 默认最多可以存100个坐标</span></div><div class="line">    <span class="keyword">this</span>.Time = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.queue = []; <span class="comment">// 队列 暂存请求的坐标</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 向当前类添加坐标</span></div><div class="line">  push(obj) &#123;</div><div class="line">    obj.index = ++<span class="keyword">this</span>.index;</div><div class="line">    <span class="keyword">this</span>.list.push(obj);</div><div class="line">    <span class="keyword">this</span>.list = <span class="keyword">this</span>.list.splice(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// 防止恶意过长</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取向服务器传递的数据格式</span></div><div class="line">  getServerData() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">list</span>: <span class="keyword">this</span>.queue,</div><div class="line">      <span class="attr">url</span>: <span class="keyword">this</span>.url,</div><div class="line">      <span class="attr">screenHeight</span>: <span class="keyword">this</span>.screenHeight,</div><div class="line">      <span class="attr">screenWidth</span>: <span class="keyword">this</span>.screenWidth,</div><div class="line">      <span class="attr">serverCode</span>: <span class="keyword">this</span>.serverCode,</div><div class="line">      <span class="attr">timestamp</span>: <span class="built_in">Date</span>.now(),</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 发送数据到服务器</span></div><div class="line">  setDataForServer() &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timer);</div><div class="line">    <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.queue = <span class="keyword">this</span>.list.splice(<span class="number">0</span>, <span class="built_in">Math</span>.min(<span class="keyword">this</span>.list.length, <span class="number">100</span>));</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.queue.length) <span class="keyword">return</span> <span class="keyword">this</span>.setDataForServer();</div><div class="line"></div><div class="line">      Server.setData(<span class="keyword">this</span>.getServerData()).then((&#123;</div><div class="line">        code</div><div class="line">      &#125;) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (code === <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.queue = [];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.list = <span class="keyword">this</span>.queue.concat(<span class="keyword">this</span>.list);</div><div class="line">        &#125;</div><div class="line">      &#125;, () =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.list = <span class="keyword">this</span>.queue.concat(<span class="keyword">this</span>.list);</div><div class="line">      &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.setDataForServer();</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125;, <span class="keyword">this</span>.time * <span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制函数</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.initCanvas();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 初始化展示的dom</span></div><div class="line">  initDom() &#123;</div><div class="line">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">      domParent = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    dom.id = <span class="string">'heatmapContainer'</span>;</div><div class="line">    domParent.id = <span class="string">'heatmapContainerWrapper'</span>;</div><div class="line">    domParent.appendChild(dom);</div><div class="line">    domParent.style.height = <span class="built_in">document</span>.documentElement.offsetHeight + <span class="string">'px'</span>;</div><div class="line">    domParent.style.width = <span class="built_in">document</span>.documentElement.offsetWidth + <span class="string">'px'</span> ;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(domParent);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 初始化展示的canvas</span></div><div class="line">  initCanvas() &#123;</div><div class="line">    <span class="keyword">this</span>.initDom();</div><div class="line">    <span class="keyword">this</span>.heatmap = h337.create(&#123;</div><div class="line">      <span class="attr">container</span>: <span class="built_in">document</span>.getElementById(<span class="string">'heatmapContainer'</span>),</div><div class="line">      <span class="attr">maxOpacity</span>: <span class="number">.6</span>,</div><div class="line">      <span class="attr">radius</span>: <span class="number">50</span>,</div><div class="line">      <span class="attr">blur</span>: <span class="number">.90</span>,</div><div class="line">      <span class="attr">backgroundColor</span>: <span class="string">'rgba(0, 0, 0, 0)'</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 遍历绘制canvas上的热点</span></div><div class="line">  draw(list) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">      <span class="keyword">this</span>.heatmap.addData(<span class="keyword">this</span>.getDrawData(list[i]));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取要绘制的数据格式</span></div><div class="line">  getDrawData(data) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">x</span>: data.pageX,</div><div class="line">      <span class="attr">y</span>: data.pageY,</div><div class="line">      <span class="attr">value</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理兼容等工具类</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> Util = &#123;</div><div class="line"></div><div class="line">  <span class="comment">// 获取鼠标坐标</span></div><div class="line">  getMouseInfo(e) &#123;</div><div class="line">    <span class="keyword">let</span> &#123;</div><div class="line">      officeX,</div><div class="line">      officeY</div><div class="line">    &#125; = <span class="keyword">this</span>.getPageOffice(), &#123;</div><div class="line">      <span class="attr">clientX</span>: x,</div><div class="line">      <span class="attr">clientY</span>: y</div><div class="line">    &#125; = e;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">pageX</span>: officeX + x,</div><div class="line">      <span class="attr">pageY</span>: officeY + y,</div><div class="line">      x,</div><div class="line">      y,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 获取页面高宽</span></div><div class="line">  getPageOffice() &#123;</div><div class="line">    <span class="keyword">let</span> officeY = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>,</div><div class="line">      officeX = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      officeX,</div><div class="line">      officeY</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 入口函数</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> Main = &#123;</div><div class="line">  init() &#123;</div><div class="line">    <span class="keyword">this</span>.infoData = <span class="keyword">new</span> HeatCollect();</div><div class="line">    <span class="keyword">this</span>.draw = <span class="keyword">new</span> Draw();</div><div class="line">    <span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, (e) =&gt; <span class="keyword">this</span>.mouseEvent(e));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  mouseEvent(e) &#123;</div><div class="line">    <span class="keyword">let</span> _mouseData = Util.getMouseInfo(e);</div><div class="line">    <span class="keyword">this</span>.infoData.push(_mouseData);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  drawFn() &#123;</div><div class="line">    <span class="keyword">let</span> list = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'test'</span>) || <span class="string">'&#123;&#125;'</span>).list || [];</div><div class="line">    <span class="keyword">this</span>.draw.draw(list);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">Main.init();</div><div class="line">Main.drawFn();</div><div class="line"></div><div class="line"><span class="comment">// 模拟发送请求</span></div><div class="line"><span class="keyword">const</span> Server = &#123;</div><div class="line">  setData(data) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> isSuccess = <span class="built_in">Math</span>.random() &lt; <span class="number">.95</span>;</div><div class="line">        <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">          <span class="keyword">let</span> oldData = sessionStorage.getItem(<span class="string">'test'</span>);</div><div class="line">          <span class="keyword">if</span> (oldData) &#123;</div><div class="line">            oldData = <span class="built_in">JSON</span>.parse(oldData);</div><div class="line">            oldData.list = oldData.list.concat(data.list);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            oldData = data;</div><div class="line">          &#125;</div><div class="line">          sessionStorage.setItem(<span class="string">'test'</span>, <span class="built_in">JSON</span>.stringify(oldData));</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'success'</span>, oldData.list);</div><div class="line">          res(&#123;</div><div class="line">            <span class="attr">code</span>: <span class="number">0</span>,</div><div class="line">            data</div><div class="line">          &#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          rej(&#123;</div><div class="line">            <span class="attr">code</span>: <span class="number">5000</span></div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">3000px</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">2000px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#heatMap</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">position</span>: relative;</div><div class="line">        <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#heatmapContainer</span> &#123; <span class="attribute">width</span>:<span class="number">100%</span>; <span class="attribute">height</span>:<span class="number">100%</span>; &#125;</div><div class="line">    <span class="selector-id">#heatmapContainerWrapper</span> &#123; <span class="attribute">position</span>:absolute; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"heatmap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/pa7/heatmap.js/blob/master/build/heatmap.js" target="_blank" rel="external">html中引入的热力图</a></p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p><img src="./heatMap.png" alt="效果图">效果图<br>至此 简单的热力图实现完成， 隔天回到公司，老大说 公司已经和第三方服务平台购买了统计之类的服务。。。。。。于是乎当做是自己饭后无聊写点代码消遣消遣。不过热力图很多东西需要处理，不是一两个人短时间可以完成的。最后附上效果与<br><a href="https://github.com/jsonz1993/wheel/tree/master/heatmap" target="_blank" rel="external">项目目录</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imooc-react-native实战 项目入门知识学习]]></title>
      <url>https://jsonz1993.github.io/2017/05/imooc-react-native%E5%AE%9E%E6%88%98-%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>选用的版本的 <code>v0.22.2</code></p>
<p>组件生命周期<br><code>初始化开始</code> =&gt; <code>getDefaultProps</code> =&gt; <code>getInitialState</code> =&gt; <code>componentWillMount</code> =&gt; <code>render</code> =&gt; <code>componentDidMount</code> =&gt; <code>组件运行中， state状态改变</code> =&gt; <code>shouldComponentUpdate 判断是否要更新 return true</code> =&gt; <code>componentWillUpdate</code> =&gt; <code>render</code> 继续循环 =&gt; <code>外部props改变</code> =&gt; <code>componentWillReceiveProps</code> =&gt; <code>unmount 卸载组件</code> =&gt; <code>componentWillUnmount</code> 等等</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
            <tag> React-Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios网络操作基础教程]]></title>
      <url>https://jsonz1993.github.io/2017/05/ios%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/learn/tree/master/Objective-c/net-learn" target="_blank" rel="external">demo源码</a></p>
<h2 id="网络解析"><a href="#网络解析" class="headerlink" title="网络解析"></a>网络解析</h2><h3 id="与网络请求有关的类"><a href="#与网络请求有关的类" class="headerlink" title="与网络请求有关的类"></a>与网络请求有关的类</h3><ul>
<li><code>NSURL</code>: 客户端访问哪台服务器的制定资源</li>
<li><code>NSURLRequest</code>: 客户端发起的网络请求内容</li>
<li><code> </code>: 客户端服务器建立的网络连接</li>
<li><code>NSURLResponse</code>: 服务端给予客户端的响应结果</li>
</ul>
<h3 id="发起第一个网络请求"><a href="#发起第一个网络请求" class="headerlink" title="发起第一个网络请求"></a>发起第一个网络请求</h3><figure class="highlight objectivec"><figcaption><span>AppDelegate.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个url对象 用来表示访问的服务器</span></div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.imooc.com"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 客户端发起的网络请求的请求内容</span></div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL: url];</div><div class="line">    </div><div class="line">    <span class="built_in">NSURLConnection</span> *connection = [[<span class="built_in">NSURLConnection</span> alloc] initWithRequest:request delegate:<span class="keyword">self</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 启动网络请求</span></div><div class="line">    [connection start];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) connection: (<span class="built_in">NSURLConnection</span> *) connection didReceiveResponse: (<span class="built_in">NSURLResponse</span> * )response &#123;</div><div class="line">    <span class="comment">// 服务器给客户端的响应结果</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"response: %@"</span>, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>键入以上代码后按<code>cmd+r</code>运行一下，此时控制台并没有输出我们想要的结果，而是输出了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&apos;s Info.plist file.</div></pre></td></tr></table></figure></p>
<p>提示我们已经阻止了明文http请求，因为他是不安全的，可以通过<code>Info.plist</code>配置解除请求。<br>在项目根目录里打开<code>Info.plist</code>， 添加 <code>App Transport Security Settings</code> 并在<code>App Transport Security Settings</code>下添加<code>Allow Arbitrary Loads</code>值为<code>YES</code>。<br><img src="./info-plist.png" alt="info-plist.png"> 然后重新运行就好了</p>
<h2 id="使用Get方式发送请求"><a href="#使用Get方式发送请求" class="headerlink" title="使用Get方式发送请求"></a>使用Get方式发送请求</h2><h3 id="搭建用户信息界面"><a href="#搭建用户信息界面" class="headerlink" title="搭建用户信息界面"></a>搭建用户信息界面</h3><p>api接口已经返回的参数格式结构<br><img src="./get-api.png" alt="get-api"></p>
<p>新建项目<br>新建<code>cocoa Class</code>=&gt;<code>UserInfoViewController</code>继承<code>UIViewController</code><br>新建<code>cocoa Class</code>=&gt;<code>KeyValueView</code>继承<code>UIView</code><br>如图<br><img src="./project-folder.png" alt="project-folder"></p>
<p>先在<code>KeyValueView.h</code> 声明所需的变量已经方法<br><figure class="highlight objectivec"><figcaption><span>KeyValueView.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KeyValueView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span> *keyLabel;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UILabel</span> *valueLabel;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) setupKey: (<span class="built_in">NSString</span> *)key value:(<span class="built_in">NSString</span> *)value;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>并在<code>KeyValueView.m</code>实现<br><figure class="highlight objectivec"><figcaption><span>KeyValueView.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"KeyValueView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KeyValueView</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">id</span>) initWithFrame:(<span class="built_in">CGRect</span>)frame</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 添加keyLabel</span></div><div class="line">        <span class="comment">// 如果存在父级，则创建一个 UILabel x:0, y:0, 宽：父级宽度1/3, 高: 父级高度</span></div><div class="line">        _keyLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame: <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame) /<span class="number">3</span>, <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.frame))];</div><div class="line">        <span class="comment">// 设置背景色为透明</span></div><div class="line">        _keyLabel.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">        <span class="comment">// 文字居左对齐</span></div><div class="line">        _keyLabel.textAlignment = <span class="built_in">NSTextAlignmentLeft</span>;</div><div class="line">        <span class="comment">// 设置字体大小</span></div><div class="line">        _keyLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize: <span class="number">16</span>];</div><div class="line">        <span class="comment">// 设置字体颜色</span></div><div class="line">        _keyLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">        <span class="comment">// 添加到父级</span></div><div class="line">        [<span class="keyword">self</span> addSubview: _keyLabel];</div><div class="line">        </div><div class="line">        <span class="comment">// 添加valueLabel</span></div><div class="line">        <span class="comment">// 如果存在父级，则创建一个 UILabel x:0, y:0, 宽：父级宽度1/3, 高: 父级高度</span></div><div class="line">        _valueLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame: <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame) /<span class="number">3</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame) * <span class="number">2</span> /<span class="number">3</span>, <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.frame))];</div><div class="line">        <span class="comment">// 设置背景色为透明</span></div><div class="line">        _valueLabel.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">        <span class="comment">// 文字居左对齐</span></div><div class="line">        _valueLabel.textAlignment = <span class="built_in">NSTextAlignmentLeft</span>;</div><div class="line">        <span class="comment">// 设置字体大小</span></div><div class="line">        _valueLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize: <span class="number">16</span>];</div><div class="line">        <span class="comment">// 设置字体颜色</span></div><div class="line">        _valueLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">        <span class="comment">// 添加到父级</span></div><div class="line">        [<span class="keyword">self</span> addSubview: _valueLabel];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setupKey:(<span class="built_in">NSString</span> *)key value:(<span class="built_in">NSString</span> *)value</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 给keyLabel &amp;&amp; valueLabel 赋值的方法</span></div><div class="line">    [_keyLabel setText:key];</div><div class="line">    [_valueLabel setText:value];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着我们要在<code>UserInfoViewController</code>去调用<code>keyValueView</code>的UIView类<br><figure class="highlight objectivec"><figcaption><span>UserInfoViewController.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"><span class="comment">// 引入keyvalue</span></div><div class="line"><span class="meta">#import <span class="meta-string">"KeyValueView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UserInfoViewController</span> : <span class="title">UIViewController</span></span></div><div class="line"></div><div class="line"><span class="comment">// 把所有个人信息录到这里 ( 声明 )</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *userNameView; <span class="comment">// 用户名信息</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *userSexView; <span class="comment">// 用户性别</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *birthdayView; <span class="comment">// 生日</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *emailView; <span class="comment">// email</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KeyValueView *phoneView; <span class="comment">// 手机号</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>UserInfoViewController.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UserInfoViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义两个宏 屏幕宽度与高度，一般项目都会定义方便使用</span></div><div class="line"><span class="meta">#define KScreenWidth [[UIScreen mainScreen] bounds].size.width</span></div><div class="line"><span class="meta">#define KScreenHeight [[UIScreen mainScreen] bounds].size.height</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UserInfoViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UserInfoViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    <span class="comment">// 给父级加背景色</span></div><div class="line">    [<span class="keyword">self</span>.view setBackgroundColor: [<span class="built_in">UIColor</span> whiteColor]];</div><div class="line">    </div><div class="line">    <span class="comment">// 手动创建一个标题</span></div><div class="line">    <span class="built_in">UILabel</span> *titleLable = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">40</span>, KScreenWidth, <span class="number">20</span>)];</div><div class="line">    <span class="comment">// 设置标题信息</span></div><div class="line">    [titleLable setText:<span class="string">@"个人用户信息"</span>];</div><div class="line">    titleLable.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">    titleLable.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">18</span>];</div><div class="line">    titleLable.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview: titleLable];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户名控件</span></div><div class="line">    _userNameView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _userNameView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_userNameView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户性别控件</span></div><div class="line">    _userSexView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span> + <span class="number">30</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _userSexView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_userSexView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户生日控件</span></div><div class="line">    _birthdayView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span>+<span class="number">30</span>*<span class="number">2</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _birthdayView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_birthdayView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户邮箱控件</span></div><div class="line">    _emailView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span> + <span class="number">30</span>*<span class="number">3</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _emailView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_emailView];</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个用户手机号控件</span></div><div class="line">    _phoneView = [[KeyValueView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">70</span> + <span class="number">30</span>*<span class="number">4</span>, KScreenWidth - <span class="number">100</span> * <span class="number">2</span>, <span class="number">30</span>)];</div><div class="line">    _phoneView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_phoneView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">#pragma mark - Navigation</div><div class="line"></div><div class="line">// In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</div><div class="line">    // Get the new view controller using [segue destinationViewController].</div><div class="line">    // Pass the selected object to the new view controller.</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>view</code> &amp;&amp; <code>controller</code>都写好之后，我们去修改一下<code>AppDelegate</code>，因为默认主view为项目根目录的<code>ViewControll</code>，所以如果我们没有把view设置为我们的<code>UserInfoViewController</code> 运行是没有任何效果的。</p>
<figure class="highlight objectivec"><figcaption><span>AppDelegate.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    <span class="comment">// 第二节 get请求</span></div><div class="line">    UserInfoViewController *userInfoVC = [[UserInfoViewController alloc] init];</div><div class="line">    <span class="keyword">self</span>.window.rootViewController = userInfoVC;</div><div class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改完成后再次运行看效果。此时只出现了标题。<br><img src="./first-run.png" alt="first-run"></p>
<p>这时候我们可以打开调试看一下为什么我们只出现标题，没有出现<code>KeyValueView</code>呢<br>依次打开xCode菜单<code>Debug</code>=&gt;<code>View Debugging</code>=&gt;<code>Show View Frames</code>这时候可以看到我们的<code>labelView</code>其实是有被加到<code>view</code>中，只是没有数据展示 所以看不出来，接下来我们正式开始发起网络请求数据填充view<br><img src="./view-debugging.png" alt="view-debugging"></p>
<h3 id="发起网络请求数据"><a href="#发起网络请求数据" class="headerlink" title="发起网络请求数据"></a>发起网络请求数据</h3><p><a href="http://www.imooc.com/video/11982" target="_blank" rel="external">http://www.imooc.com/video/11982</a></p>
<p><a href="http://www.imooc.com/video/11978" target="_blank" rel="external">imooc ios网络操作学习指南</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS基础教程之界面初体验]]></title>
      <url>https://jsonz1993.github.io/2017/04/iOS%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B9%8B%E7%95%8C%E9%9D%A2%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/jsonz1993/learn/tree/master/Objective-c" target="_blank" rel="external">demo源码</a> 如果找不到，则到<a href="https://github.com/jsonz1993/learn/tree/master/finish" target="_blank" rel="external">finish</a>文件下找</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>因为要学的是 <code>UIwindow</code>， 所以创建的不再是之前的<code>Command Line Tool</code>。 选择<code>iOS=&gt;Single View Application</code>.<br>语言选择<code>ObjectiveC</code>, 项目名根据自己喜欢的取。</p>
<h3 id="Hello-UIwindow"><a href="#Hello-UIwindow" class="headerlink" title="Hello UIwindow"></a>Hello UIwindow</h3><p><code>main.m</code> 入门文件不再出现在根目录上，而是在<code>Supporting Files</code>下。<br>默认引用了 <code>&lt;UIKit/UIKit.h&gt;</code> 和 <code>&quot;AppDelegate.h&quot;</code> </p>
<p>点击项目文件<br><img src="点击项目文件.png" alt="点击项目文件"></p>
<p>删除 Main Interface的默认值<code>Main</code><br><img src="main-interface.png" alt="main-interface"></p>
<p>然后打开<code>AppDelegate.m</code> 开始来手动来设置一下mainInterfacez</p>
<figure class="highlight objectivec"><figcaption><span>AppDelegate.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line">    <span class="comment">// 设置大小和位置 `UIScreen mainScreen` 可以得到手机主屏幕 `bounds`是获得大小</span></div><div class="line">    _window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[[<span class="built_in">UIScreen</span> mainScreen] bounds]];</div><div class="line">    <span class="comment">// 设置颜色为红色</span></div><div class="line">    _window.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    <span class="comment">// 设置根视频控制器</span></div><div class="line">    _window.rootViewController = [[<span class="built_in">UIViewController</span> alloc] init];</div><div class="line">    <span class="comment">// 将window设置为我们的主window</span></div><div class="line">    [_window makeKeyAndVisible];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改后按 <code>cmd(⌘)+R</code>或按左上角的三角形按钮来 <code>run app</code>。骚等片刻就可以看到 一个全屏红色的模拟器.<br><img src="run-app.png" alt="run-app">;</p>
<h2 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h2><p>新建一个项目。</p>
<ul>
<li>UI的基类， 基础</li>
<li>UIView的属性</li>
<li>UIView的方法</li>
<li>UIView的自适应  </li>
</ul>
<figure class="highlight objectivec"><figcaption><span>ViewController.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.m</span></div><div class="line"><span class="comment">//  UIwindow</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/27.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"bilibili"</span>);</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 视图</span></div><div class="line">    <span class="built_in">UIView</span> *view1 = [[<span class="built_in">UIView</span> alloc] init]; <span class="comment">// 实例化view</span></div><div class="line">    <span class="comment">// 状态栏高度为20px 所以写view的时候一般会让出20px</span></div><div class="line">    view1.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">375</span><span class="number">-20</span>, <span class="number">667</span><span class="number">-20</span>);</div><div class="line">    <span class="comment">// 背景颜色</span></div><div class="line">    view1.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    <span class="comment">// 将视图加入到父视图中</span></div><div class="line">    [<span class="keyword">self</span>.view addSubview: view1]; <span class="comment">// self.view 是view1的父视图</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"frame = x:%f y:%f w:%f h:%f"</span>, view1.frame.origin.x, view1.frame.origin.y, view1.frame.size.width, view1.frame.size.height);</div><div class="line">    <span class="comment">// 一般叫边框大小， x &amp;&amp; y 永远为0 w&amp;&amp;h 一致</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"bounds = x:%f y:%f w:%f h:%f"</span>, view1.bounds.origin.x, view1.bounds.origin.y, view1.bounds.size.width, view1.bounds.size.height);</div><div class="line">    <span class="comment">// center - 中心点</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"center - x:%f y:%f"</span>, view1.center.x, view1.center.y);</div><div class="line">    </div><div class="line">    <span class="comment">// 图片 1.png</span></div><div class="line">    <span class="comment">// 如果是二倍视网膜屏幕 准备 1@2x.png</span></div><div class="line">    <span class="comment">// 同理还有 1@3x.png</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"w:%f h:%f"</span>,[[<span class="built_in">UIScreen</span> mainScreen] bounds].size.width, [[<span class="built_in">UIScreen</span> mainScreen] bounds].size.height);</div><div class="line">    </div><div class="line">    <span class="comment">// 父视图 只会有一个</span></div><div class="line">    <span class="built_in">UIView</span> *superView = view1.superview;</div><div class="line">    superView.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *view2 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view2.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>); <span class="comment">// 坐标全是根据自身父视图来设置的，不会跨层</span></div><div class="line">    <span class="comment">// 给view设置唯一标识，方便父级视图获取辨认</span></div><div class="line">    view2.tag = <span class="number">2</span>;</div><div class="line">    view2.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    [view1 addSubview:view2];</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *view3 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view3.frame = <span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    view3.tag = <span class="number">3</span>;</div><div class="line">    view3.backgroundColor = [<span class="built_in">UIColor</span> purpleColor];</div><div class="line">    [view1 addSubview:view3];</div><div class="line">    </div><div class="line">    <span class="comment">// 子视图 会有多个</span></div><div class="line">    <span class="built_in">NSArray</span> *subViewsArray = view1.subviews;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> subViewsArray)</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (view.tag == <span class="number">2</span>)</div><div class="line">            view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor]; <span class="comment">// view2变白色</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果知道子视图的tag 可以通过tag得到对应的子视图</span></div><div class="line">    <span class="built_in">UIView</span> *subView = [view1 viewWithTag:<span class="number">3</span>];</div><div class="line">    subView.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</div><div class="line">    </div><div class="line">    <span class="comment">// 修改层级 类似css 的 zIndex</span></div><div class="line">    <span class="comment">// 当层交换之后， 对应的子视图的数组下标也会进行改变</span></div><div class="line">    <span class="comment">// 同一个父视图中，先加入的view层级会比较低</span></div><div class="line">    <span class="built_in">UIView</span> *view4 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view4.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</div><div class="line">    view4.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</div><div class="line">    [<span class="keyword">self</span>.view insertSubview:view4 atIndex:<span class="number">0</span>]; <span class="comment">// 这时候 view4会盖住view1的所有界面</span></div><div class="line">    </div><div class="line">    <span class="comment">// 交换两个层的视图</span></div><div class="line">    [superView exchangeSubviewAtIndex:<span class="number">0</span> withSubviewAtIndex:<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//插入一个视图到指定层</span></div><div class="line">    <span class="built_in">UIView</span> *view5 = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    view5.frame = <span class="built_in">CGRectMake</span>(<span class="number">7</span>, <span class="number">80</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    view5.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    [view1 insertSubview:view5 atIndex:<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 将一个view 放最顶层或最底层</span></div><div class="line">    [view1 bringSubviewToFront:view2]; <span class="comment">// 顶层</span></div><div class="line">    [view1 sendSubviewToBack: view2]; <span class="comment">// 底层</span></div><div class="line">    </div><div class="line">    <span class="comment">// 自适应</span></div><div class="line">    <span class="built_in">UIView</span> *backView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    backView.frame = <span class="built_in">CGRectMake</span>([<span class="built_in">UIScreen</span> mainScreen].bounds.size.width / <span class="number">2</span> - <span class="number">25</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height /<span class="number">2</span> - <span class="number">25</span>, <span class="number">50</span>, <span class="number">50</span>); <span class="comment">// 自适应到屏幕中部</span></div><div class="line">    backView.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">    backView.tag = <span class="number">1001</span>;</div><div class="line">    <span class="comment">// 准许子视图自适应</span></div><div class="line">    backView.autoresizesSubviews = <span class="literal">YES</span>;</div><div class="line">    [<span class="keyword">self</span>.view addSubview: backView];</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *topView = [[<span class="built_in">UIView</span> alloc] init];</div><div class="line">    topView.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line">    topView.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</div><div class="line">    <span class="comment">// 再设置子视图的适应方式 左侧适应</span></div><div class="line">    topView.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleRightMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleLeftMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleTopMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleBottomMargin</span> | <span class="built_in">UIViewAutoresizingFlexibleWidth</span> | <span class="built_in">UIViewAutoresizingFlexibleHeight</span>; <span class="comment">// 右， 左， 上， 下， 宽， 高 跟随父级自适应</span></div><div class="line">    [backView addSubview: topView];</div><div class="line">    </div><div class="line">    <span class="comment">// 按钮 下节课会讲到</span></div><div class="line">    <span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType: <span class="built_in">UIButtonTypeSystem</span>];</div><div class="line">    btn.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">550</span>, <span class="number">355</span>, <span class="number">30</span>);</div><div class="line">    btn.backgroundColor = [<span class="built_in">UIColor</span> brownColor];</div><div class="line">    [btn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(btnClick) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview: btn];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)btnClick</div><div class="line">&#123;</div><div class="line">    <span class="built_in">UIView</span> *view = [<span class="keyword">self</span>.view viewWithTag:<span class="number">1001</span>];</div><div class="line">    view.frame = <span class="built_in">CGRectMake</span>(view.frame.origin.x - <span class="number">5</span>, view.frame.origin.y <span class="number">-5</span>, view.frame.size.width + <span class="number">10</span>, view.frame.size.height + <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h2><ul>
<li>文本标签</li>
<li>UIColor 颜色类</li>
</ul>
<p>新建一个项目</p>
<figure class="highlight objectivec"><figcaption><span>ViewController</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 文本标签</span></div><div class="line">    <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] init];</div><div class="line">    label.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">30</span>);</div><div class="line">    label.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</div><div class="line">    </div><div class="line">    <span class="comment">// 文本</span></div><div class="line">    label.text = <span class="string">@"我是一个IOS FONT"</span>;</div><div class="line">    <span class="comment">// 文字布局 NSTextAlignmentCenter NSTextAlignmentLeft NSTextAlignmentRight 等等</span></div><div class="line">    label.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">    <span class="comment">// 文字颜色</span></div><div class="line">    <span class="comment">// clearColor透明色</span></div><div class="line">    <span class="comment">// colorWithRed green blue alpha 类似css的rgba</span></div><div class="line">    label.textColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">.1</span> green:<span class="number">.8</span> blue:<span class="number">.2</span> alpha:<span class="number">1</span>];</div><div class="line">    <span class="comment">// label的透明度</span></div><div class="line">    label.alpha = <span class="number">.9</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 字体设置 label.font里面</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> systemFontOfSize: <span class="number">25</span>]; <span class="comment">// 字号</span></div><div class="line">    <span class="comment">// 加粗或倾斜</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">25</span>];<span class="comment">// 加粗和25号字，会覆盖前面设置</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> italicSystemFontOfSize:<span class="number">25</span>]; <span class="comment">// 倾斜</span></div><div class="line">    </div><div class="line">    <span class="comment">// 看系统有哪些字体</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *name <span class="keyword">in</span> [<span class="built_in">UIFont</span> familyNames])</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"font = %@"</span>, name);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 设置字体</span></div><div class="line">    label.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"Bodoni 72 Smallcaps"</span> size:<span class="number">25</span>];</div><div class="line">    <span class="comment">// 文字阴影</span></div><div class="line"><span class="comment">//    label.shadowColor = [UIColor redColor];</span></div><div class="line"><span class="comment">//    label.shadowOffset = CGSizeMake(1, 1);</span></div><div class="line">    </div><div class="line">    <span class="comment">// 多文字处理 会自动出现...</span></div><div class="line">    label.text = <span class="string">@"topView.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight; // 右， 左， 上， 下， 宽， 高 跟随父级自适应[backView addSubview: topView]"</span>;</div><div class="line">    <span class="comment">// 如果要换行</span></div><div class="line">    <span class="comment">// 1. 首先label要足够大</span></div><div class="line">    <span class="comment">// 2. 设置换行模式</span></div><div class="line">    <span class="comment">// 3. 设置显示行数</span></div><div class="line">    label.frame = <span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">20</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - <span class="number">40</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height - <span class="number">40</span>);</div><div class="line">    label.lineBreakMode = <span class="built_in">NSLineBreakByCharWrapping</span>;</div><div class="line">    label.numberOfLines = <span class="number">2</span>; <span class="comment">// 如果设置到-1或0 就不会限制行数，能显示多少行就显示多少行</span></div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.view addSubview:label];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UIImageView-图片view"><a href="#UIImageView-图片view" class="headerlink" title="UIImageView 图片view"></a>UIImageView 图片view</h2><p>新建一个项目,添加自己喜欢的照片到项目里。 比如我 肯定是添加<a href="http://baike.baidu.com/link?url=5a-QxerL5Nm6COTiB0ehVsx9e7aJ_i1nUVrlmYKx9xNLxD7UJtX6A284F0VbLfq3J46gw9ZcxdFN_-MTcH7aGwxafMh3mZ8SzWIhAg_fpzR97b4bUd5CnoC4XFmZa5Fo" target="_blank" rel="external">GAKKI</a>的</p>
<p><img src="add-files.png" alt="add-files"></p>
<figure class="highlight objectivec"><figcaption><span>ViewController.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    </div><div class="line">    <span class="comment">// 首先 随便加载几张图片到项目中</span></div><div class="line">    </div><div class="line">    <span class="comment">// 获取图片路径</span></div><div class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] resourcePath]; <span class="comment">// 工程目录</span></div><div class="line">    <span class="built_in">NSString</span> *imgPath = [<span class="built_in">NSString</span> stringWithFormat: <span class="string">@"%@/2.jpg"</span>, path]; <span class="comment">// 拼接图片路径</span></div><div class="line">    <span class="comment">// 后面参数为图片路径</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc] initWithContentsOfFile: imgPath]; <span class="comment">// 加载完会释放，不会存在内存中，不过每次都会去加载</span></div><div class="line"><span class="comment">//    image = [UIImage alloc] initWithData:&lt;#(nonnull NSData *)#&gt; 2进制格式图片加载</span></div><div class="line"><span class="comment">//    UIImage *image1 = [UIImage imageNamed:@"2"]; // 这种直接写文件名，如果是png格式的，可以省略后缀名 这种方式直接把图片放到内存中，占用内存但是下次调用会很快。 比如qq表情，可以放到缓存（内存）中</span></div><div class="line">    </div><div class="line">    <span class="comment">// 图片显示必须要有载体</span></div><div class="line">    <span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] initWithImage: image];</div><div class="line">    <span class="comment">// image.size.width image.size.height</span></div><div class="line">    imageView.frame = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">400</span>,  <span class="number">400</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 内容模式 居中： UIViewContentModeCenter</span></div><div class="line">    <span class="comment">// 默认为UIViewContentModeScaleToFill 拉伸充满整个载体</span></div><div class="line">    <span class="comment">// UIViewContentModeScaleAspectFit 拉伸但不改变比例，充满小的边框</span></div><div class="line">    <span class="comment">// UIViewContentModeScaleAspectFill 拉伸但不改变比例，充满大的边框</span></div><div class="line">    <span class="comment">// 学过css的 应该都很容易理解 background-size模式</span></div><div class="line">    imageView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFit</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// UIImageView 动画 - 播放序列图 略!</span></div><div class="line">    </div><div class="line"> </div><div class="line">    <span class="comment">// 图片显示在屏幕上的大小是载体来控制的</span></div><div class="line">    [<span class="keyword">self</span>.view addSubview: imageView];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Foundation 入门]]></title>
      <url>https://jsonz1993.github.io/2017/04/Foundation-%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>Foundation(基础框架) 课程知识比较多，所以后面会每个学习内容新建一个类去写。<br><img src="./foundation.png" alt="foundation"></p>
<p>新建一个项目， <a href="https://github.com/jsonz1993/learn/tree/master/Objective-c/foundation" target="_blank" rel="external">文章源码,找不到则到finish里面找</a></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>新建一个<code>String</code>类<br><figure class="highlight objectivec"><figcaption><span>String.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">String</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) stringBaseFn; <span class="comment">// 声明一个函数，后面有关的字符串函数知识都写在该方法内</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入并调用该方法，主要是一些字符串的方法 以及输出</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"String.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        String *str = [[String alloc] init];</div><div class="line">        [str stringBaseFn];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>String.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  String.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/23.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"String.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">String</span></span></div><div class="line">-(<span class="keyword">void</span>) stringBaseFn</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *s = <span class="string">"Hello C"</span>; <span class="comment">// c语言字符串 char 类型 *号代表对象</span></div><div class="line">    <span class="comment">// OC 中@代表对象</span></div><div class="line">    <span class="built_in">NSString</span> *str = <span class="string">@"Hello ObjectiveC"</span>; <span class="comment">// OC 字符串 NSString 类型 *号代表对象</span></div><div class="line">    <span class="comment">// OC 与 C字符串的类型转换</span></div><div class="line">    <span class="comment">// C -&gt; OC</span></div><div class="line">    <span class="built_in">NSString</span> *str1 = [<span class="built_in">NSString</span> stringWithUTF8String:s];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str1 = %@"</span>, str1);</div><div class="line">    <span class="comment">// OC -&gt; C</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str2 = %s"</span>, [str UTF8String]);</div><div class="line">    </div><div class="line">    <span class="comment">// 这样创建字符串，不需要自己手动去释放内存等</span></div><div class="line">    <span class="built_in">NSString</span> *str3 = <span class="string">@"IOS"</span>;</div><div class="line">    <span class="comment">// 这种需要手动释放内存</span></div><div class="line">    <span class="built_in">NSString</span> *str4 = [[<span class="built_in">NSString</span> alloc] init];</div><div class="line">    str4 = <span class="string">@"ios"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// **格式化字符串** 重要</span></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="built_in">NSString</span> *str5 = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"a = %d str3 = %@"</span>, a, str3];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str5 为 %@"</span>, str5);</div><div class="line">    </div><div class="line">    <span class="comment">// 拼接字符串</span></div><div class="line">    <span class="built_in">NSString</span> *str6 = [str5 stringByAppendingString: [<span class="built_in">NSString</span> stringWithUTF8String: s]];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str6 = %@"</span>, str6);</div><div class="line">    </div><div class="line">    <span class="comment">// 大小写的转换问题</span></div><div class="line">    <span class="built_in">NSString</span> *str7 = <span class="string">@"HELLO JSONZ"</span>;</div><div class="line">    <span class="built_in">NSString</span> *str8 = [str7 lowercaseString];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str8 = %@"</span>, str8);</div><div class="line">    </div><div class="line">    <span class="comment">// 转换大写</span></div><div class="line">    <span class="built_in">NSString</span> *str9 = [str8 uppercaseString];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str9 = %@"</span>, str9);</div><div class="line">    </div><div class="line">    <span class="comment">// 前缀和后缀的判断</span></div><div class="line">    <span class="built_in">NSString</span> *str10 = <span class="string">@"www.imooc.com"</span>;</div><div class="line">    <span class="comment">// 判断前缀</span></div><div class="line">    <span class="built_in">BOOL</span> hasPreFix = [str10 hasPrefix:<span class="string">@"www."</span>];</div><div class="line">    <span class="keyword">if</span> (hasPreFix)</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"有对应前缀"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"没有对应前缀"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 后缀</span></div><div class="line">    <span class="built_in">BOOL</span> hasSuffix = [str10 hasSuffix:<span class="string">@".com"</span>];</div><div class="line">    <span class="keyword">if</span> (hasSuffix)</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"有对应后缀"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"没有对应后缀"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 判断字符串是否相同</span></div><div class="line">    <span class="built_in">NSString</span> *str11 = <span class="string">@"Hello"</span>;</div><div class="line">    <span class="built_in">NSString</span> *str12 = <span class="string">@"Hello"</span>;</div><div class="line">    <span class="keyword">if</span> ([str11 isEqualToString:str12])</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"str11 与 str12 一致"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"不一致"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 分割字符串</span></div><div class="line">    <span class="comment">// 1. 按照指定字符分割字符串 返回数组</span></div><div class="line">    <span class="built_in">NSString</span> *str13 = <span class="string">@"a,b,c,d,e,f,g"</span>;</div><div class="line">    <span class="built_in">NSArray</span> *strArray = [str13 componentsSeparatedByString:<span class="string">@","</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> strArray)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 2. 按照范围截取字符串</span></div><div class="line">    <span class="built_in">NSRange</span> range = <span class="built_in">NSMakeRange</span>(<span class="number">1</span>, <span class="number">5</span>);</div><div class="line">    <span class="built_in">NSString</span> *str14 = [str13 substringWithRange:range];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str14 = %@"</span>, str14);</div><div class="line">    <span class="comment">// 3. 从某一位开始截取到结束</span></div><div class="line">    <span class="built_in">NSString</span> *str15 = [str13 substringFromIndex:<span class="number">2</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str15 = %@"</span>, str15);</div><div class="line">    <span class="comment">// 4.从开头到某一位</span></div><div class="line">    <span class="built_in">NSString</span> *str16 = [str13 substringToIndex:<span class="number">7</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str16 = %@"</span>, str16);</div><div class="line">    <span class="comment">// 5.将字符串拆分为每一个字符, 从字符串取出某一位</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [str13 length]; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%c"</span>, [str13 characterAtIndex:i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 查找</span></div><div class="line">    <span class="built_in">NSString</span> *str17 = <span class="string">@"ab cd ef gh ij ab"</span>;</div><div class="line">    <span class="comment">// 查找指定字符串的位置 正向查找</span></div><div class="line">    <span class="built_in">NSRange</span> range1 = [str17 rangeOfString:<span class="string">@"ab"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"range1.location: %ld range1.length: %ld"</span>, range1.location, range1.length);</div><div class="line">    </div><div class="line">    <span class="comment">// 替换</span></div><div class="line">    <span class="built_in">NSString</span> *str18 = <span class="string">@"Hello ios, Hello imooc"</span>;</div><div class="line">    <span class="comment">// 替换某一个范围的内容</span></div><div class="line">    <span class="built_in">NSString</span> *str19 = [str18 stringByReplacingCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">5</span>)  withString:<span class="string">@"你好"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str19 = %@"</span>, str19);</div><div class="line">    </div><div class="line">    <span class="comment">// 用指定字符串替换原字符串</span></div><div class="line">    <span class="built_in">NSString</span> *str20 = [str18 stringByReplacingOccurrencesOfString:<span class="string">@"Hello ios"</span> withString: <span class="string">@"第一个参数为源字符串中要被替换的内容， 第二个为替换成的字符串"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str20 = %@"</span>, str20);</div><div class="line">    </div><div class="line">    <span class="comment">// 读取文件</span></div><div class="line">    <span class="comment">// 1. 本地文件； 2.网络文件</span></div><div class="line">    <span class="comment">// 路径类</span></div><div class="line">    <span class="built_in">NSString</span> *str21 = <span class="string">@"www.baidu.com"</span>;</div><div class="line">    <span class="comment">// 网络路径</span></div><div class="line">    <span class="built_in">NSURL</span> *httpURL = [<span class="built_in">NSURL</span> URLWithString:str21];</div><div class="line">    <span class="comment">//本地路径</span></div><div class="line"><span class="comment">//    NSString *fileURL = [NSURL fileURLWithPath:str21];</span></div><div class="line">    <span class="comment">// 读取网络文件</span></div><div class="line">    <span class="built_in">NSString</span> *httpStr = [<span class="built_in">NSString</span> stringWithContentsOfURL:httpURL encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"httpStr = %@"</span>, httpStr);</div><div class="line">    <span class="comment">// 读取本地文件</span></div><div class="line">    <span class="built_in">NSString</span> *fileStr = [<span class="built_in">NSString</span> stringWithContentsOfFile: <span class="string">@"/Users/jsonz/Documents/learn/Objective-c/foundation/foundation/app.txt"</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error: <span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"fileStr = %@"</span>, fileStr);</div><div class="line">    <span class="comment">// 写入文件</span></div><div class="line">    <span class="built_in">NSString</span> *str22 = <span class="string">@"Hello JSer"</span>;</div><div class="line">    <span class="built_in">BOOL</span> isOk = [str22 writeToFile:<span class="string">@"/Users/jsonz/Documents/learn/Objective-c/foundation/foundation/app.js"</span> atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (isOk) <span class="built_in">NSLog</span>(<span class="string">@"文件写入成功"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">NSLog</span>(<span class="string">@"文件写入失败"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="NSMutableString-可变字符串"><a href="#NSMutableString-可变字符串" class="headerlink" title="NSMutableString 可变字符串"></a>NSMutableString 可变字符串</h2><p>新建一个 <code>NSMutableStringClass</code> 类。 NSMutableString是字符串的子类</p>
<figure class="highlight objectivec"><figcaption><span>NSMutableString.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSStringClass.h</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/25.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMutableStringClass</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) ShowNSMutableString;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>NSMutableString.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSStringClass.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/25.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSMutableStringClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableStringClass</span></span></div><div class="line">-(<span class="keyword">void</span>) ShowNSMutableString</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 可变字符串的简单方法</span></div><div class="line">    <span class="comment">// 可变字符串是字符串的子类</span></div><div class="line">    <span class="comment">// 实例化</span></div><div class="line">    <span class="built_in">NSMutableString</span> *str = [[<span class="built_in">NSMutableString</span> alloc] initWithCapacity:<span class="number">10</span>]; <span class="comment">// 分类长度不可以超过10， 性能优化。不过超过10 也不会报错</span></div><div class="line">    [str setString:<span class="string">@"hello "</span>];</div><div class="line"></div><div class="line">    <span class="comment">// 1.追加字符串</span></div><div class="line">    [str appendString:<span class="string">@"ObjectiveC"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    <span class="comment">// 追加格式化字符串</span></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    [str appendFormat:<span class="string">@" - %d"</span>, a];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    </div><div class="line">    <span class="comment">// 2.替换字符串</span></div><div class="line">    <span class="built_in">NSRange</span> range = [str rangeOfString:<span class="string">@"ObjectiveC"</span>];</div><div class="line">    [str replaceCharactersInRange:range withString:<span class="string">@"IOS"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    </div><div class="line">    <span class="comment">// 3. 插入字符串</span></div><div class="line">    [str insertString:<span class="string">@"A"</span> atIndex: <span class="number">4</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">    </div><div class="line">    <span class="comment">// 4. 删除字符串</span></div><div class="line">    <span class="built_in">NSRange</span> range1 = [str rangeOfString:<span class="string">@"IOS"</span>];</div><div class="line">    [str deleteCharactersInRange:range1];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m 调用前记得引入类</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableStringClass</span> *_NSMutableString = [[<span class="built_in">NSMutableStringClass</span> alloc] init];</div><div class="line">[_NSMutableString ShowNSMutableString];</div></pre></td></tr></table></figure>
<h2 id="NSArray-不可变数组"><a href="#NSArray-不可变数组" class="headerlink" title="NSArray 不可变数组"></a>NSArray 不可变数组</h2><p>新建一个<code>arr</code>类</p>
<figure class="highlight objectivec"><figcaption><span>Arr.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Arr.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"Arr.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Arr</span></span></div><div class="line">-(<span class="keyword">void</span>) showArrFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"不可变数组"</span>);</div><div class="line">    <span class="comment">// OC数组。 可以存储不同类型对象,只能存储对象.(int, char)不可以</span></div><div class="line">    <span class="comment">// 只存对象指针（js一样)</span></div><div class="line">    <span class="built_in">NSArray</span> *arr1 = [[<span class="built_in">NSArray</span> alloc] initWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="string">@"4"</span>, <span class="string">@"5"</span>, <span class="literal">nil</span>];</div><div class="line">    <span class="comment">// 数组长度</span></div><div class="line">    <span class="keyword">int</span> count = (<span class="keyword">int</span>)arr1.count;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"count = %d"</span>, count);</div><div class="line">    </div><div class="line">    <span class="comment">// 判断是否有该对象</span></div><div class="line">    <span class="built_in">BOOL</span> isHave = [arr1 containsObject: <span class="string">@"2"</span>];</div><div class="line">    <span class="keyword">if</span> (isHave)</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"存在"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"不存在"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 取得数组中所需元素</span></div><div class="line">    <span class="built_in">NSString</span> *str = [arr1 lastObject];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"最后一个对象为 %@"</span>, str);</div><div class="line">    str = [arr1 firstObject];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第一个对象为 %@"</span>, str);</div><div class="line">    str = [arr1 objectAtIndex: <span class="number">3</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第三个元素为 %@"</span>, str);</div><div class="line">    <span class="comment">// 查找某个对象为第几个下标, 不存在则 -1</span></div><div class="line">    <span class="keyword">int</span> index = (<span class="keyword">int</span>)[arr1 indexOfObject:<span class="string">@"3"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"查找某个对象为第几个下标 %d"</span>, index);</div><div class="line">    </div><div class="line">    <span class="comment">// 数组的遍历 1.for; 2. for in; 3.枚举迭代</span></div><div class="line">    <span class="comment">// for 循环 注意类型问题</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.count; i++) &#123;</div><div class="line">        <span class="built_in">NSString</span> *str1 = [arr1 objectAtIndex:i];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"for str1 = %@"</span>, str1);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 快速枚举 数组的元素类型要保持一致</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str2 <span class="keyword">in</span> arr1) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"for in str2 = %@"</span>, str2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 迭代枚举(慕课没有该点视频)</span></div><div class="line">    [arr1 enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"id= %@"</span>, obj);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="NSMutableArr-可变数组"><a href="#NSMutableArr-可变数组" class="headerlink" title="NSMutableArr 可变数组"></a>NSMutableArr 可变数组</h2><p>与可变字符串一样，数组也有可变的。一般项目中如果有修改数组的就用这个，如果不希望数组被修改则用不可变数组</p>
<figure class="highlight objectivec"><figcaption><span>NSMutableArrClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSMutableArrClass.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSMutableArrClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableArrClass</span></span></div><div class="line">-(<span class="keyword">void</span>)showArrFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *array = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">    <span class="built_in">NSString</span> *str1 = <span class="string">@"bili"</span>;</div><div class="line">    <span class="comment">// 添加元素</span></div><div class="line">    [array addObject: str1];</div><div class="line">    <span class="built_in">NSArray</span> *arr1 = [[<span class="built_in">NSArray</span> alloc] initWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="string">@"4"</span>, <span class="string">@"5"</span>, <span class="literal">nil</span>];</div><div class="line">    [array addObject:arr1];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"array = %@"</span>, array);</div><div class="line">    </div><div class="line">    <span class="comment">// 删除所有元素</span></div><div class="line">    [array removeAllObjects];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    [array addObject:arr1];</div><div class="line">    [array addObject: str1];</div><div class="line">    <span class="comment">// 删除最后一个元素</span></div><div class="line">    [array removeLastObject];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    [array addObject: str1];</div><div class="line">    <span class="comment">// 删除指定元素</span></div><div class="line">    [array removeObject:<span class="string">@"bili"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    <span class="comment">// 删除指定index的元素</span></div><div class="line">    [array removeObjectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"删除后的 array = %@"</span>, array);</div><div class="line">    </div><div class="line">    [array addObject:arr1];</div><div class="line">    [array addObject: str1];</div><div class="line">    </div><div class="line">    <span class="comment">// 交换元素位置</span></div><div class="line">    [array exchangeObjectAtIndex:<span class="number">1</span> withObjectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"交换后 %@"</span>, array);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="字典-NSDictionary"><a href="#字典-NSDictionary" class="headerlink" title="字典 NSDictionary"></a>字典 NSDictionary</h2><p>相当于js 里的对象<code>{}</code>. 新建一个类<code>NSDic</code></p>
<figure class="highlight objectivec"><figcaption><span>NSDictionary.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDictionary.h</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDic</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) showNSDictionaryFn;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>NSDictionary.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDictionary.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSDic.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDic</span></span></div><div class="line">-(<span class="keyword">void</span>) showNSDictionaryFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"test"</span>);</div><div class="line"><span class="comment">//   字典： 相当于js的对象~ py的字典。</span></div><div class="line">    <span class="comment">// 声明后不可以改</span></div><div class="line">    <span class="built_in">NSDictionary</span> *dict1 = [<span class="built_in">NSDictionary</span> dictionaryWithObject:<span class="string">@"1"</span> forKey:<span class="string">@"a"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict1 = %@"</span>, dict1);</div><div class="line">    </div><div class="line">    <span class="comment">// 多个键值对</span></div><div class="line">    <span class="built_in">NSDictionary</span> *dict2 = [<span class="built_in">NSDictionary</span> dictionaryWithObjects:[<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"1"</span>, <span class="string">@"2"</span>, <span class="string">@"3"</span>, <span class="literal">nil</span>] forKeys:[<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="string">@"c"</span>, <span class="literal">nil</span>]];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict2 %@"</span>, dict2);</div><div class="line">    </div><div class="line">    <span class="comment">// 简便写法</span></div><div class="line">    <span class="built_in">NSDictionary</span> *dict3 = @&#123;</div><div class="line">                            <span class="string">@"1"</span>: <span class="string">@"a"</span>,</div><div class="line">                            <span class="string">@"2"</span>: <span class="string">@"b"</span></div><div class="line">                            &#125;;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict3 %@"</span>, dict3);</div><div class="line">    </div><div class="line">    <span class="comment">// 长度</span></div><div class="line">    <span class="keyword">int</span> count = (<span class="keyword">int</span>)[dict2 count];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"count %d"</span>, count);</div><div class="line">    </div><div class="line">    <span class="comment">// 获取对应key的 value</span></div><div class="line">    <span class="built_in">NSString</span> *value = [dict2 valueForKey: <span class="string">@"b"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"value = %@"</span>, value);</div><div class="line">    <span class="built_in">NSString</span> *value2 = [dict2 objectForKey: <span class="string">@"b"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"value2 = %@"</span>, value2);</div><div class="line">    </div><div class="line">    <span class="comment">// 数组 字典所有的值</span></div><div class="line">    <span class="built_in">NSArray</span> *allValues = [dict2 allValues];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"allValues = %@"</span>, allValues);</div><div class="line">    </div><div class="line">    <span class="comment">// 数组 所有的key</span></div><div class="line">    <span class="built_in">NSArray</span> *allKeys = [dict2 allKeys];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"allKeys = %@"</span>, allKeys);</div><div class="line">    </div><div class="line">    <span class="comment">// 遍历</span></div><div class="line">    <span class="built_in">NSArray</span> *array = [dict2 objectsForKeys:[<span class="built_in">NSArray</span> arrayWithObjects: <span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="string">@"d"</span>, <span class="literal">nil</span>] notFoundMarker:<span class="string">@"Not Fount"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"array = %@"</span>, array);</div><div class="line">    </div><div class="line">    <span class="comment">// 遍历字典</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> dict2) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ = %@"</span>, key, [dict2 objectForKey:key]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 枚举器</span></div><div class="line">    <span class="built_in">NSEnumerator</span> *en = [dict2 keyEnumerator];</div><div class="line">    <span class="keyword">id</span> key = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">while</span> (key = [en nextObject]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"key = %@"</span>, key);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [dict2 enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span> key, <span class="keyword">id</span> obj, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"id = %@, obj = %@"</span>, key, obj);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="可变字段-NSMutableDictionary"><a href="#可变字段-NSMutableDictionary" class="headerlink" title="可变字段 NSMutableDictionary"></a>可变字段 NSMutableDictionary</h2><figure class="highlight objectivec"><figcaption><span>NSDic2.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDic2.h</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDic2</span> : <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>) showFn;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>NSDic2.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  NSDic2.m</span></div><div class="line"><span class="comment">//  foundation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Jsonz on 2017/4/26.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Jsonz. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSDic2.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDic2</span></span></div><div class="line"><span class="comment">// 可变字典</span></div><div class="line">-(<span class="keyword">void</span>) showFn</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *dict = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line">    <span class="comment">// 添加键值对</span></div><div class="line">    [dict setObject:<span class="string">@"1"</span> forKey: <span class="string">@"a"</span>];</div><div class="line">    [dict setObject: <span class="string">@"2"</span> forKey: <span class="string">@"b"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 删除键值对</span></div><div class="line">    [dict removeObjectForKey:<span class="string">@"a"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict 删除forKey %@"</span>, dict);</div><div class="line">    </div><div class="line">    <span class="comment">// 删除所有</span></div><div class="line">    [dict removeAllObjects];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict 删除所有 %@"</span>, dict);</div><div class="line"></div><div class="line">    [dict setObject:<span class="string">@"1"</span> forKey: <span class="string">@"a"</span>];</div><div class="line">    [dict setObject: <span class="string">@"2"</span> forKey: <span class="string">@"b"</span>];</div><div class="line">    [dict setObject: <span class="string">@"3"</span> forKey: <span class="string">@"c"</span>];</div><div class="line">    [dict removeObjectsForKeys: [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"a"</span>, <span class="string">@"b"</span>, <span class="literal">nil</span>]];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dict 批量删除  %@"</span>, dict);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C 面向对象初体验]]></title>
      <url>https://jsonz1993.github.io/2017/04/Objective-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h2><p>语言的面向对象都是换汤不换药 来来去去那几个概念</p>
<ul>
<li>OOP（Object Oriented Programming) 基本概念</li>
<li>对象 （男人，女人，程序员）</li>
<li>抽象 - 类（人）</li>
</ul>
<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul>
<li>创建类(人)、得到对象（程序员）</li>
<li>成员变量： 内部使用，比如 大脑 眼睛 嘴</li>
<li>属性： 给外部使用 比如 职业</li>
<li>类的实例为对象</li>
</ul>
<h4 id="创建demo"><a href="#创建demo" class="headerlink" title="创建demo"></a>创建demo</h4><ol>
<li>同<a href="https://jsonz1993.github.io/2017/04/%E5%BE%81%E6%88%98Objective-C/">征战Objective-C</a>一样 创建一个<code>Command Line Tool</code> 写示例代码</li>
<li>创建一个文件，类型为<code>Cocoa Class</code>,<code>name: People</code>, <code>Subclass of: NSObject</code>, <code>language: Objective-C</code> 。点击Next之后会生成两个文件 <code>People.h</code>,<code>People.m</code>。</li>
</ol>
<h4 id="引入与实例化"><a href="#引入与实例化" class="headerlink" title="引入与实例化"></a>引入与实例化</h4><p>在 <code>main.m</code> 里面引入文件并实例化对象, 后面如果没有特别说明， 都是在 <code>main @autoreleasepool</code> 里面写代码<br><figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"People.h"</span> // 引入类</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">// 实例化对象</span></div><div class="line">        <span class="comment">// 类名    对象名(星号代表是指针类型) = [[类名/对象名] 方法名]</span></div><div class="line">        <span class="comment">// People p1/p2                  = [[People alloc] init]</span></div><div class="line">        <span class="comment">// alloc - 为对象分配内存空间</span></div><div class="line">        <span class="comment">// init - 进行初始化操作</span></div><div class="line">        People *p1 = [[People alloc] init];</div><div class="line">        People *p2 = [[People alloc] init];</div><div class="line">        People *p3 = [People new]; <span class="comment">// new 在Objective-C 用得少</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1 - %p"</span>, p1);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p2 - %p"</span>, p2);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p3 - %p"</span>, p3);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="创建成员变量与属性"><a href="#创建成员变量与属性" class="headerlink" title="创建成员变量与属性"></a>创建成员变量与属性</h4><figure class="highlight objectivec"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 姓名，年龄，性别</span></div><div class="line"><span class="comment">// 类内使用成员变量(m)， 类外使用属性(h)</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">People</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 声明类的属性 声明后 main.m 就可以通过 p1.peopleName = @"Jsonz"; 访问修改属性</span></div><div class="line"><span class="comment">// 属性就是成员变量的外部接口 h 文件写。外部使用</span></div><div class="line"><span class="comment">//设置与获取Name</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSString</span> *peopleName;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>People.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// 成员变量 m 文件定义 内部使用</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">People</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> _peopleAge;</div><div class="line">    <span class="keyword">int</span> _peopleSex;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">instancetype</span>) init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _peopleName = <span class="string">@"张三"</span>; <span class="comment">// 成员变量 类内使用</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>此时<code>main.m</code> 可以使用<code>peopleName</code>属性</p>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性的使用</span></div><div class="line">p1.peopleName = <span class="string">@"jsonz"</span>;</div><div class="line">p2.peopleName = <span class="string">@"李四"</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"p1.peopleName - %@"</span>, p1.peopleName);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"p2.peopleName - %@"</span>, p2.peopleName);</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="加号方法-减号方法-的声明与调用"><a href="#加号方法-减号方法-的声明与调用" class="headerlink" title="加号方法 减号方法 的声明与调用"></a>加号方法 减号方法 的声明与调用</h3><p>在<code>People.h</code> 声明方法<br><figure class="highlight plain"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * - 、+ (减号代表对象方法，加号代表类方法)</div><div class="line"> * 对象方法既是在实例上调用，而类方法则是在类上面调用，如: People *p1 = [[People alloc] init]</div><div class="line"> * 此时 People是类， p1是对象</div><div class="line"> * h 文件进行声明， m 进行实现</div><div class="line"> */</div><div class="line">-(void) report; // 减号方法</div><div class="line">+(void) report1; // void 代表不用返回， +号方法</div><div class="line">-(int) returnInt; // 改变返回值的函数</div></pre></td></tr></table></figure></p>
<p>在<code>People.m</code>实现该方法<br><figure class="highlight objectivec"><figcaption><span>People.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>) report</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"减号 Report"</span>);</div><div class="line">    <span class="comment">// 如何在减号方法调加号方法</span></div><div class="line">    <span class="comment">// [People report1]; </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *_peopleName1; <span class="comment">// 静态变量，供加号方法内调用</span></div><div class="line">+(<span class="keyword">void</span>) report1</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"加号 Report"</span>);</div><div class="line">    _peopleName1 = <span class="string">@"张三"</span>; <span class="comment">// 调用静态变量 不能调用成员变量</span></div><div class="line">    <span class="comment">// 如何在加号方法调减号方法</span></div><div class="line">    <span class="comment">// [[People alloc] report]</span></div><div class="line">&#125;</div><div class="line">-(<span class="keyword">int</span>) returnInt</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 前面是int，所以该函数必须返回一个int类型</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">People *p1 = [[People alloc] init]</div><div class="line">[p1 report]; <span class="comment">// 减号方法</span></div><div class="line">[People report1]; <span class="comment">// 加号方法</span></div><div class="line"></div><div class="line"><span class="comment">// [[People alloc] init]</span></div><div class="line"><span class="comment">// [People alloc]会返回一个对象，这时候才能调用 init 所以 alloc是加号方法， init是减号方法</span></div></pre></td></tr></table></figure></p>
<h3 id="函数参数类型"><a href="#函数参数类型" class="headerlink" title="函数参数类型"></a>函数参数类型</h3><figure class="highlight objectivec"><figcaption><span>People.h 声明</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数参数问题</span></div><div class="line">-(<span class="keyword">int</span>)showWithA: (<span class="keyword">int</span>) a; <span class="comment">// 有一个int类型参数 函数名为 `showWithA:`</span></div><div class="line">-(<span class="keyword">int</span>)showWithA: (<span class="keyword">int</span>)a andB:(<span class="keyword">int</span>)b; <span class="comment">// 有两个int类型参数  函数名为 `showWithA: andB:`</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>People.m 实现</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数问题</span></div><div class="line">-(<span class="keyword">int</span>)showWithA:(<span class="keyword">int</span>)a</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line">-(<span class="keyword">int</span>)showWithA:(<span class="keyword">int</span>)a andB:(<span class="keyword">int</span>)b</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m 调用</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数的参数使用</span></div><div class="line"><span class="keyword">int</span> a1 = [p1 showWithA:<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> a2 = [p1 showWithA:<span class="number">20</span> andB:<span class="number">30</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"a1 = %d"</span>, a1);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"a2 = %d"</span>, a2);</div></pre></td></tr></table></figure>
<h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><p>平时调用一个类的对象方法都是这么调用的 <code>People *p1 = [[People alloc] init]</code>， 但此时这个init具体做了什么事情，我们并不知道。</p>
<p>我们可以在类里面重写掉这个<code>init</code> 方法;</p>
<figure class="highlight objectivec"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对于初始化方法来说 id || instancetype 没有区别，对于其他方法，一般 instancetype 比 id用的多</span></div><div class="line"><span class="comment">// -(id)init; // 万能类型，可以返回各种类型对象</span></div><div class="line">-(<span class="keyword">instancetype</span>)init; <span class="comment">// 当前类的类型，比如当前类是People类型，那么instancetype就是People类型</span></div><div class="line">-(<span class="keyword">void</span>) showPeopleProperty; <span class="comment">// 定义一个方法来输出类的属性</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>People.m 重写init</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果此时提示 Duplicate declaration of method ‘init' 则代表你上面本来就声明了一个init 此时删除该init 或者把逻辑移到那个函数内即可</span></div><div class="line"><span class="comment">// init 固有的模式</span></div><div class="line">- (<span class="keyword">instancetype</span>) init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init]; <span class="comment">// 自己继承父级的 init 此处是 NSObject</span></div><div class="line">    <span class="comment">// 内部进行一些初始化的设定</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _peopleName = <span class="string">@"Jsonz"</span>; <span class="comment">// 成员变量 类内使用</span></div><div class="line">        _peopleAge = <span class="number">30</span>;</div><div class="line">        _peopleSex = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>; <span class="comment">// 返回自身</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出People的对象初始化值</span></div><div class="line">-(<span class="keyword">void</span>) showPeopleProperty</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"peopleName = %@"</span>, _peopleName);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"peopleAge = %d"</span>, _peopleAge);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"peopleAge = %d"</span>, _peopleSex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们来自定义一个初始化的方法<br><figure class="highlight objectivec"><figcaption><span>People.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">instancetype</span>)initWithPeopleName:(<span class="built_in">NSString</span> *) peopleName andPeopleAge:(<span class="keyword">int</span>)peopleAge</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>People.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 既然我们是自定义一个初始化方法，那也要按照初始化方法的写法，把一些结构给加上</span></div><div class="line">-(instancetupe)initWithPeopleName:(<span class="built_in">NSString</span> *)peopleName andPeopleAge:(<span class="keyword">int</span>)peopleAge</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 初始化方法的结构</span></div><div class="line">	<span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">		_peopleName = peopleName;</div><div class="line">        _peopleAge = peopleAge;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自己实现的初始化方法</span></div><div class="line">People *pSelf = [[People alloc] initWithPeopleName:<span class="string">@"Jsonz"</span> andPeopleAge: <span class="number">23</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"自己实现的init 的属性有哪些: ---- "</span>);</div><div class="line">[pSelf showPeopleProperty];</div></pre></td></tr></table></figure>
<h2 id="面向对象三部曲"><a href="#面向对象三部曲" class="headerlink" title="面向对象三部曲"></a>面向对象三部曲</h2><p>新建一个项目，避免学习太混乱</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>新建一个类，叫MyClass<br><figure class="highlight objectivec"><figcaption><span>MyClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 成员变量访问修饰符的问题</span></div><div class="line">    <span class="comment">// 默认为 protected 受保护的</span></div><div class="line">    <span class="keyword">@public</span> <span class="comment">// 公有 - 在类内 类外都可以使用，并且可以被继承</span></div><div class="line">    <span class="keyword">int</span> _classInt;</div><div class="line">    </div><div class="line">    <span class="keyword">@private</span> <span class="comment">// 私有 - 在类内可以使用， 类外无法调用 并且无法被继承</span></div><div class="line">    <span class="keyword">@protected</span> <span class="comment">// 受保护 - 默认的 在类内可以使用，类外无法调用 并且可以被继承</span></div><div class="line">    <span class="built_in">NSString</span> *_classStr;</div><div class="line">    <span class="keyword">@package</span> <span class="comment">// 框架权限 - 在框架内相当于受保护(可被调用与继承)， 在框架外相当于私有(类外无法使用与继承)</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSString</span> *className;</div><div class="line"><span class="comment">// 方法是没有访问修饰符的， 同C语言一样。</span></div><div class="line"><span class="comment">// 如果想要一个方法可以在类外可以使用，则要在h声明，m实现。</span></div><div class="line"><span class="comment">// 如果不想在类外使用， 直接在m写实现， h 不写声明。</span></div><div class="line">-(<span class="keyword">void</span>) report;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>MyClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></div><div class="line">-(<span class="keyword">void</span>)report</div><div class="line">&#123;</div><div class="line">    _classStr = <span class="string">@"ClassStr bilibilii"</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ClassName - %@"</span>, _className);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"classInt - %d"</span>, _classInt);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        MyClass *mc = [[MyClass alloc] init];</div><div class="line">        mc.className = <span class="string">@"我的类"</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// 类外使用 public 成员变量</span></div><div class="line">        mc-&gt;_classInt = <span class="number">1001</span>; <span class="comment">// 使用指向来调用类中的公有成员变量</span></div><div class="line">        </div><div class="line">        [mc report];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>创建两个类</p>
<ul>
<li>父类 ParentClass</li>
<li>子类 ChildClass, 创建的时候记得选上继承 ParentClass， 如果忘了选也没关系 后面手动修改一下就可以</li>
</ul>
<figure class="highlight objectivec"><figcaption><span>ParentClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// NSObject - 基类 此处的:(冒号)是代表继承关系</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ParentClass</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 受保护变量 可继承 不可外部调用</span></div><div class="line">    <span class="keyword">int</span> _classInt;</div><div class="line">    </div><div class="line">    <span class="comment">// 私有变量</span></div><div class="line">    <span class="keyword">@private</span></div><div class="line">    <span class="built_in">NSString</span> *_classStr;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSString</span> *className;</div><div class="line">-(<span class="keyword">void</span>)report; <span class="comment">// 如果此处不声明，则类外不能调。 子类也不继承</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>ParentClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ParentClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ParentClass</span></span></div><div class="line">-(<span class="keyword">void</span>)report</div><div class="line">&#123;</div><div class="line">    _classInt = <span class="number">1002</span>;</div><div class="line">    _classStr = <span class="string">@"Jsonz's 私有变量"</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ClassName - %@"</span>, _className);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"classInt - %d"</span>, _classInt);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"classStr - %@"</span>, _classStr); <span class="comment">// 此处在 ChildClass 中也会被打印出来，因为继承了该方法，所以会被打印</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>ChildClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ParentClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ChildClass</span> : <span class="title">ParentClass</span></span></div><div class="line">-(<span class="keyword">void</span>)show;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>ChildClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ChildClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ChildClass</span></span></div><div class="line">-(<span class="keyword">void</span>)show</div><div class="line">&#123;</div><div class="line">    _classInt = <span class="number">1003</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"show 此处_classInt 变化了 - %d"</span>, _classInt);</div><div class="line"><span class="comment">//    NSLog(@"show 打印父类的私有方法NSString %@", _classStr);  此处因为是父级的私有变量，所以外部无法访问</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用</span></div><div class="line"><span class="comment">// 父类</span></div><div class="line">ParentClass *pc = [[ParentClass alloc] init];</div><div class="line">pc.className = <span class="string">@"parentClass ClassName"</span>;</div><div class="line">[pc report];</div><div class="line"></div><div class="line"><span class="comment">// 子类</span></div><div class="line">ChildClass *cc = [[ChildClass alloc] init];</div><div class="line">cc.className = <span class="string">@"ChildClass ClassName"</span>; <span class="comment">// 此处为父类继承过来的属性</span></div><div class="line">[cc show];</div><div class="line">[cc report]; <span class="comment">// 此处还是1002 因为 cc中的 report 继承 pc 的report，此处重新复制了并打印。所以是1002</span></div></pre></td></tr></table></figure>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul>
<li>方法重写 基于父类方法继承重写，返回值，函数名，参数等都一致</li>
<li>方法重载 (OC 不支持) 函数名一致，返回值 参数 参数类型等都不一致</li>
</ul>
<p>创建一个类<code>ColorPrint</code> 用于演示多态，后面会基于 <code>ParentClass</code>, <code>ChildClass</code> 与<code>ColorPrint</code> 来说明多态。</p>
<p>父类实现一个打印机方法<br><figure class="highlight objectivec"><figcaption><span>ParentClass.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>) print;</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>ParentClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>) print</div><div class="line">&#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"普通打印机"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>子类重写不需要声明，直接在<code>m</code>文件去重写实现即可<br><figure class="highlight objectivec"><figcaption><span>ChildClass.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)print</div><div class="line">&#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"我是黑白打印机"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><figcaption><span>ColorPrinter.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)print</div><div class="line">&#123;</div><div class="line">	<span class="comment">// 如果此处要调用父类的方法可以这么写：</span></div><div class="line">	[<span class="keyword">super</span> print];</div><div class="line">	<span class="comment">// 调用当前类的方法可以用 self 父类可以用 super</span></div><div class="line">    <span class="comment">// [self print];</span></div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"我是彩色打印机"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>main.m</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用</span></div><div class="line">ChildClass *cc = [[ChilClass alloc] init];</div><div class="line">[cc print]; <span class="comment">// 黑白</span></div><div class="line">ColorPrinter *cc2 = [[ColorPrinter alloc] init];</div><div class="line">[cc2 print]; <span class="comment">// 彩色打印机</span></div><div class="line"></div><div class="line"><span class="comment">// 如果已经引入了子类的头文件，默认父类h文件（子类头文件所引入的头文件）也会被引入了。</span></div><div class="line"><span class="comment">// 可以这么写</span></div><div class="line">ParentClass *color = [[ColorPrinter alloc] init];</div><div class="line">[color print]; <span class="comment">// 此处也是才是打印机</span></div></pre></td></tr></table></figure>
<p><a href="">demo</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn - ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[征战Objective-C]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E5%BE%81%E6%88%98Objective-C/</url>
      <content type="html"><![CDATA[<p><code>Objective-C</code> 下面简称<code>OC</code></p>
<h3 id="源代码文件扩展名对比"><a href="#源代码文件扩展名对比" class="headerlink" title="源代码文件扩展名对比"></a>源代码文件扩展名对比</h3><p>一般来说，头文件是放声明， 实现文件放实现的代码</p>
<table>
<thead>
<tr>
<th></th>
<th>头文件</th>
<th>实现文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>c语言</td>
<td>.h</td>
<td>.c</td>
</tr>
<tr>
<td>c++语言</td>
<td>.h</td>
<td>.cpp</td>
</tr>
<tr>
<td>oc语言</td>
<td>.h</td>
<td>.m</td>
</tr>
<tr>
<td>oc&amp;c++</td>
<td>.h</td>
<td>.mm</td>
</tr>
</tbody>
</table>
<h3 id="面向对象概览"><a href="#面向对象概览" class="headerlink" title="面向对象概览"></a>面向对象概览</h3><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当前的SimpleClass 继承 NSObject 类</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SimpleClass</span>: <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="类的属性申明"><a href="#类的属性申明" class="headerlink" title="类的属性申明"></a>类的属性申明</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>:</span></div><div class="line"><span class="built_in">NSObject</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span></div><div class="line">*firstName;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span></div><div class="line">*lastName;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span> *yearOfBirth;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> <span class="keyword">int</span> yearOfBirth;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSString</span> *firstName;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="减号方法（普通方法又称对象方法）声明"><a href="#减号方法（普通方法又称对象方法）声明" class="headerlink" title="减号方法（普通方法又称对象方法）声明"></a>减号方法（普通方法又称对象方法）声明</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span>: <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>) someMethod;</div><div class="line">- (<span class="keyword">void</span>) someMethodWithValue: (SomeType)value;</div><div class="line">- (<span class="keyword">void</span>) someMethodWithFirstValue: (SomeType)info1 secondValue: (AnotherType)info2;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="加号方法-类方法，-又称静态方法-声明"><a href="#加号方法-类方法，-又称静态方法-声明" class="headerlink" title="加号方法 (类方法， 又称静态方法) 声明"></a>加号方法 (类方法， 又称静态方法) 声明</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span>: <span class="title">NSObject</span></span></div><div class="line">+(<span class="keyword">id</span>)string;</div><div class="line">+(<span class="keyword">id</span>)stringWithString:(<span class="built_in">NSString</span> *)aString;</div><div class="line">+(<span class="keyword">id</span>)stringWithFormat:(<span class="built_in">NSString</span> *)format, ..;</div><div class="line">+(<span class="keyword">id</span>)stringWithContentsOfFile: (<span class="built_in">NSString</span> *)path</div><div class="line">encoding: (<span class="built_in">NSStringEncoding</span>)enc error:(<span class="built_in">NSError</span> **)error;</div><div class="line">+(<span class="keyword">id</span>)stringWithCString: (<span class="keyword">const</span> <span class="keyword">char</span> *)cString</div><div class="line">encoding: (<span class="built_in">NSStringEncoding</span>)enc;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="类的实现"><a href="#类的实现" class="headerlink" title="类的实现"></a>类的实现</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import 'XYZPerson.h'</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XYZPerson</span></span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="完成的例子"><a href="#完成的例子" class="headerlink" title="完成的例子"></a>完成的例子</h4><figure class="highlight objectivec"><figcaption><span>XYZPerson.h 文件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XYZPerson</span>: <span class="title">NSObject</span></span></div><div class="line">-(<span class="keyword">void</span>)sayHello;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><figcaption><span>XYZPerson.m 文件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"XYZPerson.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XYZPerson</span></span></div><div class="line">-(<span class="keyword">void</span>)sayHello &#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"Hello, World!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>首先去app store 下载xCode. 打开xCode</p>
<p>选择左侧 <code>Create a new Xcode project</code>=&gt;<code>macOS</code>=&gt; <code>Command Line Tool</code> ，<code>选择保存项目的位置</code>。<br><img src="./create.png" alt="create"></p>
<p>进入项目后点击左上角箭头运行，如果下面控制台有输出 <code>hello world</code> 则代表运行成功了。<br><img src="./run.png" alt="run"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">    	<span class="comment">// 真正开始写代码的地方</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ObjectiveC-变量与表达式"><a href="#ObjectiveC-变量与表达式" class="headerlink" title="ObjectiveC 变量与表达式"></a>ObjectiveC 变量与表达式</h3><h4 id="声明变量与简单运算"><a href="#声明变量与简单运算" class="headerlink" title="声明变量与简单运算"></a>声明变量与简单运算</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</div><div class="line">b = <span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> c = a + b;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"变量a+ b的值等于: %d"</span>, c); <span class="comment">// %d 格式化输出，后面加个逗号再加变量</span></div></pre></td></tr></table></figure>
<h4 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">int</span> a = <span class="number">0</span>; 整数 占<span class="number">32</span>位<span class="number">2</span>进制</div><div class="line"><span class="keyword">float</span> <span class="keyword">float</span> a = <span class="number">1.0</span>; 浮点数 占<span class="number">32</span>位<span class="number">2</span>进制</div><div class="line"><span class="keyword">double</span> <span class="keyword">double</span> num; 双精度 占<span class="number">64</span>位 可以保存更大的数</div><div class="line"><span class="keyword">char</span> <span class="keyword">char</span> c = <span class="string">'A'</span>; 单字符串 单引号</div><div class="line"><span class="built_in">NSString</span>: <span class="string">@"Hello world"</span> 使用比较多 双引号 (高级类型)</div><div class="line">C语言字符串类型 <span class="string">"hello world"</span> 使用比较少</div></pre></td></tr></table></figure>
<h4 id="限定词"><a href="#限定词" class="headerlink" title="限定词"></a>限定词</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span>: <span class="keyword">long</span> <span class="keyword">int</span> a; 比<span class="keyword">int</span> 更大的整形</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span>: <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a; 比 <span class="keyword">long</span> <span class="keyword">int</span> 更大 具体应用才会涉及 比如大数据等</div><div class="line"><span class="keyword">short</span>: <span class="keyword">short</span> <span class="keyword">int</span> a; <span class="keyword">short</span> a; 小于或等于整形， <span class="number">16</span>位 比较省类型，但是比较少用这些，一般直接用 <span class="keyword">int</span></div><div class="line"><span class="keyword">unsigned</span>: <span class="keyword">unsigned</span> <span class="keyword">int</span> a; 无符号</div><div class="line"><span class="keyword">signed</span>: <span class="keyword">signed</span> <span class="keyword">int</span> a; 有符号(正负类型)</div></pre></td></tr></table></figure>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">a++;</div><div class="line">++a;</div><div class="line">a--;</div><div class="line">--a;</div><div class="line"></div><div class="line">一元 ++, --,</div><div class="line">二元 +, -, *, /, %</div><div class="line">三元 <span class="number">2</span>&gt;<span class="number">3</span>?Yes:Not</div><div class="line">逻辑符号 &lt;, &gt;, &gt;=, &lt;=, ==, !=</div></pre></td></tr></table></figure>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果是真的会返回 1，如果未假返回 0;</span></div><div class="line"><span class="keyword">if</span> (True) &#123;</div><div class="line">  <span class="comment">// is True</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 只要非0就是真的。</span></div><div class="line"><span class="keyword">if</span> (<span class="number">1</span>) <span class="built_in">NSLog</span>(<span class="string">@"对"</span>); <span class="keyword">else</span> <span class="built_in">NSLog</span>(<span class="string">@"错"</span>); <span class="comment">// 单行可以不写括号</span></div></pre></td></tr></table></figure>
<h4 id="goto语法"><a href="#goto语法" class="headerlink" title="goto语法"></a>goto语法</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">a: &#123;</div><div class="line">	i++;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"i的值为 %d"</span>, i); <span class="comment">// 先输出一个 i = 0;</span></div><div class="line">&#125;</div><div class="line">	<span class="keyword">if</span> (i &lt; <span class="number">5</span>) <span class="keyword">goto</span> a; <span class="comment">// 执行到这里i &lt; 5 跳转到a 去执行。 直到 i == 5</span></div><div class="line">	<span class="comment">// 最后输出 0, 1, 2, 3, 4</span></div></pre></td></tr></table></figure>
<h4 id="while-循环-比较常用"><a href="#while-循环-比较常用" class="headerlink" title="while 循环 比较常用"></a>while 循环 比较常用</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> ( a &lt; <span class="number">5</span>) &#123;</div><div class="line">	a++;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"a的变量是 %d"</span>, a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="for循环-比较常用"><a href="#for循环-比较常用" class="headerlink" title="for循环 比较常用"></a>for循环 比较常用</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"i=%d"</span>, i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="do-while-肯定会执行一次再判断是否循环"><a href="#do-while-肯定会执行一次再判断是否循环" class="headerlink" title="do while 肯定会执行一次再判断是否循环"></a>do while 肯定会执行一次再判断是否循环</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"hehe"</span>);</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h4 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">break</span> 可以在 循环中 退出循环</div><div class="line"><span class="keyword">continue</span> 可以在 循环中 跳出当前循环，继续下一项循环</div></pre></td></tr></table></figure>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">10.0</span>;</div><div class="line">      <span class="comment">// char int float</span></div><div class="line">      <span class="keyword">switch</span> (i) &#123;</div><div class="line">          <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 1"</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 2"</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 10"</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">default</span>:</div><div class="line">              <span class="built_in">NSLog</span>(<span class="string">@"i = 10.0"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 最后会输出一个 10。</span></div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 求矩形面积的函数 s = a * b;</span></div><div class="line"><span class="comment">// 返回的类型 函数名 ([(参数类型， 参数名)， (参数类型， 参数名)])</span></div><div class="line"><span class="keyword">double</span> qiumianji(<span class="keyword">double</span> a, <span class="keyword">double</span> b) &#123;</div><div class="line">    <span class="keyword">double</span> s = a * b;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用 main 函数内。</span></div><div class="line"><span class="comment">// 一个相同类型的变量来接收返回值</span></div><div class="line"><span class="keyword">double</span> s = qiumianji(<span class="number">10.0</span>, <span class="number">5.0</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"s 的值为 %f"</span>, s); <span class="comment">// %d 输出整数， %f 输出浮点数</span></div><div class="line"></div><div class="line"><span class="comment">// 如果没有返回值，则调用函数的时候不用一个变量去接收</span></div><div class="line"><span class="keyword">void</span> show() &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a test !"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a test2 !"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"this is a test3 !"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main 函数内调用</span></div><div class="line">show();</div></pre></td></tr></table></figure>
<h3 id="main函数中的默认参数"><a href="#main函数中的默认参数" class="headerlink" title="main函数中的默认参数"></a>main函数中的默认参数</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"argc=%d"</span>, argc);</div><div class="line"><span class="comment">// argv 参数为 命令行输入命令运行的参数如： les1 -h -c -a -l 则有5个参数[les1, -h, -c, -a, -l]</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; argc; i++) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, argv[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出目前遇到的总结"><a href="#输出目前遇到的总结" class="headerlink" title="输出目前遇到的总结"></a>输出目前遇到的总结</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"type %d"</span>, a); </div><div class="line">- %d <span class="keyword">int</span>; </div><div class="line">- %s <span class="keyword">char</span> *; </div><div class="line">- %f <span class="keyword">float</span>;</div><div class="line">- %p 指针类型</div><div class="line">- %@ <span class="built_in">NSString</span></div><div class="line">- %ld  目前遇到过的有 <span class="built_in">NSRange</span>.length || <span class="built_in">NSRange</span>.location</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imooc </tag>
            
            <tag> Objective-C </tag>
            
            <tag> learn </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单事件系统]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E7%AE%80%E5%8D%95%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>最简单的事件系统 应该包含四个接口 <code>on</code>, <code>off</code>, <code>once</code>, <code>trigger</code>。</p>
<h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">E</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">E.prototype = &#123;</div><div class="line">	<span class="attr">on</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">	<span class="attr">off</span>: ...,</div><div class="line">	<span class="attr">trigger</span>: ...,</div><div class="line">	<span class="attr">once</span>: ...,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="on-事件绑定"><a href="#on-事件绑定" class="headerlink" title="on 事件绑定"></a>on 事件绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">on: <span class="function"><span class="keyword">function</span>(<span class="params">name, cb, ctx</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> e = <span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;);</div><div class="line">	(e[name] || (e[name] = [])).push(&#123;</div><div class="line">		<span class="attr">fn</span>: cb,</div><div class="line">		<span class="attr">ctx</span>: ctx</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h3 id="off-事件解绑"><a href="#off-事件解绑" class="headerlink" title="off 事件解绑"></a>off 事件解绑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">off: <span class="function"><span class="keyword">function</span>(<span class="params">name, cb, ctx</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> e = <span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;);</div><div class="line">	<span class="keyword">var</span> evts = e[name];</div><div class="line">	<span class="keyword">var</span> liveEvents = [];</div><div class="line">	<span class="keyword">if</span> (evts &amp;&amp; cb) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i= <span class="number">0</span>, len= evts.length; i&lt; len; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (evts[i].fn !== cb &amp;&amp; evts[i].fn._ !== cb) liveEvents.push(evts[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	(liveEvents.length)</div><div class="line">		? e[name] = liveEvents</div><div class="line">		: <span class="keyword">delete</span> e[name];</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="once-绑定单次"><a href="#once-绑定单次" class="headerlink" title="once 绑定单次"></a>once 绑定单次</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">once: <span class="function"><span class="keyword">function</span>(<span class="params">name, cb, ctx</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		self.off(name, listener);</div><div class="line">		cb.apply(ctx, <span class="built_in">arguments</span>);</div><div class="line">	&#125;</div><div class="line">	listener._ = cb;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.on(name, listener, ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="trigger-事件触发"><a href="#trigger-事件触发" class="headerlink" title="trigger 事件触发"></a>trigger 事件触发</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">trigger: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> data = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">	<span class="keyword">var</span> evtArr = ((<span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;))[name] || []).slice();</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> len = evtArr.length;</div><div class="line">	<span class="keyword">for</span> (i; i&lt; len; i++) &#123;</div><div class="line">		evtArr[i].fn.apply(evtArr[i].ctx, data);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单的调用"><a href="#简单的调用" class="headerlink" title="简单的调用"></a>简单的调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"./e.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> E();</div><div class="line">e.on(<span class="string">'bilibili'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'on'</span>);</div><div class="line">&#125;).once(<span class="string">'once'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'once'</span>)</div><div class="line">&#125;).on(<span class="string">'off'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'off'</span>)</div><div class="line">&#125;);</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		e.trigger(<span class="string">'off'</span>)</div><div class="line">			.off(<span class="string">'off'</span>)</div><div class="line">			.trigger(<span class="string">'bilibili'</span>)</div><div class="line">			.trigger(<span class="string">'once'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>最后附上<a href="https://github.com/jsonz1993/learn/tree/master/finish/Event" target="_blank" rel="external">源码</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[复制黏贴板插件-CopyText]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E5%A4%8D%E5%88%B6%E9%BB%8F%E8%B4%B4%E6%9D%BF%E6%8F%92%E4%BB%B6-CopyText/</url>
      <content type="html"><![CDATA[<p>最近公司有个需求是要在移动端实现操作黏贴板功能，简单来说就是点击一个一个评论弹出菜单，其中有一个就是复制的选项。其中<code>安卓</code>和<code>ios</code>中的app还好，有原生提供接口，web端就要自己去实现了。</p>
<p>公司原本有一个copy的插件，但是亲测没效，找到github上面一些copy的插件用的start最高的是<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="external">clipboard</a> 截止此文有16k个start。</p>
<p>官方说明是 </p>
<blockquote>
<p>Modern copy to clipboard. No Flash. Just 3kb gzipped.</p>
</blockquote>
<p>只有3k!而且官方插件提供的接口不是我想要的那种，遂有了造个自己用的小轮子念头。</p>
<h2 id="简单思路"><a href="#简单思路" class="headerlink" title="简单思路"></a>简单思路</h2><h3 id="创建一个虚拟的textarea-设置好样式让其显示在用户看不到的界面"><a href="#创建一个虚拟的textarea-设置好样式让其显示在用户看不到的界面" class="headerlink" title="创建一个虚拟的textarea 设置好样式让其显示在用户看不到的界面"></a>创建一个虚拟的textarea 设置好样式让其显示在用户看不到的界面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">selectFake() &#123;</div><div class="line">        <span class="keyword">const</span> isRTL = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">'dir'</span>);</div><div class="line">        <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandlerCallback = <span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandler = <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.fakeHandlerCallback) || <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.fakeEl = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</div><div class="line">        <span class="keyword">let</span> yPosition = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTo;</div><div class="line">        styleFn(<span class="keyword">this</span>.fakeEl, &#123;</div><div class="line">            <span class="attr">fontSize</span>: <span class="string">'12pt'</span>,</div><div class="line">            <span class="attr">border</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">margin</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">padding</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">            [isRTL? <span class="string">'right'</span>: <span class="string">'left'</span>]: <span class="string">'-9999px'</span>,</div><div class="line">            <span class="attr">top</span>: <span class="string">`<span class="subst">$&#123;yPosition&#125;</span>px`</span>,</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.fakeEl.setAttribute(<span class="string">'readonly'</span>, <span class="string">''</span>);</div><div class="line">        <span class="keyword">this</span>.fakeEl.value = <span class="keyword">this</span>.text;</div><div class="line"></div><div class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.selectedText = <span class="keyword">this</span>.selectDom(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.copyText();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="选择该dom，既选中textarea的文字区域"><a href="#选择该dom，既选中textarea的文字区域" class="headerlink" title="选择该dom，既选中textarea的文字区域"></a>选择该dom，既选中textarea的文字区域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">selectDom(el) &#123;</div><div class="line">  <span class="keyword">let</span> selectedText;</div><div class="line">  el.select();</div><div class="line">  el.setSelectionRange(<span class="number">0</span>, el.value.length);</div><div class="line">  el.removeAttribute(<span class="string">'readonly'</span>);</div><div class="line">  <span class="keyword">return</span> el.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="执行copy事件"><a href="#执行copy事件" class="headerlink" title="执行copy事件"></a>执行copy事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">copyText() &#123;</div><div class="line">  <span class="keyword">let</span> succeeded;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    succeeded = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    succeeded = fale;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.handleResult(succeeded); <span class="comment">// 事件回调处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码加注释"><a href="#源码加注释" class="headerlink" title="源码加注释"></a>源码加注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Jsonz@github.com/jsonz1993 on 17/04/16</div><div class="line"> * CopyText 将文本copy到剪切板 支持pc &amp;&amp; web。 有兼容问题 H5 建议用原生copy接口</div><div class="line"> * @param &#123;Object&#125; options 配置参数</div><div class="line"> * @property &#123;String&#125; text 要复制的文本</div><div class="line"> * @property &#123;Function&#125; success 成功回调</div><div class="line"> * @property &#123;Function&#125; error 失败回调</div><div class="line"> * </div><div class="line"> * CopyText.isSupported 判断当前环境是否支持copy事件</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyText</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(options) &#123;</div><div class="line">        <span class="keyword">this</span>.resolveOptions(options);</div><div class="line">        <span class="keyword">this</span>.init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 配置参数</span></div><div class="line">    resolveOptions(options= &#123;&#125;) &#123;</div><div class="line">        <span class="keyword">this</span>.text = options.text;</div><div class="line">        <span class="keyword">this</span>.successCb = <span class="keyword">typeof</span> options.success === <span class="string">'function'</span>? options.success: <span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.errorCb = <span class="keyword">typeof</span> options.error === <span class="string">'function'</span>? options.error: <span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化函数</span></div><div class="line">    init() &#123;</div><div class="line">        <span class="keyword">if</span> (CopyText.isSupported()) <span class="keyword">this</span>.selectFake();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">this</span>.handleResult(<span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建虚拟dom &amp;&amp; copy</span></div><div class="line">    selectFake() &#123;</div><div class="line">        <span class="keyword">const</span> isRTL = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">'dir'</span>);</div><div class="line">        <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandlerCallback = <span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">this</span>.removeFake();</div><div class="line">        <span class="keyword">this</span>.fakeHandler = <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.fakeHandlerCallback) || <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.fakeEl = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</div><div class="line">        <span class="keyword">let</span> yPosition = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTo;</div><div class="line">        styleFn(<span class="keyword">this</span>.fakeEl, &#123;</div><div class="line">            <span class="attr">fontSize</span>: <span class="string">'12pt'</span>,</div><div class="line">            <span class="attr">border</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">margin</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">padding</span>: <span class="string">'0'</span>,</div><div class="line">            <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">            [isRTL? <span class="string">'right'</span>: <span class="string">'left'</span>]: <span class="string">'-9999px'</span>,</div><div class="line">            <span class="attr">top</span>: <span class="string">`<span class="subst">$&#123;yPosition&#125;</span>px`</span>,</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.fakeEl.setAttribute(<span class="string">'readonly'</span>, <span class="string">''</span>);</div><div class="line">        <span class="keyword">this</span>.fakeEl.value = <span class="keyword">this</span>.text;</div><div class="line"></div><div class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.selectedText = <span class="keyword">this</span>.selectDom(<span class="keyword">this</span>.fakeEl);</div><div class="line">        <span class="keyword">this</span>.copyText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 移除虚拟dom</span></div><div class="line">    removeFake() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fakeHandler) &#123;</div><div class="line">            <span class="built_in">document</span>.body.removeEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.fakeHandlerCallback);</div><div class="line">            <span class="keyword">this</span>.fakeHandler = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">this</span>.fakeHandlerCallback = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fakeEl) &#123;</div><div class="line">            <span class="built_in">document</span>.body.removeChild(<span class="keyword">this</span>.fakeEl);</div><div class="line">            <span class="keyword">this</span>.fakeEl = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 选择dom</span></div><div class="line">    selectDom(el) &#123;</div><div class="line">        <span class="keyword">let</span> selectedText;</div><div class="line">        el.select();</div><div class="line">        el.setSelectionRange(<span class="number">0</span>, el.value.length);</div><div class="line">        el.removeAttribute(<span class="string">'readonly'</span>);</div><div class="line">        <span class="keyword">return</span> el.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// copy</span></div><div class="line">    copyText() &#123;</div><div class="line">        <span class="keyword">let</span> succeeded;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            succeeded = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</div><div class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">            succeeded = fale;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.handleResult(succeeded); <span class="comment">// 事件回调处理</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 回调</span></div><div class="line">    handleResult(succeeded) &#123;</div><div class="line">        succeeded? <span class="keyword">this</span>.successCb(): <span class="keyword">this</span>.errorCb();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断是否支持该事件</span></div><div class="line">    <span class="keyword">static</span> isSupported(action= <span class="string">'copy'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> !!<span class="built_in">document</span>.queryCommandSupported &amp;&amp; !!<span class="built_in">document</span>.queryCommandSupported(action);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styleFn = <span class="function">(<span class="params">el, opts</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts !== <span class="string">'object'</span> || !el.nodeType) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> opts) &#123;</div><div class="line">        el.style[key] = opts[key];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> el;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> CopyText <span class="keyword">from</span> <span class="string">'./CopyText'</span>;</div><div class="line"><span class="keyword">new</span> CopyText(&#123;</div><div class="line">  <span class="attr">text</span>: <span class="string">'文本复制'</span>,</div><div class="line">  success() &#123;&#125;,</div><div class="line">  error() &#123;&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 可以自行判断环境是否支持copy事件</span></div><div class="line">CopyText.isSupported() <span class="comment">// Boolean</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sublime text 3 配置]]></title>
      <url>https://jsonz1993.github.io/2017/04/sublime-text-3-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>这篇博客主要讲怎么配置自己的<code>sublime text</code>， 安装可以去<a href="http://www.sublimetext.com/" target="_blank" rel="external">官网</a>下载自行安装。</p>
<h2 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h2><p>之后我们要安装<code>Package Control</code>, 既sublime的包管理工具 后面我们的包下载安装都用他。</p>
<p>按快捷键<code>ctrl + ` </code> 调出或者菜单<code>view&gt; show Control</code> 调出control</p>
<p>复制下面代码到control</p>
<p>sublime Text 3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = &apos;2915d1851351e5ee549c20394736b442&apos; + &apos;8bc59f460fa1548d1514676163dafc88&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure></p>
<p>sublime Text 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib2,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), &apos;wb&apos; ).write(by) if dh == h else None; print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h) if dh != h else &apos;Please restart Sublime Text to finish installation&apos;)</div></pre></td></tr></table></figure></p>
<p>复制完敲回车就可以安装，稍等片刻出现即可，安装完成后在 <code>Preferences</code>菜单下会出现 <code>Package Control</code> 选项</p>
<p>详细安装可看<a href="https://packagecontrol.io/installation" target="_blank" rel="external">Package Control</a></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>打开 <code>Package Control</code>或按快捷键<code>cmd/ctrl + shift + p</code>， 输入 <code>install package</code> 选中第一个选项既进入安装插件的列表。</p>
<p>这时候可能需要等一会加载远程仓库，具体在左下角会有一个loading标识， 加载完在弹窗输入要安装的插件即可。</p>
<p><img src="./package.png" alt="package list"></p>
<p>所有的插件都可以在<a href="https://packagecontrol.io/" target="_blank" rel="external">https://packagecontrol.io/</a> 找到，下面列出比较常用的几个插件</p>
<h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><p>sublime 编辑器虽然轻巧强大，但是默认的主题实在有点看不下去。<br>主题可以在<a href="https://packagecontrol.io/browse/labels/theme" target="_blank" rel="external">https://packagecontrol.io/browse/labels/theme</a> 找自己喜欢的。<br>目前个人使用的是 <code>Material Theme</code> 。</p>
<p>直接在<code>install package</code> 弹窗输入 <code>Material Theme</code> 选第一个即可（后面安装方法类似）。</p>
<p>安装完成后会弹出一个README，根据提示修改一下配置。<br>打开<code>Preferences &gt; settings &gt; User</code><br>添加以下配置，保存即可生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,</div><div class="line">&quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,</div></pre></td></tr></table></figure></p>
<h4 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a>Material Theme</h4><p><img src="./material.gif" alt="material"></p>
<p>个人比较喜欢的主题还有</p>
<h4 id="ayu"><a href="#ayu" class="headerlink" title="ayu"></a>ayu</h4><p><img src="./ayu.png" alt="ayu"></p>
<h4 id="Agila-Theme"><a href="#Agila-Theme" class="headerlink" title="Agila Theme"></a>Agila Theme</h4><p><img src="./agila.png" alt="Agila"></p>
<h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><p>前端工程师使用sublime编辑的必备插件，可以极大提高开发效率。<br>最简单的应用就是在空白的<code>.html</code>页面输入<code>!</code>再按 <code>tab</code>键会自动生成html5基本页面解构。<br>还有基本如 <code>#div1&gt;span.child{这是子级}*2+button.name[disabled]{按钮}</code>快捷语法等<br>具体看<a href="https://www.emmet.io/" target="_blank" rel="external">emmet</a>, <a href="https://packagecontrol.io/packages/Emmet" target="_blank" rel="external">Emmet-package</a></p>
<h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p>sublime 自带的侧边栏文件（夹）功能特别少，这个插件可以为其添加很多其他功能。<a href="https://packagecontrol.io/packages/SideBarEnhancements" target="_blank" rel="external">docs</a></p>
<h3 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a>BracketHighlighter</h3><p>前后标签高亮的插件，如<code>[], (), {}, &quot;&quot;, &#39;&#39;, &lt;tag&gt;&lt;/tag&gt;</code>等，可以比较方便看清代码块的起始点。<a href="https://packagecontrol.io/packages/BracketHighlighter" target="_blank" rel="external">docs</a></p>
<h3 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a>AutoFileName</h3><p>按照路径提示该路径目录下的文件名，对于引入文件资源等很有帮助</p>
<h3 id="All-AutoComplete"><a href="#All-AutoComplete" class="headerlink" title="All AutoComplete"></a>All AutoComplete</h3><p>让代码自动完成的匹配从所有打开的文件里去匹配，而不是只在当前文件里匹配。</p>
<h3 id="HTML-CSS-JS-Prettify"><a href="#HTML-CSS-JS-Prettify" class="headerlink" title="HTML-CSS-JS Prettify"></a>HTML-CSS-JS Prettify</h3><p>html, css, js &amp;&amp; Json 的格式化插件。需要本地安装了node。<br>默认格式化快捷键为<code>ctrl+shift+h</code></p>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>基本上比较通用的插件就这些，可以发现这些插件基本上都在<code>package Control</code>前十位。<br>学会举一反三，工作中用到的另一些插件再上<a href="https://packagecontrol.io/" target="_blank" rel="external">https://packagecontrol.io/</a> 搜索关键字安装<br>如 <code>git</code>, <code>less</code>, <code>vuejs</code>等等。</p>
<p>最后附上自己的配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"color_scheme"</span>: <span class="string">"Packages/Material Theme/schemes/Material-Theme-Lighter.tmTheme"</span>,</div><div class="line">	<span class="attr">"ignored_packages"</span>:</div><div class="line">	[</div><div class="line">		<span class="string">"Vintage"</span></div><div class="line">	],</div><div class="line">	<span class="attr">"always_show_minimap_viewport"</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">"theme"</span>: <span class="string">"Material-Theme-Lighter.sublime-theme"</span>,</div><div class="line">	<span class="attr">"word_wrap"</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">"wrap_width"</span>: <span class="number">120</span>,</div><div class="line">	<span class="attr">"font_size"</span>: <span class="number">10</span>,</div><div class="line">	<span class="attr">"line_padding_bottom"</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">"line_padding_top"</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">"highlight_line"</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">"font_face"</span>: <span class="string">"Monaco"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> editor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome插件开发]]></title>
      <url>https://jsonz1993.github.io/2017/04/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>先放上入门的英语文档<a href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="external">https://developer.chrome.com/extensions/getstarted</a></p>
<p>后面的教程是参照文档学习的。</p>
<h2 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h2><p>首先创建一个<code>manifest.json</code> 用于整个项目的配置文件， 类似平时 <code>js</code> 的 <code>package.json</code>。 包含了项目的版本号， 项目名（扩展插件名）， 描述等。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "manifest_version": 2,</div><div class="line"></div><div class="line">  "name": "Getting started example",</div><div class="line">  "description": "This extension shows a Google Image search result for the current page",</div><div class="line">  "version": "1.0",</div><div class="line"></div><div class="line">  "browser_action": &#123;</div><div class="line">    "default_icon": "icon.png",</div><div class="line">    "default_popup": "popup.html"</div><div class="line">  &#125;,</div><div class="line">  "permissions": [</div><div class="line">    "activeTab",</div><div class="line">    "https://ajax.googleapis.com/"</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  "manifest_version": 2, // 版本号</div><div class="line">  "name": "Getting started example", // 项目名</div><div class="line">  "description": "This extension shows a Google Image search result for the current page", // 描述</div><div class="line">  "version": "1.0", // 项目版本号</div><div class="line">  "browser_action": &#123;</div><div class="line">    "default_icon": "icon.png", // 默认icon</div><div class="line">    "default_popup": "popup.html" // 默认弹窗</div><div class="line">  &#125;,</div><div class="line">  "permissions": [</div><div class="line">    "activeTab", // </div><div class="line">    "https://ajax.googleapis.com/"</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><p>在配置文件中我们定义了一个 <code>default_icon</code> 和 <code>default_popup</code>， 现在让我们来创建他们。</p>
<h3 id="default-icon"><a href="#default-icon" class="headerlink" title="default_icon"></a>default_icon</h3><p><code>default_icon</code> 指向的是用于显示在工具栏的图标 可以选自己喜欢的图片，不过要选取 <code>19px</code> 的 <code>.png</code>文件。</p>
<p>可以用google提供的例子 <a href="https://developer.chrome.com/extensions/examples/tutorials/getstarted/icon.png" target="_blank" rel="external">icon.png</a></p>
<h3 id="popup-html"><a href="#popup-html" class="headerlink" title="popup.html"></a>popup.html</h3><p><code>popup.html</code>用于用户点击时弹出的一个操作框。为<code>html</code> 文件 所以你可以自己捣鼓自己想显示的东西。</p>
<p>可以用google提供的例子 <a href="https://developer.chrome.com/extensions/examples/tutorials/getstarted/popup.html" target="_blank" rel="external">popup.html</a></p>
<p>主要的逻辑以外部js的格式独立写在一个js文件里。 <a href="https://developer.chrome.com/extensions/examples/tutorials/getstarted/popup.js" target="_blank" rel="external">popup.js</a></p>
<p>现在你的文件夹里应该有四个文件:</p>
<ul>
<li>icon.png</li>
<li>popup.html</li>
<li>popup.js</li>
<li>manifest.json</li>
</ul>
<p>这些完成之后，我们接下来就在<code>chrome</code>加载我们的插件</p>
<h3 id="加载插件调试"><a href="#加载插件调试" class="headerlink" title="加载插件调试"></a>加载插件调试</h3><p>chrome 访问 <strong>chrome://extensions</strong> 或手动从菜单进入 <code>扩展程序</code></p>
<p>打开右上角的开发者模式</p>
<p><img src="./dev-checkbox.jpeg" alt="打开开发者模式"></p>
<p>如果电脑没有装chrome….趁早装一个</p>
<h3 id="点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello-Chrome-扩展插件"><a href="#点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello-Chrome-扩展插件" class="headerlink" title="点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello Chrome 扩展插件"></a>点击加载已压缩的扩展程序，即可看到自己编写的第一个Hello Chrome 扩展插件</h3><p>此时双击审查代码可以调试写的插件。</p>
<p>附上后续学习链接<a href="https://developer.chrome.com/extensions" target="_blank" rel="external">https://developer.chrome.com/extensions</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[animate-text]]></title>
      <url>https://jsonz1993.github.io/2017/04/animate-text/</url>
      <content type="html"><![CDATA[<h2 id="animate-text"><a href="#animate-text" class="headerlink" title="animate-text"></a>animate-text</h2><h3 id="文字动画和数字动画-animate-text"><a href="#文字动画和数字动画-animate-text" class="headerlink" title="文字动画和数字动画 animate text"></a>文字动画和数字动画 animate text</h3><p><a href="https://jsonz1993.github.io/demo/animate-text/index.html">查看DEMO</a> <a href="https://github.com/jsonz1993/learn/tree/master/finish/animate-text" target="_blank" rel="external">git仓库</a></p>
<p>轻巧的文字动画库, 使用简单, 文件大小4k<br>可以给文字添加出现动画, 支持字符串打字效果和数字变化效果, 支持监听动画结束事件</p>
<p><strong><a href="https://github.com/qgh810/animate-text" target="_blank" rel="external">项原项目地址</a>, 这里对其代码改造优化。</strong></p>
<p><img src="./demo.gif"></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> AnimateText <span class="keyword">from</span> <span class="string">'./animate-text'</span></div><div class="line"></div><div class="line"><span class="comment">// 最简单的使用方法</span></div><div class="line"><span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 如果需要定义动画时间可以这样初始化</span></div><div class="line"><span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>, <span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment">// 如果还有其它设置 请这样写</span></div><div class="line"><span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>, &#123;</div><div class="line">  <span class="attr">time</span>: <span class="number">1000</span>, <span class="comment">// 动画时长</span></div><div class="line">  isNumber: <span class="literal">true</span>, <span class="comment">// 是否渲染为数字动画</span></div><div class="line">  startNumber: <span class="number">0</span>, <span class="comment">// 渲染为数字动画时 动画的开始数字</span></div><div class="line">  changeCount: <span class="number">32</span>, <span class="comment">// 数字动画数字变化次数</span></div><div class="line">  onAnimated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'动画结束'</span>)&#125; <span class="comment">// 动画结束事件回调</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><br></p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>AnimateText接收两个参数, 例如: new AnimateText(element, options)</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">类型</th>
<th style="text-align:center">是否必填</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">element</td>
<td style="text-align:left">String or Object</td>
<td style="text-align:center">是</td>
<td style="text-align:left">可以是选择器或者dom节点对象(请保证这个节点内只有文本而没有其它节点)</td>
</tr>
<tr>
<td style="text-align:center">options</td>
<td style="text-align:left">Number or Object</td>
<td style="text-align:center">否</td>
<td style="text-align:left">如果第二个参数是数字, 则当作动画时间处理, 如果有其他参数, 以对象格式传递, 具体每个属性的描述请看下方的 options说明</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="options说明"><a href="#options说明" class="headerlink" title="options说明"></a>options说明</h3><p>第二个参数options详细说明</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">类型</th>
<th style="text-align:center">默认值</th>
<th style="text-align:center">是否必填</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">time</td>
<td style="text-align:left">Number</td>
<td style="text-align:center">500</td>
<td style="text-align:center">否</td>
<td style="text-align:left">动画持续的时间</td>
</tr>
<tr>
<td style="text-align:center">isNumber</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:center">false</td>
<td style="text-align:center">否</td>
<td style="text-align:left">是否渲染为数字动画</td>
</tr>
<tr>
<td style="text-align:center">startNumber</td>
<td style="text-align:left">Number</td>
<td style="text-align:center">0</td>
<td style="text-align:center">否</td>
<td style="text-align:left">数字动画的开始数字</td>
</tr>
<tr>
<td style="text-align:center">changeCount</td>
<td style="text-align:left">Number</td>
<td style="text-align:center">32</td>
<td style="text-align:center">否</td>
<td style="text-align:left">数字动画变化次数 也就是数字经过多少次跳动才变为最终数字</td>
</tr>
<tr>
<td style="text-align:center">onAnimated</td>
<td style="text-align:left">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:center">否</td>
<td style="text-align:left">动画结束监听函数</td>
</tr>
</tbody>
</table>
<p><br></p>
<h3 id="实例对象方法说明"><a href="#实例对象方法说明" class="headerlink" title="实例对象方法说明"></a>实例对象方法说明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实例化</span></div><div class="line"><span class="keyword">var</span> animateText = <span class="keyword">new</span> AnimateText(<span class="string">'.text'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 实例化对象后 对象提供play方法重新播放动画</span></div><div class="line"><span class="comment">// 接受参数作为动画时间</span></div><div class="line"><span class="comment">// 不传递参数则使用实例化的时间</span></div><div class="line">animateText.play(<span class="number">1000</span>)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learn </tag>
            
            <tag> JavaScript </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-第三方服务集成]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<p>静态站点拥有一定的局限性，因此我们需要借助于第三方服务来扩展站点的功能。 以下是 NexT 目前支持的第三方服务，你可以根据你的需求集成一些功能进来。</p>
<h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>NexT 支持多款评论系统。<br>如需取消某个 页面/文章 的评论，在 <code>md</code> 文件的 <code>front-matter</code> 中增加 <code>comments: false</code></p>
<p>暂没开评论，多说准备下架。</p>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>本站用 Hexo 提供的 Local Search， 原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="安装-hexo-generator-search"><a href="#安装-hexo-generator-search" class="headerlink" title="安装 hexo-generator-search"></a>安装 hexo-generator-search</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-<span class="built_in">search</span></div></pre></td></tr></table></figure>
<h5 id="安装-hexo-generator-searchdb"><a href="#安装-hexo-generator-searchdb" class="headerlink" title="安装 hexo-generator-searchdb"></a>安装 hexo-generator-searchdb</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<h4 id="修改站点配置"><a href="#修改站点配置" class="headerlink" title="修改站点配置"></a>修改站点配置</h4><p>编辑 <code>站点配置</code>  根目录下的<code>_config.yml</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">post</span></div><div class="line"><span class="attr">  format:</span> <span class="string">html</span></div><div class="line"><span class="attr">  limit:</span> <span class="number">10000</span></div></pre></td></tr></table></figure></p>
<p><a href="http://www.ezlippi.com/blog/2017/02/hexo-search.html" target="_blank" rel="external">站内搜索原文教程-EZLippi-浮生志</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[next-主题设置]]></title>
      <url>https://jsonz1993.github.io/2017/04/next-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>下面的<code>主题配置</code>指的是 <code>themes&gt;Next&gt;_config.yml</code>, <code>站点配置</code>指的是根目录下的<code>_config.yml</code>;</p>
<h3 id="添加-标签-页面"><a href="#添加-标签-页面" class="headerlink" title="添加[标签]页面"></a>添加[标签]页面</h3><p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">标签测试文章</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Testing</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Another</span> <span class="string">Tag</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<h4 id="新建tags页面"><a href="#新建tags页面" class="headerlink" title="新建tags页面"></a>新建<code>tags</code>页面</h4><p>使用<code>hexo new page tags</code> 新建一个页面，命名为<code>tags</code>:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cd</span> you-hexo-site</div><div class="line">$ hexo <span class="keyword">new</span> page <span class="keyword">tags</span></div></pre></td></tr></table></figure></p>
<h4 id="设置新建的tags页面类型，改为tags"><a href="#设置新建的tags页面类型，改为tags" class="headerlink" title="设置新建的tags页面类型，改为tags"></a>设置新建的<code>tags</code>页面类型，改为<code>tags</code></h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">tags</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-04</span><span class="bullet">-03</span> <span class="number">11</span><span class="string">:35:36</span></div><div class="line"><span class="attr">type:</span> <span class="string">"tags"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span> <span class="comment"># tags页面自定义是否要开启评论（前提你已经集成了评论）</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<h4 id="修改主题配置文件，把tag添加到menu中"><a href="#修改主题配置文件，把tag添加到menu中" class="headerlink" title="修改主题配置文件，把tag添加到menu中"></a>修改主题配置文件，把tag添加到menu中</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></div></pre></td></tr></table></figure>
<h3 id="添加-分类-页面"><a href="#添加-分类-页面" class="headerlink" title="添加[分类]页面"></a>添加[分类]页面</h3><p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: 分类测试文章</div><div class="line">categories: Testing</div><div class="line">---</div></pre></td></tr></table></figure>
<p>分类和标签的区别详见<a href="https://hexo.io/zh-cn/docs/front-matter.html#分类和标签" target="_blank" rel="external">Hexo的分类与标签文档</a></p>
<h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><p>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">$</span> <span class="string">cd</span> <span class="string">your-hexo-site</span></div><div class="line"><span class="string">$</span> <span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">categories</span></div><div class="line"><span class="string">```</span> </div><div class="line"></div><div class="line"><span class="comment">#### 设置页面类型</span></div><div class="line"><span class="string">编辑刚新建的页面，将页面的</span> <span class="string">`type`</span> <span class="string">设置为</span> <span class="string">`categories`</span> <span class="string">，主题将自动为这个页面显示分类。页面内容如下：</span></div><div class="line"><span class="string">```yml</span></div><div class="line"><span class="attr">title:</span> <span class="string">分类</span></div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span><span class="string">:39:04</span></div><div class="line"><span class="attr">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h4 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h4><p>在菜单中添加链接。编辑 <code>主题配置文件</code> ， 添加 <code>categories</code> 到 <code>menu</code> 中，如下:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></div></pre></td></tr></table></figure></p>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>Next提供了5个特定范围的字体设定</p>
<ul>
<li>全局字体：定义的字体将在全站范围使用</li>
<li>标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6）</li>
<li>文章字体：文章所使用的字体</li>
<li>Logo字体：Logo 所使用的字体</li>
<li>代码字体： 代码块所使用的字体</li>
</ul>
<p>该配置中的 <code>external</code> 可以用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小）。</p>
<h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 <code>normal</code> 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>：<br>可以自行更改 <code>highlight_theme</code> 字段， 设置成你自己喜欢的高亮主题。</p>
<h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 <code>主题配置文件</code> 中。</p>
<h4 id="设置链接"><a href="#设置链接" class="headerlink" title="设置链接"></a>设置链接</h4><p>在 <code>主题配置</code> 中找到 <code>social</code>字段， 其格式为 <code>显示文本: 链接地址</code>。</p>
<figure class="highlight yml"><figcaption><span>scoial</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">social:</span></div><div class="line"><span class="attr">  Github:</span> <span class="attr">https://github.com/jsonz1993</span></div><div class="line">  <span class="string">微博:</span> <span class="attr">http://weibo.com/u/1638841204</span></div></pre></td></tr></table></figure>
<h4 id="设置图标"><a href="#设置图标" class="headerlink" title="设置图标"></a>设置图标</h4><p>在 <code>主题配置</code> 中找到 <code>social_icons</code>字段， 其格式为 <code>匹配键: Font Awesome 图标名称</code>。<br><code>enable</code> 为是否显示图标控制。 注意此时的匹配建要与 <code>social</code>的键一致,图标依旧是<code>Font Awesome</code>图标</p>
<h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 <code>© 2013 - 2015</code>。 编辑 <code>主题配置文件</code>，新增字段 <code>since</code>。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">since:</span> <span class="number">2013</span></div></pre></td></tr></table></figure>
<h3 id="设置「动画效果」"><a href="#设置「动画效果」" class="headerlink" title="设置「动画效果」"></a>设置「动画效果」</h3><p>NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 <code>false</code> 来关闭动画。<br>编辑 <code>主题配置文件</code>， 搜索 <code>use_motion</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code> 即可：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">use_motion:</span> <span class="literal">true</span> <span class="comment"># 开启动画</span></div></pre></td></tr></table></figure></p>
<h3 id="设置「背景动画」"><a href="#设置「背景动画」" class="headerlink" title="设置「背景动画」"></a>设置「背景动画」</h3><p>NexT 自带两种背景动画效果</p>
<p>编辑 <code>主题配置文件</code>， 搜索 <code>canvas_nest</code> 或 <code>three_waves</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code> 即可：<br>只能同时开启一种背景效果， 建议酌情开启，会影响电脑网页性能(macbook pro或笔记本容易出现过热现象).<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span> <span class="string">//关闭动画</span></div><div class="line"><span class="attr">three_waves:</span> <span class="literal">true</span> <span class="string">//开启动画</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hello next]]></title>
      <url>https://jsonz1993.github.io/2017/04/hellp-next/</url>
      <content type="html"><![CDATA[<p>next 入门配置</p>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p><strong>下面Next下的<code>_config</code>称<code>主题配置</code>， 根目录Hexo的<code>_config</code>称<code>站点配置</code></strong></p>
<h4 id="安装next-到目录-themes-next"><a href="#安装next-到目录-themes-next" class="headerlink" title="安装next 到目录 themes/next:"></a>安装next 到目录 <code>themes/next</code>:</h4><p>注意安装完themes下应该有一个 <code>next</code> 文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<h4 id="启动主题"><a href="#启动主题" class="headerlink" title="启动主题"></a>启动主题</h4><p>修改 <code>站点配置</code>:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">theme:</span> <span class="string">next</span></div></pre></td></tr></table></figure></p>
<h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><p>先清除缓存再启动服务，启动完成后打开 <code>http://localhost:4000/</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean &amp;&amp; hexo s</div></pre></td></tr></table></figure></p>
<h3 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h3><h4 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h4><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。在<code>主题配置</code>配置中的<code>Scheme</code>选项。目前提供三种方案：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>目前使用的是 <code>scheme: Mist</code>方案</p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>在<code>站点配置</code> <code>language</code> 中设置 <code>zh-Hans</code> (简体中文)。<br>支持的语言可在 <code>themes/next/languages</code> 中查看</p>
<h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><p>菜单格式为 <code>item name: link</code><br>此处只是将 url映射到对应 菜单上，若要具体显示文案需要到语言配置文件修改<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="comment"># 主页</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">/categories</span> <span class="comment"># 分类</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives</span> <span class="comment"># 归档</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">/tags</span> <span class="comment"># 标签</span></div><div class="line"><span class="attr">  about:</span> <span class="string">/about</span> <span class="comment"># 关于我</span></div></pre></td></tr></table></figure></p>
<p>设置菜单图标<br>图标可从<a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a>选择<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># 是否显示图标</span></div><div class="line">  <span class="comment"># Icon Mapping.</span></div><div class="line"><span class="attr">  home:</span> <span class="string">home</span></div><div class="line"><span class="attr">  about:</span> <span class="string">user</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">th</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">tags</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">archive</span></div><div class="line"><span class="attr">  commonweal:</span> <span class="string">heartbeat</span></div></pre></td></tr></table></figure></p>
<h4 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h4><ol>
<li><p>设置侧栏位置：<br><code>主题配置</code> 修改 <code>sidebar.position</code> 的值，支持 <code>left</code> &amp; <code>right</code><br>但目前只有<code>Pisces Scheme</code>支持该设置</p>
</li>
<li><p>设置侧栏显示的时机<br><code>主题配置</code> 修改 <code>sidebar.display</code>，目前支持的有：</p>
<ul>
<li><code>post</code> 默认行文，文展页面自动展开 <code>首页</code>等不自动展开</li>
<li><code>always</code> 所有页面都自动展开</li>
<li><code>hide</code> 所有页面都隐藏，可以手动展开</li>
<li><code>remove</code> 完全移除</li>
</ul>
</li>
<li><p>设置头像<br><code>主题配置</code> 修改 <code>avatar</code>字段。<br>支持互联网URI 如 <code>https://www.img.com/img.jpg</code><br>或站内地址 <code>/images/avatar.jpg</code></p>
</li>
</ol>
<h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ol>
<li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>， 定位到站点的代码获取页面</li>
<li>复制 hm.js? 后面那串统计脚本 id，如:<br><code>hm.src = &quot;https://hm.baidu.com/hm.js?dksjklsajdlkasjkl&quot;;</code><br>则id = <code>dksjklsajdlkasjkl</code></li>
<li>修改<code>主题配置</code> <code>baidu_analytics</code> 字段，改为上述id</li>
<li>骚等一段时间后可以自行登录<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>查看<code>PV</code>,<code>UV</code>等数据。</li>
</ol>
<h4 id="文章阅读量统计"><a href="#文章阅读量统计" class="headerlink" title="文章阅读量统计"></a>文章阅读量统计</h4><p><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="external">为Next主题添加文章阅读量</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-辅助函数]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>主要用于模板中辅助的函数，如 <code>date(Date, &#39;YYYY-DD-MM&#39;)</code></p>
<p>详见<a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/helpers.html</a></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-变量]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>变量主要用于 <code>layout</code> 等的应用</p>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">site</td>
<td style="text-align:left">网站变量</td>
</tr>
<tr>
<td style="text-align:left">page</td>
<td style="text-align:left">针对该页面的内容以及 front-matter 所设定的变量。</td>
</tr>
<tr>
<td style="text-align:left">config</td>
<td style="text-align:left">网站配置</td>
</tr>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left">主题配置。继承自网站配置。</td>
</tr>
<tr>
<td style="text-align:left">_ (单下划线)</td>
<td style="text-align:left">Lodash 函数库</td>
</tr>
<tr>
<td style="text-align:left">path</td>
<td style="text-align:left">当前页面的路径（不含根路径）</td>
</tr>
<tr>
<td style="text-align:left">url</td>
<td style="text-align:left">当前页面的完整网址</td>
</tr>
<tr>
<td style="text-align:left">env</td>
<td style="text-align:left">环境变量</td>
</tr>
</tbody>
</table>
<h4 id="网站变量"><a href="#网站变量" class="headerlink" title="网站变量"></a>网站变量</h4><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">site.posts</td>
<td style="text-align:left">所有文章</td>
</tr>
<tr>
<td style="text-align:left">site.pages</td>
<td style="text-align:left">所有分页</td>
</tr>
<tr>
<td style="text-align:left">site.categories</td>
<td style="text-align:left">所有分类</td>
</tr>
<tr>
<td style="text-align:left">site.tags</td>
<td style="text-align:left">所有标签</td>
</tr>
</tbody>
</table>
<h4 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h4><h6 id="页面page"><a href="#页面page" class="headerlink" title="页面page"></a>页面page</h6><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.title</td>
<td style="text-align:left">页面标题</td>
</tr>
<tr>
<td style="text-align:left">page.date</td>
<td style="text-align:left">页面建立日期（Moment.js 对象）</td>
</tr>
<tr>
<td style="text-align:left">page.updated</td>
<td style="text-align:left">页面更新日期（Moment.js 对象）</td>
</tr>
<tr>
<td style="text-align:left">page.comments</td>
<td style="text-align:left">留言是否开启</td>
</tr>
<tr>
<td style="text-align:left">page.layout</td>
<td style="text-align:left">布局名称</td>
</tr>
<tr>
<td style="text-align:left">page.content</td>
<td style="text-align:left">页面的完整内容</td>
</tr>
<tr>
<td style="text-align:left">page.excerpt</td>
<td style="text-align:left">页面摘要</td>
</tr>
<tr>
<td style="text-align:left">page.more</td>
<td style="text-align:left">除了页面摘要的其余内容</td>
</tr>
<tr>
<td style="text-align:left">page.source</td>
<td style="text-align:left">页面原始路径</td>
</tr>
<tr>
<td style="text-align:left">page.full_source</td>
<td style="text-align:left">页面的完整原始路径</td>
</tr>
<tr>
<td style="text-align:left">page.path</td>
<td style="text-align:left">页面网址（不含根路径）。我们通常在主题 中使用 url_for(page.path)。</td>
</tr>
<tr>
<td style="text-align:left">page.permalink</td>
<td style="text-align:left">页面的完整网址</td>
</tr>
<tr>
<td style="text-align:left">page.prev</td>
<td style="text-align:left">上一个页面。如果此为第一个页面则为 null。</td>
</tr>
<tr>
<td style="text-align:left">page.next</td>
<td style="text-align:left">下一个页面。如果此为最后一个页面则为  null。</td>
</tr>
<tr>
<td style="text-align:left">page.raw</td>
<td style="text-align:left">文章的原始内容</td>
</tr>
<tr>
<td style="text-align:left">page.photos</td>
<td style="text-align:left">文章的照片（用于相簿）</td>
</tr>
<tr>
<td style="text-align:left">page.link</td>
<td style="text-align:left">文章的外部链接（用于链接文章）</td>
</tr>
</tbody>
</table>
<h6 id="文章post"><a href="#文章post" class="headerlink" title="文章post"></a>文章post</h6><p>与<code>page</code>类似 但是添加了下列变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.published</td>
<td style="text-align:left">如果该文章已发布则为True</td>
</tr>
<tr>
<td style="text-align:left">page.categories</td>
<td style="text-align:left">该文章的所有分类</td>
</tr>
<tr>
<td style="text-align:left">page.tags</td>
<td style="text-align:left">该文章的所有标签</td>
</tr>
</tbody>
</table>
<h6 id="首页-index"><a href="#首页-index" class="headerlink" title="首页 index"></a>首页 index</h6><table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.per_page</td>
<td style="text-align:left">每页显示的文章数量</td>
</tr>
<tr>
<td style="text-align:left">page.total</td>
<td style="text-align:left">总文章数</td>
</tr>
<tr>
<td style="text-align:left">page.current</td>
<td style="text-align:left">目前页数</td>
</tr>
<tr>
<td style="text-align:left">page.current_url</td>
<td style="text-align:left">目前分页的网址</td>
</tr>
<tr>
<td style="text-align:left">page.posts</td>
<td style="text-align:left">本页文章</td>
</tr>
<tr>
<td style="text-align:left">page.prev</td>
<td style="text-align:left">上一页的页数。如果此页是第一页的话则为 0。</td>
</tr>
<tr>
<td style="text-align:left">page.prev_link</td>
<td style="text-align:left">上一页的网址。如果此页是第一页的话则为 ‘’。</td>
</tr>
<tr>
<td style="text-align:left">page.next</td>
<td style="text-align:left">下一页的页数。如果此页是最后一页的话则为 0。</td>
</tr>
<tr>
<td style="text-align:left">page.next_link</td>
<td style="text-align:left">下一页的网址。如果此页是最后一页的话则为 ‘’。</td>
</tr>
<tr>
<td style="text-align:left">page.path</td>
<td style="text-align:left">当前页面的路径（不含根目录）。我们通常在主题中使用 url_for(page.path)。</td>
</tr>
</tbody>
</table>
<h6 id="归档-archive"><a href="#归档-archive" class="headerlink" title="归档 (archive)"></a>归档 (archive)</h6><p>与 <code>index</code> 布局相同， 但新增了以下变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.archive</td>
<td style="text-align:left">等于 true</td>
</tr>
<tr>
<td style="text-align:left">page.year</td>
<td style="text-align:left">年份归档 (4位)</td>
</tr>
<tr>
<td style="text-align:left">page.month</td>
<td style="text-align:left">月份归档 (没有前导零的2位数)</td>
</tr>
</tbody>
</table>
<h6 id="分类-category"><a href="#分类-category" class="headerlink" title="分类 (category)"></a>分类 (category)</h6><p>与 <code>index</code> 布局相同， 但新增了以下变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.category</td>
<td style="text-align:left">分类名称</td>
</tr>
</tbody>
</table>
<h6 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签(tag)"></a>标签(tag)</h6><p>与 <code>index</code> 布局相同， 但新增了以下变量</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">page.tag</td>
<td style="text-align:left">标签名称</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-模板]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 index 模板，以下是各页面相对应的模板名称：</p>
<table>
<thead>
<tr>
<th>模板</th>
<th style="text-align:center">用途</th>
<th>回调</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td style="text-align:center">首页</td>
<td></td>
</tr>
<tr>
<td>post</td>
<td style="text-align:center">文章</td>
<td>index</td>
</tr>
<tr>
<td>page</td>
<td style="text-align:center">分页</td>
<td>index</td>
</tr>
<tr>
<td>archive</td>
<td style="text-align:center">归档</td>
<td>index</td>
</tr>
<tr>
<td>category</td>
<td style="text-align:center">分类归档</td>
<td>archive</td>
</tr>
<tr>
<td>tag</td>
<td style="text-align:center">标签归档</td>
<td>archive</td>
</tr>
</tbody>
</table>
<h4 id="布局-Layout"><a href="#布局-Layout" class="headerlink" title="布局 Layout"></a>布局 Layout</h4><p>布局这块可参考 <code>next</code> 主题看, Hexo 默认的引擎模板为<a href="http://www.iqianduan.net/blog/how_to_use_swig" target="_blank" rel="external">swig</a></p>
<p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 <code>body</code> 变量的内容，如此一来模板的内容才会被显示，举例来说：</p>
<figure class="highlight plain"><figcaption><span>index.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index</div></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>layout.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>生成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>index<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>每个模板都默认使用 <code>layout</code> 布局，您可在 front-matter 指定其他布局，或是设为 <code>false</code> 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。</p>
<h4 id="局部模板-Partial"><a href="#局部模板-Partial" class="headerlink" title="局部模板 Partial"></a>局部模板 Partial</h4><p>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。</p>
<p>官网说的都是<code>ejs</code>语法， 目前next采用的是<code>swig</code> 语法。</p>
<p>TODO 后面再补上 <code>Next</code>主题学习 &amp;&amp; <code>swig</code> </p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-主题概述]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E4%B8%BB%E9%A2%98%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>了解一款主题的文件结构可以让你在有自定义需求的时候，快速定位到目标文件，也为后面的定制化主题做铺垫。</p>
<p>创建 Hexo 主题非常容易，您只要在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题。一个主题可能会有以下的结构：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span></div><div class="line"><span class="string">├──</span> <span class="string">_config.yml</span></div><div class="line"><span class="string">├──</span> <span class="string">languages</span></div><div class="line"><span class="string">├──</span> <span class="string">layout</span></div><div class="line"><span class="string">├──</span> <span class="string">scripts</span></div><div class="line"><span class="string">└──</span> <span class="string">source</span></div></pre></td></tr></table></figure>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>主题的配置文件。修改时会自动更新，无需重启服务器。</p>
<h4 id="languages"><a href="#languages" class="headerlink" title="languages"></a>languages</h4><p>语言文件夹。请参见 <a href="https://hexo.io/zh-cn/docs/internationalization.html" target="_blank" rel="external">国际化 (i18n)</a>。</p>
<h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <code>Swig</code> 模板引擎，您可以另外安装插件来获得 <code>EJS</code>、<code>Haml</code> 或 <code>Jade</code> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">layout.ejs   - 使用 EJS</div><div class="line">layout.swig  - 使用 Swig</div></pre></td></tr></table></figure></p>
<p>详细见 <a href="https://hexo.io/zh-cn/docs/templates.html" target="_blank" rel="external">模板</a></p>
<h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><p>脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，详细见 <a href="https://hexo.io/zh-cn/docs/plugins.html" target="_blank" rel="external">插件</a> 。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。</p>
<p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹</p>
<h4 id="发布（略）"><a href="#发布（略）" class="headerlink" title="发布（略）"></a>发布（略）</h4>]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-永久链接]]></title>
      <url>https://jsonz1993.github.io/2017/04/hexo-%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>你可以在<code>_config.yml &gt; permalink</code>配置网站的永久链接或者每篇文章的Front-matter自定义该文章的永久链接, 如: <code>:year/:month/:title/</code> 对应 <code>2017/04/hexo-永久链接/</code></p>
<h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><p>除了下列变量外，您还可使用 Front-matter 中的所有属性。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:year</td>
<td style="text-align:center">文章的发表年份（4 位数）</td>
</tr>
<tr>
<td>:month</td>
<td style="text-align:center">文章的发表月份（2 位数）</td>
</tr>
<tr>
<td>:i_month</td>
<td style="text-align:center">文章的发表月份（去掉开头的零）</td>
</tr>
<tr>
<td>:day</td>
<td style="text-align:center">文章的发表日期 (2 位数)</td>
</tr>
<tr>
<td>:i_day</td>
<td style="text-align:center">文章的发表日期（去掉开头的零）</td>
</tr>
<tr>
<td>:title</td>
<td style="text-align:center">文件名称</td>
</tr>
<tr>
<td>:id</td>
<td style="text-align:center">文章 ID</td>
</tr>
<tr>
<td>:category</td>
<td style="text-align:center">分类。如果文章没有分类，则是 default_category 配置信息。</td>
</tr>
</tbody>
</table>
<p>也可以在 <code>permalink_defaults</code> 参数下调整永久链接中各变量的默认值：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"><span class="attr">  lang:</span> <span class="string">en</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-生成文件与部署]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>生成文件一般是用于生成静态资源文件部署服务器用的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line"></div><div class="line">快捷方式为:</div><div class="line"></div><div class="line">$hexo g</div></pre></td></tr></table></figure>
<p>也可以让Hexo在监视到文件变动后立即重新生成静态文件，<br>在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --watch</div></pre></td></tr></table></figure></p>
<p>一般会跑以下命令，方便在Hexo生成文件后直接部署到Github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --deploy</div><div class="line">$ hexo deploy --generate</div><div class="line">(上面两条命令效果一样)</div><div class="line"></div><div class="line">或者简写</div><div class="line"></div><div class="line">$ hexo g -d</div><div class="line">$ hexo d -g</div><div class="line">(上面两条命令效果一样)</div></pre></td></tr></table></figure></p>
<h2 id="部署服务器"><a href="#部署服务器" class="headerlink" title="部署服务器"></a>部署服务器</h2><p>在部署之前先要在 <code>_config.yml</code> 将部署信息补充完整，此处以 Github 为例:</p>
<figure class="highlight yml"><figcaption><span>_config.yml配置</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span> <span class="comment"># type</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/jsonz1993/jsonz1993.github.io.git</span> <span class="comment"># 仓库地址</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span> <span class="comment"># 分支 可不填自动识别</span></div><div class="line"><span class="attr">  message:</span> <span class="string">"feat(hexo)-生成文件与部署"</span> <span class="comment"># 提交的信息</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>参数说明</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repo	库（Repository）地址</div><div class="line">branch	分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</div><div class="line">message	自定义提交信息 (默认为 Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;)</div></pre></td></tr></table></figure>
<p>确保本地安装了 <code>hexo-deployer-git</code>， 可通过以下方法安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>你也可以通过 <code>generate</code> 生成静态资源，再手动copy或上传到服务器.</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-本地服务器]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>一般安装hexo时会自动安装服务器，如果本地没有安装hexo服务器可通过以下命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-server --save</div></pre></td></tr></table></figure></p>
<p>安装完成后，启动服务器，会启动一个（默认4000端口）本地服务器，可通过 <code>http://localhost:4000</code> 访问，Hexo会监视文件变动自动更新，如果是改动配置，需要手动重启服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><figcaption><span>缩写</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server -p 5000</div></pre></td></tr></table></figure></p>
<h4 id="自定义IP"><a href="#自定义IP" class="headerlink" title="自定义IP"></a>自定义IP</h4><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server -i 192.168.1.1</div></pre></td></tr></table></figure></p>
<p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-资源文件夹与数据文件夹]]></title>
      <url>https://jsonz1993.github.io/2017/04/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      <content type="html"><![CDATA[<h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>
<h6 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h6><p>可以通过设置 <code>_config.yml</code> 来使生成的每个文章都有对应的静态资源文件夹。</p>
<figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 <code>source/_data</code> 内的 <code>YAML</code> 或 <code>JSON</code> 文件，如此一来您便能在网站中复用这些文件了。</p>
<p>举例来说，在 <code>source/_data</code> 文件夹中新建 <code>menu.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Home: /</div><div class="line">Gallery: /gallery/</div><div class="line">Archives: /archives/</div></pre></td></tr></table></figure>
<p>您就能在模板中使用这些资料：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% for link in site.data.menu %&#125;</div><div class="line">  &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot;&gt;&#123;&#123; loop.key &#125;&#125;&lt;/a&gt;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tag plugins]]></title>
      <url>https://jsonz1993.github.io/2017/04/tag-plugins/</url>
      <content type="html"><![CDATA[<p>tag plugins 用于在文章中快速插入特定内容的插件,下面列出常用几种 具体参见<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/tag-plugins.html</a></p>
<h4 id="引用快"><a href="#引用快" class="headerlink" title="引用快"></a>引用快</h4><p>在文章中插入引言，可包含作者、来源和标题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote @Jsonz http://weibo.com/u/1638841204 %&#125;</div><div class="line">引用内容</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>
<blockquote><p>引用内容</p>
<footer><strong>@Jsonz</strong><cite><a href="http://weibo.com/u/1638841204" target="_blank" rel="external">weibo.com/u/1638841204</a></cite></footer></blockquote>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>样式可以在 <code>themes&gt;next&gt;source&gt;css</code>修改<br>[language] [title] [url] [link text] code snippet</p>
<figure class="highlight javascript"><figcaption><span>这是标题</span><a href="https://github.com/jsonz1993" target="_blank" rel="external">,Jsonz's Github</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">  [...<span class="string">"123"</span>].forEach(<span class="function"><span class="params">item</span>=&gt;</span> ++item);</div><div class="line">  <span class="keyword">return</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe url [width] [height] %&#125;</div></pre></td></tr></table></figure>
<iframe src="https://hexo.io/zh-cn/docs/tag-plugins.html" width="100%" height="200px" frameborder="0" allowfullscreen></iframe>
<h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><p>插入指定大小图片<br><img src="https://imgsa.baidu.com/baike/c0%3Dbaike60%2C5%2C5%2C60%2C20/sign=e1f5e7b9dcc451dae2fb04b9d7943903/7acb0a46f21fbe099143bcf36a600c338744ad3c.jpg" class="img-class" width="200" title="新垣结衣"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hello Hexo]]></title>
      <url>https://jsonz1993.github.io/2017/04/hello-hexo/</url>
      <content type="html"><![CDATA[<p>折腾了一晚上终于把搭好自己喜欢的主题的Hexo博客。<br>接下来一步一步配置 Hexo <code>__config.yml</code> 文件<br><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo 官网配置项 </a></p>
<p>一步一步跟着改配置，比较麻烦的是每次修改配置都要<code>hexo s</code> 重启一下服务器看效果<br>如果修改配置后重启服务看不到效果，可以先运行<code>hexo clean</code>清除缓存再重启服务</p>
<h6 id="Site-网站"><a href="#Site-网站" class="headerlink" title="Site 网站"></a>Site 网站</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">jsonz1993</span> <span class="comment"># 网站标题，也会显示在该主题导航左上角</span></div><div class="line"><span class="attr">subtitle:</span> <span class="comment"># 网站副标题 会生成在导航栏主标题旁边（这里隐藏了）</span></div><div class="line"><span class="attr">description:</span> <span class="string">前端开发</span> <span class="string">Jsonz</span> <span class="string">张欣欣</span> <span class="comment"># 网站描述，会出现在head，侧边菜单上 主要用做SEO</span></div><div class="line"><span class="attr">author:</span> <span class="string">Jsonz</span> <span class="comment"># 博客作者 Your Name</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment"># 语言，支持的语言可以在themes&gt;your-thems&gt;languages 找到</span></div><div class="line"><span class="attr">timezone:</span> <span class="comment"># 默认使用电脑的时区，一般不填</span></div></pre></td></tr></table></figure>
<h6 id="URL-网址"><a href="#URL-网址" class="headerlink" title="URL 网址"></a>URL 网址</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">url:</span> <span class="attr">https://jsonz1993.github.io/</span></div><div class="line"><span class="attr">root:</span> <span class="string">/</span></div><div class="line"><span class="comment"># 文章永久链接的格式 [https://hexo.io/zh-cn/docs/permalinks.html]</span></div><div class="line"><span class="comment"># 可以使用的变量有[:year, :month, :day, :title, :id, :category, Front-matter所有属性]</span></div><div class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span> </div><div class="line"><span class="attr">permalink_defaults:</span> <span class="comment"># 可以给变量指定默认值</span></div></pre></td></tr></table></figure>
<h6 id="Directory-目录"><a href="#Directory-目录" class="headerlink" title="Directory 目录"></a>Directory 目录</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义文件目录, 这部分一般用默认的就可以</span></div><div class="line"><span class="attr">source_dir:</span> <span class="string">source</span></div><div class="line"><span class="attr">public_dir:</span> <span class="string">public</span></div><div class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></div><div class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></div><div class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></div><div class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></div><div class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></div><div class="line"><span class="attr">skip_render:</span></div></pre></td></tr></table></figure>
<h6 id="Writing-文章相关配置"><a href="#Writing-文章相关配置" class="headerlink" title="Writing 文章相关配置"></a>Writing 文章相关配置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新文章的名称 我喜欢配合年月按文件夹分类，这样后面方便管理</span></div><div class="line"><span class="comment"># 此时生成的文件位于: source/_posts/:year/:month/:title.md</span></div><div class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span> </div><div class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#命令行 hexo new &lt;layout&gt; name 中 layout默认值</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># 标题转换为首字母大写</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># 是否在新标签打开连接</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span> <span class="comment"># 文件名大小写转换 (0)不转换（1)小写 (2)大写</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment"># 显示草稿</span></div><div class="line"><span class="comment"># 启动资源文件夹 看个人可用可不用</span></div><div class="line"><span class="comment"># 主要每次创建文件都会生成一个同名文件夹用于存放图片等资源</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment"># 把链接改为与根目录的相对位址</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment"># 显示下一条文章</span></div><div class="line"><span class="attr">highlight:</span> <span class="comment"># 代码块设置 既现在看到的这块</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  tab_replace:</span></div></pre></td></tr></table></figure>
<h6 id="Category-amp-Tag-分类-amp-标签"><a href="#Category-amp-Tag-分类-amp-标签" class="headerlink" title="Category &amp; Tag 分类&amp;标签"></a>Category &amp; Tag 分类&amp;标签</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># 默认的分类</span></div><div class="line"><span class="attr">category_map:</span> <span class="comment"># 分类映射（别名）</span></div><div class="line"><span class="attr">tag_map:</span> <span class="comment"># 标签映射（别名）</span></div></pre></td></tr></table></figure>
<h6 id="Date-Time-format-日期-amp-时间格式"><a href="#Date-Time-format-日期-amp-时间格式" class="headerlink" title="Date / Time format 日期&amp;时间格式"></a>Date / Time format 日期&amp;时间格式</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></div><div class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></div></pre></td></tr></table></figure>
<h6 id="Pagination-分页设置"><a href="#Pagination-分页设置" class="headerlink" title="Pagination 分页设置"></a>Pagination 分页设置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文章数量有限，未实践过该功能</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment"># 每页文章数量 0 为关闭分页</span></div><div class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment"># 分页的目录</span></div></pre></td></tr></table></figure>
<h6 id="Extensions-其他拓展设置"><a href="#Extensions-其他拓展设置" class="headerlink" title="Extensions 其他拓展设置"></a>Extensions 其他拓展设置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 此处有插件与主题设置</span></div><div class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment">#设置的主题应存放在 根目录/themes下</span></div></pre></td></tr></table></figure>
<h6 id="将草稿转为文章"><a href="#将草稿转为文章" class="headerlink" title="将草稿转为文章"></a>将草稿转为文章</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] <span class="symbol">&lt;filename&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> technology </category>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
